{
.appVersion = "113";
DisplayStrings = (
"2",
"7",
"9",
"6",
"."
);
copyright = "Copyright (c) 2014, Eduardo Rodriguez Tunni. Copyright (c) 2000, Modular Infotech, Pune, INDIA. All rights reserved. Copyright (c) 2011 by Brian J. Bonislawsky DBA Astigmatic (AOETI) (astigma@astigmatic.com). All rights reserved.";
date = "2014-09-11 13:28:21 +0000";
designer = "Eduardo Rodriguez Tunni, Modular Infotech, Brian J. Bonislawsky";
designerURL = "http://www.tipo.net.ar";
familyName = Amita;
featurePrefixes = (
{
automatic = 1;
code = "languagesystem DFLT dflt;\012languagesystem latn dflt;\012languagesystem dev2 dflt;\012languagesystem latn CAT;\012languagesystem latn ROM;\012languagesystem latn MOL;\012languagesystem dev2 NEP;\012languagesystem deva NEP;\012languagesystem dev2 MAR;\012languagesystem deva MAR;\012";
name = Languagesystems;
}
);
features = (
{
automatic = 1;
code = "feature locl;\012feature frac;\012feature ordn;\012";
name = aalt;
},
{
automatic = 1;
code = "script latn;\012language CAT;\012sub  l' periodcentered' l by ldot;\012sub  L' periodcentered' L by Ldot;\012language ROM;\012sub Scedilla by Scommaaccent;\012sub scedilla by scommaaccent;\012language MOL;\012sub Scedilla by Scommaaccent;\012sub scedilla by scommaaccent;\012\012script dev2;\012language NEP;\012sub jha-deva by jha-deva.loclNEP;\012sub jh-deva by jh-deva.loclNEP;\012sub zha-deva by zha-deva.loclNEP;\012sub five-deva by five-deva.loclNEP;\012sub eight-deva by eight-deva.loclNEP;\012language MAR;\012sub la-deva by la-deva.loclMAR;\012sub l-deva by l-deva.loclMAR;\012sub sha-deva by sha-deva.loclMAR;\012sub sh-deva by sh-deva.loclMAR;\012";
name = locl;
},
{
automatic = 1;
code = "sub one slash four by onequarter;\012sub one slash two by onehalf;\012sub three slash four by threequarters;\012";
name = frac;
},
{
automatic = 1;
code = "sub [zero one two three four five six seven eight nine] [A a]' by ordfeminine;\012sub [zero one two three four five six seven eight nine] [O o]' by ordmasculine;\012";
name = ordn;
},
{
automatic = 1;
code = "sub f f i by f_f_i;\012sub f f l by f_f_l;\012sub f f by f_f;\012sub f i by fi;\012sub f l by fl;\012";
name = liga;
}
);
fontMaster = (
{
ascender = 1292;
capHeight = 720;
customParameters = (
{
name = "Prep Table Assembly";
value = "SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\012200 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 1 \012INSTCTRL[ ]	/* SetInstrExecControl */\012EIF[ ]	/* EndIf */\012PUSHW[ ]	/* 3 values pushed */\0121 2048 2048 \012MUL[ ]	/* Multiply */\012WCVTF[ ]	/* WriteCVTInFUnits */\012PUSHB[ ]	/* 2 values pushed */\0120 6 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 5 values pushed */\0120 53 32 3 0 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 6 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 8 values pushed */\01259 1 40 8 19 9 3 8 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 6 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 8 values pushed */\01260 0 50 6 30 5 3 8 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 9 \012WS[ ]	/* WriteStore */\012PUSHW[ ]	/* 3 values pushed */\0123840 2624 1280 \012PUSHB[ ]	/* 2 values pushed */\0123 9 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 12 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 5 values pushed */\0120 64 192 3 9 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01236 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GETINFO[ ]	/* GetInfo */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0123 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01238 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 3 values pushed */\0122176 1 1088 \012GETINFO[ ]	/* GetInfo */\012MUL[ ]	/* Multiply */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01260 0 42 8 23 7 3 12 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHW[ ]	/* 1 value pushed */\012511 \012SCANCTRL[ ]	/* ScanConversionControl */\012PUSHB[ ]	/* 1 value pushed */\0124 \012SCANTYPE[ ]	/* ScanType */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\0125 100 \012WCVTP[ ]	/* WriteCVTInPixels */";
},
{
name = "Fpgm Table Assembly";
value = "PUSHB[ ]	/* 1 value pushed */\0120 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012RCVT[ ]	/* ReadCVT */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LTEQ[ ]	/* LessThenOrEqual */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0126 \012GTEQ[ ]	/* GreaterThanOrEqual */\012AND[ ]	/* LogicalAnd */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01252 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01240 \012EIF[ ]	/* EndIf */\012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012AND[ ]	/* LogicalAnd */\012PUSHB[ ]	/* 3 values pushed */\01240 1 10 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012GT[ ]	/* GreaterThan */\012OR[ ]	/* LogicalOr */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012ROLL[ ]	/* RollTopThreeStack */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01280 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 10 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01240 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 10 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0125 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0124 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 2 values pushed */\0125 98 \012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\0121 10 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 2 values pushed */\0121 10 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0123 \012ADD[ ]	/* Add */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0123 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\01248 5 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012SUB[ ]	/* Subtract */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012EIF[ ]	/* EndIf */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0125 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0127 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 3 values pushed */\0120 2 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0126 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0127 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0125 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0127 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0128 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0127 11 0 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01211 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01236 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01212 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01211 10 3 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01213 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 2 \012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\012100 \012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01214 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01213 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01213 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01215 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012MUL[ ]	/* Multiply */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01216 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01213 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01217 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01219 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01218 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 15 \012RS[ ]	/* ReadStore */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01215 15 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01215 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01212 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01213 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01213 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\0120 0 \012SZP0[ ]	/* SetZonePointer0 */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MIAP[0]	/* MoveIndirectAbsPt */\012PUSHB[ ]	/* 3 values pushed */\0121 1 1 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01219 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01215 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01211 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 6 values pushed */\01216 16 1 0 14 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\01218 6 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012117 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01220 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 19 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01221 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 19 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01222 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 19 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01223 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 19 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01224 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 19 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01225 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 19 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01226 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 19 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01227 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 19 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01228 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 19 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01229 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 19 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01241 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP1[ ]	/* DeltaExceptionP1 */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01242 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP2[ ]	/* DeltaExceptionP2 */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01243 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP3[ ]	/* DeltaExceptionP3 */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01230 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01213 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01215 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01211 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 6 values pushed */\01216 16 1 0 14 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\01218 6 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012117 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01231 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 30 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 30 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01233 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 30 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01234 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 30 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01235 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 30 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01236 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 30 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01237 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 30 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01238 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 30 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01239 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 30 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01240 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 30 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01244 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01245 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01216 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01244 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01246 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01245 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01245 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01248 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01247 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01249 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01213 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01247 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01250 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012SHC[1]	/* ShiftContourByLastPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01251 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 5 values pushed */\0120 0 0 0 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012MIAP[0]	/* MoveIndirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01250 1 \012SZP2[ ]	/* SetZonePointer2 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01252 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01253 \012FDEF[ ]	/* FunctionDefinition */\012MDAP[0]	/* MoveDirectAbsPt */\012SLOOP[ ]	/* SetLoopVariable */\012ALIGNRP[ ]	/* AlignRelativePt */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01254 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01255 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012SZPS[ ]	/* SetZonePointerS */\012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01254 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01256 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0129 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012NEG[ ]	/* Negate */\012ROLL[ ]	/* RollTopThreeStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0129 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0122 32 3 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0122 38 3 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0123 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012RS[ ]	/* ReadStore */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01260 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01261 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01262 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01246 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01263 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01246 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01264 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01246 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01265 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01256 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01246 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01266 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012CALL[ ]	/* CallFunction */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0124 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01246 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01246 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01267 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0129 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01246 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01268 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 4 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0129 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0122 32 3 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0122 38 3 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0123 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\01246 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01269 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01256 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01246 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01270 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012CALL[ ]	/* CallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0124 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01246 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01246 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01271 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01252 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01272 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01252 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01273 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 1 \012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012PUSHB[ ]	/* 1 value pushed */\01253 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01274 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01255 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01275 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012RCVT[ ]	/* ReadCVT */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01246 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01276 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01275 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01277 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01278 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01279 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01280 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01281 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01282 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01283 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01284 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01285 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 65 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01286 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 65 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01287 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 65 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01288 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 65 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01289 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01290 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01291 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01292 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01293 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01294 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01295 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01296 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01297 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 66 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01298 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 66 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01299 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 66 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012100 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 66 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012101 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01246 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012102 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01262 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012103 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01263 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012104 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01258 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012105 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01246 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012106 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01262 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012107 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01263 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012108 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012109 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01260 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01246 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012110 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01260 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01262 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012111 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01260 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01263 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012112 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01260 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012113 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01261 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01246 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012114 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01261 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01262 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012115 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01261 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01263 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012116 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01261 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012117 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0129 4 2 3 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0128 \012NEG[ ]	/* Negate */\012PUSHB[ ]	/* 1 value pushed */\0123 \012DEPTH[ ]	/* GetDepthStack */\012LT[ ]	/* LessThan */\012JROT[ ]	/* JumpRelativeOnTrue */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = (
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
58,
58,
72,
165,
46,
46,
62,
40,
1003,
689,
689,
-1,
-293,
918,
-297,
1004,
732,
689,
-1,
-293,
918,
-297,
57,
57,
90,
60,
60,
726,
-12,
924,
512,
-9,
-310,
918,
-297,
726,
-12,
932,
521,
-12,
-310,
918,
-297,
24,
24
);
}
);
descender = -650;
id = "F9783665-9C0C-4F5A-9005-646D18F9330F";
weightValue = 400;
widthValue = 5;
xHeight = 495;
}
);
glyphs = (
{
glyphname = A;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"524 712 LINE",
"436.667 708 OFFCURVE",
"355.667 683 OFFCURVE",
"281 637 CURVE SMOOTH",
"131.667 545 OFFCURVE",
"37 389.667 OFFCURVE",
"37 223 CURVE SMOOTH",
"37 77.667 OFFCURVE",
"115.333 -11 OFFCURVE",
"234 -11 CURVE SMOOTH",
"348.667 -11 OFFCURVE",
"430 95.667 OFFCURVE",
"478 309 CURVE",
"483 309 LINE",
"483 118 LINE SMOOTH",
"483 39.333 OFFCURVE",
"524.667 -5 OFFCURVE",
"586 -5 CURVE SMOOTH",
"635.333 -5 OFFCURVE",
"676.333 26.667 OFFCURVE",
"695 68 CURVE",
"681 81 LINE",
"669 61 OFFCURVE",
"643.333 45 OFFCURVE",
"622 45 CURVE SMOOTH",
"594 45 OFFCURVE",
"577 69.667 OFFCURVE",
"577 107 CURVE SMOOTH",
"577 631 LINE",
"483 594 LINE",
"483 503.333 OFFCURVE",
"472.5 416.167 OFFCURVE",
"451.5 332.5 CURVE SMOOTH",
"409.5 165.167 OFFCURVE",
"335.667 52 OFFCURVE",
"261 52 CURVE SMOOTH",
"185 52 OFFCURVE",
"134 127.667 OFFCURVE",
"134 249 CURVE SMOOTH",
"134 321.667 OFFCURVE",
"150.833 389.167 OFFCURVE",
"184.5 451.5 CURVE SMOOTH",
"251.833 576.167 OFFCURVE",
"376 663 OFFCURVE",
"524 683 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */\01227 20 19 12 11 0 6 0 4 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 18 values pushed */\0120 4 4 42 75 1 1 0 0 2 91 3 1 2 2 46 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01234 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 18 values pushed */\0120 4 0 4 114 1 1 0 0 2 91 3 1 2 2 46 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01240 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 28 values pushed */\0120 4 0 4 114 0 0 0 2 91 3 1 2 2 46 75 0 1 1 2 91 3 1 2 2 46 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 26 values pushed */\0120 4 0 4 114 0 1 1 2 91 0 2 2 46 75 0 0 0 3 91 0 3 3 43 3 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01221 37 37 39 38 5 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 689;
}
);
leftKerningGroup = A;
note = A;
rightKerningGroup = A;
unicode = 0041;
},
{
glyphname = Aacute;
layers = (
{
components = (
{
alignment = -1;
name = A;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 307, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 689;
}
);
leftKerningGroup = A;
note = Aacute;
rightKerningGroup = A;
unicode = 00C1;
},
{
glyphname = Abreve;
layers = (
{
components = (
{
alignment = -1;
name = A;
},
{
alignment = -1;
name = breve;
transform = "{1, 0, 0, 1, 290, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 689;
}
);
leftKerningGroup = A;
note = Abreve;
rightKerningGroup = A;
unicode = 0102;
},
{
glyphname = Acircumflex;
layers = (
{
components = (
{
alignment = -1;
name = A;
},
{
alignment = -1;
name = circumflex;
transform = "{1, 0, 0, 1, 256, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 689;
}
);
leftKerningGroup = A;
note = Acircumflex;
rightKerningGroup = A;
unicode = 00C2;
},
{
glyphname = Adieresis;
layers = (
{
components = (
{
alignment = -1;
name = A;
},
{
alignment = -1;
name = dieresis;
transform = "{1, 0, 0, 1, 248, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 689;
}
);
leftKerningGroup = A;
note = Adieresis;
rightKerningGroup = A;
unicode = 00C4;
},
{
glyphname = Agrave;
layers = (
{
components = (
{
alignment = -1;
name = A;
},
{
alignment = -1;
name = grave;
transform = "{1, 0, 0, 1, 306, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 689;
}
);
leftKerningGroup = A;
note = Agrave;
rightKerningGroup = A;
unicode = 00C0;
},
{
glyphname = Amacron;
layers = (
{
components = (
{
alignment = -1;
name = A;
},
{
alignment = -1;
name = macron;
transform = "{1, 0, 0, 1, 273, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 689;
}
);
leftKerningGroup = A;
note = Amacron;
rightKerningGroup = A;
unicode = 0100;
},
{
glyphname = Aogonek;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"583.333 -139 OFFCURVE",
"568 -120.333 OFFCURVE",
"568 -91 CURVE SMOOTH",
"568 -61.667 OFFCURVE",
"584.333 -28.667 OFFCURVE",
"611 -2 CURVE",
"648.333 7.333 OFFCURVE",
"680.333 34.667 OFFCURVE",
"695 68 CURVE",
"681 81 LINE",
"669 61 OFFCURVE",
"643.333 45 OFFCURVE",
"622 45 CURVE SMOOTH",
"594 45 OFFCURVE",
"577 69.667 OFFCURVE",
"577 107 CURVE SMOOTH",
"577 631 LINE",
"483 594 LINE",
"483 503.333 OFFCURVE",
"472.5 416.167 OFFCURVE",
"451.5 332.5 CURVE SMOOTH",
"409.5 165.167 OFFCURVE",
"335.667 52 OFFCURVE",
"261 52 CURVE SMOOTH",
"185 52 OFFCURVE",
"134 127.667 OFFCURVE",
"134 249 CURVE SMOOTH",
"134 321.667 OFFCURVE",
"150.833 389.167 OFFCURVE",
"184.5 451.5 CURVE SMOOTH",
"251.833 576.167 OFFCURVE",
"376 663 OFFCURVE",
"524 683 CURVE",
"524 712 LINE",
"436.667 708 OFFCURVE",
"355.667 683 OFFCURVE",
"281 637 CURVE SMOOTH",
"131.667 545 OFFCURVE",
"37 389.667 OFFCURVE",
"37 223 CURVE SMOOTH",
"37 77.667 OFFCURVE",
"115.333 -11 OFFCURVE",
"234 -11 CURVE SMOOTH",
"348.667 -11 OFFCURVE",
"430 95.667 OFFCURVE",
"478 309 CURVE",
"483 309 LINE",
"483 118 LINE SMOOTH",
"483 43.333 OFFCURVE",
"520.333 0 OFFCURVE",
"575 -4 CURVE",
"529.667 -40.667 OFFCURVE",
"507 -80 OFFCURVE",
"507 -122 CURVE SMOOTH",
"507 -171.333 OFFCURVE",
"546 -197 OFFCURVE",
"586 -197 CURVE SMOOTH",
"623.333 -197 OFFCURVE",
"656 -169.333 OFFCURVE",
"680 -128 CURVE",
"663 -113 LINE",
"649.667 -130.333 OFFCURVE",
"633.333 -139 OFFCURVE",
"614 -139 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01234 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 20 values pushed */\01245 44 37 36 25 14 6 3 2 10 1 1 3 2 1 2 5 1 3 74 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 20 values pushed */\01245 44 37 36 25 14 6 3 2 10 1 1 4 2 1 2 5 1 3 74 \012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 25 values pushed */\0126 1 5 0 0 5 0 96 0 2 2 42 75 4 1 3 3 1 91 0 1 1 43 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01234 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 25 values pushed */\0120 2 3 2 114 6 1 5 0 0 5 0 96 4 1 3 3 1 91 0 1 1 43 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 32 values pushed */\0120 2 3 2 114 0 4 3 1 3 4 1 112 6 1 5 0 0 5 0 96 0 3 3 1 91 0 1 1 43 1 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\0120 0 0 54 0 53 39 39 21 42 36 7 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 689;
}
);
leftKerningGroup = A;
note = Aogonek;
rightKerningGroup = A;
unicode = 0104;
},
{
glyphname = Aring;
layers = (
{
components = (
{
alignment = -1;
name = A;
},
{
alignment = -1;
name = ring;
transform = "{1, 0, 0, 1, 297, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 689;
}
);
leftKerningGroup = A;
note = Aring;
rightKerningGroup = A;
unicode = 00C5;
},
{
glyphname = Atilde;
layers = (
{
components = (
{
alignment = -1;
name = A;
},
{
alignment = -1;
name = tilde;
transform = "{1, 0, 0, 1, 283, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 689;
}
);
leftKerningGroup = A;
note = Atilde;
rightKerningGroup = A;
unicode = 00C3;
},
{
glyphname = AE;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"872 200 LINE",
"859.333 178 OFFCURVE",
"840.667 156.667 OFFCURVE",
"816 136 CURVE SMOOTH",
"766.667 94.667 OFFCURVE",
"699.667 66 OFFCURVE",
"633 66 CURVE SMOOTH",
"550.333 66 OFFCURVE",
"500 123.333 OFFCURVE",
"500 202 CURVE SMOOTH",
"500 308.667 OFFCURVE",
"606 386 OFFCURVE",
"726 422 CURVE",
"717 450 LINE",
"709 445.333 OFFCURVE",
"693.667 443 OFFCURVE",
"671 443 CURVE SMOOTH",
"603.479 443 OFFCURVE",
"534 494.543 OFFCURVE",
"534 560 CURVE SMOOTH",
"534 625.255 OFFCURVE",
"600.885 671 OFFCURVE",
"668 671 CURVE SMOOTH",
"716 671 OFFCURVE",
"751.667 646 OFFCURVE",
"789 606 CURVE",
"851 656 LINE",
"814.333 696.667 OFFCURVE",
"771.667 717 OFFCURVE",
"723 717 CURVE SMOOTH",
"688.333 717 OFFCURVE",
"652 710.333 OFFCURVE",
"614 697 CURVE",
"489.333 697 OFFCURVE",
"383.667 674.333 OFFCURVE",
"297 629 CURVE SMOOTH",
"123.667 538.333 OFFCURVE",
"40 384.333 OFFCURVE",
"40 223 CURVE SMOOTH",
"40 179.667 OFFCURVE",
"47.333 140.167 OFFCURVE",
"62 104.5 CURVE SMOOTH",
"91.333 33.167 OFFCURVE",
"147.667 -11 OFFCURVE",
"221 -11 CURVE SMOOTH",
"293 -11 OFFCURVE",
"351.667 35.333 OFFCURVE",
"397 128 CURVE",
"414.333 42.667 OFFCURVE",
"489.333 -11 OFFCURVE",
"588 -11 CURVE SMOOTH",
"714.667 -11 OFFCURVE",
"831 70.667 OFFCURVE",
"895 180 CURVE"
);
},
{
closed = 1;
nodes = (
"359.333 103 OFFCURVE",
"310 52 OFFCURVE",
"248 52 CURVE SMOOTH",
"170.667 52 OFFCURVE",
"139 146.333 OFFCURVE",
"139 249 CURVE SMOOTH",
"139 312.333 OFFCURVE",
"152.833 372.833 OFFCURVE",
"180.5 430.5 CURVE SMOOTH",
"235.833 545.833 OFFCURVE",
"358 636.333 OFFCURVE",
"550 663 CURVE",
"497.333 626.333 OFFCURVE",
"471 579.333 OFFCURVE",
"471 522 CURVE SMOOTH",
"471 460.667 OFFCURVE",
"511.667 412.667 OFFCURVE",
"577 394 CURVE",
"487.667 352.667 OFFCURVE",
"413.333 286.333 OFFCURVE",
"396 205 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 76 values pushed */\01253 34 21 20 4 5 4 48 45 6 3 6 5 2 74 0 2 3 4 3 2 4 112 0 5 4 6 4 5 6 112 0 4 4 3 91 0 3 3 42 75 0 6 6 0 92 1 1 0 0 43 75 0 7 7 0 91 1 1 0 0 43 0 76 61 59 39 38 36 33 22 35 34 8 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 898;
}
);
leftKerningGroup = A;
note = AE;
rightKerningGroup = AE;
unicode = 00C6;
},
{
glyphname = AEacute;
layers = (
{
components = (
{
alignment = -1;
name = AE;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 410, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 898;
}
);
leftKerningGroup = A;
note = AEacute;
rightKerningGroup = AE;
unicode = 01FC;
},
{
glyphname = B;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"312 382 LINE",
"418.667 439.333 OFFCURVE",
"525 536 OFFCURVE",
"525 624 CURVE SMOOTH",
"525 685.333 OFFCURVE",
"475 720 OFFCURVE",
"411 720 CURVE SMOOTH",
"346.333 720 OFFCURVE",
"288.667 704.5 OFFCURVE",
"238 673.5 CURVE SMOOTH",
"136.667 611.5 OFFCURVE",
"77 496.667 OFFCURVE",
"77 354 CURVE SMOOTH",
"77 -8 LINE",
"170 26 LINE",
"170 409 LINE SMOOTH",
"170 445 OFFCURVE",
"175 482.833 OFFCURVE",
"185 522.5 CURVE SMOOTH",
"205 601.833 OFFCURVE",
"252.333 669 OFFCURVE",
"331 669 CURVE SMOOTH",
"385.667 669 OFFCURVE",
"419 635.667 OFFCURVE",
"419 585 CURVE SMOOTH",
"419 487.667 OFFCURVE",
"312 404.333 OFFCURVE",
"196 355 CURVE",
"204 328 LINE",
"248.667 344.667 OFFCURVE",
"294.333 353 OFFCURVE",
"341 353 CURVE SMOOTH",
"368.333 353 OFFCURVE",
"394.5 347.333 OFFCURVE",
"419.5 336 CURVE SMOOTH",
"469.5 313.333 OFFCURVE",
"505 270 OFFCURVE",
"505 218 CURVE SMOOTH",
"505 75.333 OFFCURVE",
"348 -11 OFFCURVE",
"176 -47 CURVE",
"182 -71 LINE",
"242.667 -69.667 OFFCURVE",
"306.333 -57.667 OFFCURVE",
"373 -35 CURVE SMOOTH",
"506.333 10.333 OFFCURVE",
"612 101 OFFCURVE",
"612 225 CURVE SMOOTH",
"612 333 OFFCURVE",
"521.333 389 OFFCURVE",
"408 389 CURVE SMOOTH",
"383.333 389 OFFCURVE",
"352 385.333 OFFCURVE",
"314 378 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */\01242 1 2 0 31 30 18 3 1 2 2 74 0 1 2 1 115 0 0 0 2 1 0 2 99 0 3 3 4 91 0 4 4 42 3 76 41 39 39 21 32 5 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 646;
}
);
leftKerningGroup = B;
note = B;
rightKerningGroup = B;
unicode = 0042;
},
{
glyphname = C;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"371 730 OFFCURVE",
"304 710.667 OFFCURVE",
"242 672 CURVE SMOOTH",
"118 594.667 OFFCURVE",
"40 454 OFFCURVE",
"40 290 CURVE SMOOTH",
"40 234 OFFCURVE",
"50.5 183.167 OFFCURVE",
"71.5 137.5 CURVE SMOOTH",
"113.5 46.167 OFFCURVE",
"194 -11 OFFCURVE",
"302 -11 CURVE SMOOTH",
"398.667 -11 OFFCURVE",
"482.333 33.667 OFFCURVE",
"553 123 CURVE",
"531 145 LINE",
"480.333 93 OFFCURVE",
"417 65 OFFCURVE",
"353 65 CURVE SMOOTH",
"310.333 65 OFFCURVE",
"272.5 77.167 OFFCURVE",
"239.5 101.5 CURVE SMOOTH",
"173.5 150.167 OFFCURVE",
"136 242.667 OFFCURVE",
"136 360 CURVE SMOOTH",
"136 414 OFFCURVE",
"146.667 464.833 OFFCURVE",
"168 512.5 CURVE SMOOTH",
"210.667 607.833 OFFCURVE",
"286 670 OFFCURVE",
"366 670 CURVE SMOOTH",
"446 670 OFFCURVE",
"498 617 OFFCURVE",
"498 537 CURVE SMOOTH",
"498 474.333 OFFCURVE",
"459.333 412.333 OFFCURVE",
"402 387 CURVE",
"412 369 LINE",
"441.333 377.667 OFFCURVE",
"469.333 394.333 OFFCURVE",
"496 419 CURVE SMOOTH",
"549.333 468.333 OFFCURVE",
"585 538.667 OFFCURVE",
"585 600 CURVE SMOOTH",
"585 677.333 OFFCURVE",
"528.333 730 OFFCURVE",
"443 730 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */\01225 24 7 6 4 1 0 1 74 0 0 0 3 91 4 1 3 3 42 75 0 1 1 2 91 0 2 2 43 2 76 0 0 0 35 0 34 36 38 44 5 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 614;
}
);
leftKerningGroup = C;
note = C;
rightKerningGroup = C;
unicode = 0043;
},
{
glyphname = Cacute;
layers = (
{
components = (
{
alignment = -1;
name = C;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 288, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 614;
}
);
leftKerningGroup = C;
note = Cacute;
rightKerningGroup = C;
unicode = 0106;
},
{
glyphname = Ccaron;
layers = (
{
components = (
{
alignment = -1;
name = C;
},
{
alignment = -1;
name = caron;
transform = "{1, 0, 0, 1, 237, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 614;
}
);
leftKerningGroup = C;
note = Ccaron;
rightKerningGroup = C;
unicode = 010C;
},
{
glyphname = Ccedilla;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"310.333 65 OFFCURVE",
"272.5 77.167 OFFCURVE",
"239.5 101.5 CURVE SMOOTH",
"173.5 150.167 OFFCURVE",
"136 242.667 OFFCURVE",
"136 360 CURVE SMOOTH",
"136 414 OFFCURVE",
"146.667 464.833 OFFCURVE",
"168 512.5 CURVE SMOOTH",
"210.667 607.833 OFFCURVE",
"286 670 OFFCURVE",
"366 670 CURVE SMOOTH",
"446 670 OFFCURVE",
"498 617 OFFCURVE",
"498 537 CURVE SMOOTH",
"498 474.333 OFFCURVE",
"459.333 412.333 OFFCURVE",
"402 387 CURVE",
"412 369 LINE",
"441.333 377.667 OFFCURVE",
"469.333 394.333 OFFCURVE",
"496 419 CURVE SMOOTH",
"549.333 468.333 OFFCURVE",
"585 538.667 OFFCURVE",
"585 600 CURVE SMOOTH",
"585 677.333 OFFCURVE",
"528.333 730 OFFCURVE",
"443 730 CURVE SMOOTH",
"371 730 OFFCURVE",
"304 710.667 OFFCURVE",
"242 672 CURVE SMOOTH",
"118 594.667 OFFCURVE",
"40 454 OFFCURVE",
"40 290 CURVE SMOOTH",
"40 238 OFFCURVE",
"48.833 190.5 OFFCURVE",
"66.5 147.5 CURVE SMOOTH",
"101.833 61.5 OFFCURVE",
"170.667 4 OFFCURVE",
"264 -8 CURVE",
"230 -66 LINE",
"247 -80 LINE",
"257 -73.333 OFFCURVE",
"267.333 -70 OFFCURVE",
"278 -70 CURVE SMOOTH",
"302 -70 OFFCURVE",
"321 -89.333 OFFCURVE",
"321 -116 CURVE SMOOTH",
"321 -141.333 OFFCURVE",
"304.667 -160 OFFCURVE",
"282 -160 CURVE SMOOTH",
"266.667 -160 OFFCURVE",
"254 -153 OFFCURVE",
"244 -139 CURVE",
"225 -150 LINE",
"241 -180.667 OFFCURVE",
"272 -198 OFFCURVE",
"304 -198 CURVE SMOOTH",
"349.333 -198 OFFCURVE",
"391 -165.333 OFFCURVE",
"391 -116 CURVE SMOOTH",
"391 -66.667 OFFCURVE",
"357.667 -36 OFFCURVE",
"315 -36 CURVE SMOOTH",
"299 -36 OFFCURVE",
"282.333 -40.333 OFFCURVE",
"265 -49 CURVE",
"288 -10 LINE",
"290.667 -10.667 OFFCURVE",
"295.333 -11 OFFCURVE",
"302 -11 CURVE SMOOTH",
"398.667 -11 OFFCURVE",
"482.333 33.667 OFFCURVE",
"553 123 CURVE",
"531 145 LINE",
"480.333 93 OFFCURVE",
"417 65 OFFCURVE",
"353 65 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 77 values pushed */\01248 47 3 2 4 7 6 32 1 0 7 31 8 2 4 1 30 20 19 3 3 4 4 74 0 1 0 4 3 1 4 99 0 3 0 2 3 2 95 0 6 6 5 91 0 5 5 42 75 8 1 7 7 0 91 0 0 0 43 0 76 0 0 0 62 0 61 44 42 36 36 36 35 36 9 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 614;
}
);
leftKerningGroup = C;
note = Ccedilla;
rightKerningGroup = C;
unicode = 00C7;
},
{
glyphname = Ccircumflex;
layers = (
{
components = (
{
alignment = -1;
name = C;
},
{
alignment = -1;
name = circumflex;
transform = "{1, 0, 0, 1, 238, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 614;
}
);
leftKerningGroup = C;
note = Ccircumflex;
rightKerningGroup = C;
unicode = 0108;
},
{
glyphname = Cdotaccent;
layers = (
{
components = (
{
alignment = -1;
name = C;
},
{
alignment = -1;
name = dotaccent;
transform = "{1, 0, 0, 1, 317, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 614;
}
);
leftKerningGroup = C;
note = Cdotaccent;
rightKerningGroup = C;
unicode = 010A;
},
{
glyphname = D;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"273 713 OFFCURVE",
"115.333 646 OFFCURVE",
"30 562 CURVE",
"50 541 LINE",
"132.667 610.333 OFFCURVE",
"240.667 655 OFFCURVE",
"346 655 CURVE SMOOTH",
"387.333 655 OFFCURVE",
"421.5 645 OFFCURVE",
"448.5 625 CURVE SMOOTH",
"502.5 585 OFFCURVE",
"527 519.333 OFFCURVE",
"527 446 CURVE SMOOTH",
"527 382 OFFCURVE",
"512.5 322.333 OFFCURVE",
"483.5 267 CURVE SMOOTH",
"425.5 156.333 OFFCURVE",
"319 75.667 OFFCURVE",
"187 41 CURVE",
"187 575 LINE",
"94 541 LINE",
"94 -13 LINE",
"181.333 -7.667 OFFCURVE",
"266.833 16.333 OFFCURVE",
"350.5 59 CURVE SMOOTH",
"517.833 144.333 OFFCURVE",
"635 293.667 OFFCURVE",
"635 463 CURVE SMOOTH",
"635 616.333 OFFCURVE",
"549 713 OFFCURVE",
"389 713 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */\01221 20 9 8 7 5 0 1 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01238 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 17 values pushed */\0120 1 1 2 91 3 1 2 2 42 75 0 0 0 46 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 15 values pushed */\0123 1 2 0 1 0 2 1 99 0 0 0 46 0 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 11 values pushed */\0120 0 0 24 0 23 42 21 4 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 675;
}
);
leftKerningGroup = B;
note = D;
rightKerningGroup = D;
unicode = 0044;
},
{
glyphname = Eth;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"273 713 OFFCURVE",
"115.333 646 OFFCURVE",
"30 562 CURVE",
"50 541 LINE",
"132.667 610.333 OFFCURVE",
"240.667 655 OFFCURVE",
"346 655 CURVE SMOOTH",
"387.333 655 OFFCURVE",
"421.5 645 OFFCURVE",
"448.5 625 CURVE SMOOTH",
"502.5 585 OFFCURVE",
"527 519.333 OFFCURVE",
"527 446 CURVE SMOOTH",
"527 382 OFFCURVE",
"512.5 322.333 OFFCURVE",
"483.5 267 CURVE SMOOTH",
"425.5 156.333 OFFCURVE",
"319 75.667 OFFCURVE",
"187 41 CURVE",
"187 324 LINE",
"332 324 LINE",
"353 374 LINE",
"187 374 LINE",
"187 575 LINE",
"94 541 LINE",
"94 374 LINE",
"11 374 LINE",
"-10 324 LINE",
"94 324 LINE",
"94 -13 LINE",
"181.333 -7.667 OFFCURVE",
"266.833 16.333 OFFCURVE",
"350.5 59 CURVE SMOOTH",
"517.833 144.333 OFFCURVE",
"635 293.667 OFFCURVE",
"635 463 CURVE SMOOTH",
"635 616.333 OFFCURVE",
"549 713 OFFCURVE",
"389 713 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */\01229 28 12 11 4 2 5 17 1 0 1 2 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01238 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 27 values pushed */\0123 1 2 4 1 1 0 2 1 97 0 5 5 6 91 7 1 6 6 42 75 0 0 0 46 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 25 values pushed */\0127 1 6 0 5 2 6 5 99 3 1 2 4 1 1 0 2 1 97 0 0 0 46 0 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 15 values pushed */\0120 0 0 32 0 31 40 17 19 17 17 21 8 7 26 \012CALL[ ]	/* CallFunction */";
};
width = 675;
}
);
leftKerningGroup = B;
note = Eth;
rightKerningGroup = D;
unicode = 00D0;
},
{
glyphname = Dcaron;
layers = (
{
components = (
{
alignment = -1;
name = D;
},
{
alignment = -1;
name = caron;
transform = "{1, 0, 0, 1, 196, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 675;
}
);
leftKerningGroup = B;
note = Dcaron;
rightKerningGroup = D;
unicode = 010E;
},
{
glyphname = Dcroat;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"273 713 OFFCURVE",
"115.333 646 OFFCURVE",
"30 562 CURVE",
"50 541 LINE",
"132.667 610.333 OFFCURVE",
"240.667 655 OFFCURVE",
"346 655 CURVE SMOOTH",
"387.333 655 OFFCURVE",
"421.5 645 OFFCURVE",
"448.5 625 CURVE SMOOTH",
"502.5 585 OFFCURVE",
"527 519.333 OFFCURVE",
"527 446 CURVE SMOOTH",
"527 382 OFFCURVE",
"512.5 322.333 OFFCURVE",
"483.5 267 CURVE SMOOTH",
"425.5 156.333 OFFCURVE",
"319 75.667 OFFCURVE",
"187 41 CURVE",
"187 324 LINE",
"332 324 LINE",
"353 374 LINE",
"187 374 LINE",
"187 575 LINE",
"94 541 LINE",
"94 374 LINE",
"11 374 LINE",
"-10 324 LINE",
"94 324 LINE",
"94 -13 LINE",
"181.333 -7.667 OFFCURVE",
"266.833 16.333 OFFCURVE",
"350.5 59 CURVE SMOOTH",
"517.833 144.333 OFFCURVE",
"635 293.667 OFFCURVE",
"635 463 CURVE SMOOTH",
"635 616.333 OFFCURVE",
"549 713 OFFCURVE",
"389 713 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */\01229 28 12 11 4 2 5 17 1 0 1 2 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01238 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 27 values pushed */\0123 1 2 4 1 1 0 2 1 97 0 5 5 6 91 7 1 6 6 42 75 0 0 0 46 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 25 values pushed */\0127 1 6 0 5 2 6 5 99 3 1 2 4 1 1 0 2 1 97 0 0 0 46 0 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 15 values pushed */\0120 0 0 32 0 31 40 17 19 17 17 21 8 7 26 \012CALL[ ]	/* CallFunction */";
};
width = 675;
}
);
leftKerningGroup = Dcroat;
note = Dcroat;
rightKerningGroup = Dcroat;
unicode = 0110;
},
{
glyphname = E;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"323.667 717 OFFCURVE",
"285.5 709.667 OFFCURVE",
"246.5 695 CURVE SMOOTH",
"168.5 665.667 OFFCURVE",
"109 606 OFFCURVE",
"109 522 CURVE SMOOTH",
"109 459.333 OFFCURVE",
"152.333 408 OFFCURVE",
"219 392 CURVE",
"113.667 345.333 OFFCURVE",
"30 264 OFFCURVE",
"30 168 CURVE SMOOTH",
"30 132.667 OFFCURVE",
"38.5 101.5 OFFCURVE",
"55.5 74.5 CURVE SMOOTH",
"89.5 20.5 OFFCURVE",
"151.333 -11 OFFCURVE",
"226 -11 CURVE SMOOTH",
"352.667 -11 OFFCURVE",
"468.667 70.667 OFFCURVE",
"534 180 CURVE",
"511 200 LINE",
"497.667 178 OFFCURVE",
"478.667 156.667 OFFCURVE",
"454 136 CURVE SMOOTH",
"404.667 94.667 OFFCURVE",
"336.667 66 OFFCURVE",
"270 66 CURVE SMOOTH",
"188.667 66 OFFCURVE",
"139 123 OFFCURVE",
"139 203 CURVE SMOOTH",
"139 309.667 OFFCURVE",
"248 387.333 OFFCURVE",
"364 422 CURVE",
"355 450 LINE",
"344.333 443.333 OFFCURVE",
"326.333 443 OFFCURVE",
"309 443 CURVE SMOOTH",
"240.921 443 OFFCURVE",
"172 494.567 OFFCURVE",
"172 560 CURVE SMOOTH",
"172 625.255 OFFCURVE",
"238.885 671 OFFCURVE",
"306 671 CURVE SMOOTH",
"354 671 OFFCURVE",
"389.667 646 OFFCURVE",
"427 606 CURVE",
"488 656 LINE",
"452.667 696.667 OFFCURVE",
"410.333 717 OFFCURVE",
"361 717 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */\01216 2 1 3 1 0 38 28 27 3 2 1 2 74 0 1 0 2 0 1 2 112 0 0 0 4 91 5 1 4 4 42 75 0 2 2 3 92 0 3 3 43 3 76 0 0 0 45 0 44 38 40 38 36 6 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 540;
}
);
leftKerningGroup = B;
note = E;
rightKerningGroup = AE;
unicode = 0045;
},
{
glyphname = Eacute;
layers = (
{
components = (
{
alignment = -1;
name = E;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 233, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 540;
}
);
leftKerningGroup = B;
note = Eacute;
rightKerningGroup = AE;
unicode = 00C9;
},
{
glyphname = Ebreve;
layers = (
{
components = (
{
alignment = -1;
name = E;
},
{
alignment = -1;
name = breve;
transform = "{1, 0, 0, 1, 217, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 540;
}
);
leftKerningGroup = B;
note = Ebreve;
rightKerningGroup = AE;
unicode = 0114;
},
{
glyphname = Ecaron;
layers = (
{
components = (
{
alignment = -1;
name = E;
},
{
alignment = -1;
name = caron;
transform = "{1, 0, 0, 1, 182, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 540;
}
);
leftKerningGroup = B;
note = Ecaron;
rightKerningGroup = AE;
unicode = 011A;
},
{
glyphname = Ecircumflex;
layers = (
{
components = (
{
alignment = -1;
name = E;
},
{
alignment = -1;
name = circumflex;
transform = "{1, 0, 0, 1, 183, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 540;
}
);
leftKerningGroup = B;
note = Ecircumflex;
rightKerningGroup = AE;
unicode = 00CA;
},
{
glyphname = Edieresis;
layers = (
{
components = (
{
alignment = -1;
name = E;
},
{
alignment = -1;
name = dieresis;
transform = "{1, 0, 0, 1, 175, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 540;
}
);
leftKerningGroup = B;
note = Edieresis;
rightKerningGroup = AE;
unicode = 00CB;
},
{
glyphname = Edotaccent;
layers = (
{
components = (
{
alignment = -1;
name = E;
},
{
alignment = -1;
name = dotaccent;
transform = "{1, 0, 0, 1, 262, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 540;
}
);
leftKerningGroup = B;
note = Edotaccent;
rightKerningGroup = AE;
unicode = 0116;
},
{
glyphname = Egrave;
layers = (
{
components = (
{
alignment = -1;
name = E;
},
{
alignment = -1;
name = grave;
transform = "{1, 0, 0, 1, 232, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 540;
}
);
leftKerningGroup = B;
note = Egrave;
rightKerningGroup = AE;
unicode = 00C8;
},
{
glyphname = Emacron;
layers = (
{
components = (
{
alignment = -1;
name = E;
},
{
alignment = -1;
name = macron;
transform = "{1, 0, 0, 1, 199, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 540;
}
);
leftKerningGroup = B;
note = Emacron;
rightKerningGroup = AE;
unicode = 0112;
},
{
glyphname = Eogonek;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"511 200 LINE",
"497.667 178 OFFCURVE",
"478.667 156.667 OFFCURVE",
"454 136 CURVE SMOOTH",
"404.667 94.667 OFFCURVE",
"336.667 66 OFFCURVE",
"270 66 CURVE SMOOTH",
"188.667 66 OFFCURVE",
"139 123 OFFCURVE",
"139 203 CURVE SMOOTH",
"139 309.667 OFFCURVE",
"248 387.333 OFFCURVE",
"364 422 CURVE",
"355 450 LINE",
"344.333 443.333 OFFCURVE",
"326.333 443 OFFCURVE",
"309 443 CURVE SMOOTH",
"240.921 443 OFFCURVE",
"172 494.567 OFFCURVE",
"172 560 CURVE SMOOTH",
"172 625.255 OFFCURVE",
"238.885 671 OFFCURVE",
"306 671 CURVE SMOOTH",
"354 671 OFFCURVE",
"389.667 646 OFFCURVE",
"427 606 CURVE",
"488 656 LINE",
"452.667 696.667 OFFCURVE",
"410.333 717 OFFCURVE",
"361 717 CURVE SMOOTH",
"323.667 717 OFFCURVE",
"285.5 709.667 OFFCURVE",
"246.5 695 CURVE SMOOTH",
"168.5 665.667 OFFCURVE",
"109 606 OFFCURVE",
"109 522 CURVE SMOOTH",
"109 459.333 OFFCURVE",
"152.333 408 OFFCURVE",
"219 392 CURVE",
"113.667 345.333 OFFCURVE",
"30 264 OFFCURVE",
"30 168 CURVE SMOOTH",
"30 132.667 OFFCURVE",
"38.5 101.5 OFFCURVE",
"55.5 74.5 CURVE SMOOTH",
"89.5 20.5 OFFCURVE",
"151.333 -11 OFFCURVE",
"226 -11 CURVE SMOOTH",
"234 -11 LINE",
"194 -46.333 OFFCURVE",
"174 -83.333 OFFCURVE",
"174 -122 CURVE SMOOTH",
"174 -171.333 OFFCURVE",
"213 -197 OFFCURVE",
"253 -197 CURVE SMOOTH",
"290.333 -197 OFFCURVE",
"323 -169.333 OFFCURVE",
"347 -128 CURVE",
"330 -113 LINE",
"316.667 -130.333 OFFCURVE",
"300.333 -139 OFFCURVE",
"281 -139 CURVE SMOOTH",
"250.333 -139 OFFCURVE",
"235 -120.333 OFFCURVE",
"235 -91 CURVE SMOOTH",
"235 -64.333 OFFCURVE",
"249 -32.333 OFFCURVE",
"273 -7 CURVE",
"379.667 9 OFFCURVE",
"476.667 85.333 OFFCURVE",
"534 180 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */\01251 37 36 3 5 4 63 62 27 3 6 5 11 10 2 0 2 3 74 0 5 4 6 4 5 6 112 0 0 0 1 0 1 95 0 4 4 3 91 0 3 3 42 75 0 6 6 2 91 0 2 2 43 2 76 40 38 36 44 36 36 39 7 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 540;
}
);
leftKerningGroup = B;
note = Eogonek;
rightKerningGroup = AE;
unicode = 0118;
},
{
glyphname = F;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"421 612 LINE SMOOTH",
"487.667 612 OFFCURVE",
"572.333 664 OFFCURVE",
"615 728 CURVE",
"605 739 LINE",
"566.333 705.667 OFFCURVE",
"475 699 OFFCURVE",
"379 699 CURVE SMOOTH",
"208 699 LINE SMOOTH",
"130.667 699 OFFCURVE",
"56.333 653.333 OFFCURVE",
"-9 572 CURVE",
"8 557 LINE",
"42.667 595.667 OFFCURVE",
"77.333 613 OFFCURVE",
"128 613 CURVE SMOOTH",
"266 612 LINE",
"218 568 OFFCURVE",
"180 512.333 OFFCURVE",
"180 455 CURVE SMOOTH",
"180 368 LINE",
"123 368 LINE",
"78 310 LINE",
"180 310 LINE",
"180 26 LINE SMOOTH",
"180 -8.667 OFFCURVE",
"171 -49.667 OFFCURVE",
"151 -71 CURVE",
"172 -92 LINE",
"242.667 -37.333 OFFCURVE",
"273 13.667 OFFCURVE",
"273 115 CURVE SMOOTH",
"273 310 LINE",
"332 310 LINE SMOOTH",
"412.667 310 OFFCURVE",
"472.333 338.667 OFFCURVE",
"511 396 CURVE",
"496 411 LINE",
"460 384.333 OFFCURVE",
"423.667 368 OFFCURVE",
"353 368 CURVE SMOOTH",
"273 368 LINE",
"273 513 LINE SMOOTH",
"273 553 OFFCURVE",
"284 578.667 OFFCURVE",
"312 612 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */\01232 31 8 7 4 0 4 1 74 40 39 2 5 72 16 15 2 1 71 0 5 6 1 4 0 5 4 99 3 1 0 1 1 0 87 3 1 0 0 1 91 2 1 1 0 1 79 37 53 36 17 25 36 35 7 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 590;
}
);
leftKerningGroup = B;
note = F;
rightKerningGroup = F;
unicode = 0046;
},
{
glyphname = G;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"362.667 726 OFFCURVE",
"295.833 705.5 OFFCURVE",
"235.5 664.5 CURVE SMOOTH",
"114.833 582.5 OFFCURVE",
"41 431.667 OFFCURVE",
"41 257 CURVE SMOOTH",
"41 203.667 OFFCURVE",
"50.167 157 OFFCURVE",
"68.5 117 CURVE SMOOTH",
"105.167 37 OFFCURVE",
"175.333 -8 OFFCURVE",
"266 -8 CURVE SMOOTH",
"299.333 -8 OFFCURVE",
"331.5 0.333 OFFCURVE",
"362.5 17 CURVE SMOOTH",
"424.5 50.333 OFFCURVE",
"473 115 OFFCURVE",
"493 199 CURVE",
"499 199 LINE",
"499 -107 LINE",
"587 -71 LINE",
"587 332 LINE",
"492 299 LINE",
"491.333 261.667 OFFCURVE",
"482 225.5 OFFCURVE",
"464 190.5 CURVE SMOOTH",
"428 120.5 OFFCURVE",
"367.333 72 OFFCURVE",
"306 72 CURVE SMOOTH",
"199.333 72 OFFCURVE",
"146 168 OFFCURVE",
"146 328 CURVE SMOOTH",
"146 393.333 OFFCURVE",
"156.167 452 OFFCURVE",
"176.5 504 CURVE SMOOTH",
"217.167 608 OFFCURVE",
"292.333 671 OFFCURVE",
"383 671 CURVE SMOOTH",
"433.667 671 OFFCURVE",
"467 643 OFFCURVE",
"467 599 CURVE SMOOTH",
"467 544.333 OFFCURVE",
"410.667 485.333 OFFCURVE",
"340 468 CURVE",
"350 449 LINE",
"386 451.667 OFFCURVE",
"421.167 462.333 OFFCURVE",
"455.5 481 CURVE SMOOTH",
"524.167 518.333 OFFCURVE",
"572 577.333 OFFCURVE",
"572 632 CURVE SMOOTH",
"572 688 OFFCURVE",
"516 726 OFFCURVE",
"436 726 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */\01228 25 24 7 6 5 1 0 1 74 27 26 2 2 71 0 0 0 3 91 4 1 3 3 42 75 0 1 1 2 91 0 2 2 46 2 76 0 0 0 41 0 40 43 37 44 5 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 660;
}
);
leftKerningGroup = C;
note = G;
rightKerningGroup = G;
unicode = 0047;
},
{
glyphname = Gbreve;
layers = (
{
components = (
{
alignment = -1;
name = G;
},
{
alignment = -1;
name = breve;
transform = "{1, 0, 0, 1, 266, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 660;
}
);
leftKerningGroup = C;
note = Gbreve;
rightKerningGroup = G;
unicode = 011E;
},
{
glyphname = Gcircumflex;
layers = (
{
components = (
{
alignment = -1;
name = G;
},
{
alignment = -1;
name = circumflex;
transform = "{1, 0, 0, 1, 232, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 660;
}
);
leftKerningGroup = C;
note = Gcircumflex;
rightKerningGroup = G;
unicode = 011C;
},
{
glyphname = Gcommaaccent;
layers = (
{
components = (
{
alignment = -1;
name = G;
},
{
alignment = -1;
name = commaaccentcomb;
transform = "{1, 0, 0, 1, 400, 0}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 660;
}
);
leftKerningGroup = C;
note = Gcommaaccent;
rightKerningGroup = G;
unicode = 0122;
},
{
glyphname = Gdotaccent;
layers = (
{
components = (
{
alignment = -1;
name = G;
},
{
alignment = -1;
name = dotaccent;
transform = "{1, 0, 0, 1, 312, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 660;
}
);
leftKerningGroup = C;
note = Gdotaccent;
rightKerningGroup = G;
unicode = 0120;
},
{
glyphname = H;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"475 694 LINE",
"568 730 LINE",
"568 20 LINE",
"475 -14 LINE",
"475 277 LINE",
"194 277 LINE",
"194 20 LINE",
"100 -14 LINE",
"100 277 LINE",
"19 277 LINE",
"48 336 LINE",
"100 336 LINE",
"100 694 LINE",
"194 730 LINE",
"194 336 LINE",
"475 336 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */\01215 4 3 0 4 0 72 14 13 10 9 4 2 71 1 1 0 2 2 0 85 1 1 0 0 2 89 3 1 2 0 2 77 19 17 19 17 4 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 658;
}
);
leftKerningGroup = B;
note = H;
rightKerningGroup = H;
unicode = 0048;
},
{
glyphname = Hbar;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"598 416 LINE",
"623 471 LINE",
"568 471 LINE",
"568 730 LINE",
"475 694 LINE",
"475 471 LINE",
"194 471 LINE",
"194 730 LINE",
"100 694 LINE",
"100 471 LINE",
"49 471 LINE",
"24 416 LINE",
"100 416 LINE",
"100 336 LINE",
"48 336 LINE",
"19 277 LINE",
"100 277 LINE",
"100 -14 LINE",
"194 20 LINE",
"194 277 LINE",
"475 277 LINE",
"475 -14 LINE",
"568 20 LINE",
"568 416 LINE"
);
},
{
closed = 1;
nodes = (
"475 416 LINE",
"475 336 LINE",
"194 336 LINE",
"194 416 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */\01221 20 17 16 4 5 72 7 6 3 2 4 1 71 7 6 2 5 8 4 2 0 3 5 0 97 9 1 3 1 1 3 85 9 1 3 3 1 89 2 1 1 3 1 77 27 26 17 19 19 17 17 17 19 19 16 10 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 658;
}
);
leftKerningGroup = B;
note = Hbar;
rightKerningGroup = H;
unicode = 0126;
},
{
glyphname = Hcircumflex;
layers = (
{
components = (
{
alignment = -1;
name = H;
},
{
alignment = -1;
name = circumflex;
transform = "{1, 0, 0, 1, 211, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 658;
}
);
leftKerningGroup = B;
note = Hcircumflex;
rightKerningGroup = H;
unicode = 0124;
},
{
glyphname = I;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"184 19 LINE",
"184 730 LINE",
"91 695 LINE",
"91 -14 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0123 1 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 290;
}
);
leftKerningGroup = B;
note = I;
rightKerningGroup = H;
unicode = 0049;
},
{
glyphname = IJ;
layers = (
{
components = (
{
alignment = -1;
name = I;
},
{
alignment = -1;
name = J;
transform = "{1, 0, 0, 1, 285, 0}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 695;
}
);
leftKerningGroup = B;
note = IJ;
rightKerningGroup = IJ;
unicode = 0132;
},
{
glyphname = Iacute;
layers = (
{
components = (
{
alignment = -1;
name = I;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 50, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 290;
}
);
leftKerningGroup = B;
note = Iacute;
rightKerningGroup = H;
unicode = 00CD;
},
{
glyphname = Ibreve;
layers = (
{
components = (
{
alignment = -1;
name = I;
},
{
alignment = -1;
name = breve;
transform = "{1, 0, 0, 1, 34, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 290;
}
);
leftKerningGroup = B;
note = Ibreve;
rightKerningGroup = H;
unicode = 012C;
},
{
glyphname = Icircumflex;
layers = (
{
components = (
{
alignment = -1;
name = I;
},
{
alignment = -1;
name = circumflex;
transform = "{1, 0, 0, 1, -1, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 290;
}
);
leftKerningGroup = B;
note = Icircumflex;
rightKerningGroup = H;
unicode = 00CE;
},
{
glyphname = Idieresis;
layers = (
{
components = (
{
alignment = -1;
name = I;
},
{
alignment = -1;
name = dieresis;
transform = "{1, 0, 0, 1, -8, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 290;
}
);
leftKerningGroup = B;
note = Idieresis;
rightKerningGroup = H;
unicode = 00CF;
},
{
glyphname = Idotaccent;
layers = (
{
components = (
{
alignment = -1;
name = I;
},
{
alignment = -1;
name = dotaccent;
transform = "{1, 0, 0, 1, 79, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 290;
}
);
leftKerningGroup = B;
note = Idotaccent;
rightKerningGroup = H;
unicode = 0130;
},
{
glyphname = Igrave;
layers = (
{
components = (
{
alignment = -1;
name = I;
},
{
alignment = -1;
name = grave;
transform = "{1, 0, 0, 1, 49, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 290;
}
);
leftKerningGroup = B;
note = Igrave;
rightKerningGroup = H;
unicode = 00CC;
},
{
glyphname = Imacron;
layers = (
{
components = (
{
alignment = -1;
name = I;
},
{
alignment = -1;
name = macron;
transform = "{1, 0, 0, 1, 16, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 290;
}
);
leftKerningGroup = B;
note = Imacron;
rightKerningGroup = H;
unicode = 012A;
},
{
glyphname = Iogonek;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"217 -98 LINE",
"203 -116 OFFCURVE",
"187 -125 OFFCURVE",
"169 -125 CURVE SMOOTH",
"138.333 -125 OFFCURVE",
"122 -106.667 OFFCURVE",
"122 -76 CURVE SMOOTH",
"122 -48 OFFCURVE",
"138.333 -13.333 OFFCURVE",
"165 12 CURVE",
"184 19 LINE",
"184 730 LINE",
"91 695 LINE",
"91 -14 LINE",
"108 -8 LINE",
"76.667 -39.333 OFFCURVE",
"61 -72.333 OFFCURVE",
"61 -107 CURVE SMOOTH",
"61 -156.333 OFFCURVE",
"100 -182 OFFCURVE",
"140 -182 CURVE SMOOTH",
"177.333 -182 OFFCURVE",
"211.333 -154.333 OFFCURVE",
"234 -113 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */\01221 12 11 10 9 8 6 1 72 0 1 0 0 1 87 0 1 1 0 91 0 0 1 0 79 46 34 2 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 285;
}
);
leftKerningGroup = B;
note = Iogonek;
rightKerningGroup = H;
unicode = 012E;
},
{
glyphname = Itilde;
layers = (
{
components = (
{
alignment = -1;
name = I;
},
{
alignment = -1;
name = tilde;
transform = "{1, 0, 0, 1, 26, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 290;
}
);
leftKerningGroup = B;
note = Itilde;
rightKerningGroup = H;
unicode = 0128;
},
{
glyphname = J;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"372 699 LINE",
"229 699 LINE SMOOTH",
"149.667 699 OFFCURVE",
"75 656.667 OFFCURVE",
"5 572 CURVE",
"23 556 LINE",
"59 596 OFFCURVE",
"92 613 OFFCURVE",
"144 613 CURVE SMOOTH",
"259 612 LINE",
"199 570.667 OFFCURVE",
"157 504.667 OFFCURVE",
"157 442 CURVE SMOOTH",
"157 25 LINE SMOOTH",
"157 -39 OFFCURVE",
"128.333 -93 OFFCURVE",
"55 -93 CURVE SMOOTH",
"-5 -93 OFFCURVE",
"-48.667 -57.667 OFFCURVE",
"-78 -15 CURVE",
"-162 -83 LINE",
"-114 -115 OFFCURVE",
"-54.333 -136 OFFCURVE",
"-1 -136 CURVE SMOOTH",
"55.667 -136 OFFCURVE",
"102.833 -124.667 OFFCURVE",
"140.5 -102 CURVE SMOOTH",
"215.833 -56.667 OFFCURVE",
"250 21.667 OFFCURVE",
"250 111 CURVE SMOOTH",
"250 500 LINE SMOOTH",
"250 545.333 OFFCURVE",
"265.667 579.667 OFFCURVE",
"307 629 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */\01227 26 12 11 4 1 2 1 74 0 3 0 2 1 3 2 99 0 1 0 0 1 87 0 1 1 0 91 0 0 1 0 79 36 38 37 39 4 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 410;
}
);
leftKerningGroup = J;
note = J;
rightKerningGroup = IJ;
unicode = 004A;
},
{
glyphname = Jcircumflex;
layers = (
{
components = (
{
alignment = -1;
name = J;
},
{
alignment = -1;
name = circumflex;
transform = "{1, 0, 0, 1, 85, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 410;
}
);
leftKerningGroup = J;
note = Jcircumflex;
rightKerningGroup = IJ;
unicode = 0134;
},
{
glyphname = K;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"604 132 LINE",
"577.333 88 OFFCURVE",
"537.333 56 OFFCURVE",
"504 56 CURVE",
"470.667 54.667 OFFCURVE",
"453.667 68 OFFCURVE",
"427 116 CURVE SMOOTH",
"285 354 LINE",
"587 707 LINE",
"526 712 LINE",
"183 306 LINE",
"183 730 LINE",
"90 694 LINE",
"90 -14 LINE",
"183 20 LINE",
"183 233 LINE",
"224 282 LINE",
"314 130 LINE SMOOTH",
"354.861 59.952 OFFCURVE",
"417.012 -8 OFFCURVE",
"467 -8 CURVE SMOOTH",
"524.333 -8 OFFCURVE",
"582.333 40 OFFCURVE",
"621 120 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */\01210 1 0 1 1 74 24 17 16 14 13 12 9 8 8 1 72 11 1 0 71 0 1 1 0 91 0 0 0 46 0 76 22 20 34 2 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 624;
}
);
leftKerningGroup = B;
note = K;
rightKerningGroup = K;
unicode = 004B;
},
{
glyphname = Kcommaaccent;
layers = (
{
components = (
{
alignment = -1;
name = K;
},
{
alignment = -1;
name = commaaccentcomb;
transform = "{1, 0, 0, 1, 386, 0}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 624;
}
);
leftKerningGroup = B;
note = Kcommaaccent;
rightKerningGroup = K;
unicode = 0136;
},
{
glyphname = L;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"333.333 730 OFFCURVE",
"279.5 715.5 OFFCURVE",
"232.5 686.5 CURVE SMOOTH",
"138.5 628.5 OFFCURVE",
"84 523.667 OFFCURVE",
"84 401 CURVE SMOOTH",
"84 119 LINE SMOOTH",
"84 73 OFFCURVE",
"67.333 37 OFFCURVE",
"34 11 CURVE",
"57 -8 LINE",
"90.333 17.333 OFFCURVE",
"138.333 31 OFFCURVE",
"177 31 CURVE SMOOTH",
"237 31 OFFCURVE",
"278.667 24 OFFCURVE",
"360 8 CURVE SMOOTH",
"400.667 -1.333 OFFCURVE",
"436.667 -7.667 OFFCURVE",
"468 -11 CURVE",
"542 144 LINE",
"524 156 LINE",
"496 118.667 OFFCURVE",
"454.333 92 OFFCURVE",
"409 92 CURVE SMOOTH",
"370.333 92 OFFCURVE",
"332 97.667 OFFCURVE",
"324 99 CURVE SMOOTH",
"294.667 103.667 OFFCURVE",
"266.667 106 OFFCURVE",
"240 106 CURVE SMOOTH",
"201.333 106 OFFCURVE",
"175 94 OFFCURVE",
"143 70 CURVE",
"138 73 LINE",
"164.667 105 OFFCURVE",
"177 131.667 OFFCURVE",
"177 173 CURVE SMOOTH",
"177 483 LINE SMOOTH",
"177 587 OFFCURVE",
"229.667 674 OFFCURVE",
"339 674 CURVE SMOOTH",
"384.333 674 OFFCURVE",
"414 649.667 OFFCURVE",
"414 607 CURVE SMOOTH",
"414 549.667 OFFCURVE",
"360 491.667 OFFCURVE",
"288 469 CURVE",
"297 450 LINE",
"333 454.667 OFFCURVE",
"367.833 466.333 OFFCURVE",
"401.5 485 CURVE SMOOTH",
"468.833 522.333 OFFCURVE",
"515 579.667 OFFCURVE",
"515 633 CURVE SMOOTH",
"515 693 OFFCURVE",
"466 730 OFFCURVE",
"394 730 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */\01233 32 7 6 4 1 0 20 1 3 2 2 74 43 42 34 3 3 71 0 2 1 3 1 2 3 112 0 1 0 3 1 3 95 0 0 0 4 91 5 1 4 4 42 0 76 0 0 0 50 0 49 40 35 41 44 6 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 561;
}
);
leftKerningGroup = B;
note = L;
rightKerningGroup = L;
unicode = 004C;
},
{
glyphname = Lacute;
layers = (
{
components = (
{
alignment = -1;
name = L;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 240, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 561;
}
);
leftKerningGroup = B;
note = Lacute;
rightKerningGroup = L;
unicode = 0139;
},
{
glyphname = Lcaron;
layers = (
{
components = (
{
alignment = -1;
name = L;
},
{
alignment = -1;
name = commaaboverightcomb;
transform = "{1, 0, 0, 1, 682, 194}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 561;
}
);
leftKerningGroup = B;
note = Lcaron;
rightKerningGroup = L;
unicode = 013D;
},
{
glyphname = Lcommaaccent;
layers = (
{
components = (
{
alignment = -1;
name = L;
},
{
alignment = -1;
name = commaaccentcomb;
transform = "{1, 0, 0, 1, 371, 0}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 561;
}
);
leftKerningGroup = B;
note = Lcommaaccent;
rightKerningGroup = L;
unicode = 013B;
},
{
glyphname = Ldot;
layers = (
{
components = (
{
alignment = -1;
name = L;
},
{
alignment = -1;
name = periodcentered;
transform = "{1, 0, 0, 1, 367, -32}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 561;
}
);
leftKerningGroup = B;
note = Ldot;
rightKerningGroup = L;
unicode = 013F;
},
{
glyphname = Lslash;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"542 144 LINE",
"524 156 LINE",
"496 118.667 OFFCURVE",
"454.333 92 OFFCURVE",
"409 92 CURVE SMOOTH",
"370.333 92 OFFCURVE",
"332 97.667 OFFCURVE",
"324 99 CURVE SMOOTH",
"294.667 103.667 OFFCURVE",
"266.667 106 OFFCURVE",
"240 106 CURVE SMOOTH",
"201.333 106 OFFCURVE",
"175 94 OFFCURVE",
"143 70 CURVE",
"138 73 LINE",
"164.667 105 OFFCURVE",
"177 131.667 OFFCURVE",
"177 173 CURVE SMOOTH",
"177 283 LINE",
"272 320 LINE",
"272 374 LINE",
"177 338 LINE",
"177 483 LINE SMOOTH",
"177 587 OFFCURVE",
"229.667 674 OFFCURVE",
"339 674 CURVE SMOOTH",
"384.333 674 OFFCURVE",
"414 649.667 OFFCURVE",
"414 607 CURVE SMOOTH",
"414 549.667 OFFCURVE",
"360 491.667 OFFCURVE",
"288 469 CURVE",
"297 450 LINE",
"333 454.667 OFFCURVE",
"367.833 466.333 OFFCURVE",
"401.5 485 CURVE SMOOTH",
"468.833 522.333 OFFCURVE",
"515 579.667 OFFCURVE",
"515 633 CURVE SMOOTH",
"515 693 OFFCURVE",
"466 730 OFFCURVE",
"394 730 CURVE SMOOTH",
"333.333 730 OFFCURVE",
"279.5 715.5 OFFCURVE",
"232.5 686.5 CURVE SMOOTH",
"138.5 628.5 OFFCURVE",
"84 523.667 OFFCURVE",
"84 401 CURVE SMOOTH",
"84 302 LINE",
"9 274 LINE",
"9 218 LINE",
"84 247 LINE",
"84 119 LINE SMOOTH",
"84 73 OFFCURVE",
"67.333 37 OFFCURVE",
"34 11 CURVE",
"57 -8 LINE",
"90.333 17.333 OFFCURVE",
"138.333 31 OFFCURVE",
"177 31 CURVE SMOOTH",
"237 31 OFFCURVE",
"278.667 24 OFFCURVE",
"360 8 CURVE SMOOTH",
"400.667 -1.333 OFFCURVE",
"436.667 -7.667 OFFCURVE",
"468 -11 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */\01258 42 41 40 39 29 28 16 15 14 13 11 3 2 46 1 0 4 2 74 10 9 1 3 0 71 0 4 3 0 3 4 0 112 0 3 0 0 3 0 95 0 2 2 1 91 0 1 1 42 2 76 35 45 44 45 37 5 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 561;
}
);
leftKerningGroup = B;
note = Lslash;
rightKerningGroup = L;
unicode = 0141;
},
{
glyphname = M;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"187 730 LINE",
"94 694 LINE",
"94 -14 LINE",
"187 19 LINE",
"187 288 LINE SMOOTH",
"187 356.667 OFFCURVE",
"196.667 419 OFFCURVE",
"216 475 CURVE SMOOTH",
"254.667 587 OFFCURVE",
"316.667 655 OFFCURVE",
"358 655 CURVE SMOOTH",
"376.667 655 OFFCURVE",
"388 637.667 OFFCURVE",
"388 607 CURVE SMOOTH",
"388 -14 LINE",
"480 19 LINE",
"480 288 LINE SMOOTH",
"480 356.667 OFFCURVE",
"489.667 419 OFFCURVE",
"509 475 CURVE SMOOTH",
"541.585 569.385 OFFCURVE",
"602.176 655 OFFCURVE",
"650 655 CURVE SMOOTH",
"670 655 OFFCURVE",
"683 637.667 OFFCURVE",
"683 607 CURVE SMOOTH",
"683 118 LINE SMOOTH",
"683 38 OFFCURVE",
"724 -5 OFFCURVE",
"784 -5 CURVE SMOOTH",
"836 -5 OFFCURVE",
"875.333 26.667 OFFCURVE",
"894 68 CURVE",
"880 81 LINE",
"865.333 61 OFFCURVE",
"841.333 45 OFFCURVE",
"820 45 CURVE SMOOTH",
"792 45 OFFCURVE",
"775 69.667 OFFCURVE",
"775 107 CURVE SMOOTH",
"775 633 LINE SMOOTH",
"775 691.667 OFFCURVE",
"749.667 728 OFFCURVE",
"699 728 CURVE SMOOTH",
"673.667 728 OFFCURVE",
"646.833 718.167 OFFCURVE",
"618.5 698.5 CURVE SMOOTH",
"561.833 659.167 OFFCURVE",
"509 580.667 OFFCURVE",
"481 470 CURVE",
"481 633 LINE SMOOTH",
"481 690.333 OFFCURVE",
"455.667 728 OFFCURVE",
"405 728 CURVE SMOOTH",
"380.333 728 OFFCURVE",
"353.667 718.167 OFFCURVE",
"325 698.5 CURVE SMOOTH",
"267.667 659.167 OFFCURVE",
"215 579.667 OFFCURVE",
"187 469 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */\01251 1 4 0 24 23 9 1 4 2 4 49 39 2 3 2 3 74 0 1 0 72 50 40 2 3 71 5 1 4 4 0 91 1 1 0 0 42 75 0 2 2 3 91 0 3 3 46 3 76 40 37 37 37 38 36 6 7 26 \012CALL[ ]	/* CallFunction */";
};
width = 886;
}
);
leftKerningGroup = M;
note = M;
rightKerningGroup = M;
unicode = 004D;
},
{
glyphname = N;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"184 731 LINE",
"92 696 LINE",
"92 -13 LINE",
"184 24 LINE",
"184 357 LINE SMOOTH",
"184 393.667 OFFCURVE",
"190 437.333 OFFCURVE",
"202 488 CURVE SMOOTH",
"226 589.333 OFFCURVE",
"277 677 OFFCURVE",
"353 677 CURVE SMOOTH",
"413 677 OFFCURVE",
"423 621.667 OFFCURVE",
"423 547 CURVE SMOOTH",
"423 118 LINE SMOOTH",
"423 38 OFFCURVE",
"463.667 -5 OFFCURVE",
"525 -5 CURVE SMOOTH",
"575.667 -5 OFFCURVE",
"616.667 28 OFFCURVE",
"634 68 CURVE",
"620 81 LINE",
"608 61 OFFCURVE",
"582.667 45 OFFCURVE",
"560 45 CURVE SMOOTH",
"532 45 OFFCURVE",
"516 69.667 OFFCURVE",
"516 107 CURVE SMOOTH",
"516 587 LINE SMOOTH",
"516 668.333 OFFCURVE",
"474 730 OFFCURVE",
"394 730 CURVE SMOOTH",
"280.667 730 OFFCURVE",
"213.333 649 OFFCURVE",
"184 537 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */\01232 1 3 0 15 14 1 3 1 3 30 1 2 1 3 74 0 1 0 72 31 1 2 71 0 3 3 0 91 0 0 0 42 75 0 1 1 2 91 0 2 2 46 2 76 37 37 37 35 4 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 628;
}
);
leftKerningGroup = B;
note = N;
rightKerningGroup = H;
unicode = 004E;
},
{
glyphname = Nacute;
layers = (
{
components = (
{
alignment = -1;
name = N;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 221, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 628;
}
);
leftKerningGroup = B;
note = Nacute;
rightKerningGroup = H;
unicode = 0143;
},
{
glyphname = Ncaron;
layers = (
{
components = (
{
alignment = -1;
name = N;
},
{
alignment = -1;
name = caron;
transform = "{1, 0, 0, 1, 170, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 628;
}
);
leftKerningGroup = B;
note = Ncaron;
rightKerningGroup = H;
unicode = 0147;
},
{
glyphname = Ncommaaccent;
layers = (
{
components = (
{
alignment = -1;
name = N;
},
{
alignment = -1;
name = commaaccentcomb;
transform = "{1, 0, 0, 1, 391, 0}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 628;
}
);
leftKerningGroup = B;
note = Ncommaaccent;
rightKerningGroup = H;
unicode = 0145;
},
{
glyphname = Eng;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"193 731 LINE",
"100 696 LINE",
"100 -13 LINE",
"193 24 LINE",
"193 358 LINE SMOOTH",
"193 394.667 OFFCURVE",
"198.5 438.167 OFFCURVE",
"209.5 488.5 CURVE SMOOTH",
"231.5 589.167 OFFCURVE",
"279.667 677 OFFCURVE",
"353 677 CURVE SMOOTH",
"409 677 OFFCURVE",
"419 621.667 OFFCURVE",
"419 547 CURVE SMOOTH",
"419 -30 LINE SMOOTH",
"419 -92.667 OFFCURVE",
"396.667 -155 OFFCURVE",
"334 -155 CURVE SMOOTH",
"290 -155 OFFCURVE",
"239 -117 OFFCURVE",
"215 -77 CURVE",
"136 -148 LINE",
"181.333 -181.333 OFFCURVE",
"236.667 -201 OFFCURVE",
"286 -201 CURVE SMOOTH",
"333.333 -201 OFFCURVE",
"374 -189.5 OFFCURVE",
"408 -166.5 CURVE SMOOTH",
"476 -120.5 OFFCURVE",
"511 -41 OFFCURVE",
"511 47 CURVE SMOOTH",
"511 587 LINE SMOOTH",
"511 668.333 OFFCURVE",
"470 730 OFFCURVE",
"394 730 CURVE SMOOTH",
"286 730 OFFCURVE",
"221 648.333 OFFCURVE",
"193 539 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */\01232 1 3 0 31 30 15 14 0 5 2 3 2 74 33 1 0 72 0 2 0 1 2 1 95 0 3 3 0 91 0 0 0 42 3 76 37 37 38 34 4 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 569;
}
);
note = Eng;
unicode = 014A;
},
{
glyphname = Ntilde;
layers = (
{
components = (
{
alignment = -1;
name = N;
},
{
alignment = -1;
name = tilde;
transform = "{1, 0, 0, 1, 197, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 628;
}
);
leftKerningGroup = B;
note = Ntilde;
rightKerningGroup = H;
unicode = 00D1;
},
{
glyphname = O;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"297.333 723 OFFCURVE",
"237.667 705.167 OFFCURVE",
"189 669.5 CURVE SMOOTH",
"91.667 598.167 OFFCURVE",
"45 477.667 OFFCURVE",
"45 351 CURVE SMOOTH",
"45 289.667 OFFCURVE",
"58.167 230.667 OFFCURVE",
"84.5 174 CURVE SMOOTH",
"137.167 60.667 OFFCURVE",
"240 -17 OFFCURVE",
"368 -17 CURVE SMOOTH",
"437.333 -17 OFFCURVE",
"496 0.667 OFFCURVE",
"544 36 CURVE SMOOTH",
"640 106.667 OFFCURVE",
"687 227 OFFCURVE",
"687 351 CURVE SMOOTH",
"687 413.667 OFFCURVE",
"673.833 473.667 OFFCURVE",
"647.5 531 CURVE SMOOTH",
"594.833 645.667 OFFCURVE",
"494.667 723 OFFCURVE",
"368 723 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"384 668 OFFCURVE",
"435.5 648.167 OFFCURVE",
"476.5 608.5 CURVE SMOOTH",
"558.5 529.167 OFFCURVE",
"594 401.333 OFFCURVE",
"594 288 CURVE SMOOTH",
"594 250 OFFCURVE",
"587.667 212.333 OFFCURVE",
"575 175 CURVE SMOOTH",
"549.667 100.333 OFFCURVE",
"494.333 43 OFFCURVE",
"409 43 CURVE SMOOTH",
"347 43 OFFCURVE",
"295.5 62.833 OFFCURVE",
"254.5 102.5 CURVE SMOOTH",
"172.5 181.833 OFFCURVE",
"136 308 OFFCURVE",
"136 424 CURVE SMOOTH",
"136 461.333 OFFCURVE",
"142.333 498.833 OFFCURVE",
"155 536.5 CURVE SMOOTH",
"180.333 611.833 OFFCURVE",
"236.667 668 OFFCURVE",
"322 668 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */\0125 1 3 3 1 91 4 1 1 1 42 75 0 2 2 0 91 0 0 0 43 0 76 16 16 0 0 16 31 16 30 24 22 0 15 0 14 38 6 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 728;
}
);
leftKerningGroup = C;
note = O;
rightKerningGroup = D;
unicode = 004F;
},
{
glyphname = Oacute;
layers = (
{
components = (
{
alignment = -1;
name = O;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 280, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 728;
}
);
leftKerningGroup = C;
note = Oacute;
rightKerningGroup = D;
unicode = 00D3;
},
{
glyphname = Obreve;
layers = (
{
components = (
{
alignment = -1;
name = O;
},
{
alignment = -1;
name = breve;
transform = "{1, 0, 0, 1, 264, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 728;
}
);
leftKerningGroup = C;
note = Obreve;
rightKerningGroup = D;
unicode = 014E;
},
{
glyphname = Ocircumflex;
layers = (
{
components = (
{
alignment = -1;
name = O;
},
{
alignment = -1;
name = circumflex;
transform = "{1, 0, 0, 1, 230, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 728;
}
);
leftKerningGroup = C;
note = Ocircumflex;
rightKerningGroup = D;
unicode = 00D4;
},
{
glyphname = Odieresis;
layers = (
{
components = (
{
alignment = -1;
name = O;
},
{
alignment = -1;
name = dieresis;
transform = "{1, 0, 0, 1, 222, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 728;
}
);
leftKerningGroup = C;
note = Odieresis;
rightKerningGroup = D;
unicode = 00D6;
},
{
glyphname = Ograve;
layers = (
{
components = (
{
alignment = -1;
name = O;
},
{
alignment = -1;
name = grave;
transform = "{1, 0, 0, 1, 279, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 728;
}
);
leftKerningGroup = C;
note = Ograve;
rightKerningGroup = D;
unicode = 00D2;
},
{
glyphname = Ohungarumlaut;
layers = (
{
components = (
{
alignment = -1;
name = O;
},
{
alignment = -1;
name = hungarumlaut;
transform = "{1, 0, 0, 1, 209, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 728;
}
);
leftKerningGroup = C;
note = Ohungarumlaut;
rightKerningGroup = D;
unicode = 0150;
},
{
glyphname = Omacron;
layers = (
{
components = (
{
alignment = -1;
name = O;
},
{
alignment = -1;
name = macron;
transform = "{1, 0, 0, 1, 246, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 728;
}
);
leftKerningGroup = C;
note = Omacron;
rightKerningGroup = D;
unicode = 014C;
},
{
glyphname = Oslash;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"612 697 LINE",
"573 723 LINE",
"538 669 LINE",
"488 705 OFFCURVE",
"431.333 723 OFFCURVE",
"368 723 CURVE SMOOTH",
"297.333 723 OFFCURVE",
"237.667 705.167 OFFCURVE",
"189 669.5 CURVE SMOOTH",
"91.667 598.167 OFFCURVE",
"45 477.667 OFFCURVE",
"45 351 CURVE SMOOTH",
"45 247 OFFCURVE",
"83.667 143.333 OFFCURVE",
"153 74 CURVE",
"115 15 LINE",
"160 -15 LINE",
"194 39 LINE",
"245.333 1.667 OFFCURVE",
"303.333 -17 OFFCURVE",
"368 -17 CURVE SMOOTH",
"437.333 -17 OFFCURVE",
"496 0.667 OFFCURVE",
"544 36 CURVE SMOOTH",
"640 106.667 OFFCURVE",
"687 227 OFFCURVE",
"687 351 CURVE SMOOTH",
"687 459 OFFCURVE",
"646 567.667 OFFCURVE",
"574 637 CURVE"
);
},
{
closed = 1;
nodes = (
"136 461.333 OFFCURVE",
"142.333 498.833 OFFCURVE",
"155 536.5 CURVE SMOOTH",
"180.333 611.833 OFFCURVE",
"236.667 668 OFFCURVE",
"322 668 CURVE SMOOTH",
"388.667 668 OFFCURVE",
"444.667 643.667 OFFCURVE",
"490 595 CURVE",
"208 158 LINE",
"160 231.333 OFFCURVE",
"136 333.333 OFFCURVE",
"136 424 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"343 43 OFFCURVE",
"287.333 66.667 OFFCURVE",
"242 114 CURVE",
"521 554 LINE",
"570.333 480.667 OFFCURVE",
"594 378.667 OFFCURVE",
"594 288 CURVE SMOOTH",
"594 250 OFFCURVE",
"587.667 212.333 OFFCURVE",
"575 175 CURVE SMOOTH",
"549.667 100.333 OFFCURVE",
"494.333 43 OFFCURVE",
"409 43 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */\01222 20 2 2 1 41 40 27 26 23 11 6 3 2 10 9 8 3 0 3 3 74 21 1 1 72 0 2 2 1 91 0 1 1 42 75 4 1 3 3 0 91 0 0 0 43 0 76 34 34 34 43 34 42 41 42 37 5 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 728;
}
);
leftKerningGroup = C;
note = Oslash;
rightKerningGroup = D;
unicode = 00D8;
},
{
glyphname = Oslashacute;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"296 778 LINE",
"464 865 LINE",
"403 938 LINE",
"281 798 LINE"
);
},
{
closed = 1;
nodes = (
"611 697 LINE",
"572 723 LINE",
"537 669 LINE",
"487 705 OFFCURVE",
"430.667 723 OFFCURVE",
"368 723 CURVE SMOOTH",
"297.333 723 OFFCURVE",
"237.667 705.167 OFFCURVE",
"189 669.5 CURVE SMOOTH",
"91.667 598.167 OFFCURVE",
"45 477.667 OFFCURVE",
"45 351 CURVE SMOOTH",
"45 248.333 OFFCURVE",
"83.667 144.333 OFFCURVE",
"153 75 CURVE",
"114 15 LINE",
"159 -15 LINE",
"193 39 LINE",
"245 1.667 OFFCURVE",
"303.333 -17 OFFCURVE",
"368 -17 CURVE SMOOTH",
"437.333 -17 OFFCURVE",
"496 0.667 OFFCURVE",
"544 36 CURVE SMOOTH",
"640 106.667 OFFCURVE",
"687 227 OFFCURVE",
"687 351 CURVE SMOOTH",
"687 459 OFFCURVE",
"646 566 OFFCURVE",
"574 638 CURVE"
);
},
{
closed = 1;
nodes = (
"136 461.333 OFFCURVE",
"142.333 498.833 OFFCURVE",
"155 536.5 CURVE SMOOTH",
"180.333 611.833 OFFCURVE",
"236.667 668 OFFCURVE",
"322 668 CURVE SMOOTH",
"388 668 OFFCURVE",
"443.667 643.667 OFFCURVE",
"489 595 CURVE",
"207 159 LINE",
"159 232.333 OFFCURVE",
"136 333.333 OFFCURVE",
"136 424 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"343 43 OFFCURVE",
"287 67 OFFCURVE",
"241 115 CURVE",
"521 555 LINE",
"570.333 480.333 OFFCURVE",
"594 378.667 OFFCURVE",
"594 288 CURVE SMOOTH",
"594 250 OFFCURVE",
"587.667 212.333 OFFCURVE",
"575 175 CURVE SMOOTH",
"549.667 100.333 OFFCURVE",
"494.333 43 OFFCURVE",
"409 43 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */\01226 24 2 2 1 45 44 31 30 27 15 6 3 2 14 13 12 3 0 3 3 74 25 3 2 1 4 1 72 0 2 2 1 91 0 1 1 42 75 4 1 3 3 0 91 0 0 0 43 0 76 38 38 38 47 38 46 41 42 41 5 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 728;
}
);
leftKerningGroup = C;
note = Oslashacute;
rightKerningGroup = D;
unicode = 01FE;
},
{
glyphname = Otilde;
layers = (
{
components = (
{
alignment = -1;
name = O;
},
{
alignment = -1;
name = tilde;
transform = "{1, 0, 0, 1, 256, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 728;
}
);
leftKerningGroup = C;
note = Otilde;
rightKerningGroup = D;
unicode = 00D5;
},
{
glyphname = OE;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"297.333 723 OFFCURVE",
"237.667 705.167 OFFCURVE",
"189 669.5 CURVE SMOOTH",
"91.667 598.167 OFFCURVE",
"45 477.667 OFFCURVE",
"45 351 CURVE SMOOTH",
"45 289.667 OFFCURVE",
"58.167 230.667 OFFCURVE",
"84.5 174 CURVE SMOOTH",
"137.167 60.667 OFFCURVE",
"240 -17 OFFCURVE",
"368 -17 CURVE SMOOTH",
"432.667 -17 OFFCURVE",
"489.333 -0.667 OFFCURVE",
"538 32 CURVE",
"571.333 4 OFFCURVE",
"618.333 -11 OFFCURVE",
"669 -11 CURVE SMOOTH",
"795.667 -11 OFFCURVE",
"913 70.667 OFFCURVE",
"977 180 CURVE",
"954 200 LINE",
"941.333 178 OFFCURVE",
"922.833 156.667 OFFCURVE",
"898.5 136 CURVE SMOOTH",
"849.833 94.667 OFFCURVE",
"783 66 OFFCURVE",
"715 66 CURVE SMOOTH",
"632.333 66 OFFCURVE",
"583 123 OFFCURVE",
"583 203 CURVE SMOOTH",
"583 309.667 OFFCURVE",
"693.333 387.333 OFFCURVE",
"808 422 CURVE",
"800 450 LINE",
"788 443.333 OFFCURVE",
"770.333 443 OFFCURVE",
"753 443 CURVE SMOOTH",
"684.52 443 OFFCURVE",
"615 494.55 OFFCURVE",
"615 560 CURVE SMOOTH",
"615 625.251 OFFCURVE",
"681.93 671 OFFCURVE",
"750 671 CURVE SMOOTH",
"798 671 OFFCURVE",
"834.667 644.667 OFFCURVE",
"872 606 CURVE",
"932 656 LINE",
"897.333 696.667 OFFCURVE",
"855 717 OFFCURVE",
"805 717 CURVE SMOOTH",
"726.333 717 OFFCURVE",
"633.333 682.333 OFFCURVE",
"588 621 CURVE",
"534.667 685 OFFCURVE",
"457.333 723 OFFCURVE",
"368 723 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"440.667 668 OFFCURVE",
"521 589.667 OFFCURVE",
"561 479 CURVE SMOOTH",
"575.667 436.333 OFFCURVE",
"612.667 405.333 OFFCURVE",
"662 392 CURVE",
"558 345.333 OFFCURVE",
"475 264 OFFCURVE",
"475 168 CURVE SMOOTH",
"475 132 OFFCURVE",
"484 99.333 OFFCURVE",
"502 70 CURVE",
"475.333 52 OFFCURVE",
"444.333 43 OFFCURVE",
"409 43 CURVE SMOOTH",
"347 43 OFFCURVE",
"295.5 62.833 OFFCURVE",
"254.5 102.5 CURVE SMOOTH",
"172.5 181.833 OFFCURVE",
"136 308 OFFCURVE",
"136 424 CURVE SMOOTH",
"136 461.333 OFFCURVE",
"142.333 498.833 OFFCURVE",
"155 536.5 CURVE SMOOTH",
"180.333 611.833 OFFCURVE",
"236.667 668 OFFCURVE",
"322 668 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */\01222 8 7 2 4 2 1 65 60 34 33 4 3 2 40 1 4 7 3 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01240 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 45 values pushed */\0120 2 1 3 1 2 3 112 10 8 2 1 1 0 91 9 6 2 0 0 42 75 0 3 3 4 92 5 1 4 4 43 75 0 7 7 4 91 5 1 4 4 43 4 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 54 values pushed */\0120 2 1 3 1 2 3 112 10 8 2 1 1 6 91 9 1 6 6 42 75 10 8 2 1 1 0 91 0 0 0 42 75 0 3 3 4 92 0 4 4 43 75 0 7 7 5 91 0 5 5 43 5 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 23 values pushed */\01251 51 0 0 51 71 51 70 59 57 0 50 0 49 35 38 40 38 36 36 11 7 26 \012CALL[ ]	/* CallFunction */";
};
width = 984;
}
);
leftKerningGroup = C;
note = OE;
rightKerningGroup = AE;
unicode = 0152;
},
{
glyphname = P;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"266.667 715 OFFCURVE",
"126.333 649.667 OFFCURVE",
"29 559 CURVE",
"48 538 LINE",
"124 607.333 OFFCURVE",
"235 655 OFFCURVE",
"327 655 CURVE SMOOTH",
"445.667 655 OFFCURVE",
"507 590 OFFCURVE",
"507 490 CURVE SMOOTH",
"507 444 OFFCURVE",
"493.5 402.167 OFFCURVE",
"466.5 364.5 CURVE SMOOTH",
"412.5 289.167 OFFCURVE",
"320.333 240.333 OFFCURVE",
"231 231 CURVE",
"226 204 LINE",
"227.333 202.667 OFFCURVE",
"231 202 OFFCURVE",
"237 202 CURVE SMOOTH",
"294.333 202 OFFCURVE",
"351.5 216 OFFCURVE",
"408.5 244 CURVE SMOOTH",
"522.5 300 OFFCURVE",
"604 399.667 OFFCURVE",
"604 509 CURVE SMOOTH",
"604 646.333 OFFCURVE",
"514.667 715 OFFCURVE",
"388 715 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"185 22 LINE",
"185 570 LINE",
"93 534 LINE",
"93 -13 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */\01227 26 20 19 4 0 1 1 74 25 24 2 0 71 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01245 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 17 values pushed */\0120 0 1 0 115 0 1 1 2 91 3 1 2 2 42 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 23 values pushed */\0120 0 1 0 115 3 1 2 1 1 2 87 3 1 2 2 1 91 0 1 2 1 79 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 11 values pushed */\0120 0 0 23 0 22 40 37 4 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 620;
}
);
leftKerningGroup = B;
note = P;
rightKerningGroup = P;
unicode = 0050;
},
{
glyphname = Thorn;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"322.333 625 OFFCURVE",
"254 608 OFFCURVE",
"184 574 CURVE",
"184 730 LINE",
"91 694 LINE",
"91 519 LINE",
"69 503 OFFCURVE",
"48.333 486.333 OFFCURVE",
"29 469 CURVE",
"48 449 LINE",
"56.667 457 OFFCURVE",
"71 468.333 OFFCURVE",
"91 483 CURVE",
"91 -39 LINE",
"184 -3 LINE",
"184 534 LINE",
"236 555.333 OFFCURVE",
"284 566 OFFCURVE",
"328 566 CURVE SMOOTH",
"446.667 566 OFFCURVE",
"508 501 OFFCURVE",
"508 401 CURVE SMOOTH",
"508 354.333 OFFCURVE",
"494.5 312.167 OFFCURVE",
"467.5 274.5 CURVE SMOOTH",
"413.5 199.167 OFFCURVE",
"321.667 151.667 OFFCURVE",
"231 141 CURVE",
"226 115 LINE",
"228 113.667 OFFCURVE",
"232 113 OFFCURVE",
"238 113 CURVE SMOOTH",
"295.333 113 OFFCURVE",
"352.5 126.833 OFFCURVE",
"409.5 154.5 CURVE SMOOTH",
"523.5 209.833 OFFCURVE",
"605 310.667 OFFCURVE",
"605 420 CURVE SMOOTH",
"605 556 OFFCURVE",
"515.667 625 OFFCURVE",
"389 625 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */\01229 1 1 2 26 24 23 21 18 5 0 1 2 74 28 27 2 2 72 20 19 2 0 71 0 0 1 0 115 3 1 2 1 1 2 87 3 1 2 2 1 91 0 1 2 1 79 0 0 0 31 0 30 40 37 4 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 619;
}
);
leftKerningGroup = B;
note = Thorn;
rightKerningGroup = Thorn;
unicode = 00DE;
},
{
glyphname = Q;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"572.667 -40 OFFCURVE",
"548.333 -23 OFFCURVE",
"515 17 CURVE",
"627 77 OFFCURVE",
"687 211 OFFCURVE",
"687 351 CURVE SMOOTH",
"687 413.667 OFFCURVE",
"673.833 473.667 OFFCURVE",
"647.5 531 CURVE SMOOTH",
"594.833 645.667 OFFCURVE",
"494.667 723 OFFCURVE",
"368 723 CURVE SMOOTH",
"297.333 723 OFFCURVE",
"237.667 705.167 OFFCURVE",
"189 669.5 CURVE SMOOTH",
"91.667 598.167 OFFCURVE",
"45 477.667 OFFCURVE",
"45 351 CURVE SMOOTH",
"45 289.667 OFFCURVE",
"58.167 230.667 OFFCURVE",
"84.5 174 CURVE SMOOTH",
"137.167 60.667 OFFCURVE",
"240 -17 OFFCURVE",
"368 -17 CURVE SMOOTH",
"390.667 -17 OFFCURVE",
"410 -15.667 OFFCURVE",
"426 -13 CURVE",
"475.333 -77 OFFCURVE",
"514.667 -101 OFFCURVE",
"568 -101 CURVE SMOOTH",
"607.333 -101 OFFCURVE",
"641.333 -82 OFFCURVE",
"670 -44 CURVE",
"650 -24 LINE",
"635.333 -34.667 OFFCURVE",
"618 -40 OFFCURVE",
"598 -40 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"136 461.333 OFFCURVE",
"142.333 498.833 OFFCURVE",
"155 536.5 CURVE SMOOTH",
"180.333 611.833 OFFCURVE",
"236.667 668 OFFCURVE",
"322 668 CURVE SMOOTH",
"384 668 OFFCURVE",
"435.5 648.167 OFFCURVE",
"476.5 608.5 CURVE SMOOTH",
"558.5 529.167 OFFCURVE",
"594 401.333 OFFCURVE",
"594 288 CURVE SMOOTH",
"594 194.667 OFFCURVE",
"557.667 96.333 OFFCURVE",
"483 59 CURVE",
"460 92 LINE SMOOTH",
"401.333 180 OFFCURVE",
"357 213 OFFCURVE",
"297 213 CURVE SMOOTH",
"261.667 213 OFFCURVE",
"230.333 197 OFFCURVE",
"203 165 CURVE",
"159 238.333 OFFCURVE",
"136 336 OFFCURVE",
"136 424 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"234 148 OFFCURVE",
"249.333 152 OFFCURVE",
"266 152 CURVE SMOOTH",
"283.333 152 OFFCURVE",
"301 143.833 OFFCURVE",
"319 127.5 CURVE SMOOTH",
"337 111.167 OFFCURVE",
"360 83 OFFCURVE",
"388 43 CURVE",
"320 49.667 OFFCURVE",
"264 82 OFFCURVE",
"220 140 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 71 values pushed */\01230 1 6 4 54 49 36 24 4 1 6 1 1 3 1 2 1 0 3 4 74 0 4 0 6 1 4 6 99 7 1 3 0 0 3 0 95 0 5 5 2 91 0 2 2 42 75 0 1 1 43 1 76 0 0 53 51 44 42 33 31 0 27 0 26 38 35 35 8 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 728;
}
);
leftKerningGroup = C;
note = Q;
rightKerningGroup = D;
unicode = 0051;
},
{
glyphname = R;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"266.667 715 OFFCURVE",
"126.333 649.667 OFFCURVE",
"29 559 CURVE",
"48 538 LINE",
"124 607.333 OFFCURVE",
"235 655 OFFCURVE",
"327 655 CURVE SMOOTH",
"445.667 655 OFFCURVE",
"507 590 OFFCURVE",
"507 490 CURVE SMOOTH",
"507 444 OFFCURVE",
"494.333 402 OFFCURVE",
"469 364 CURVE SMOOTH",
"418.333 288 OFFCURVE",
"330.333 240.333 OFFCURVE",
"241 231 CURVE",
"235 204 LINE",
"355 57 LINE SMOOTH",
"395 6.333 OFFCURVE",
"426.667 -16 OFFCURVE",
"464 -16 CURVE SMOOTH",
"538.917 -16 OFFCURVE",
"588.97 63.463 OFFCURVE",
"623 106 CURVE",
"608 119 LINE",
"573.333 84.333 OFFCURVE",
"540 57 OFFCURVE",
"508 57 CURVE SMOOTH",
"488.667 57 OFFCURVE",
"469.333 66 OFFCURVE",
"450 84 CURVE",
"341 217 LINE",
"387.667 229.667 OFFCURVE",
"431 250.5 OFFCURVE",
"471 279.5 CURVE SMOOTH",
"551 337.5 OFFCURVE",
"604 419.667 OFFCURVE",
"604 509 CURVE SMOOTH",
"604 646.333 OFFCURVE",
"514.667 715 OFFCURVE",
"388 715 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"182 22 LINE",
"182 570 LINE",
"90 535 LINE",
"90 -15 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */\01240 39 33 32 21 13 12 6 8 0 2 38 37 2 1 0 2 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01245 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 22 values pushed */\0120 2 2 3 91 4 1 3 3 42 75 0 0 0 1 91 0 1 1 43 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 20 values pushed */\0124 1 3 0 2 0 3 2 99 0 0 0 1 91 0 1 1 43 1 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 12 values pushed */\0120 0 0 36 0 35 42 38 40 5 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 648;
}
);
leftKerningGroup = B;
note = R;
rightKerningGroup = R;
unicode = 0052;
},
{
glyphname = Racute;
layers = (
{
components = (
{
alignment = -1;
name = R;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 249, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 648;
}
);
leftKerningGroup = B;
note = Racute;
rightKerningGroup = R;
unicode = 0154;
},
{
glyphname = Rcaron;
layers = (
{
components = (
{
alignment = -1;
name = R;
},
{
alignment = -1;
name = caron;
transform = "{1, 0, 0, 1, 198, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 648;
}
);
leftKerningGroup = B;
note = Rcaron;
rightKerningGroup = R;
unicode = 0158;
},
{
glyphname = Rcommaaccent;
layers = (
{
components = (
{
alignment = -1;
name = R;
},
{
alignment = -1;
name = commaaccentcomb;
transform = "{1, 0, 0, 1, 400, 0}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 648;
}
);
leftKerningGroup = B;
note = Rcommaaccent;
rightKerningGroup = R;
unicode = 0156;
},
{
glyphname = S;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"254 728 OFFCURVE",
"210.333 718.167 OFFCURVE",
"171 698.5 CURVE SMOOTH",
"92.333 659.167 OFFCURVE",
"45 585.333 OFFCURVE",
"45 500 CURVE SMOOTH",
"45 459.333 OFFCURVE",
"55 424.833 OFFCURVE",
"75 396.5 CURVE SMOOTH",
"115 339.833 OFFCURVE",
"165.667 312.667 OFFCURVE",
"259 270 CURVE SMOOTH",
"322.607 241.088 OFFCURVE",
"421 174.755 OFFCURVE",
"421 120 CURVE SMOOTH",
"421 69.333 OFFCURVE",
"374.333 35 OFFCURVE",
"317 35 CURVE SMOOTH",
"255.667 35 OFFCURVE",
"184.333 75.333 OFFCURVE",
"139 182 CURVE",
"61 95 LINE",
"109 23 OFFCURVE",
"195.667 -12 OFFCURVE",
"285 -12 CURVE SMOOTH",
"406.333 -12 OFFCURVE",
"490.333 53 OFFCURVE",
"489 169 CURVE",
"489 200.333 OFFCURVE",
"481 226.667 OFFCURVE",
"465 248 CURVE SMOOTH",
"433 290.667 OFFCURVE",
"392 311 OFFCURVE",
"312 347 CURVE SMOOTH",
"270 365.667 OFFCURVE",
"236.667 382.333 OFFCURVE",
"212 397 CURVE SMOOTH",
"162.667 426.333 OFFCURVE",
"123 473 OFFCURVE",
"123 545 CURVE SMOOTH",
"123 622.333 OFFCURVE",
"173.333 677 OFFCURVE",
"260 677 CURVE SMOOTH",
"350.667 677 OFFCURVE",
"418.667 608.333 OFFCURVE",
"452 515 CURVE",
"530 611 LINE",
"475.333 685.667 OFFCURVE",
"391.333 728 OFFCURVE",
"302 728 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */\01224 23 3 2 4 2 0 1 74 0 0 0 3 91 4 1 3 3 42 75 0 2 2 1 91 0 1 1 43 1 76 0 0 0 42 0 41 37 44 37 5 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 553;
}
);
leftKerningGroup = S;
note = S;
rightKerningGroup = S;
unicode = 0053;
},
{
glyphname = Sacute;
layers = (
{
components = (
{
alignment = -1;
name = S;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 220, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 553;
}
);
leftKerningGroup = S;
note = Sacute;
rightKerningGroup = S;
unicode = 015A;
},
{
glyphname = Scaron;
layers = (
{
components = (
{
alignment = -1;
name = S;
},
{
alignment = -1;
name = caron;
transform = "{1, 0, 0, 1, 169, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 553;
}
);
leftKerningGroup = S;
note = Scaron;
rightKerningGroup = S;
unicode = 0160;
},
{
glyphname = Scedilla;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"123 622.333 OFFCURVE",
"173.333 677 OFFCURVE",
"260 677 CURVE SMOOTH",
"350.667 677 OFFCURVE",
"418.667 608.333 OFFCURVE",
"452 515 CURVE",
"530 611 LINE",
"475.333 685.667 OFFCURVE",
"391.333 728 OFFCURVE",
"302 728 CURVE SMOOTH",
"254 728 OFFCURVE",
"210.333 718.167 OFFCURVE",
"171 698.5 CURVE SMOOTH",
"92.333 659.167 OFFCURVE",
"45 585.333 OFFCURVE",
"45 500 CURVE SMOOTH",
"45 459.333 OFFCURVE",
"55 424.833 OFFCURVE",
"75 396.5 CURVE SMOOTH",
"115 339.833 OFFCURVE",
"165.667 312.667 OFFCURVE",
"259 270 CURVE SMOOTH",
"322.607 241.088 OFFCURVE",
"421 174.755 OFFCURVE",
"421 120 CURVE SMOOTH",
"421 69.333 OFFCURVE",
"374.333 35 OFFCURVE",
"317 35 CURVE SMOOTH",
"255.667 35 OFFCURVE",
"184.333 75.333 OFFCURVE",
"139 182 CURVE",
"61 95 LINE",
"103.667 32.333 OFFCURVE",
"174.667 -3 OFFCURVE",
"252 -11 CURVE",
"220 -66 LINE",
"237 -80 LINE",
"247 -73.333 OFFCURVE",
"257.333 -70 OFFCURVE",
"268 -70 CURVE SMOOTH",
"292 -70 OFFCURVE",
"311 -89.333 OFFCURVE",
"311 -116 CURVE SMOOTH",
"311 -141.333 OFFCURVE",
"294.667 -160 OFFCURVE",
"272 -160 CURVE SMOOTH",
"256.667 -160 OFFCURVE",
"244 -153 OFFCURVE",
"234 -139 CURVE",
"215 -150 LINE",
"231 -180.667 OFFCURVE",
"262 -198 OFFCURVE",
"294 -198 CURVE SMOOTH",
"339.333 -198 OFFCURVE",
"381 -165.333 OFFCURVE",
"381 -116 CURVE SMOOTH",
"381 -66.667 OFFCURVE",
"347.667 -36 OFFCURVE",
"305 -36 CURVE SMOOTH",
"289 -36 OFFCURVE",
"272.333 -40.333 OFFCURVE",
"255 -49 CURVE",
"277 -12 LINE",
"285 -12 LINE SMOOTH",
"406.333 -12 OFFCURVE",
"490.333 53 OFFCURVE",
"489 169 CURVE",
"489 200.333 OFFCURVE",
"481 226.667 OFFCURVE",
"465 248 CURVE SMOOTH",
"433 290.667 OFFCURVE",
"392 311 OFFCURVE",
"312 347 CURVE SMOOTH",
"270 365.667 OFFCURVE",
"236.667 382.333 OFFCURVE",
"212 397 CURVE SMOOTH",
"162.667 426.333 OFFCURVE",
"123 473 OFFCURVE",
"123 545 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */\01262 61 40 39 4 5 7 36 1 0 5 35 12 2 4 1 34 24 23 3 3 4 4 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 41 values pushed */\0120 1 0 4 5 1 104 0 4 3 0 4 102 0 3 0 2 3 2 95 0 7 7 6 91 0 6 6 42 75 0 5 5 0 91 0 0 0 43 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01222 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 42 values pushed */\0120 1 0 4 0 1 4 112 0 4 3 0 4 102 0 3 0 2 3 2 95 0 7 7 6 91 0 6 6 42 75 0 5 5 0 91 0 0 0 43 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 43 values pushed */\0120 1 0 4 0 1 4 112 0 4 3 0 4 3 110 0 3 0 2 3 2 95 0 7 7 6 91 0 6 6 42 75 0 5 5 0 91 0 0 0 43 0 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 11 values pushed */\01237 45 41 36 36 36 35 25 8 7 28 \012CALL[ ]	/* CallFunction */";
};
width = 553;
}
);
leftKerningGroup = S;
note = Scedilla;
rightKerningGroup = S;
unicode = 015E;
},
{
glyphname = Scircumflex;
layers = (
{
components = (
{
alignment = -1;
name = S;
},
{
alignment = -1;
name = circumflex;
transform = "{1, 0, 0, 1, 169, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 553;
}
);
leftKerningGroup = S;
note = Scircumflex;
rightKerningGroup = S;
unicode = 015C;
},
{
glyphname = Scommaaccent;
layers = (
{
components = (
{
alignment = -1;
name = S;
},
{
alignment = -1;
name = commaaccentcomb;
transform = "{1, 0, 0, 1, 375, 0}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 553;
}
);
leftKerningGroup = S;
note = Scommaaccent;
rightKerningGroup = S;
unicode = 0218;
},
{
glyphname = T;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"522 739 LINE",
"484.667 705.667 OFFCURVE",
"394 699 OFFCURVE",
"298 699 CURVE SMOOTH",
"215 699 LINE SMOOTH",
"137.667 699 OFFCURVE",
"62.667 653.333 OFFCURVE",
"-4 572 CURVE",
"15 557 LINE",
"49.667 595.667 OFFCURVE",
"82.333 613 OFFCURVE",
"133 613 CURVE SMOOTH",
"271 612 LINE",
"221.667 572 OFFCURVE",
"186 515 OFFCURVE",
"186 455 CURVE SMOOTH",
"186 97 LINE SMOOTH",
"186 61 OFFCURVE",
"176 21.667 OFFCURVE",
"156 -1 CURVE",
"177 -21 LINE",
"247.667 33.667 OFFCURVE",
"278 83 OFFCURVE",
"278 187 CURVE SMOOTH",
"278 513 LINE SMOOTH",
"278 553 OFFCURVE",
"289.333 578.667 OFFCURVE",
"316 612 CURVE",
"398.667 612 OFFCURVE",
"481 660 OFFCURVE",
"533 728 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */\01230 1 2 72 23 22 11 10 4 0 71 0 2 0 0 2 87 0 2 2 0 91 1 1 0 2 0 79 53 47 18 3 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 500;
}
);
leftKerningGroup = T;
note = T;
rightKerningGroup = T;
unicode = 0054;
},
{
glyphname = Tbar;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"398.667 612 OFFCURVE",
"481 660 OFFCURVE",
"533 728 CURVE",
"522 739 LINE",
"484.667 705.667 OFFCURVE",
"394 699 OFFCURVE",
"298 699 CURVE SMOOTH",
"215 699 LINE SMOOTH",
"137.667 699 OFFCURVE",
"62.667 653.333 OFFCURVE",
"-4 572 CURVE",
"15 557 LINE",
"49.667 595.667 OFFCURVE",
"82.333 613 OFFCURVE",
"133 613 CURVE SMOOTH",
"271 612 LINE",
"221.667 572 OFFCURVE",
"186 515 OFFCURVE",
"186 455 CURVE SMOOTH",
"186 384 LINE",
"115 384 LINE",
"92 333 LINE",
"186 333 LINE",
"186 97 LINE SMOOTH",
"186 61 OFFCURVE",
"176 21.667 OFFCURVE",
"156 -1 CURVE",
"177 -21 LINE",
"247.667 33.667 OFFCURVE",
"278 83 OFFCURVE",
"278 187 CURVE SMOOTH",
"278 333 LINE",
"344 333 LINE",
"370 384 LINE",
"278 384 LINE",
"278 513 LINE SMOOTH",
"278 553 OFFCURVE",
"289.333 578.667 OFFCURVE",
"316 612 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */\01227 26 2 0 4 1 74 35 34 2 5 72 11 10 2 1 71 0 5 6 1 4 0 5 4 99 3 1 0 1 1 0 85 3 1 0 0 1 89 2 1 1 0 1 77 21 53 36 17 25 17 19 7 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 500;
}
);
leftKerningGroup = T;
note = Tbar;
rightKerningGroup = T;
unicode = 0166;
},
{
glyphname = Tcaron;
layers = (
{
components = (
{
alignment = -1;
name = T;
},
{
alignment = -1;
name = caron;
transform = "{1, 0, 0, 1, 123, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 500;
}
);
leftKerningGroup = T;
note = Tcaron;
rightKerningGroup = T;
unicode = 0164;
},
{
glyphname = Tcommaaccent;
layers = (
{
components = (
{
alignment = -1;
name = T;
},
{
alignment = -1;
name = commaaccentcomb;
transform = "{1, 0, 0, 1, 311, 0}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 500;
}
);
leftKerningGroup = T;
note = uni021A;
rightKerningGroup = T;
unicode = 021A;
},
{
glyphname = U;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"506 713 LINE",
"413 679 LINE",
"413 368 LINE SMOOTH",
"413 331.333 OFFCURVE",
"407.167 287.5 OFFCURVE",
"395.5 236.5 CURVE SMOOTH",
"372.167 134.5 OFFCURVE",
"323 45 OFFCURVE",
"247 45 CURVE SMOOTH",
"178.971 45 OFFCURVE",
"176 107.34 OFFCURVE",
"176 174 CURVE SMOOTH",
"176 713 LINE",
"83 680 LINE",
"83 134 LINE SMOOTH",
"83 51.333 OFFCURVE",
"125 -9 OFFCURVE",
"205 -9 CURVE SMOOTH",
"314.333 -9 OFFCURVE",
"383.667 77.667 OFFCURVE",
"413 187 CURVE",
"413 117 LINE SMOOTH",
"413 38.333 OFFCURVE",
"454.333 -5 OFFCURVE",
"513 -5 CURVE SMOOTH",
"565 -5 OFFCURVE",
"607 28 OFFCURVE",
"623 68 CURVE",
"610 81 LINE",
"596.667 61 OFFCURVE",
"571.333 45 OFFCURVE",
"550 45 CURVE SMOOTH",
"522 45 OFFCURVE",
"506 69.667 OFFCURVE",
"506 107 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */\01233 32 22 21 14 7 6 7 0 72 3 1 0 0 1 91 2 1 1 1 46 1 76 40 37 37 34 4 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 632;
}
);
leftKerningGroup = U;
note = U;
rightKerningGroup = U;
unicode = 0055;
},
{
glyphname = Uacute;
layers = (
{
components = (
{
alignment = -1;
name = U;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 229, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 632;
}
);
leftKerningGroup = U;
note = Uacute;
rightKerningGroup = U;
unicode = 00DA;
},
{
glyphname = Ubreve;
layers = (
{
components = (
{
alignment = -1;
name = U;
},
{
alignment = -1;
name = breve;
transform = "{1, 0, 0, 1, 212, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 632;
}
);
leftKerningGroup = U;
note = Ubreve;
rightKerningGroup = U;
unicode = 016C;
},
{
glyphname = Ucircumflex;
layers = (
{
components = (
{
alignment = -1;
name = U;
},
{
alignment = -1;
name = circumflex;
transform = "{1, 0, 0, 1, 178, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 632;
}
);
leftKerningGroup = U;
note = Ucircumflex;
rightKerningGroup = U;
unicode = 00DB;
},
{
glyphname = Udieresis;
layers = (
{
components = (
{
alignment = -1;
name = U;
},
{
alignment = -1;
name = dieresis;
transform = "{1, 0, 0, 1, 171, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 632;
}
);
leftKerningGroup = U;
note = Udieresis;
rightKerningGroup = U;
unicode = 00DC;
},
{
glyphname = Ugrave;
layers = (
{
components = (
{
alignment = -1;
name = U;
},
{
alignment = -1;
name = grave;
transform = "{1, 0, 0, 1, 228, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 632;
}
);
leftKerningGroup = U;
note = Ugrave;
rightKerningGroup = U;
unicode = 00D9;
},
{
glyphname = Uhungarumlaut;
layers = (
{
components = (
{
alignment = -1;
name = U;
},
{
alignment = -1;
name = hungarumlaut;
transform = "{1, 0, 0, 1, 158, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 632;
}
);
leftKerningGroup = U;
note = Uhungarumlaut;
rightKerningGroup = U;
unicode = 0170;
},
{
glyphname = Umacron;
layers = (
{
components = (
{
alignment = -1;
name = U;
},
{
alignment = -1;
name = macron;
transform = "{1, 0, 0, 1, 195, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 632;
}
);
leftKerningGroup = U;
note = Umacron;
rightKerningGroup = U;
unicode = 016A;
},
{
glyphname = Uogonek;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"519.333 -139 OFFCURVE",
"504 -120.333 OFFCURVE",
"504 -91 CURVE SMOOTH",
"504 -60.333 OFFCURVE",
"520.667 -25.667 OFFCURVE",
"550 1 CURVE",
"584.667 11.667 OFFCURVE",
"611 38.667 OFFCURVE",
"623 68 CURVE",
"610 81 LINE",
"596.667 61 OFFCURVE",
"571.333 45 OFFCURVE",
"550 45 CURVE SMOOTH",
"522 45 OFFCURVE",
"506 69.667 OFFCURVE",
"506 107 CURVE SMOOTH",
"506 713 LINE",
"413 679 LINE",
"413 368 LINE SMOOTH",
"413 331.333 OFFCURVE",
"407.167 287.5 OFFCURVE",
"395.5 236.5 CURVE SMOOTH",
"372.167 134.5 OFFCURVE",
"323 45 OFFCURVE",
"247 45 CURVE SMOOTH",
"178.971 45 OFFCURVE",
"176 107.34 OFFCURVE",
"176 174 CURVE SMOOTH",
"176 713 LINE",
"83 680 LINE",
"83 134 LINE SMOOTH",
"83 51.333 OFFCURVE",
"125 -9 OFFCURVE",
"205 -9 CURVE SMOOTH",
"314.333 -9 OFFCURVE",
"383.667 77.667 OFFCURVE",
"413 187 CURVE",
"413 117 LINE SMOOTH",
"413 39.667 OFFCURVE",
"452.667 -2.333 OFFCURVE",
"510 -5 CURVE",
"465.333 -41 OFFCURVE",
"443 -80 OFFCURVE",
"443 -122 CURVE SMOOTH",
"443 -171.333 OFFCURVE",
"482 -197 OFFCURVE",
"522 -197 CURVE SMOOTH",
"559.333 -197 OFFCURVE",
"592 -169.333 OFFCURVE",
"616 -128 CURVE",
"599 -113 LINE",
"585.667 -130.333 OFFCURVE",
"569.333 -139 OFFCURVE",
"550 -139 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01245 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 17 values pushed */\0122 1 2 5 1 1 74 41 40 33 32 22 21 14 7 3 72 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 17 values pushed */\0122 1 2 5 2 1 74 41 40 33 32 22 21 14 7 3 72 \012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01245 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 21 values pushed */\0126 1 5 0 0 5 0 96 4 1 3 3 1 91 2 1 1 1 46 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 25 values pushed */\0126 1 5 0 0 5 0 96 0 1 1 46 75 4 1 3 3 2 91 0 2 2 46 2 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\0120 0 0 50 0 49 40 40 37 20 36 7 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 632;
}
);
leftKerningGroup = U;
note = Uogonek;
rightKerningGroup = U;
unicode = 0172;
},
{
glyphname = Uring;
layers = (
{
components = (
{
alignment = -1;
name = U;
},
{
alignment = -1;
name = ring;
transform = "{1, 0, 0, 1, 219, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 632;
}
);
leftKerningGroup = U;
note = Uring;
rightKerningGroup = U;
unicode = 016E;
},
{
glyphname = Utilde;
layers = (
{
components = (
{
alignment = -1;
name = U;
},
{
alignment = -1;
name = tilde;
transform = "{1, 0, 0, 1, 205, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 632;
}
);
leftKerningGroup = U;
note = Utilde;
rightKerningGroup = U;
unicode = 0168;
},
{
glyphname = V;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"394 689 LINE",
"454 643.667 OFFCURVE",
"484 591 OFFCURVE",
"484 531 CURVE SMOOTH",
"484 493.667 OFFCURVE",
"471 462.667 OFFCURVE",
"443 392 CURVE",
"323 141 LINE",
"92 712 LINE",
"1 665 LINE",
"294 -32 LINE",
"517 451 LINE SMOOTH",
"547.667 516.333 OFFCURVE",
"563 572.333 OFFCURVE",
"563 619 CURVE SMOOTH",
"563 677.667 OFFCURVE",
"530.667 741 OFFCURVE",
"476 777 CURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\01215 5 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 578;
}
);
leftKerningGroup = V;
note = V;
rightKerningGroup = V;
unicode = 0056;
},
{
glyphname = W;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"602 689 LINE",
"658.667 643 OFFCURVE",
"687 590 OFFCURVE",
"687 530 CURVE SMOOTH",
"687 494 OFFCURVE",
"672.667 448 OFFCURVE",
"650 392 CURVE SMOOTH",
"548 161 LINE",
"369 667 LINE",
"272 631 LINE",
"363 387 LINE",
"285 180 LINE",
"94 712 LINE",
"-1 677 LINE",
"258 -24 LINE",
"386 323 LINE",
"515 -24 LINE",
"723 453 LINE SMOOTH",
"747 507.667 OFFCURVE",
"764 568.333 OFFCURVE",
"764 619 CURVE SMOOTH",
"764 677.667 OFFCURVE",
"734.667 739.667 OFFCURVE",
"684 777 CURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\01222 6 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 789;
}
);
leftKerningGroup = W;
note = W;
rightKerningGroup = W;
unicode = 0057;
},
{
glyphname = Wacute;
layers = (
{
components = (
{
alignment = -1;
name = W;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 306, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 789;
}
);
leftKerningGroup = W;
note = Wacute;
rightKerningGroup = W;
unicode = 1E82;
},
{
glyphname = Wcircumflex;
layers = (
{
components = (
{
alignment = -1;
name = W;
},
{
alignment = -1;
name = circumflex;
transform = "{1, 0, 0, 1, 256, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 789;
}
);
leftKerningGroup = W;
note = Wcircumflex;
rightKerningGroup = W;
unicode = 0174;
},
{
glyphname = Wdieresis;
layers = (
{
components = (
{
alignment = -1;
name = W;
},
{
alignment = -1;
name = dieresis;
transform = "{1, 0, 0, 1, 248, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 789;
}
);
leftKerningGroup = W;
note = Wdieresis;
rightKerningGroup = W;
unicode = 1E84;
},
{
glyphname = Wgrave;
layers = (
{
components = (
{
alignment = -1;
name = W;
},
{
alignment = -1;
name = grave;
transform = "{1, 0, 0, 1, 305, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 789;
}
);
leftKerningGroup = W;
note = Wgrave;
rightKerningGroup = W;
unicode = 1E80;
},
{
glyphname = X;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"474 -21 LINE",
"564 13 LINE",
"316 389 LINE",
"373.333 521 OFFCURVE",
"425.667 594 OFFCURVE",
"507 594 CURVE",
"517 593 LINE",
"546 714 LINE",
"506 714 OFFCURVE",
"470.833 701.167 OFFCURVE",
"440.5 675.5 CURVE SMOOTH",
"379.833 624.167 OFFCURVE",
"340.333 547 OFFCURVE",
"291 427 CURVE",
"105 710 LINE",
"15 675 LINE",
"248 321 LINE",
"185.333 177 OFFCURVE",
"133 98 OFFCURVE",
"49 98 CURVE SMOOTH",
"47.667 98 OFFCURVE",
"42.667 98.667 OFFCURVE",
"40 100 CURVE",
"11 -21 LINE",
"52.333 -21 OFFCURVE",
"88.5 -7.167 OFFCURVE",
"119.5 20.5 CURVE SMOOTH",
"181.5 75.833 OFFCURVE",
"220 154.667 OFFCURVE",
"272 284 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */\01214 13 2 3 2 24 15 12 1 4 1 3 25 1 0 1 3 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01242 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 21 values pushed */\0120 3 3 2 91 0 2 2 42 75 0 1 1 0 91 0 0 0 43 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 19 values pushed */\0120 2 0 3 1 2 3 99 0 1 1 0 91 0 0 0 43 0 76 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 7 values pushed */\01218 24 35 20 4 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 573;
}
);
leftKerningGroup = X;
note = X;
rightKerningGroup = X;
unicode = 0058;
},
{
glyphname = Y;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"443 180 LINE",
"443 -63 LINE SMOOTH",
"443 -116.804 OFFCURVE",
"411.243 -178 OFFCURVE",
"344 -178 CURVE SMOOTH",
"298.667 -178 OFFCURVE",
"255 -138.667 OFFCURVE",
"235 -100 CURVE",
"154 -168 LINE",
"196 -204.667 OFFCURVE",
"246.333 -223 OFFCURVE",
"305 -223 CURVE SMOOTH",
"351 -223 OFFCURVE",
"391.5 -211.667 OFFCURVE",
"426.5 -189 CURVE SMOOTH",
"496.5 -143.667 OFFCURVE",
"535 -63.333 OFFCURVE",
"535 26 CURVE SMOOTH",
"535 713 LINE",
"443 679 LINE",
"443 373 LINE SMOOTH",
"443 335.667 OFFCURVE",
"437.333 292 OFFCURVE",
"426 242 CURVE SMOOTH",
"403.333 142 OFFCURVE",
"354 54 OFFCURVE",
"278 54 CURVE SMOOTH",
"219.333 54 OFFCURVE",
"208 110.667 OFFCURVE",
"208 184 CURVE SMOOTH",
"208 582 LINE SMOOTH",
"208 646 OFFCURVE",
"166.333 704 OFFCURVE",
"97 704 CURVE SMOOTH",
"58.333 704 OFFCURVE",
"13.333 669.667 OFFCURVE",
"-4 631 CURVE",
"10 619 LINE",
"22 636.333 OFFCURVE",
"49 652 OFFCURVE",
"69 652 CURVE SMOOTH",
"101 652 OFFCURVE",
"115 626.667 OFFCURVE",
"115 592 CURVE SMOOTH",
"115 145 LINE SMOOTH",
"115 62.333 OFFCURVE",
"157.333 0 OFFCURVE",
"236 0 CURVE SMOOTH",
"342.667 0 OFFCURVE",
"408 74.667 OFFCURVE",
"440 180 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */\01228 1 1 2 45 13 12 3 3 1 37 36 2 5 0 3 74 29 1 2 72 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01222 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 28 values pushed */\0120 5 0 4 5 4 95 0 1 1 2 91 0 2 2 42 75 0 3 3 0 91 0 0 0 46 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 26 values pushed */\0120 2 0 1 3 2 1 99 0 5 0 4 5 4 95 0 3 3 0 91 0 0 0 46 0 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 9 values pushed */\01236 41 37 37 37 33 6 7 26 \012CALL[ ]	/* CallFunction */";
};
width = 628;
}
);
leftKerningGroup = Y;
note = Y;
rightKerningGroup = Y;
unicode = 0059;
},
{
glyphname = Yacute;
layers = (
{
components = (
{
alignment = -1;
name = Y;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 230, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 628;
}
);
leftKerningGroup = Y;
note = Yacute;
rightKerningGroup = Y;
unicode = 00DD;
},
{
glyphname = Ycircumflex;
layers = (
{
components = (
{
alignment = -1;
name = Y;
},
{
alignment = -1;
name = circumflex;
transform = "{1, 0, 0, 1, 179, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 628;
}
);
leftKerningGroup = Y;
note = Ycircumflex;
rightKerningGroup = Y;
unicode = 0176;
},
{
glyphname = Ydieresis;
layers = (
{
components = (
{
alignment = -1;
name = Y;
},
{
alignment = -1;
name = dieresis;
transform = "{1, 0, 0, 1, 171, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 628;
}
);
leftKerningGroup = Y;
note = Ydieresis;
rightKerningGroup = Y;
unicode = 0178;
},
{
glyphname = Ygrave;
layers = (
{
components = (
{
alignment = -1;
name = Y;
},
{
alignment = -1;
name = grave;
transform = "{1, 0, 0, 1, 229, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 628;
}
);
leftKerningGroup = Y;
note = Ygrave;
rightKerningGroup = Y;
unicode = 1EF2;
},
{
glyphname = Z;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"551 707 LINE",
"532 726 LINE",
"505.333 703.333 OFFCURVE",
"473 699 OFFCURVE",
"409 699 CURVE SMOOTH",
"116 699 LINE",
"26 547 LINE",
"47 531 LINE",
"64.333 553 OFFCURVE",
"81.5 569 OFFCURVE",
"98.5 579 CURVE SMOOTH",
"132.5 599 OFFCURVE",
"175 603 OFFCURVE",
"275 603 CURVE SMOOTH",
"416 603 LINE",
"20 14 LINE",
"44 -8 LINE",
"81.333 16 OFFCURVE",
"140 31 OFFCURVE",
"184 31 CURVE SMOOTH",
"244 31 OFFCURVE",
"285 24 OFFCURVE",
"369 8 CURVE SMOOTH",
"382.333 5.333 OFFCURVE",
"439.333 -7 OFFCURVE",
"482 -11 CURVE",
"555 144 LINE",
"539 156 LINE",
"508.333 118.667 OFFCURVE",
"466 92 OFFCURVE",
"422 92 CURVE SMOOTH",
"394.667 92 OFFCURVE",
"365.667 94.333 OFFCURVE",
"335 99 CURVE SMOOTH",
"331 99.667 OFFCURVE",
"319.833 101 OFFCURVE",
"301.5 103 CURVE SMOOTH",
"283.167 105 OFFCURVE",
"262.667 106 OFFCURVE",
"240 106 CURVE SMOOTH",
"198 106 OFFCURVE",
"160 94 OFFCURVE",
"126 70 CURVE",
"123 73 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */\01231 30 13 12 4 0 3 1 1 2 1 2 74 36 1 4 72 23 14 2 2 71 0 1 0 2 0 1 2 112 0 4 0 3 0 4 3 99 0 0 1 2 0 87 0 0 0 2 91 0 2 0 2 79 37 36 41 35 35 5 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 578;
}
);
leftKerningGroup = Z;
note = Z;
rightKerningGroup = Z;
unicode = 005A;
},
{
glyphname = Zacute;
layers = (
{
components = (
{
alignment = -1;
name = Z;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 249, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 578;
}
);
leftKerningGroup = Z;
note = Zacute;
rightKerningGroup = Z;
unicode = 0179;
},
{
glyphname = Zcaron;
layers = (
{
components = (
{
alignment = -1;
name = Z;
},
{
alignment = -1;
name = caron;
transform = "{1, 0, 0, 1, 198, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 578;
}
);
leftKerningGroup = Z;
note = Zcaron;
rightKerningGroup = Z;
unicode = 017D;
},
{
glyphname = Zdotaccent;
layers = (
{
components = (
{
alignment = -1;
name = Z;
},
{
alignment = -1;
name = dotaccent;
transform = "{1, 0, 0, 1, 277, 329}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 578;
}
);
leftKerningGroup = Z;
note = Zdotaccent;
rightKerningGroup = Z;
unicode = 017B;
},
{
glyphname = a;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"264.333 500 OFFCURVE",
"219.833 486.333 OFFCURVE",
"179.5 459 CURVE SMOOTH",
"98.833 404.333 OFFCURVE",
"49 307 OFFCURVE",
"49 203 CURVE SMOOTH",
"49 72.333 OFFCURVE",
"107.667 -12 OFFCURVE",
"221 -12 CURVE SMOOTH",
"283.667 -12 OFFCURVE",
"344.667 41.333 OFFCURVE",
"378 112 CURVE",
"380 112 LINE",
"380 41.333 OFFCURVE",
"406.667 -5 OFFCURVE",
"464 -5 CURVE SMOOTH",
"504 -5 OFFCURVE",
"550 30.667 OFFCURVE",
"566 76 CURVE",
"551 92 LINE",
"535 65.333 OFFCURVE",
"517.333 52 OFFCURVE",
"498 52 CURVE SMOOTH",
"479.333 52 OFFCURVE",
"470 71.667 OFFCURVE",
"470 89 CURVE SMOOTH",
"470 352 LINE",
"382 315 LINE",
"382 270 LINE SMOOTH",
"382 166 OFFCURVE",
"347.333 60 OFFCURVE",
"238 60 CURVE SMOOTH",
"160.667 60 OFFCURVE",
"126 132.667 OFFCURVE",
"126 238 CURVE SMOOTH",
"126 274.667 OFFCURVE",
"132.667 308 OFFCURVE",
"146 338 CURVE SMOOTH",
"172.667 398 OFFCURVE",
"225 436 OFFCURVE",
"293 436 CURVE SMOOTH",
"335.667 436 OFFCURVE",
"375.667 406.667 OFFCURVE",
"397 376 CURVE",
"469 415 LINE",
"442.333 472.333 OFFCURVE",
"378.333 500 OFFCURVE",
"313 500 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */\01231 25 24 18 17 3 2 7 1 0 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 24 values pushed */\0120 0 0 5 91 6 1 5 5 45 75 2 1 1 1 3 91 4 1 3 3 46 3 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01234 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 34 values pushed */\0120 0 0 5 91 6 1 5 5 45 75 0 1 1 3 91 4 1 3 3 46 75 0 2 2 3 91 4 1 3 3 46 3 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01242 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 32 values pushed */\0120 0 0 5 91 6 1 5 5 45 75 0 2 2 3 91 0 3 3 46 75 0 1 1 4 91 0 4 4 43 4 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 30 values pushed */\0126 1 5 0 0 1 5 0 99 0 2 2 3 91 0 3 3 46 75 0 1 1 4 91 0 4 4 43 4 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\0120 0 0 42 0 41 37 36 39 37 37 7 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 575;
}
);
leftKerningGroup = a;
note = a;
rightKerningGroup = a;
unicode = 0061;
},
{
glyphname = aacute;
layers = (
{
components = (
{
alignment = -1;
name = a;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 246, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 575;
}
);
leftKerningGroup = a;
note = aacute;
rightKerningGroup = a;
unicode = 00E1;
},
{
glyphname = abreve;
layers = (
{
components = (
{
alignment = -1;
name = a;
},
{
alignment = -1;
name = breve;
transform = "{1, 0, 0, 1, 229, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 575;
}
);
leftKerningGroup = a;
note = abreve;
rightKerningGroup = a;
unicode = 0103;
},
{
glyphname = acircumflex;
layers = (
{
components = (
{
alignment = -1;
name = a;
},
{
alignment = -1;
name = circumflex;
transform = "{1, 0, 0, 1, 195, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 575;
}
);
leftKerningGroup = a;
note = acircumflex;
rightKerningGroup = a;
unicode = 00E2;
},
{
glyphname = adieresis;
layers = (
{
components = (
{
alignment = -1;
name = a;
},
{
alignment = -1;
name = dieresis;
transform = "{1, 0, 0, 1, 187, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 575;
}
);
leftKerningGroup = a;
note = adieresis;
rightKerningGroup = a;
unicode = 00E4;
},
{
glyphname = agrave;
layers = (
{
components = (
{
alignment = -1;
name = a;
},
{
alignment = -1;
name = grave;
transform = "{1, 0, 0, 1, 244, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 575;
}
);
leftKerningGroup = a;
note = agrave;
rightKerningGroup = a;
unicode = 00E0;
},
{
glyphname = amacron;
layers = (
{
components = (
{
alignment = -1;
name = a;
},
{
alignment = -1;
name = macron;
transform = "{1, 0, 0, 1, 211, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 575;
}
);
leftKerningGroup = a;
note = amacron;
rightKerningGroup = a;
unicode = 0101;
},
{
glyphname = aogonek;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"465.333 -137 OFFCURVE",
"450 -118.333 OFFCURVE",
"450 -89 CURVE SMOOTH",
"450 -59.667 OFFCURVE",
"467.333 -24.333 OFFCURVE",
"494 1 CURVE",
"526 13 OFFCURVE",
"554 42.667 OFFCURVE",
"566 76 CURVE",
"551 92 LINE",
"535 65.333 OFFCURVE",
"517.333 52 OFFCURVE",
"498 52 CURVE SMOOTH",
"479.333 52 OFFCURVE",
"470 71.667 OFFCURVE",
"470 89 CURVE SMOOTH",
"470 352 LINE",
"382 315 LINE",
"382 270 LINE SMOOTH",
"382 166 OFFCURVE",
"347.333 60 OFFCURVE",
"238 60 CURVE SMOOTH",
"160.667 60 OFFCURVE",
"126 132.667 OFFCURVE",
"126 238 CURVE SMOOTH",
"126 274.667 OFFCURVE",
"132.667 308 OFFCURVE",
"146 338 CURVE SMOOTH",
"172.667 398 OFFCURVE",
"225 436 OFFCURVE",
"293 436 CURVE SMOOTH",
"335.667 436 OFFCURVE",
"375.667 406.667 OFFCURVE",
"397 376 CURVE",
"469 415 LINE",
"442.333 472.333 OFFCURVE",
"378.333 500 OFFCURVE",
"313 500 CURVE SMOOTH",
"264.333 500 OFFCURVE",
"219.833 486.333 OFFCURVE",
"179.5 459 CURVE SMOOTH",
"98.833 404.333 OFFCURVE",
"49 307 OFFCURVE",
"49 203 CURVE SMOOTH",
"49 72.333 OFFCURVE",
"107.667 -12 OFFCURVE",
"221 -12 CURVE SMOOTH",
"283.667 -12 OFFCURVE",
"344.667 41.333 OFFCURVE",
"378 112 CURVE",
"380 112 LINE",
"380 46.667 OFFCURVE",
"403.333 1.333 OFFCURVE",
"454 -4 CURVE",
"410.667 -40.667 OFFCURVE",
"389 -79.333 OFFCURVE",
"389 -120 CURVE SMOOTH",
"389 -169.333 OFFCURVE",
"428 -195 OFFCURVE",
"468 -195 CURVE SMOOTH",
"505.333 -195 OFFCURVE",
"538 -167.333 OFFCURVE",
"562 -126 CURVE",
"545 -111 LINE",
"531.667 -128.333 OFFCURVE",
"515.333 -137 OFFCURVE",
"496 -137 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 21 values pushed */\01250 49 43 42 28 27 13 7 4 3 10 1 1 4 2 1 2 6 1 3 74 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 21 values pushed */\01250 49 43 42 28 27 13 7 4 3 10 1 1 5 2 1 2 6 1 3 74 \012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 30 values pushed */\0127 1 6 0 0 6 0 96 0 3 3 2 91 0 2 2 45 75 5 1 4 4 1 91 0 1 1 43 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01242 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 37 values pushed */\0120 5 4 1 4 5 1 112 7 1 6 0 0 6 0 96 0 3 3 2 91 0 2 2 45 75 0 4 4 1 91 0 1 1 43 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 35 values pushed */\0120 5 4 1 4 5 1 112 0 2 0 3 4 2 3 99 7 1 6 0 0 6 0 96 0 4 4 1 91 0 1 1 43 1 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 15 values pushed */\0120 0 0 59 0 58 39 37 37 37 42 36 8 7 26 \012CALL[ ]	/* CallFunction */";
};
width = 575;
}
);
leftKerningGroup = a;
note = aogonek;
rightKerningGroup = a;
unicode = 0105;
},
{
glyphname = aring;
layers = (
{
components = (
{
alignment = -1;
name = a;
},
{
alignment = -1;
name = ring;
transform = "{1, 0, 0, 1, 236, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 575;
}
);
leftKerningGroup = a;
note = aring;
rightKerningGroup = a;
unicode = 00E5;
},
{
glyphname = atilde;
layers = (
{
components = (
{
alignment = -1;
name = a;
},
{
alignment = -1;
name = tilde;
transform = "{1, 0, 0, 1, 221, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 575;
}
);
leftKerningGroup = a;
note = atilde;
rightKerningGroup = a;
unicode = 00E3;
},
{
glyphname = ae;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"807 140 LINE",
"749.667 92 OFFCURVE",
"693 53 OFFCURVE",
"637 53 CURVE SMOOTH",
"593 53 OFFCURVE",
"549.667 76 OFFCURVE",
"507 122 CURVE",
"538.333 134.667 OFFCURVE",
"576 156.667 OFFCURVE",
"620 188 CURVE SMOOTH",
"708 250.667 OFFCURVE",
"783 332.667 OFFCURVE",
"783 394 CURVE SMOOTH",
"783 470 OFFCURVE",
"730.667 509 OFFCURVE",
"660 509 CURVE SMOOTH",
"590.667 509 OFFCURVE",
"523.333 478.667 OFFCURVE",
"470 428 CURVE",
"424.667 468 OFFCURVE",
"358.333 500 OFFCURVE",
"305 500 CURVE SMOOTH",
"257 500 OFFCURVE",
"213 485.167 OFFCURVE",
"173 455.5 CURVE SMOOTH",
"93 396.167 OFFCURVE",
"44 292 OFFCURVE",
"44 188 CURVE SMOOTH",
"44 151.333 OFFCURVE",
"50.5 117.833 OFFCURVE",
"63.5 87.5 CURVE SMOOTH",
"89.5 26.833 OFFCURVE",
"143.333 -12 OFFCURVE",
"218 -12 CURVE SMOOTH",
"288.667 -12 OFFCURVE",
"351.667 32.333 OFFCURVE",
"385 127 CURVE",
"415.667 44.333 OFFCURVE",
"490.333 -12 OFFCURVE",
"581 -12 CURVE SMOOTH",
"670.333 -12 OFFCURVE",
"760.667 41.333 OFFCURVE",
"822 120 CURVE"
);
},
{
closed = 1;
nodes = (
"456 283.667 OFFCURVE",
"462.667 312.833 OFFCURVE",
"476 342.5 CURVE SMOOTH",
"502.667 401.833 OFFCURVE",
"550.667 446 OFFCURVE",
"608 446 CURVE SMOOTH",
"658.667 446 OFFCURVE",
"685 422.667 OFFCURVE",
"685 372 CURVE SMOOTH",
"685 347.333 OFFCURVE",
"674.333 320 OFFCURVE",
"653 290 CURVE SMOOTH",
"610.333 230 OFFCURVE",
"541.667 174.333 OFFCURVE",
"487 149 CURVE",
"466.333 182.333 OFFCURVE",
"456 217.667 OFFCURVE",
"456 255 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"217.333 60 OFFCURVE",
"193.667 69.833 OFFCURVE",
"175 89.5 CURVE SMOOTH",
"137.667 128.833 OFFCURVE",
"123 190 OFFCURVE",
"123 238 CURVE SMOOTH",
"123 274.667 OFFCURVE",
"129.667 308 OFFCURVE",
"143 338 CURVE SMOOTH",
"169.667 398 OFFCURVE",
"221.333 436 OFFCURVE",
"288 436 CURVE SMOOTH",
"329.333 436 OFFCURVE",
"373 403 OFFCURVE",
"373 343 CURVE SMOOTH",
"373 154.333 OFFCURVE",
"330.667 60 OFFCURVE",
"246 60 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01224 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 10 values pushed */\01237 35 30 20 6 5 4 5 1 74 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01234 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 10 values pushed */\01237 35 30 20 6 5 4 6 1 74 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 10 values pushed */\01237 35 30 20 6 5 7 6 1 74 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01224 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 26 values pushed */\0126 1 5 5 2 91 3 1 2 2 45 75 8 7 2 4 4 0 91 1 1 0 0 43 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 36 values pushed */\0120 5 5 2 91 3 1 2 2 45 75 0 6 6 2 91 3 1 2 2 45 75 8 7 2 4 4 0 91 1 1 0 0 43 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01234 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 34 values pushed */\0120 5 5 3 91 0 3 3 45 75 0 6 6 2 91 0 2 2 45 75 8 7 2 4 4 0 91 1 1 0 0 43 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01242 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 44 values pushed */\0120 5 5 3 91 0 3 3 45 75 0 6 6 2 91 0 2 2 45 75 8 1 7 7 0 91 1 1 0 0 43 75 0 4 4 0 91 1 1 0 0 43 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 42 values pushed */\0120 2 0 6 7 2 6 99 0 5 5 3 91 0 3 3 45 75 8 1 7 7 0 91 1 1 0 0 43 75 0 4 4 0 91 1 1 0 0 43 0 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 16 values pushed */\01249 49 49 61 49 60 39 42 39 36 38 36 34 9 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 847;
}
);
leftKerningGroup = a;
note = ae;
rightKerningGroup = ae;
unicode = 00E6;
},
{
glyphname = aeacute;
layers = (
{
components = (
{
alignment = -1;
name = ae;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 331, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 847;
}
);
leftKerningGroup = a;
note = aeacute;
rightKerningGroup = ae;
unicode = 01FD;
},
{
glyphname = b;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"498 291.333 OFFCURVE",
"490.333 321.5 OFFCURVE",
"475 354.5 CURVE SMOOTH",
"444.333 420.5 OFFCURVE",
"389.333 478.333 OFFCURVE",
"332 497 CURVE",
"243 423 LINE",
"273 423 OFFCURVE",
"301.833 411.667 OFFCURVE",
"329.5 389 CURVE SMOOTH",
"384.833 343.667 OFFCURVE",
"423 265.667 OFFCURVE",
"423 199 CURVE SMOOTH",
"423 139.812 OFFCURVE",
"346.677 43 OFFCURVE",
"281 43 CURVE SMOOTH",
"210.333 43 OFFCURVE",
"170 99 OFFCURVE",
"170 163 CURVE SMOOTH",
"170 924 LINE",
"79 886 LINE",
"79 185 LINE SMOOTH",
"79 70.333 OFFCURVE",
"144.667 -12 OFFCURVE",
"254 -12 CURVE SMOOTH",
"288 -12 OFFCURVE",
"324.167 2.167 OFFCURVE",
"362.5 30.5 CURVE SMOOTH",
"439.167 87.167 OFFCURVE",
"498 182.667 OFFCURVE",
"498 264 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */\01221 8 7 3 2 72 0 2 1 2 114 0 1 1 0 91 0 0 0 43 0 76 22 39 34 3 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 544;
}
);
leftKerningGroup = b;
note = b;
rightKerningGroup = b;
unicode = 0062;
},
{
glyphname = c;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"264 506 OFFCURVE",
"211.667 493.333 OFFCURVE",
"169 468 CURVE SMOOTH",
"83.667 417.333 OFFCURVE",
"41 327 OFFCURVE",
"41 223 CURVE SMOOTH",
"41 176.333 OFFCURVE",
"50.333 135.167 OFFCURVE",
"69 99.5 CURVE SMOOTH",
"106.333 28.167 OFFCURVE",
"174.333 -12 OFFCURVE",
"257 -12 CURVE SMOOTH",
"362.333 -12 OFFCURVE",
"428.667 40 OFFCURVE",
"494 140 CURVE",
"477 156 LINE",
"423.667 94.667 OFFCURVE",
"367 51 OFFCURVE",
"287 51 CURVE SMOOTH",
"253.667 51 OFFCURVE",
"223.667 59.833 OFFCURVE",
"197 77.5 CURVE SMOOTH",
"143.667 112.833 OFFCURVE",
"111 181.667 OFFCURVE",
"111 275 CURVE SMOOTH",
"111 301.667 OFFCURVE",
"117.667 328 OFFCURVE",
"131 354 CURVE SMOOTH",
"157.667 406 OFFCURVE",
"209 443 OFFCURVE",
"273 443 CURVE SMOOTH",
"317 443 OFFCURVE",
"361.667 414.667 OFFCURVE",
"375 368 CURVE",
"457 410 LINE",
"430.333 476.667 OFFCURVE",
"380.667 506 OFFCURVE",
"326 506 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */\01218 17 3 2 4 1 0 1 74 0 0 0 3 91 4 1 3 3 45 75 0 1 1 2 91 0 2 2 43 2 76 0 0 0 29 0 28 37 38 37 5 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 520;
}
);
leftKerningGroup = c;
note = c;
rightKerningGroup = c;
unicode = 0063;
},
{
glyphname = cacute;
layers = (
{
components = (
{
alignment = -1;
name = c;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 183, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 520;
}
);
leftKerningGroup = c;
note = cacute;
rightKerningGroup = c;
unicode = 0107;
},
{
glyphname = ccaron;
layers = (
{
components = (
{
alignment = -1;
name = c;
},
{
alignment = -1;
name = caron;
transform = "{1, 0, 0, 1, 132, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 520;
}
);
leftKerningGroup = c;
note = ccaron;
rightKerningGroup = c;
unicode = 010D;
},
{
glyphname = ccedilla;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"362.333 -12 OFFCURVE",
"428.667 40 OFFCURVE",
"494 140 CURVE",
"477 156 LINE",
"423.667 94.667 OFFCURVE",
"367 51 OFFCURVE",
"287 51 CURVE SMOOTH",
"253.667 51 OFFCURVE",
"223.667 59.833 OFFCURVE",
"197 77.5 CURVE SMOOTH",
"143.667 112.833 OFFCURVE",
"111 181.667 OFFCURVE",
"111 275 CURVE SMOOTH",
"111 301.667 OFFCURVE",
"117.667 328 OFFCURVE",
"131 354 CURVE SMOOTH",
"157.667 406 OFFCURVE",
"209 443 OFFCURVE",
"273 443 CURVE SMOOTH",
"317 443 OFFCURVE",
"361.667 414.667 OFFCURVE",
"375 368 CURVE",
"457 410 LINE",
"430.333 476.667 OFFCURVE",
"380.667 506 OFFCURVE",
"326 506 CURVE SMOOTH",
"264 506 OFFCURVE",
"211.667 493.333 OFFCURVE",
"169 468 CURVE SMOOTH",
"83.667 417.333 OFFCURVE",
"41 327 OFFCURVE",
"41 223 CURVE SMOOTH",
"41 99 OFFCURVE",
"109 10.667 OFFCURVE",
"213 -8 CURVE",
"179 -66 LINE",
"196 -80 LINE",
"206 -73.333 OFFCURVE",
"216.333 -70 OFFCURVE",
"227 -70 CURVE SMOOTH",
"251 -70 OFFCURVE",
"270 -89.333 OFFCURVE",
"270 -116 CURVE SMOOTH",
"270 -141.333 OFFCURVE",
"253.667 -160 OFFCURVE",
"231 -160 CURVE SMOOTH",
"215.667 -160 OFFCURVE",
"203 -153 OFFCURVE",
"193 -139 CURVE",
"174 -150 LINE",
"190 -180.667 OFFCURVE",
"221 -198 OFFCURVE",
"253 -198 CURVE SMOOTH",
"298.333 -198 OFFCURVE",
"340 -165.333 OFFCURVE",
"340 -116 CURVE SMOOTH",
"340 -66.667 OFFCURVE",
"306.667 -36 OFFCURVE",
"264 -36 CURVE SMOOTH",
"248 -36 OFFCURVE",
"231.333 -40.333 OFFCURVE",
"214 -49 CURVE",
"236 -11 LINE",
"240.667 -11.667 OFFCURVE",
"247.667 -12 OFFCURVE",
"257 -12 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 77 values pushed */\01252 51 37 36 4 6 5 26 1 7 6 25 2 2 3 0 24 14 13 3 2 3 4 74 0 0 0 3 2 0 3 99 0 2 0 1 2 1 95 0 5 5 4 91 0 4 4 45 75 0 6 6 7 91 8 1 7 7 43 7 76 0 0 0 55 0 54 38 37 41 36 36 36 35 9 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 520;
}
);
leftKerningGroup = c;
note = ccedilla;
rightKerningGroup = c;
unicode = 00E7;
},
{
glyphname = ccircumflex;
layers = (
{
components = (
{
alignment = -1;
name = c;
},
{
alignment = -1;
name = circumflex;
transform = "{1, 0, 0, 1, 132, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 520;
}
);
leftKerningGroup = c;
note = ccircumflex;
rightKerningGroup = c;
unicode = 0109;
},
{
glyphname = cdotaccent;
layers = (
{
components = (
{
alignment = -1;
name = c;
},
{
alignment = -1;
name = dotaccent;
transform = "{1, 0, 0, 1, 211, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 520;
}
);
leftKerningGroup = c;
note = cdotaccent;
rightKerningGroup = c;
unicode = 010B;
},
{
glyphname = d;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"476 924 LINE",
"382 886 LINE",
"382 482 LINE",
"358.667 498 OFFCURVE",
"331.333 506 OFFCURVE",
"300 506 CURVE SMOOTH",
"250 506 OFFCURVE",
"205.833 490.667 OFFCURVE",
"167.5 460 CURVE SMOOTH",
"90.833 398.667 OFFCURVE",
"48 296 OFFCURVE",
"48 200 CURVE SMOOTH",
"48 78.667 OFFCURVE",
"112 -12 OFFCURVE",
"228 -12 CURVE SMOOTH",
"286.667 -12 OFFCURVE",
"336.333 29 OFFCURVE",
"377 111 CURVE",
"381 111 LINE",
"379.667 25.667 OFFCURVE",
"406.667 -5 OFFCURVE",
"468 -5 CURVE SMOOTH",
"505.333 -5 OFFCURVE",
"549.667 30.667 OFFCURVE",
"571 76 CURVE",
"552 92 LINE",
"542.667 72 OFFCURVE",
"521.667 52 OFFCURVE",
"503 52 CURVE SMOOTH",
"484.333 52 OFFCURVE",
"476 70.333 OFFCURVE",
"476 89 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"328.667 447 OFFCURVE",
"359.333 431 OFFCURVE",
"382 407 CURVE",
"382 270 LINE SMOOTH",
"382 164.667 OFFCURVE",
"352.333 60 OFFCURVE",
"251 60 CURVE SMOOTH",
"223 60 OFFCURVE",
"200 69.833 OFFCURVE",
"182 89.5 CURVE SMOOTH",
"146 128.833 OFFCURVE",
"131 189.667 OFFCURVE",
"131 235 CURVE SMOOTH",
"131 263.667 OFFCURVE",
"136.667 294.5 OFFCURVE",
"148 327.5 CURVE SMOOTH",
"170.667 393.5 OFFCURVE",
"219.333 447 OFFCURVE",
"294 447 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 18 values pushed */\01225 1 5 3 39 13 7 6 4 0 5 2 74 27 26 2 3 72 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 18 values pushed */\01225 1 5 3 39 13 7 6 4 4 5 2 74 27 26 2 3 72 \012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 24 values pushed */\0126 1 5 5 3 91 0 3 3 45 75 4 1 0 0 1 91 2 1 1 1 46 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01234 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 34 values pushed */\0126 1 5 5 3 91 0 3 3 45 75 0 4 4 1 91 2 1 1 1 46 75 0 0 0 1 91 2 1 1 1 46 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 32 values pushed */\0126 1 5 5 3 91 0 3 3 45 75 0 0 0 1 91 0 1 1 46 75 0 4 4 2 91 0 2 2 43 2 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\01228 28 28 42 28 41 42 37 36 37 34 7 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 585;
}
);
leftKerningGroup = c;
note = d;
rightKerningGroup = d;
unicode = 0064;
},
{
glyphname = eth;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"476 739 LINE",
"476 805 LINE",
"319 750 LINE",
"261 801.333 OFFCURVE",
"192 841.333 OFFCURVE",
"112 870 CURVE",
"93 851 LINE",
"153 817 OFFCURVE",
"207 775.667 OFFCURVE",
"255 727 CURVE",
"136 686 LINE",
"136 622 LINE",
"298 678 LINE",
"386 566 OFFCURVE",
"428 432.667 OFFCURVE",
"428 294 CURVE SMOOTH",
"428 250.667 OFFCURVE",
"420.5 209.833 OFFCURVE",
"405.5 171.5 CURVE SMOOTH",
"375.5 94.833 OFFCURVE",
"318.333 44 OFFCURVE",
"245 44 CURVE SMOOTH",
"146.333 44 OFFCURVE",
"92 109 OFFCURVE",
"92 193 CURVE SMOOTH",
"92 225.667 OFFCURVE",
"103 261.167 OFFCURVE",
"125 299.5 CURVE SMOOTH",
"169 376.167 OFFCURVE",
"257.333 437.333 OFFCURVE",
"376 436 CURVE",
"358.667 453.333 OFFCURVE",
"334 473.667 OFFCURVE",
"302 497 CURVE SMOOTH",
"270 521 LINE",
"228.667 517.667 OFFCURVE",
"190 504 OFFCURVE",
"154 480 CURVE SMOOTH",
"82 432 OFFCURVE",
"37 352.333 OFFCURVE",
"37 271 CURVE SMOOTH",
"37 208.333 OFFCURVE",
"47.833 155.5 OFFCURVE",
"69.5 112.5 CURVE SMOOTH",
"112.833 26.5 OFFCURVE",
"187.667 -14 OFFCURVE",
"269 -14 CURVE SMOOTH",
"313.667 -14 OFFCURVE",
"355.333 -0.333 OFFCURVE",
"394 27 CURVE SMOOTH",
"471.333 81.667 OFFCURVE",
"520 177 OFFCURVE",
"520 277 CURVE SMOOTH",
"520 439.667 OFFCURVE",
"469.333 588.667 OFFCURVE",
"368 702 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */\01242 41 40 39 37 36 34 33 32 31 14 11 1 72 0 1 2 1 114 0 2 2 0 91 0 0 0 43 0 76 37 26 37 3 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 586;
}
);
leftKerningGroup = eth;
note = eth;
rightKerningGroup = eth;
unicode = 00F0;
},
{
glyphname = dcaron;
layers = (
{
components = (
{
alignment = -1;
name = d;
},
{
alignment = -1;
name = commaaboverightcomb;
transform = "{1, 0, 0, 1, 612, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 585;
}
);
leftKerningGroup = c;
note = dcaron;
rightKerningGroup = d;
unicode = 010F;
},
{
glyphname = dcroat;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"552 92 LINE",
"542.667 72 OFFCURVE",
"521.667 52 OFFCURVE",
"503 52 CURVE SMOOTH",
"484.333 52 OFFCURVE",
"476 70.333 OFFCURVE",
"476 89 CURVE SMOOTH",
"476 591 LINE",
"537 591 LINE",
"563 656 LINE",
"476 656 LINE",
"476 924 LINE",
"382 886 LINE",
"382 656 LINE",
"282 656 LINE",
"256 591 LINE",
"382 591 LINE",
"382 482 LINE",
"358.667 498 OFFCURVE",
"331.333 506 OFFCURVE",
"300 506 CURVE SMOOTH",
"250 506 OFFCURVE",
"205.833 490.667 OFFCURVE",
"167.5 460 CURVE SMOOTH",
"90.833 398.667 OFFCURVE",
"48 296 OFFCURVE",
"48 200 CURVE SMOOTH",
"48 78.667 OFFCURVE",
"112 -12 OFFCURVE",
"228 -12 CURVE SMOOTH",
"286.667 -12 OFFCURVE",
"336.333 29 OFFCURVE",
"377 111 CURVE",
"381 111 LINE",
"379.667 25.667 OFFCURVE",
"406.667 -5 OFFCURVE",
"468 -5 CURVE SMOOTH",
"505.333 -5 OFFCURVE",
"549.667 30.667 OFFCURVE",
"571 76 CURVE"
);
},
{
closed = 1;
nodes = (
"382 270 LINE SMOOTH",
"382 164.667 OFFCURVE",
"352.333 60 OFFCURVE",
"251 60 CURVE SMOOTH",
"223 60 OFFCURVE",
"200 69.833 OFFCURVE",
"182 89.5 CURVE SMOOTH",
"146 128.833 OFFCURVE",
"131 189.667 OFFCURVE",
"131 235 CURVE SMOOTH",
"131 263.667 OFFCURVE",
"136.667 294.5 OFFCURVE",
"148 327.5 CURVE SMOOTH",
"170.667 393.5 OFFCURVE",
"219.333 447 OFFCURVE",
"294 447 CURVE SMOOTH",
"328.667 447 OFFCURVE",
"359.333 431 OFFCURVE",
"382 407 CURVE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 17 values pushed */\01218 1 8 2 36 35 6 3 7 8 2 74 24 23 2 4 72 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 17 values pushed */\01218 1 8 2 36 35 6 3 9 8 2 74 24 23 2 4 72 \012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 33 values pushed */\0125 1 4 6 1 3 2 4 3 97 0 8 8 2 91 0 2 2 45 75 9 1 7 7 0 91 1 1 0 0 46 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01234 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 43 values pushed */\0125 1 4 6 1 3 2 4 3 97 0 8 8 2 91 0 2 2 45 75 0 9 9 0 91 1 1 0 0 46 75 0 7 7 0 91 1 1 0 0 46 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 41 values pushed */\0125 1 4 6 1 3 2 4 3 97 0 8 8 2 91 0 2 2 45 75 0 7 7 0 91 0 0 0 46 75 0 9 9 1 91 0 1 1 43 1 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\01248 46 37 35 17 19 17 18 37 36 34 10 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 585;
}
);
leftKerningGroup = c;
note = dcroat;
rightKerningGroup = d;
unicode = 0111;
},
{
glyphname = e;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"281.333 509 OFFCURVE",
"235 494.5 OFFCURVE",
"191 465.5 CURVE SMOOTH",
"103 407.5 OFFCURVE",
"45 306.667 OFFCURVE",
"45 208 CURVE SMOOTH",
"45 168.667 OFFCURVE",
"54 132.167 OFFCURVE",
"72 98.5 CURVE SMOOTH",
"108 31.167 OFFCURVE",
"174.667 -12 OFFCURVE",
"256 -12 CURVE SMOOTH",
"362.667 -12 OFFCURVE",
"429.667 34 OFFCURVE",
"495 118 CURVE",
"483 139 LINE",
"441.667 87 OFFCURVE",
"373 51 OFFCURVE",
"309 51 CURVE SMOOTH",
"251.667 51 OFFCURVE",
"210.333 68.667 OFFCURVE",
"177 122 CURVE",
"208.333 134.667 OFFCURVE",
"246.167 156.667 OFFCURVE",
"290.5 188 CURVE SMOOTH",
"379.167 250.667 OFFCURVE",
"456 332.667 OFFCURVE",
"456 394 CURVE SMOOTH",
"456 470 OFFCURVE",
"402 509 OFFCURVE",
"330 509 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"334.667 446 OFFCURVE",
"363 421.333 OFFCURVE",
"363 372 CURVE SMOOTH",
"363 347.333 OFFCURVE",
"351.667 320 OFFCURVE",
"329 290 CURVE SMOOTH",
"283.667 230 OFFCURVE",
"211 174.333 OFFCURVE",
"155 149 CURVE",
"135.667 178.333 OFFCURVE",
"126 213.667 OFFCURVE",
"126 255 CURVE SMOOTH",
"126 286.333 OFFCURVE",
"132.5 316.667 OFFCURVE",
"145.5 346 CURVE SMOOTH",
"171.5 404.667 OFFCURVE",
"219.333 446 OFFCURVE",
"278 446 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */\01230 13 12 6 4 0 3 1 74 5 1 3 3 2 91 4 1 2 2 45 75 0 0 0 1 91 0 1 1 43 1 76 25 25 0 0 25 36 25 35 0 24 0 23 37 40 6 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 522;
}
);
leftKerningGroup = c;
note = e;
rightKerningGroup = ae;
unicode = 0065;
},
{
glyphname = eacute;
layers = (
{
components = (
{
alignment = -1;
name = e;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 192, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 522;
}
);
leftKerningGroup = c;
note = eacute;
rightKerningGroup = ae;
unicode = 00E9;
},
{
glyphname = ebreve;
layers = (
{
components = (
{
alignment = -1;
name = e;
},
{
alignment = -1;
name = breve;
transform = "{1, 0, 0, 1, 175, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 522;
}
);
leftKerningGroup = c;
note = ebreve;
rightKerningGroup = ae;
unicode = 0115;
},
{
glyphname = ecaron;
layers = (
{
components = (
{
alignment = -1;
name = e;
},
{
alignment = -1;
name = caron;
transform = "{1, 0, 0, 1, 141, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 522;
}
);
leftKerningGroup = c;
note = ecaron;
rightKerningGroup = ae;
unicode = 011B;
},
{
glyphname = ecircumflex;
layers = (
{
components = (
{
alignment = -1;
name = e;
},
{
alignment = -1;
name = circumflex;
transform = "{1, 0, 0, 1, 141, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 522;
}
);
leftKerningGroup = c;
note = ecircumflex;
rightKerningGroup = ae;
unicode = 00EA;
},
{
glyphname = edieresis;
layers = (
{
components = (
{
alignment = -1;
name = e;
},
{
alignment = -1;
name = dieresis;
transform = "{1, 0, 0, 1, 133, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 522;
}
);
leftKerningGroup = c;
note = edieresis;
rightKerningGroup = ae;
unicode = 00EB;
},
{
glyphname = edotaccent;
layers = (
{
components = (
{
alignment = -1;
name = e;
},
{
alignment = -1;
name = dotaccent;
transform = "{1, 0, 0, 1, 220, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 522;
}
);
leftKerningGroup = c;
note = edotaccent;
rightKerningGroup = ae;
unicode = 0117;
},
{
glyphname = egrave;
layers = (
{
components = (
{
alignment = -1;
name = e;
},
{
alignment = -1;
name = grave;
transform = "{1, 0, 0, 1, 191, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 522;
}
);
leftKerningGroup = c;
note = egrave;
rightKerningGroup = ae;
unicode = 00E8;
},
{
glyphname = emacron;
layers = (
{
components = (
{
alignment = -1;
name = e;
},
{
alignment = -1;
name = macron;
transform = "{1, 0, 0, 1, 158, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 522;
}
);
leftKerningGroup = c;
note = emacron;
rightKerningGroup = ae;
unicode = 0113;
},
{
glyphname = eogonek;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"483 139 LINE",
"441.667 87 OFFCURVE",
"373 51 OFFCURVE",
"309 51 CURVE SMOOTH",
"251.667 51 OFFCURVE",
"210.333 68.667 OFFCURVE",
"177 122 CURVE",
"208.333 134.667 OFFCURVE",
"246.167 156.667 OFFCURVE",
"290.5 188 CURVE SMOOTH",
"379.167 250.667 OFFCURVE",
"456 332.667 OFFCURVE",
"456 394 CURVE SMOOTH",
"456 470 OFFCURVE",
"402 509 OFFCURVE",
"330 509 CURVE SMOOTH",
"281.333 509 OFFCURVE",
"235 494.5 OFFCURVE",
"191 465.5 CURVE SMOOTH",
"103 407.5 OFFCURVE",
"45 306.667 OFFCURVE",
"45 208 CURVE SMOOTH",
"45 168.667 OFFCURVE",
"54 132.167 OFFCURVE",
"72 98.5 CURVE SMOOTH",
"108 31.167 OFFCURVE",
"174.667 -12 OFFCURVE",
"256 -12 CURVE SMOOTH",
"279.333 -12 OFFCURVE",
"302.333 -9.333 OFFCURVE",
"325 -4 CURVE",
"281.667 -40.667 OFFCURVE",
"260 -79.333 OFFCURVE",
"260 -120 CURVE SMOOTH",
"260 -169.333 OFFCURVE",
"299 -195 OFFCURVE",
"339 -195 CURVE SMOOTH",
"376.333 -195 OFFCURVE",
"409 -167.333 OFFCURVE",
"433 -126 CURVE",
"416 -111 LINE",
"402.667 -128.333 OFFCURVE",
"386.333 -137 OFFCURVE",
"367 -137 CURVE SMOOTH",
"336.333 -137 OFFCURVE",
"321 -118.333 OFFCURVE",
"321 -89 CURVE SMOOTH",
"321 -58.333 OFFCURVE",
"338.667 -22.667 OFFCURVE",
"368 4 CURVE",
"364 8 LINE",
"414.667 29.333 OFFCURVE",
"455 66 OFFCURVE",
"495 118 CURVE"
);
},
{
closed = 1;
nodes = (
"126 286.333 OFFCURVE",
"132.5 316.667 OFFCURVE",
"145.5 346 CURVE SMOOTH",
"171.5 404.667 OFFCURVE",
"219.333 446 OFFCURVE",
"278 446 CURVE SMOOTH",
"334.667 446 OFFCURVE",
"363 421.333 OFFCURVE",
"363 372 CURVE SMOOTH",
"363 347.333 OFFCURVE",
"351.667 320 OFFCURVE",
"329 290 CURVE SMOOTH",
"283.667 230 OFFCURVE",
"211 174.333 OFFCURVE",
"155 149 CURVE",
"135.667 178.333 OFFCURVE",
"126 213.667 OFFCURVE",
"126 255 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */\01246 44 43 37 4 4 5 20 1 2 4 12 11 2 0 2 3 74 0 0 0 1 0 1 95 0 5 5 3 91 0 3 3 45 75 0 4 4 2 91 0 2 2 43 2 76 42 40 38 37 36 40 6 7 26 \012CALL[ ]	/* CallFunction */";
};
width = 522;
}
);
leftKerningGroup = c;
note = eogonek;
rightKerningGroup = ae;
unicode = 0119;
},
{
glyphname = f;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"271 932 OFFCURVE",
"225.667 917.833 OFFCURVE",
"191 889.5 CURVE SMOOTH",
"121.667 832.833 OFFCURVE",
"93 739 OFFCURVE",
"93 635 CURVE SMOOTH",
"93 500 LINE",
"54 500 LINE",
"28 436 LINE",
"93 436 LINE",
"93 -178 LINE",
"185 -134 LINE",
"185 436 LINE",
"365 436 LINE",
"396 500 LINE",
"185 500 LINE",
"185 777 LINE SMOOTH",
"185 839.667 OFFCURVE",
"212.333 895 OFFCURVE",
"283 895 CURVE SMOOTH",
"335 895 OFFCURVE",
"372.667 860 OFFCURVE",
"394 816 CURVE",
"461 853 LINE",
"426.333 898.333 OFFCURVE",
"365.667 932 OFFCURVE",
"327 932 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */\0123 2 2 1 0 1 74 15 14 2 2 71 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01242 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 24 values pushed */\0120 0 0 5 91 6 1 5 5 52 75 3 1 2 2 1 89 4 1 1 1 45 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 21 values pushed */\0124 1 1 3 1 2 1 2 93 0 0 0 5 91 6 1 5 5 52 0 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\0120 0 0 24 0 23 17 19 17 19 37 7 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 368;
}
);
leftKerningGroup = f;
note = f;
rightKerningGroup = f;
unicode = 0066;
},
{
glyphname = g;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"262 513 OFFCURVE",
"217.833 497.833 OFFCURVE",
"177.5 467.5 CURVE SMOOTH",
"96.833 406.833 OFFCURVE",
"48 301.333 OFFCURVE",
"48 188 CURVE SMOOTH",
"48 72 OFFCURVE",
"111.333 -12 OFFCURVE",
"226 -12 CURVE SMOOTH",
"290 -12 OFFCURVE",
"330.667 34.667 OFFCURVE",
"380 112 CURVE",
"387 112 LINE",
"382.333 96.667 OFFCURVE",
"380 76.667 OFFCURVE",
"380 52 CURVE",
"383 -30 LINE",
"383 -142 OFFCURVE",
"363 -225 OFFCURVE",
"263 -225 CURVE SMOOTH",
"229.667 -225 OFFCURVE",
"207.333 -209 OFFCURVE",
"198 -185 CURVE",
"113 -257 LINE",
"134.333 -282.333 OFFCURVE",
"163.333 -295 OFFCURVE",
"200 -295 CURVE SMOOTH",
"251.333 -295 OFFCURVE",
"297.5 -277.333 OFFCURVE",
"338.5 -242 CURVE SMOOTH",
"420.5 -171.333 OFFCURVE",
"470 -54 OFFCURVE",
"470 46 CURVE SMOOTH",
"470 352 LINE",
"380 315 LINE",
"380 270 LINE SMOOTH",
"380 167.333 OFFCURVE",
"348.667 60 OFFCURVE",
"250 60 CURVE SMOOTH",
"163.333 60 OFFCURVE",
"126 144.667 OFFCURVE",
"126 238 CURVE SMOOTH",
"126 268 OFFCURVE",
"132.833 299.667 OFFCURVE",
"146.5 333 CURVE SMOOTH",
"173.833 399.667 OFFCURVE",
"225.333 451 OFFCURVE",
"292 451 CURVE SMOOTH",
"337.333 451 OFFCURVE",
"377 422.667 OFFCURVE",
"397 376 CURVE",
"469 415 LINE",
"438.333 475 OFFCURVE",
"374 513 OFFCURVE",
"310 513 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */\01235 18 17 3 2 5 1 0 26 1 3 4 25 1 2 3 3 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01234 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 32 values pushed */\0120 0 0 5 91 6 1 5 5 45 75 0 1 1 4 91 0 4 4 43 75 0 3 3 2 91 0 2 2 47 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 29 values pushed */\0120 3 0 2 3 2 95 0 0 0 5 91 6 1 5 5 45 75 0 1 1 4 91 0 4 4 43 4 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\0120 0 0 46 0 45 40 36 40 37 37 7 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 545;
}
);
leftKerningGroup = g;
note = g;
rightKerningGroup = g;
unicode = 0067;
},
{
glyphname = gbreve;
layers = (
{
components = (
{
alignment = -1;
name = g;
},
{
alignment = -1;
name = breve;
transform = "{1, 0, 0, 1, 190, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 545;
}
);
leftKerningGroup = g;
note = gbreve;
rightKerningGroup = g;
unicode = 011F;
},
{
glyphname = gcircumflex;
layers = (
{
components = (
{
alignment = -1;
name = g;
},
{
alignment = -1;
name = circumflex;
transform = "{1, 0, 0, 1, 156, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 545;
}
);
leftKerningGroup = g;
note = gcircumflex;
rightKerningGroup = g;
unicode = 011D;
},
{
glyphname = gcommaaccent;
layers = (
{
components = (
{
alignment = -1;
name = g;
},
{
alignment = -1;
name = commaturnedabovecomb;
transform = "{1, 0, 0, 1, 365, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 545;
}
);
leftKerningGroup = g;
note = gcommaaccent;
rightKerningGroup = g;
unicode = 0123;
},
{
glyphname = gdotaccent;
layers = (
{
components = (
{
alignment = -1;
name = g;
},
{
alignment = -1;
name = dotaccent;
transform = "{1, 0, 0, 1, 235, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 545;
}
);
leftKerningGroup = g;
note = gdotaccent;
rightKerningGroup = g;
unicode = 0121;
},
{
glyphname = h;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"177 213 LINE",
"177 924 LINE",
"85 886 LINE",
"85 -14 LINE",
"174 12 LINE",
"174 34.667 OFFCURVE",
"180.667 77.833 OFFCURVE",
"194 141.5 CURVE SMOOTH",
"220.667 268.833 OFFCURVE",
"271 396 OFFCURVE",
"339 396 CURVE SMOOTH",
"356.333 396 OFFCURVE",
"363 378.333 OFFCURVE",
"363 361 CURVE SMOOTH",
"363 96 LINE SMOOTH",
"363 28.667 OFFCURVE",
"389 -5 OFFCURVE",
"441 -5 CURVE SMOOTH",
"482.333 -5 OFFCURVE",
"528.333 30 OFFCURVE",
"547 74 CURVE",
"535 89 LINE",
"517 63 OFFCURVE",
"499.333 50 OFFCURVE",
"482 50 CURVE SMOOTH",
"460.667 50 OFFCURVE",
"451 68 OFFCURVE",
"451 84 CURVE SMOOTH",
"451 362 LINE SMOOTH",
"451 434.751 OFFCURVE",
"450.235 509 OFFCURVE",
"386 509 CURVE SMOOTH",
"347.333 509 OFFCURVE",
"313.667 491.667 OFFCURVE",
"285 457 CURVE SMOOTH",
"227.667 387.667 OFFCURVE",
"194.333 286.333 OFFCURVE",
"181 213 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */\01216 15 0 3 1 3 29 1 2 1 2 74 32 31 2 0 72 30 1 2 71 0 3 3 0 91 0 0 0 45 75 0 1 1 2 91 0 2 2 46 2 76 36 36 38 36 4 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 565;
}
);
leftKerningGroup = b;
note = h;
rightKerningGroup = a;
unicode = 0068;
},
{
glyphname = hbar;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"535 89 LINE",
"517 63 OFFCURVE",
"499.333 50 OFFCURVE",
"482 50 CURVE SMOOTH",
"460.667 50 OFFCURVE",
"451 68 OFFCURVE",
"451 84 CURVE SMOOTH",
"451 362 LINE SMOOTH",
"451 434.751 OFFCURVE",
"450.235 509 OFFCURVE",
"386 509 CURVE SMOOTH",
"347.333 509 OFFCURVE",
"313.667 491.667 OFFCURVE",
"285 457 CURVE SMOOTH",
"227.667 387.667 OFFCURVE",
"194.333 286.333 OFFCURVE",
"181 213 CURVE",
"177 213 LINE",
"177 591 LINE",
"280 591 LINE",
"305 656 LINE",
"177 656 LINE",
"177 924 LINE",
"85 886 LINE",
"85 656 LINE",
"21 656 LINE",
"-6 591 LINE",
"85 591 LINE",
"85 -14 LINE",
"174 12 LINE",
"174 34.667 OFFCURVE",
"180.667 77.833 OFFCURVE",
"194 141.5 CURVE SMOOTH",
"220.667 268.833 OFFCURVE",
"271 396 OFFCURVE",
"339 396 CURVE SMOOTH",
"356.333 396 OFFCURVE",
"363 378.333 OFFCURVE",
"363 361 CURVE SMOOTH",
"363 96 LINE SMOOTH",
"363 28.667 OFFCURVE",
"389 -5 OFFCURVE",
"441 -5 CURVE SMOOTH",
"482.333 -5 OFFCURVE",
"528.333 30 OFFCURVE",
"547 74 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */\01240 25 2 7 1 13 1 0 7 2 74 20 19 2 3 72 14 1 0 71 4 1 3 5 1 2 6 3 2 97 0 1 1 6 91 0 6 6 45 75 0 7 7 0 91 0 0 0 46 0 76 38 37 17 19 17 21 36 34 8 7 28 \012CALL[ ]	/* CallFunction */";
};
width = 565;
}
);
leftKerningGroup = b;
note = hbar;
rightKerningGroup = a;
unicode = 0127;
},
{
glyphname = hcircumflex;
layers = (
{
components = (
{
alignment = -1;
name = h;
},
{
alignment = -1;
name = circumflex;
transform = "{1, 0, 0, 1, 1, 489}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 565;
}
);
leftKerningGroup = b;
note = hcircumflex;
rightKerningGroup = a;
unicode = 0125;
},
{
glyphname = i;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"149 601 LINE",
"183 834 LINE",
"75 797 LINE",
"116 589 LINE"
);
},
{
closed = 1;
nodes = (
"182 496 LINE",
"89 460 LINE",
"89 96 LINE SMOOTH",
"89 22.667 OFFCURVE",
"116 -5 OFFCURVE",
"164 -5 CURVE SMOOTH",
"200 -5 OFFCURVE",
"248.333 16.667 OFFCURVE",
"279 74 CURVE",
"263 89 LINE",
"244.333 63.667 OFFCURVE",
"225.667 50 OFFCURVE",
"211 50 CURVE SMOOTH",
"192.333 50 OFFCURVE",
"182 64 OFFCURVE",
"182 84 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */\01219 18 11 10 3 2 1 7 0 72 0 0 1 0 114 0 1 1 46 1 76 37 38 2 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 296;
}
);
leftKerningGroup = i;
note = i;
rightKerningGroup = i;
unicode = 0069;
},
{
glyphname = idotless;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"182 496 LINE",
"90 460 LINE",
"90 96 LINE SMOOTH",
"90 21.333 OFFCURVE",
"114.667 -5 OFFCURVE",
"164 -5 CURVE SMOOTH",
"200 -5 OFFCURVE",
"249.333 16.667 OFFCURVE",
"280 74 CURVE",
"264 89 LINE",
"244.667 63 OFFCURVE",
"227.333 50 OFFCURVE",
"212 50 CURVE SMOOTH",
"193.333 50 OFFCURVE",
"182 64 OFFCURVE",
"182 84 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */\01214 13 6 5 4 0 72 0 0 1 0 114 0 1 1 46 1 76 36 34 2 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 297;
}
);
leftKerningGroup = i;
note = dotlessi;
rightKerningGroup = i;
unicode = 0131;
},
{
glyphname = iacute;
layers = (
{
components = (
{
alignment = -1;
name = idotless;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 37, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 297;
}
);
leftKerningGroup = i;
note = iacute;
rightKerningGroup = i;
unicode = 00ED;
},
{
glyphname = ibreve;
layers = (
{
components = (
{
alignment = -1;
name = idotless;
},
{
alignment = -1;
name = breve;
transform = "{1, 0, 0, 1, 20, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 297;
}
);
leftKerningGroup = i;
note = ibreve;
rightKerningGroup = i;
unicode = 012D;
},
{
glyphname = icircumflex;
layers = (
{
components = (
{
alignment = -1;
name = idotless;
},
{
alignment = -1;
name = circumflex;
transform = "{1, 0, 0, 1, -14, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 297;
}
);
leftKerningGroup = i;
note = icircumflex;
rightKerningGroup = i;
unicode = 00EE;
},
{
glyphname = idieresis;
layers = (
{
components = (
{
alignment = -1;
name = idotless;
},
{
alignment = -1;
name = dieresis;
transform = "{1, 0, 0, 1, -22, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 297;
}
);
leftKerningGroup = i;
note = idieresis;
rightKerningGroup = i;
unicode = 00EF;
},
{
glyphname = igrave;
layers = (
{
components = (
{
alignment = -1;
name = idotless;
},
{
alignment = -1;
name = grave;
transform = "{1, 0, 0, 1, 36, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 297;
}
);
leftKerningGroup = i;
note = igrave;
rightKerningGroup = i;
unicode = 00EC;
},
{
glyphname = ij;
layers = (
{
components = (
{
alignment = -1;
name = i;
},
{
alignment = -1;
name = j;
transform = "{1, 0, 0, 1, 296, 0}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 571;
}
);
leftKerningGroup = i;
note = ij;
rightKerningGroup = ij;
unicode = 0133;
},
{
glyphname = imacron;
layers = (
{
components = (
{
alignment = -1;
name = idotless;
},
{
alignment = -1;
name = macron;
transform = "{1, 0, 0, 1, 3, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 297;
}
);
leftKerningGroup = i;
note = imacron;
rightKerningGroup = i;
unicode = 012B;
},
{
glyphname = iogonek;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"116 589 LINE",
"149 601 LINE",
"183 834 LINE",
"75 797 LINE"
);
},
{
closed = 1;
nodes = (
"200 -5 OFFCURVE",
"248.333 16.667 OFFCURVE",
"279 74 CURVE",
"263 89 LINE",
"244.333 63.667 OFFCURVE",
"225.667 50 OFFCURVE",
"211 50 CURVE SMOOTH",
"192.333 50 OFFCURVE",
"182 64 OFFCURVE",
"182 84 CURVE SMOOTH",
"182 496 LINE",
"89 460 LINE",
"89 96 LINE SMOOTH",
"89 46.667 OFFCURVE",
"102 15.333 OFFCURVE",
"128 2 CURVE",
"77.333 -36.667 OFFCURVE",
"52 -78 OFFCURVE",
"52 -122 CURVE SMOOTH",
"52 -171.333 OFFCURVE",
"91 -197 OFFCURVE",
"131 -197 CURVE SMOOTH",
"168.333 -197 OFFCURVE",
"201 -169.333 OFFCURVE",
"225 -128 CURVE",
"208 -113 LINE",
"194.667 -130.333 OFFCURVE",
"178.333 -139 OFFCURVE",
"159 -139 CURVE SMOOTH",
"128.333 -139 OFFCURVE",
"113 -120.333 OFFCURVE",
"113 -91 CURVE SMOOTH",
"113 -63 OFFCURVE",
"128.667 -29.333 OFFCURVE",
"154 -4 CURVE",
"156 -4.667 OFFCURVE",
"159.333 -5 OFFCURVE",
"164 -5 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */\01222 1 3 2 14 13 2 0 3 2 74 34 33 26 25 2 1 6 2 72 0 2 3 2 114 0 0 0 1 0 1 95 0 3 3 46 3 76 21 43 36 42 4 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 296;
}
);
leftKerningGroup = i;
note = iogonek;
rightKerningGroup = i;
unicode = 012F;
},
{
glyphname = itilde;
layers = (
{
components = (
{
alignment = -1;
name = idotless;
},
{
alignment = -1;
name = tilde;
transform = "{1, 0, 0, 1, 13, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 297;
}
);
leftKerningGroup = i;
note = itilde;
rightKerningGroup = i;
unicode = 0129;
},
{
glyphname = j;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"123 589 LINE",
"84 797 LINE",
"195 834 LINE",
"158 601 LINE"
);
},
{
closed = 1;
nodes = (
"99 459 LINE",
"188 496 LINE",
"188 54 LINE SMOOTH",
"188 -6.667 OFFCURVE",
"174.167 -63.667 OFFCURVE",
"146.5 -117 CURVE SMOOTH",
"91.167 -223.667 OFFCURVE",
"-5 -294 OFFCURVE",
"-101 -294 CURVE SMOOTH",
"-131 -294 OFFCURVE",
"-159.333 -285 OFFCURVE",
"-186 -267 CURVE",
"-114 -178 LINE",
"-88 -201.333 OFFCURVE",
"-55.333 -213 OFFCURVE",
"-16 -213 CURVE SMOOTH",
"18 -213 OFFCURVE",
"45.667 -199.167 OFFCURVE",
"67 -171.5 CURVE SMOOTH",
"88.333 -143.833 OFFCURVE",
"99 -90.667 OFFCURVE",
"99 -12 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */\01211 1 1 0 1 74 18 10 4 3 2 5 0 72 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 11 values pushed */\0120 0 0 1 91 0 1 1 47 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 16 values pushed */\0120 0 1 1 0 87 0 0 0 1 91 0 1 0 1 79 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 5 values pushed */\01235 39 2 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 275;
}
);
leftKerningGroup = j;
note = j;
rightKerningGroup = ij;
unicode = 006A;
},
{
glyphname = jdotless;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"99 459 LINE",
"188 496 LINE",
"188 54 LINE SMOOTH",
"188 -6.667 OFFCURVE",
"174.167 -63.667 OFFCURVE",
"146.5 -117 CURVE SMOOTH",
"91.167 -223.667 OFFCURVE",
"-6.667 -294 OFFCURVE",
"-104 -294 CURVE SMOOTH",
"-132 -294 OFFCURVE",
"-159.333 -285 OFFCURVE",
"-186 -267 CURVE",
"-114 -178 LINE",
"-84.667 -204.667 OFFCURVE",
"-53.333 -213 OFFCURVE",
"-16 -213 CURVE SMOOTH",
"18 -213 OFFCURVE",
"45.667 -199.167 OFFCURVE",
"67 -171.5 CURVE SMOOTH",
"88.333 -143.833 OFFCURVE",
"99 -90.667 OFFCURVE",
"99 -12 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */\0128 1 1 0 1 74 15 7 0 3 0 72 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 11 values pushed */\0120 0 0 1 91 0 1 1 47 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 16 values pushed */\0120 0 1 1 0 87 0 0 0 1 91 0 1 0 1 79 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 5 values pushed */\01236 35 2 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 274;
}
);
leftKerningGroup = j;
note = uni0237;
rightKerningGroup = ij;
unicode = 0237;
},
{
glyphname = jcircumflex;
layers = (
{
components = (
{
alignment = -1;
name = jdotless;
},
{
alignment = -1;
name = circumflex;
transform = "{1, 0, 0, 1, 7, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 274;
}
);
leftKerningGroup = j;
note = jcircumflex;
rightKerningGroup = ij;
unicode = 0135;
},
{
glyphname = k;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"176 194 LINE",
"176 924 LINE",
"86 886 LINE",
"86 -14 LINE",
"178 12 LINE",
"179.333 58.667 OFFCURVE",
"186.667 129.333 OFFCURVE",
"196 160 CURVE",
"205 167 LINE",
"215.667 158.333 OFFCURVE",
"231.667 139.333 OFFCURVE",
"253 110 CURVE SMOOTH",
"306.333 35.333 OFFCURVE",
"347.667 -10 OFFCURVE",
"405 -10 CURVE SMOOTH",
"454.333 -10 OFFCURVE",
"511.667 19.667 OFFCURVE",
"541 65 CURVE",
"525 82 LINE",
"505.667 59.333 OFFCURVE",
"484 48 OFFCURVE",
"460 48 CURVE SMOOTH",
"405.188 48 OFFCURVE",
"327.714 172.6 OFFCURVE",
"301 210 CURVE",
"390.333 263.333 OFFCURVE",
"472 341.667 OFFCURVE",
"472 423 CURVE SMOOTH",
"472 471 OFFCURVE",
"444.667 509 OFFCURVE",
"402 509 CURVE SMOOTH",
"296.667 509 OFFCURVE",
"221.667 346 OFFCURVE",
"183 194 CURVE"
);
},
{
closed = 1;
nodes = (
"361.333 401 OFFCURVE",
"375 378.333 OFFCURVE",
"375 361 CURVE SMOOTH",
"375 294.333 OFFCURVE",
"289.333 222.333 OFFCURVE",
"200 185 CURVE",
"201.333 186.333 OFFCURVE",
"207.333 199.333 OFFCURVE",
"218 224 CURVE SMOOTH",
"239.333 274.667 OFFCURVE",
"260 316.833 OFFCURVE",
"280 350.5 CURVE SMOOTH",
"300 384.167 OFFCURVE",
"320 401 OFFCURVE",
"340 401 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */\01225 17 16 10 0 5 1 3 29 1 2 1 2 74 32 31 2 0 72 30 1 2 71 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0129 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 22 values pushed */\0124 1 3 3 0 91 0 0 0 45 75 0 1 1 2 91 0 2 2 46 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01212 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 22 values pushed */\0124 1 3 3 0 91 0 0 0 45 75 0 1 1 2 91 0 2 2 43 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 22 values pushed */\0124 1 3 3 0 91 0 0 0 45 75 0 1 1 2 91 0 2 2 46 2 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 12 values pushed */\01233 33 33 43 33 42 36 40 35 5 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 554;
}
);
leftKerningGroup = b;
note = k;
rightKerningGroup = k;
unicode = 006B;
},
{
glyphname = kcommaaccent;
layers = (
{
components = (
{
alignment = -1;
name = k;
},
{
alignment = -1;
name = commaaccentcomb;
transform = "{1, 0, 0, 1, 351, 0}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 554;
}
);
leftKerningGroup = b;
note = kcommaaccent;
rightKerningGroup = k;
unicode = 0137;
},
{
glyphname = kgreenlandic;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"177 528 LINE",
"86 490 LINE",
"86 -14 LINE",
"178 12 LINE",
"178.667 18 OFFCURVE",
"180.333 40.667 OFFCURVE",
"183 80 CURVE SMOOTH",
"185.667 119.333 OFFCURVE",
"190.667 148.333 OFFCURVE",
"198 167 CURVE",
"207 167 LINE",
"217 160.333 OFFCURVE",
"235.333 141.333 OFFCURVE",
"262 110 CURVE SMOOTH",
"326 35.333 OFFCURVE",
"370.667 -10 OFFCURVE",
"408 -10 CURVE SMOOTH",
"450.667 -10 OFFCURVE",
"504 19.667 OFFCURVE",
"528 65 CURVE",
"507 82 LINE",
"491 59.333 OFFCURVE",
"470.667 48 OFFCURVE",
"446 48 CURVE SMOOTH",
"412.667 48 OFFCURVE",
"375.667 87 OFFCURVE",
"325 147 CURVE SMOOTH",
"306.333 169.667 OFFCURVE",
"288 190.667 OFFCURVE",
"280 192 CURVE",
"381.333 245.333 OFFCURVE",
"477 332.333 OFFCURVE",
"477 423 CURVE SMOOTH",
"477 469.667 OFFCURVE",
"447.333 509 OFFCURVE",
"406 509 CURVE SMOOTH",
"368.667 509 OFFCURVE",
"335 491.167 OFFCURVE",
"305 455.5 CURVE SMOOTH",
"245 384.167 OFFCURVE",
"206.333 279.333 OFFCURVE",
"185 194 CURVE",
"177 194 LINE"
);
},
{
closed = 1;
nodes = (
"363.333 401 OFFCURVE",
"377 384.333 OFFCURVE",
"377 375 CURVE SMOOTH",
"377 343.57 OFFCURVE",
"242.398 215.599 OFFCURVE",
"216 209 CURVE",
"216.667 209.667 OFFCURVE",
"221 219 OFFCURVE",
"229 237 CURVE",
"272.333 346.333 OFFCURVE",
"310 401 OFFCURVE",
"342 401 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 25 values pushed */\01235 1 4 0 43 12 1 3 3 4 21 20 2 1 3 3 74 0 1 0 72 34 1 2 71 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0129 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 30 values pushed */\0120 3 4 1 4 3 1 112 5 1 4 4 0 91 0 0 0 45 75 0 1 1 2 91 0 2 2 46 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01212 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 30 values pushed */\0120 3 4 1 4 3 1 112 5 1 4 4 0 91 0 0 0 45 75 0 1 1 2 91 0 2 2 43 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 30 values pushed */\0120 3 4 1 4 3 1 112 5 1 4 4 0 91 0 0 0 45 75 0 1 1 2 91 0 2 2 46 2 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 13 values pushed */\01236 36 36 46 36 45 20 36 42 37 6 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 554;
}
);
leftKerningGroup = b;
note = kgreenlandic;
rightKerningGroup = k;
unicode = 0138;
},
{
glyphname = l;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"182 924 LINE",
"92 886 LINE",
"92 96 LINE SMOOTH",
"92 28.667 OFFCURVE",
"120 -5 OFFCURVE",
"176 -5 CURVE SMOOTH",
"216 -5 OFFCURVE",
"260.333 30 OFFCURVE",
"283 74 CURVE",
"266 89 LINE",
"255.333 70.333 OFFCURVE",
"231.667 50 OFFCURVE",
"213 50 CURVE SMOOTH",
"190.333 50 OFFCURVE",
"182 68 OFFCURVE",
"182 84 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */\01214 13 7 6 4 0 72 0 0 0 1 91 0 1 1 46 1 76 37 34 2 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 299;
}
);
leftKerningGroup = b;
note = l;
rightKerningGroup = d;
unicode = 006C;
},
{
glyphname = lacute;
layers = (
{
components = (
{
alignment = -1;
name = l;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 59, 489}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 299;
}
);
leftKerningGroup = b;
note = lacute;
rightKerningGroup = d;
unicode = 013A;
},
{
glyphname = lcaron;
layers = (
{
components = (
{
alignment = -1;
name = l;
},
{
alignment = -1;
name = commaaboverightcomb;
transform = "{1, 0, 0, 1, 348, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 299;
}
);
leftKerningGroup = b;
note = lcaron;
rightKerningGroup = d;
unicode = 013E;
},
{
glyphname = lcommaaccent;
layers = (
{
components = (
{
alignment = -1;
name = l;
},
{
alignment = -1;
name = commaaccentcomb;
transform = "{1, 0, 0, 1, 225, 0}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 299;
}
);
leftKerningGroup = b;
note = lcommaaccent;
rightKerningGroup = d;
unicode = 013C;
},
{
glyphname = ldot;
layers = (
{
components = (
{
alignment = -1;
name = l;
},
{
alignment = -1;
name = periodcentered;
transform = "{1, 0, 0, 1, 183, 0}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 299;
}
);
leftKerningGroup = b;
note = ldot;
rightKerningGroup = d;
unicode = 0140;
},
{
glyphname = lslash;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"182 428 LINE",
"299 479 LINE",
"299 549 LINE",
"182 498 LINE",
"182 924 LINE",
"92 886 LINE",
"92 459 LINE",
"1 419 LINE",
"1 350 LINE",
"92 389 LINE",
"92 96 LINE SMOOTH",
"92 28.667 OFFCURVE",
"120 -5 OFFCURVE",
"176 -5 CURVE SMOOTH",
"216 -5 OFFCURVE",
"260.333 30 OFFCURVE",
"283 74 CURVE",
"266 89 LINE",
"255.333 70.333 OFFCURVE",
"231.667 50 OFFCURVE",
"213 50 CURVE SMOOTH",
"190.333 50 OFFCURVE",
"182 68 OFFCURVE",
"182 84 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */\01222 21 20 19 18 17 16 15 14 8 7 0 12 0 72 0 0 0 1 91 0 1 1 46 1 76 37 35 2 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 299;
}
);
leftKerningGroup = lslash;
note = lslash;
rightKerningGroup = lslash;
unicode = 0142;
},
{
glyphname = m;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"564 509 OFFCURVE",
"536.167 486.833 OFFCURVE",
"508.5 442.5 CURVE SMOOTH",
"480.833 398.167 OFFCURVE",
"458.667 339.667 OFFCURVE",
"442 267 CURVE",
"436 267 LINE",
"436 424 LINE SMOOTH",
"436 486.667 OFFCURVE",
"415.333 509 OFFCURVE",
"374 509 CURVE SMOOTH",
"346 509 OFFCURVE",
"317.833 486.833 OFFCURVE",
"289.5 442.5 CURVE SMOOTH",
"261.167 398.167 OFFCURVE",
"238.667 339.667 OFFCURVE",
"222 267 CURVE",
"219 267 LINE",
"219 434 LINE SMOOTH",
"219 479.333 OFFCURVE",
"201 509 OFFCURVE",
"137 509 CURVE SMOOTH",
"98.054 509 OFFCURVE",
"64.284 493.18 OFFCURVE",
"32 424 CURVE",
"48 408 LINE",
"65.333 436.667 OFFCURVE",
"82.333 451 OFFCURVE",
"99 451 CURVE SMOOTH",
"116.333 451 OFFCURVE",
"129 436.667 OFFCURVE",
"129 414 CURVE SMOOTH",
"129 -14 LINE",
"215 12 LINE",
"215 86.667 OFFCURVE",
"221.5 153.167 OFFCURVE",
"234.5 211.5 CURVE SMOOTH",
"255.224 304.491 OFFCURVE",
"294.916 396 OFFCURVE",
"327 396 CURVE SMOOTH",
"336.333 396 OFFCURVE",
"344 385.333 OFFCURVE",
"344 372 CURVE SMOOTH",
"344 -14 LINE",
"435 12 LINE",
"435 87.333 OFFCURVE",
"441 154.167 OFFCURVE",
"453 212.5 CURVE SMOOTH",
"472.375 306.685 OFFCURVE",
"510.021 396 OFFCURVE",
"545 396 CURVE SMOOTH",
"555.667 396 OFFCURVE",
"563 385.333 OFFCURVE",
"563 372 CURVE SMOOTH",
"563 96 LINE SMOOTH",
"563 28.667 OFFCURVE",
"590.667 -5 OFFCURVE",
"646 -5 CURVE SMOOTH",
"696.887 -5 OFFCURVE",
"719.591 8.838 OFFCURVE",
"750 74 CURVE",
"734 89 LINE",
"716.667 63.667 OFFCURVE",
"697 50 OFFCURVE",
"681 50 CURVE SMOOTH",
"665 50 OFFCURVE",
"655 64 OFFCURVE",
"655 84 CURVE SMOOTH",
"655 424 LINE SMOOTH",
"655 485.333 OFFCURVE",
"632 509 OFFCURVE",
"592 509 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 79 values pushed */\01241 40 2 3 5 57 49 10 9 4 0 3 33 24 2 2 0 3 74 34 25 2 1 71 0 5 6 3 6 5 3 112 0 1 2 1 115 4 1 3 3 6 91 9 8 7 3 6 6 45 75 0 0 0 2 91 0 2 2 46 2 76 0 0 0 61 0 60 38 37 39 39 36 32 21 37 10 7 28 \012CALL[ ]	/* CallFunction */";
};
width = 779;
}
);
leftKerningGroup = m;
note = m;
rightKerningGroup = a;
unicode = 006D;
},
{
glyphname = n;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"393.667 509 OFFCURVE",
"359 489.5 OFFCURVE",
"329 450.5 CURVE SMOOTH",
"269 372.5 OFFCURVE",
"243 289.667 OFFCURVE",
"207 171 CURVE",
"203 171 LINE",
"203 434 LINE SMOOTH",
"203 480.667 OFFCURVE",
"176 509 OFFCURVE",
"120 509 CURVE SMOOTH",
"80 509 OFFCURVE",
"34.333 472 OFFCURVE",
"17 424 CURVE",
"32 408 LINE",
"50.667 436.667 OFFCURVE",
"68 451 OFFCURVE",
"84 451 CURVE SMOOTH",
"102.667 451 OFFCURVE",
"113 432.667 OFFCURVE",
"113 414 CURVE SMOOTH",
"113 -14 LINE",
"200 12 LINE",
"200 32.667 OFFCURVE",
"210.167 75.5 OFFCURVE",
"230.5 140.5 CURVE SMOOTH",
"271.167 270.5 OFFCURVE",
"333.333 396 OFFCURVE",
"388 396 CURVE SMOOTH",
"404 396 OFFCURVE",
"406 381 OFFCURVE",
"406 361 CURVE SMOOTH",
"406 96 LINE SMOOTH",
"406 28 OFFCURVE",
"436.667 -5 OFFCURVE",
"490 -5 CURVE SMOOTH",
"526 -5 OFFCURVE",
"572 31.333 OFFCURVE",
"592 74 CURVE",
"577 89 LINE",
"561 66.333 OFFCURVE",
"546.667 50 OFFCURVE",
"524 50 CURVE SMOOTH",
"506.667 50 OFFCURVE",
"497 69.333 OFFCURVE",
"497 84 CURVE SMOOTH",
"497 367 LINE",
"497 398 LINE SMOOTH",
"497 467.333 OFFCURVE",
"486.333 509 OFFCURVE",
"433 509 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 70 values pushed */\01233 32 2 2 3 40 11 10 3 0 2 25 1 1 0 3 74 26 1 1 71 0 3 3 4 91 6 5 2 4 4 45 75 0 2 2 4 91 6 5 2 4 4 45 75 0 0 0 1 91 0 1 1 46 1 76 0 0 0 45 0 44 36 39 37 37 38 7 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 608;
}
);
leftKerningGroup = m;
note = n;
rightKerningGroup = a;
unicode = 006E;
},
{
glyphname = nacute;
layers = (
{
components = (
{
alignment = -1;
name = n;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 229, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 608;
}
);
leftKerningGroup = m;
note = nacute;
rightKerningGroup = a;
unicode = 0144;
},
{
glyphname = napostrophe;
layers = (
{
components = (
{
alignment = -1;
name = n;
},
{
alignment = -1;
name = commaaboverightcomb;
transform = "{1, 0, 0, 1, 210, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 608;
}
);
leftKerningGroup = m;
note = napostrophe;
rightKerningGroup = a;
unicode = 0149;
},
{
glyphname = ncaron;
layers = (
{
components = (
{
alignment = -1;
name = n;
},
{
alignment = -1;
name = caron;
transform = "{1, 0, 0, 1, 178, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 608;
}
);
leftKerningGroup = m;
note = ncaron;
rightKerningGroup = a;
unicode = 0148;
},
{
glyphname = ncommaaccent;
layers = (
{
components = (
{
alignment = -1;
name = n;
},
{
alignment = -1;
name = commaaccentcomb;
transform = "{1, 0, 0, 1, 382, 0}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 608;
}
);
leftKerningGroup = m;
note = ncommaaccent;
rightKerningGroup = a;
unicode = 0146;
},
{
glyphname = eng;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"320 509 OFFCURVE",
"246.667 330.333 OFFCURVE",
"204 161 CURVE",
"203 161 LINE",
"203 434 LINE SMOOTH",
"203 480.667 OFFCURVE",
"176.333 509 OFFCURVE",
"119 509 CURVE SMOOTH",
"77.667 509 OFFCURVE",
"34.333 473.333 OFFCURVE",
"17 424 CURVE",
"32 408 LINE",
"50.667 436.667 OFFCURVE",
"68 451 OFFCURVE",
"84 451 CURVE SMOOTH",
"102.667 451 OFFCURVE",
"113 432.667 OFFCURVE",
"113 414 CURVE SMOOTH",
"113 -14 LINE",
"200 12 LINE",
"200 27.333 OFFCURVE",
"210.333 68 OFFCURVE",
"231 134 CURVE SMOOTH",
"272.333 266 OFFCURVE",
"333.667 396 OFFCURVE",
"387 396 CURVE SMOOTH",
"399.667 396 OFFCURVE",
"406 384.333 OFFCURVE",
"406 361 CURVE SMOOTH",
"406 79 LINE",
"406 37 LINE SMOOTH",
"406 -25.667 OFFCURVE",
"404 -73.667 OFFCURVE",
"400 -107 CURVE SMOOTH",
"392 -173.667 OFFCURVE",
"362.333 -213 OFFCURVE",
"293 -213 CURVE SMOOTH",
"255.667 -213 OFFCURVE",
"223.667 -201.333 OFFCURVE",
"197 -178 CURVE",
"128 -267 LINE",
"152 -285 OFFCURVE",
"179.667 -294 OFFCURVE",
"211 -294 CURVE SMOOTH",
"262.333 -294 OFFCURVE",
"309.833 -276.5 OFFCURVE",
"353.5 -241.5 CURVE SMOOTH",
"440.833 -171.5 OFFCURVE",
"496 -54 OFFCURVE",
"496 54 CURVE SMOOTH",
"496 362 LINE SMOOTH",
"496 435.253 OFFCURVE",
"493.537 509 OFFCURVE",
"428 509 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */\01233 32 2 2 3 40 26 25 11 4 1 2 10 1 0 1 3 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 35 values pushed */\0120 3 3 4 91 6 5 2 4 4 45 75 0 2 2 4 91 6 5 2 4 4 45 75 0 1 1 0 91 0 0 0 47 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 32 values pushed */\0120 1 0 0 1 0 95 0 3 3 4 91 6 5 2 4 4 45 75 0 2 2 4 91 6 5 2 4 4 45 2 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\0120 0 0 44 0 43 36 39 38 35 39 7 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 588;
}
);
leftKerningGroup = m;
note = eng;
rightKerningGroup = ij;
unicode = 014B;
},
{
glyphname = ntilde;
layers = (
{
components = (
{
alignment = -1;
name = n;
},
{
alignment = -1;
name = tilde;
transform = "{1, 0, 0, 1, 205, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 608;
}
);
leftKerningGroup = m;
note = ntilde;
rightKerningGroup = a;
unicode = 00F1;
},
{
glyphname = o;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"278 509 LINE",
"139.333 467.667 OFFCURVE",
"45 354.333 OFFCURVE",
"45 209 CURVE SMOOTH",
"45 167.667 OFFCURVE",
"54.667 130 OFFCURVE",
"74 96 CURVE SMOOTH",
"112.667 28 OFFCURVE",
"184 -14 OFFCURVE",
"264 -14 CURVE SMOOTH",
"314 -14 OFFCURVE",
"357.333 -0.5 OFFCURVE",
"394 26.5 CURVE SMOOTH",
"467.333 80.5 OFFCURVE",
"506 172.667 OFFCURVE",
"506 266 CURVE SMOOTH",
"506 371.333 OFFCURVE",
"449 466.333 OFFCURVE",
"357 497 CURVE",
"318.333 469 OFFCURVE",
"278.667 438.667 OFFCURVE",
"252 412 CURVE",
"284 409.333 OFFCURVE",
"315.333 396.667 OFFCURVE",
"346 374 CURVE SMOOTH",
"407.333 328.667 OFFCURVE",
"449 257.667 OFFCURVE",
"449 195 CURVE SMOOTH",
"449 167.667 OFFCURVE",
"442.833 142.667 OFFCURVE",
"430.5 120 CURVE SMOOTH",
"405.833 74.667 OFFCURVE",
"359.333 46 OFFCURVE",
"302 46 CURVE SMOOTH",
"266.667 46 OFFCURVE",
"236.333 56 OFFCURVE",
"211 76 CURVE SMOOTH",
"160.333 116 OFFCURVE",
"135 182 OFFCURVE",
"135 242 CURVE SMOOTH",
"135 348.667 OFFCURVE",
"196 424 OFFCURVE",
"296 488 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */\01232 18 15 3 0 72 0 0 0 1 91 0 1 1 43 1 76 26 24 38 2 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 550;
}
);
leftKerningGroup = c;
note = o;
rightKerningGroup = b;
unicode = 006F;
},
{
glyphname = oacute;
layers = (
{
components = (
{
alignment = -1;
name = o;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 196, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 550;
}
);
leftKerningGroup = c;
note = oacute;
rightKerningGroup = b;
unicode = 00F3;
},
{
glyphname = obreve;
layers = (
{
components = (
{
alignment = -1;
name = o;
},
{
alignment = -1;
name = breve;
transform = "{1, 0, 0, 1, 179, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 550;
}
);
leftKerningGroup = c;
note = obreve;
rightKerningGroup = b;
unicode = 014F;
},
{
glyphname = ocircumflex;
layers = (
{
components = (
{
alignment = -1;
name = o;
},
{
alignment = -1;
name = circumflex;
transform = "{1, 0, 0, 1, 145, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 550;
}
);
leftKerningGroup = c;
note = ocircumflex;
rightKerningGroup = b;
unicode = 00F4;
},
{
glyphname = odieresis;
layers = (
{
components = (
{
alignment = -1;
name = o;
},
{
alignment = -1;
name = dieresis;
transform = "{1, 0, 0, 1, 137, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 550;
}
);
leftKerningGroup = c;
note = odieresis;
rightKerningGroup = b;
unicode = 00F6;
},
{
glyphname = ograve;
layers = (
{
components = (
{
alignment = -1;
name = o;
},
{
alignment = -1;
name = grave;
transform = "{1, 0, 0, 1, 195, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 550;
}
);
leftKerningGroup = c;
note = ograve;
rightKerningGroup = b;
unicode = 00F2;
},
{
glyphname = ohungarumlaut;
layers = (
{
components = (
{
alignment = -1;
name = o;
},
{
alignment = -1;
name = hungarumlaut;
transform = "{1, 0, 0, 1, 124, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 550;
}
);
leftKerningGroup = c;
note = ohungarumlaut;
rightKerningGroup = b;
unicode = 0151;
},
{
glyphname = omacron;
layers = (
{
components = (
{
alignment = -1;
name = o;
},
{
alignment = -1;
name = macron;
transform = "{1, 0, 0, 1, 162, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 550;
}
);
leftKerningGroup = c;
note = omacron;
rightKerningGroup = b;
unicode = 014D;
},
{
glyphname = oslash;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"318.333 469 OFFCURVE",
"278.667 438.667 OFFCURVE",
"252 412 CURVE",
"284 409.333 OFFCURVE",
"315.333 396.667 OFFCURVE",
"346 374 CURVE SMOOTH",
"407.333 328.667 OFFCURVE",
"449 257.667 OFFCURVE",
"449 195 CURVE SMOOTH",
"449 167.667 OFFCURVE",
"442.833 142.667 OFFCURVE",
"430.5 120 CURVE SMOOTH",
"405.833 74.667 OFFCURVE",
"359.333 46 OFFCURVE",
"302 46 CURVE SMOOTH",
"266.667 46 OFFCURVE",
"236.333 56 OFFCURVE",
"211 76 CURVE SMOOTH",
"160.333 116 OFFCURVE",
"135 182 OFFCURVE",
"135 242 CURVE SMOOTH",
"135 348.667 OFFCURVE",
"196 424 OFFCURVE",
"296 488 CURVE",
"278 509 LINE",
"139.333 467.667 OFFCURVE",
"45 354.333 OFFCURVE",
"45 209 CURVE SMOOTH",
"45 167.667 OFFCURVE",
"54.667 130 OFFCURVE",
"74 96 CURVE SMOOTH",
"112.667 28 OFFCURVE",
"184 -14 OFFCURVE",
"264 -14 CURVE SMOOTH",
"314 -14 OFFCURVE",
"357.333 -0.5 OFFCURVE",
"394 26.5 CURVE SMOOTH",
"467.333 80.5 OFFCURVE",
"506 172.667 OFFCURVE",
"506 266 CURVE SMOOTH",
"506 371.333 OFFCURVE",
"449 466.333 OFFCURVE",
"357 497 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */\01232 29 14 13 4 1 72 0 1 1 0 91 0 0 0 43 0 76 45 37 2 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 550;
}
);
leftKerningGroup = c;
note = oslash;
rightKerningGroup = b;
unicode = 00F8;
},
{
glyphname = oslashacute;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"212 573 LINE",
"380 660 LINE",
"319 733 LINE",
"197 593 LINE"
);
},
{
closed = 1;
nodes = (
"318.333 469 OFFCURVE",
"278.667 438.667 OFFCURVE",
"252 412 CURVE",
"284 409.333 OFFCURVE",
"315.333 396.667 OFFCURVE",
"346 374 CURVE SMOOTH",
"407.333 328.667 OFFCURVE",
"449 257.667 OFFCURVE",
"449 195 CURVE SMOOTH",
"449 167.667 OFFCURVE",
"442.833 142.667 OFFCURVE",
"430.5 120 CURVE SMOOTH",
"405.833 74.667 OFFCURVE",
"359.333 46 OFFCURVE",
"302 46 CURVE SMOOTH",
"266.667 46 OFFCURVE",
"236.333 56 OFFCURVE",
"211 76 CURVE SMOOTH",
"160.333 116 OFFCURVE",
"135 182 OFFCURVE",
"135 242 CURVE SMOOTH",
"135 348.667 OFFCURVE",
"196 424 OFFCURVE",
"296 488 CURVE",
"278 509 LINE",
"139.333 467.667 OFFCURVE",
"45 354.333 OFFCURVE",
"45 209 CURVE SMOOTH",
"45 167.667 OFFCURVE",
"54.667 130 OFFCURVE",
"74 96 CURVE SMOOTH",
"112.667 28 OFFCURVE",
"184 -14 OFFCURVE",
"264 -14 CURVE SMOOTH",
"314 -14 OFFCURVE",
"357.333 -0.5 OFFCURVE",
"394 26.5 CURVE SMOOTH",
"467.333 80.5 OFFCURVE",
"506 172.667 OFFCURVE",
"506 266 CURVE SMOOTH",
"506 371.333 OFFCURVE",
"449 466.333 OFFCURVE",
"357 497 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */\01236 33 18 17 3 2 1 7 1 72 0 1 1 0 91 0 0 0 43 0 76 45 41 2 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 550;
}
);
leftKerningGroup = c;
note = oslashacute;
rightKerningGroup = b;
unicode = 01FF;
},
{
glyphname = otilde;
layers = (
{
components = (
{
alignment = -1;
name = o;
},
{
alignment = -1;
name = tilde;
transform = "{1, 0, 0, 1, 172, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 550;
}
);
leftKerningGroup = c;
note = otilde;
rightKerningGroup = b;
unicode = 00F5;
},
{
glyphname = oe;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"889 139 LINE",
"846.333 87 OFFCURVE",
"779 51 OFFCURVE",
"715 51 CURVE SMOOTH",
"659 51 OFFCURVE",
"617.333 68.667 OFFCURVE",
"584 122 CURVE",
"614.667 134.667 OFFCURVE",
"652.333 156.667 OFFCURVE",
"697 188 CURVE SMOOTH",
"786.333 250.667 OFFCURVE",
"862 332.667 OFFCURVE",
"862 394 CURVE SMOOTH",
"862 470 OFFCURVE",
"809 509 OFFCURVE",
"737 509 CURVE SMOOTH",
"638.333 509 OFFCURVE",
"545.333 445 OFFCURVE",
"492 353 CURVE",
"469.333 421 OFFCURVE",
"421 474.333 OFFCURVE",
"357 497 CURVE",
"318.333 469 OFFCURVE",
"278.667 438.667 OFFCURVE",
"252 412 CURVE",
"284 409.333 OFFCURVE",
"315.333 396.667 OFFCURVE",
"346 374 CURVE SMOOTH",
"407.333 328.667 OFFCURVE",
"449 257.667 OFFCURVE",
"449 195 CURVE SMOOTH",
"449 167.667 OFFCURVE",
"442.833 142.667 OFFCURVE",
"430.5 120 CURVE SMOOTH",
"405.833 74.667 OFFCURVE",
"359.333 46 OFFCURVE",
"302 46 CURVE SMOOTH",
"266.667 46 OFFCURVE",
"236.333 56 OFFCURVE",
"211 76 CURVE SMOOTH",
"160.333 116 OFFCURVE",
"135 182 OFFCURVE",
"135 242 CURVE SMOOTH",
"135 348.667 OFFCURVE",
"196 424 OFFCURVE",
"296 488 CURVE",
"278 509 LINE",
"139.333 467.667 OFFCURVE",
"45 354.333 OFFCURVE",
"45 209 CURVE SMOOTH",
"45 167.667 OFFCURVE",
"54.667 130 OFFCURVE",
"74 96 CURVE SMOOTH",
"112.667 28 OFFCURVE",
"184 -14 OFFCURVE",
"264 -14 CURVE SMOOTH",
"357.333 -14 OFFCURVE",
"428.667 37.333 OFFCURVE",
"470 116 CURVE",
"502 38.667 OFFCURVE",
"572.667 -12 OFFCURVE",
"662 -12 CURVE SMOOTH",
"768.667 -12 OFFCURVE",
"835.333 34 OFFCURVE",
"902 118 CURVE"
);
},
{
closed = 1;
nodes = (
"533 286.333 OFFCURVE",
"539.333 316.667 OFFCURVE",
"552 346 CURVE SMOOTH",
"577.333 404.667 OFFCURVE",
"625.333 446 OFFCURVE",
"684 446 CURVE SMOOTH",
"738.667 446 OFFCURVE",
"770 422.667 OFFCURVE",
"770 372 CURVE SMOOTH",
"770 347.333 OFFCURVE",
"758.667 320.167 OFFCURVE",
"736 290.5 CURVE SMOOTH",
"690.667 231.167 OFFCURVE",
"618 174.333 OFFCURVE",
"562 149 CURVE",
"542.667 178.333 OFFCURVE",
"533 213.667 OFFCURVE",
"533 255 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01245 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 20 values pushed */\01235 17 2 5 3 56 54 48 38 32 6 6 2 5 2 74 16 1 3 72 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 20 values pushed */\01235 17 2 5 3 56 54 48 38 32 6 6 4 5 2 74 16 1 3 72 \012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01245 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 23 values pushed */\0120 5 5 3 91 0 3 3 45 75 4 1 2 2 0 91 1 1 0 0 43 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 33 values pushed */\0120 5 5 3 91 0 3 3 45 75 0 4 4 0 91 1 1 0 0 43 75 0 2 2 0 91 1 1 0 0 43 0 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 9 values pushed */\01242 40 47 45 36 34 6 7 26 \012CALL[ ]	/* CallFunction */";
};
width = 929;
}
);
leftKerningGroup = c;
note = oe;
rightKerningGroup = ae;
unicode = 0153;
},
{
glyphname = p;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"291.333 505 OFFCURVE",
"238.667 459.667 OFFCURVE",
"208 393 CURVE",
"204 393 LINE",
"204 471.667 OFFCURVE",
"179 505 OFFCURVE",
"119 505 CURVE SMOOTH",
"79 505 OFFCURVE",
"33 469.333 OFFCURVE",
"17 424 CURVE",
"32 409 LINE",
"44 423.667 OFFCURVE",
"54 434.333 OFFCURVE",
"62 441 CURVE SMOOTH",
"70 447.667 OFFCURVE",
"77.333 451 OFFCURVE",
"84 451 CURVE SMOOTH",
"101.333 451 OFFCURVE",
"113 435 OFFCURVE",
"113 411 CURVE SMOOTH",
"113 -326 LINE",
"200 -289 LINE",
"200 214 LINE SMOOTH",
"200 351.333 OFFCURVE",
"238.667 429 OFFCURVE",
"308 429 CURVE SMOOTH",
"336.667 429 OFFCURVE",
"362.667 421.167 OFFCURVE",
"386 405.5 CURVE SMOOTH",
"432.667 374.167 OFFCURVE",
"461 315.667 OFFCURVE",
"461 249 CURVE SMOOTH",
"461 133 OFFCURVE",
"422 51 OFFCURVE",
"366 51 CURVE SMOOTH",
"334.667 51 OFFCURVE",
"310.667 56.333 OFFCURVE",
"294 67 CURVE",
"268 10 LINE",
"297.333 -4.667 OFFCURVE",
"314 -10 OFFCURVE",
"334 -10 CURVE SMOOTH",
"375.333 -10 OFFCURVE",
"411.333 1.667 OFFCURVE",
"442 25 CURVE SMOOTH",
"503.333 71.667 OFFCURVE",
"537 159.667 OFFCURVE",
"537 277 CURVE SMOOTH",
"537 318.333 OFFCURVE",
"528.333 356.5 OFFCURVE",
"511 391.5 CURVE SMOOTH",
"476.333 461.5 OFFCURVE",
"412.667 505 OFFCURVE",
"342 505 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */\01239 33 32 11 4 1 2 10 1 0 1 2 74 25 24 2 0 71 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0129 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 35 values pushed */\0120 3 3 4 91 6 5 2 4 4 45 75 0 2 2 4 91 6 5 2 4 4 45 75 0 1 1 0 91 0 0 0 46 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01212 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 35 values pushed */\0120 3 3 4 91 6 5 2 4 4 45 75 0 2 2 4 91 6 5 2 4 4 45 75 0 1 1 0 91 0 0 0 43 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 35 values pushed */\0120 3 3 4 91 6 5 2 4 4 45 75 0 2 2 4 91 6 5 2 4 4 45 75 0 1 1 0 91 0 0 0 46 0 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\0120 0 0 43 0 42 37 39 37 36 38 7 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 584;
}
);
leftKerningGroup = p;
note = p;
rightKerningGroup = b;
unicode = 0070;
},
{
glyphname = thorn;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"255.667 505 OFFCURVE",
"197.667 454.333 OFFCURVE",
"179 393 CURVE",
"174 393 LINE",
"174 802 LINE SMOOTH",
"174 866 OFFCURVE",
"148.667 898 OFFCURVE",
"90 898 CURVE SMOOTH",
"54 898 OFFCURVE",
"5 860.667 OFFCURVE",
"-11 818 CURVE",
"4 798 LINE",
"16 822 OFFCURVE",
"33.333 841 OFFCURVE",
"56 841 CURVE SMOOTH",
"74.667 841 OFFCURVE",
"84 824.667 OFFCURVE",
"84 806 CURVE SMOOTH",
"84 -326 LINE",
"174 -289 LINE",
"174 214 LINE SMOOTH",
"174 323.333 OFFCURVE",
"191 429 OFFCURVE",
"283 429 CURVE SMOOTH",
"309 429 OFFCURVE",
"333.667 421.167 OFFCURVE",
"357 405.5 CURVE SMOOTH",
"403.667 374.167 OFFCURVE",
"435 315.667 OFFCURVE",
"435 249 CURVE SMOOTH",
"435 131.667 OFFCURVE",
"395.667 51 OFFCURVE",
"337 51 CURVE SMOOTH",
"305.667 51 OFFCURVE",
"280.667 56.667 OFFCURVE",
"262 68 CURVE",
"244 6 LINE",
"269.333 -3.333 OFFCURVE",
"291 -10 OFFCURVE",
"307 -10 CURVE SMOOTH",
"348.333 -10 OFFCURVE",
"384.333 1.5 OFFCURVE",
"415 24.5 CURVE SMOOTH",
"476.333 70.5 OFFCURVE",
"511 158.333 OFFCURVE",
"511 277 CURVE SMOOTH",
"511 318.333 OFFCURVE",
"502.167 356.5 OFFCURVE",
"484.5 391.5 CURVE SMOOTH",
"449.167 461.5 OFFCURVE",
"386.333 505 OFFCURVE",
"317 505 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */\01233 32 2 5 3 40 11 2 1 2 10 1 0 1 3 74 25 24 2 0 71 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0129 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 30 values pushed */\0120 4 0 3 5 4 3 99 0 2 2 5 91 6 1 5 5 45 75 0 1 1 0 91 0 0 0 46 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01212 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 30 values pushed */\0120 4 0 3 5 4 3 99 0 2 2 5 91 6 1 5 5 45 75 0 1 1 0 91 0 0 0 43 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 30 values pushed */\0120 4 0 3 5 4 3 99 0 2 2 5 91 6 1 5 5 45 75 0 1 1 0 91 0 0 0 46 0 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\0120 0 0 44 0 43 37 39 37 36 38 7 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 558;
}
);
leftKerningGroup = b;
note = thorn;
rightKerningGroup = b;
unicode = 00FE;
},
{
glyphname = q;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"261.333 510 OFFCURVE",
"217 495.833 OFFCURVE",
"177 467.5 CURVE SMOOTH",
"97 410.833 OFFCURVE",
"48 308 OFFCURVE",
"48 188 CURVE SMOOTH",
"48 66.667 OFFCURVE",
"116.667 -12 OFFCURVE",
"226 -12 CURVE SMOOTH",
"298 -12 OFFCURVE",
"356.667 37.333 OFFCURVE",
"382 116 CURVE",
"384 116 LINE",
"382 110 OFFCURVE",
"380.833 100 OFFCURVE",
"380.5 86 CURVE SMOOTH",
"380.167 72 OFFCURVE",
"380 50.333 OFFCURVE",
"380 21 CURVE SMOOTH",
"380 -195 LINE SMOOTH",
"380 -263 OFFCURVE",
"406.333 -295 OFFCURVE",
"461 -295 CURVE SMOOTH",
"501 -295 OFFCURVE",
"548 -259.333 OFFCURVE",
"564 -214 CURVE",
"550 -199 LINE",
"540.667 -219 OFFCURVE",
"517 -235 OFFCURVE",
"497 -235 CURVE SMOOTH",
"479.667 -235 OFFCURVE",
"468 -222 OFFCURVE",
"468 -202 CURVE SMOOTH",
"468 352 LINE",
"380 315 LINE",
"380 269 LINE SMOOTH",
"380 228.333 OFFCURVE",
"374.5 192.167 OFFCURVE",
"363.5 160.5 CURVE SMOOTH",
"341.5 97.167 OFFCURVE",
"300.667 60 OFFCURVE",
"250 60 CURVE SMOOTH",
"190.127 60 OFFCURVE",
"126 164.152 OFFCURVE",
"126 238 CURVE SMOOTH",
"126 276 OFFCURVE",
"133.333 311.333 OFFCURVE",
"148 344 CURVE SMOOTH",
"177.333 409.333 OFFCURVE",
"230.333 451 OFFCURVE",
"289 451 CURVE SMOOTH",
"323.667 451 OFFCURVE",
"362.667 422.667 OFFCURVE",
"396 376 CURVE",
"469 415 LINE",
"439.667 472.333 OFFCURVE",
"376.667 510 OFFCURVE",
"310 510 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */\01238 20 19 3 2 5 1 0 28 27 2 2 4 2 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01234 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 32 values pushed */\0120 0 0 5 91 6 1 5 5 45 75 0 1 1 4 91 0 4 4 43 75 0 2 2 3 91 0 3 3 47 3 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 29 values pushed */\0120 2 0 3 2 3 95 0 0 0 5 91 6 1 5 5 45 75 0 1 1 4 91 0 4 4 43 4 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\0120 0 0 49 0 48 41 37 40 38 37 7 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 545;
}
);
leftKerningGroup = c;
note = q;
rightKerningGroup = q;
unicode = 0071;
},
{
glyphname = r;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"273 381 LINE",
"245.667 366.333 OFFCURVE",
"215.667 359 OFFCURVE",
"183 359 CURVE SMOOTH",
"157.667 359 OFFCURVE",
"147.667 360.667 OFFCURVE",
"125 370 CURVE",
"60 227 LINE",
"23 244 LINE",
"90 384 LINE",
"69.333 401.333 OFFCURVE",
"56.667 416.667 OFFCURVE",
"52 430 CURVE",
"133 521 LINE",
"153 471.667 OFFCURVE",
"192.667 423 OFFCURVE",
"238 423 CURVE SMOOTH",
"276.667 423 OFFCURVE",
"319.333 437.667 OFFCURVE",
"366 467 CURVE",
"382 453 LINE",
"302 367.667 OFFCURVE",
"244 278.333 OFFCURVE",
"244 177 CURVE SMOOTH",
"244 114.333 OFFCURVE",
"276.333 64 OFFCURVE",
"339 64 CURVE SMOOTH",
"359 64 OFFCURVE",
"379.333 71 OFFCURVE",
"400 85 CURVE",
"411 70 LINE",
"375 23.333 OFFCURVE",
"321 -9 OFFCURVE",
"265 -9 CURVE SMOOTH",
"195.667 -9 OFFCURVE",
"166 46 OFFCURVE",
"166 118 CURVE SMOOTH",
"166 200.667 OFFCURVE",
"216 315.333 OFFCURVE",
"276 378 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */\01234 29 26 3 3 2 28 27 9 8 4 1 3 2 74 24 23 18 17 4 2 72 0 2 0 3 1 2 3 99 0 1 1 0 91 0 0 0 46 0 76 42 39 36 36 4 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 440;
}
);
leftKerningGroup = m;
note = r;
rightKerningGroup = r;
unicode = 0072;
},
{
glyphname = racute;
layers = (
{
components = (
{
alignment = -1;
name = r;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 155, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 440;
}
);
leftKerningGroup = m;
note = racute;
rightKerningGroup = r;
unicode = 0155;
},
{
glyphname = rcaron;
layers = (
{
components = (
{
alignment = -1;
name = r;
},
{
alignment = -1;
name = caron;
transform = "{1, 0, 0, 1, 105, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 440;
}
);
leftKerningGroup = m;
note = rcaron;
rightKerningGroup = r;
unicode = 0159;
},
{
glyphname = rcommaaccent;
layers = (
{
components = (
{
alignment = -1;
name = r;
},
{
alignment = -1;
name = commaaccentcomb;
transform = "{1, 0, 0, 1, 298, 0}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 440;
}
);
leftKerningGroup = m;
note = rcommaaccent;
rightKerningGroup = r;
unicode = 0157;
},
{
glyphname = s;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"151 541 OFFCURVE",
"124 498.333 OFFCURVE",
"124 441 CURVE SMOOTH",
"124 415.667 OFFCURVE",
"128.667 390 OFFCURVE",
"138 364 CURVE",
"58 253 LINE",
"90 232 LINE",
"160 335 LINE",
"170.667 321.667 OFFCURVE",
"200 295.667 OFFCURVE",
"208 289 CURVE",
"272 231.667 OFFCURVE",
"309 193.667 OFFCURVE",
"309 151 CURVE SMOOTH",
"309 97.667 OFFCURVE",
"262.333 54 OFFCURVE",
"205 54 CURVE SMOOTH",
"163.667 54 OFFCURVE",
"129 87.667 OFFCURVE",
"97 129 CURVE",
"30 40 LINE",
"54 6.667 OFFCURVE",
"113.333 -12 OFFCURVE",
"156 -12 CURVE SMOOTH",
"190.667 -12 OFFCURVE",
"221.833 -3.667 OFFCURVE",
"249.5 13 CURVE SMOOTH",
"304.833 46.333 OFFCURVE",
"338 106.667 OFFCURVE",
"338 176 CURVE SMOOTH",
"338 244.837 OFFCURVE",
"296.839 305.211 OFFCURVE",
"256 340 CURVE SMOOTH",
"234 358 OFFCURVE",
"219 373.667 OFFCURVE",
"211 387 CURVE",
"228.948 413.922 OFFCURVE",
"260 442.57 OFFCURVE",
"260 492 CURVE SMOOTH",
"260 525.333 OFFCURVE",
"240.333 541 OFFCURVE",
"195 541 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"209.667 502 OFFCURVE",
"217 494 OFFCURVE",
"217 482 CURVE SMOOTH",
"217 464.667 OFFCURVE",
"201.667 434.333 OFFCURVE",
"187 425 CURVE",
"184.333 431.667 OFFCURVE",
"175 450 OFFCURVE",
"175 474 CURVE SMOOTH",
"175 492.667 OFFCURVE",
"177.667 502 OFFCURVE",
"195 502 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */\01235 34 33 32 20 6 6 1 3 19 1 0 1 2 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01224 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 23 values pushed */\0125 1 3 3 2 91 4 1 2 2 53 75 0 1 1 0 91 0 0 0 43 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 21 values pushed */\0124 1 2 5 1 3 1 2 3 99 0 1 1 0 91 0 0 0 43 0 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 17 values pushed */\01241 41 0 0 41 52 41 51 0 40 0 39 37 47 6 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 384;
}
);
leftKerningGroup = s;
note = s;
rightKerningGroup = s;
unicode = 0073;
},
{
glyphname = sacute;
layers = (
{
components = (
{
alignment = -1;
name = s;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 108, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 384;
}
);
leftKerningGroup = s;
note = sacute;
rightKerningGroup = s;
unicode = 015B;
},
{
glyphname = scaron;
layers = (
{
components = (
{
alignment = -1;
name = s;
},
{
alignment = -1;
name = caron;
transform = "{1, 0, 0, 1, 57, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 384;
}
);
leftKerningGroup = s;
note = scaron;
rightKerningGroup = s;
unicode = 0161;
},
{
glyphname = scedilla;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"338 244.837 OFFCURVE",
"296.839 305.211 OFFCURVE",
"256 340 CURVE SMOOTH",
"234 358 OFFCURVE",
"219 373.667 OFFCURVE",
"211 387 CURVE",
"228.948 413.922 OFFCURVE",
"260 442.57 OFFCURVE",
"260 492 CURVE SMOOTH",
"260 525.333 OFFCURVE",
"240.333 541 OFFCURVE",
"195 541 CURVE SMOOTH",
"151 541 OFFCURVE",
"124 498.333 OFFCURVE",
"124 441 CURVE SMOOTH",
"124 415.667 OFFCURVE",
"128.667 390 OFFCURVE",
"138 364 CURVE",
"58 253 LINE",
"90 232 LINE",
"160 335 LINE",
"170.667 321.667 OFFCURVE",
"200 295.667 OFFCURVE",
"208 289 CURVE",
"272 231.667 OFFCURVE",
"309 193.667 OFFCURVE",
"309 151 CURVE SMOOTH",
"309 97.667 OFFCURVE",
"262.333 54 OFFCURVE",
"205 54 CURVE SMOOTH",
"163.667 54 OFFCURVE",
"129 87.667 OFFCURVE",
"97 129 CURVE",
"30 40 LINE",
"52.667 9.333 OFFCURVE",
"106.667 -9.333 OFFCURVE",
"148 -12 CURVE",
"116 -66 LINE",
"133 -80 LINE",
"143 -73.333 OFFCURVE",
"153.333 -70 OFFCURVE",
"164 -70 CURVE SMOOTH",
"188 -70 OFFCURVE",
"207 -89.333 OFFCURVE",
"207 -116 CURVE SMOOTH",
"207 -141.333 OFFCURVE",
"190.667 -160 OFFCURVE",
"168 -160 CURVE SMOOTH",
"152.667 -160 OFFCURVE",
"140 -153 OFFCURVE",
"130 -139 CURVE",
"111 -150 LINE",
"127 -180.667 OFFCURVE",
"158 -198 OFFCURVE",
"190 -198 CURVE SMOOTH",
"235.333 -198 OFFCURVE",
"277 -165.333 OFFCURVE",
"277 -116 CURVE SMOOTH",
"277 -66.667 OFFCURVE",
"243.667 -36 OFFCURVE",
"201 -36 CURVE SMOOTH",
"185 -36 OFFCURVE",
"168.333 -40.333 OFFCURVE",
"151 -49 CURVE",
"173 -11 LINE",
"204.333 -8.333 OFFCURVE",
"232.667 1.667 OFFCURVE",
"258 19 CURVE SMOOTH",
"308.667 53.667 OFFCURVE",
"338 110.667 OFFCURVE",
"338 176 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"184.333 431.667 OFFCURVE",
"175 450 OFFCURVE",
"175 474 CURVE SMOOTH",
"175 492.667 OFFCURVE",
"177.667 502 OFFCURVE",
"195 502 CURVE SMOOTH",
"209.667 502 OFFCURVE",
"217 494 OFFCURVE",
"217 482 CURVE SMOOTH",
"217 464.667 OFFCURVE",
"201.667 434.333 OFFCURVE",
"187 425 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */\01259 47 46 45 44 32 6 5 7 31 1 4 5 27 4 2 3 0 26 16 15 3 2 3 4 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 38 values pushed */\0120 5 7 4 0 5 104 0 0 0 3 2 0 3 100 0 2 0 1 2 1 95 0 7 7 6 91 0 6 6 53 75 0 4 4 43 4 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01224 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 39 values pushed */\0120 5 7 4 7 5 4 112 0 0 0 3 2 0 3 100 0 2 0 1 2 1 95 0 7 7 6 91 0 6 6 53 75 0 4 4 43 4 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 37 values pushed */\0120 5 7 4 7 5 4 112 0 6 0 7 5 6 7 99 0 0 0 3 2 0 3 100 0 2 0 1 2 1 95 0 4 4 43 4 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 12 values pushed */\01272 70 47 37 19 36 36 36 37 8 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 384;
}
);
leftKerningGroup = s;
note = scedilla;
rightKerningGroup = s;
unicode = 015F;
},
{
glyphname = scircumflex;
layers = (
{
components = (
{
alignment = -1;
name = s;
},
{
alignment = -1;
name = circumflex;
transform = "{1, 0, 0, 1, 57, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 384;
}
);
leftKerningGroup = s;
note = scircumflex;
rightKerningGroup = s;
unicode = 015D;
},
{
glyphname = scommaaccent;
layers = (
{
components = (
{
alignment = -1;
name = s;
},
{
alignment = -1;
name = commaaccentcomb;
transform = "{1, 0, 0, 1, 271, 0}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 384;
}
);
leftKerningGroup = s;
note = scommaaccent;
rightKerningGroup = s;
unicode = 0219;
},
{
glyphname = germandbls;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"251 935 OFFCURVE",
"199.167 909.833 OFFCURVE",
"165.5 859.5 CURVE SMOOTH",
"98.167 758.833 OFFCURVE",
"92 635.667 OFFCURVE",
"92 473 CURVE",
"66 473 LINE",
"43 423 LINE",
"92 423 LINE",
"92 -182 LINE",
"187 -136 LINE",
"187 753 LINE SMOOTH",
"187 846.333 OFFCURVE",
"221.333 893 OFFCURVE",
"290 893 CURVE SMOOTH",
"345.364 893 OFFCURVE",
"394 842.586 OFFCURVE",
"394 792 CURVE SMOOTH",
"394 752 OFFCURVE",
"378.333 708.333 OFFCURVE",
"349 643 CURVE SMOOTH",
"323.667 584.333 OFFCURVE",
"314 557.333 OFFCURVE",
"314 532 CURVE SMOOTH",
"314 483.333 OFFCURVE",
"321.833 441.667 OFFCURVE",
"337.5 407 CURVE SMOOTH",
"368.833 337.667 OFFCURVE",
"408.333 303 OFFCURVE",
"475 251 CURVE SMOOTH",
"535 205.667 OFFCURVE",
"560 182 OFFCURVE",
"560 142 CURVE SMOOTH",
"560 87.333 OFFCURVE",
"515.333 45 OFFCURVE",
"450 45 CURVE SMOOTH",
"416.667 45 OFFCURVE",
"371 81.667 OFFCURVE",
"347 115 CURVE",
"264 32 LINE",
"294.667 -5.333 OFFCURVE",
"351.333 -21 OFFCURVE",
"390 -21 CURVE SMOOTH",
"424.667 -21 OFFCURVE",
"456.667 -12 OFFCURVE",
"486 6 CURVE SMOOTH",
"544.667 42 OFFCURVE",
"581 106 OFFCURVE",
"581 174 CURVE SMOOTH",
"581 202.667 OFFCURVE",
"575.333 228.167 OFFCURVE",
"564 250.5 CURVE SMOOTH",
"541.333 295.167 OFFCURVE",
"512.667 321.333 OFFCURVE",
"458 364 CURVE SMOOTH",
"416.314 396.91 OFFCURVE",
"346 475.417 OFFCURVE",
"346 530 CURVE SMOOTH",
"346 576.667 OFFCURVE",
"364 609.333 OFFCURVE",
"400 664 CURVE SMOOTH",
"436 716 OFFCURVE",
"453 749 OFFCURVE",
"453 793 CURVE SMOOTH",
"453 882.333 OFFCURVE",
"399.667 935 OFFCURVE",
"321 935 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */\01224 1 1 3 23 1 0 1 2 74 51 50 2 0 71 0 4 0 3 1 4 3 97 0 2 2 5 91 6 1 5 5 52 75 0 1 1 0 91 0 0 0 43 0 76 0 0 0 59 0 58 55 54 53 52 48 46 28 26 21 19 7 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 635;
}
);
leftKerningGroup = b;
note = germandbls;
rightKerningGroup = germandbls;
unicode = 00DF;
},
{
glyphname = t;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"193 500 LINE",
"193 766 LINE",
"100 730 LINE",
"100 500 LINE",
"56 500 LINE",
"25 436 LINE",
"100 436 LINE",
"100 96 LINE SMOOTH",
"100 28.667 OFFCURVE",
"129.333 -5 OFFCURVE",
"188 -5 CURVE",
"185.333 -5 OFFCURVE",
"183.333 -5.167 OFFCURVE",
"182 -5.5 CURVE SMOOTH",
"180.667 -5.833 OFFCURVE",
"179.667 -6 OFFCURVE",
"179 -6 CURVE",
"179 -30.025 OFFCURVE",
"272.301 22.602 OFFCURVE",
"298 74 CURVE",
"284 89 LINE",
"259.333 63 OFFCURVE",
"240 50 OFFCURVE",
"226 50 CURVE SMOOTH",
"206 50 OFFCURVE",
"193 64 OFFCURVE",
"193 84 CURVE SMOOTH",
"193 436 LINE",
"302 436 LINE",
"332 500 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */\01210 9 2 2 1 1 74 25 24 2 0 72 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01242 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 26 values pushed */\0120 2 1 3 1 2 3 112 4 1 1 1 0 89 5 1 0 0 45 75 0 3 3 46 3 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 24 values pushed */\0120 2 1 3 1 2 3 112 5 1 0 4 1 1 2 0 1 97 0 3 3 46 3 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 9 values pushed */\01217 18 40 35 17 16 6 7 26 \012CALL[ ]	/* CallFunction */";
};
width = 346;
}
);
leftKerningGroup = t;
note = t;
rightKerningGroup = t;
unicode = 0074;
},
{
glyphname = tbar;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"193 308 LINE",
"193 436 LINE",
"302 436 LINE",
"332 500 LINE",
"193 500 LINE",
"193 766 LINE",
"100 730 LINE",
"100 500 LINE",
"56 500 LINE",
"25 436 LINE",
"100 436 LINE",
"100 308 LINE",
"44 308 LINE",
"19 262 LINE",
"100 262 LINE",
"100 96 LINE SMOOTH",
"100 28.667 OFFCURVE",
"129.333 -5 OFFCURVE",
"188 -5 CURVE",
"185.333 -5 OFFCURVE",
"183.333 -5.167 OFFCURVE",
"182 -5.5 CURVE SMOOTH",
"180.667 -5.833 OFFCURVE",
"179.667 -6 OFFCURVE",
"179 -6 CURVE",
"179 -30.025 OFFCURVE",
"272.301 22.602 OFFCURVE",
"298 74 CURVE",
"284 89 LINE",
"259.333 63 OFFCURVE",
"240 50 OFFCURVE",
"226 50 CURVE SMOOTH",
"206 50 OFFCURVE",
"193 64 OFFCURVE",
"193 84 CURVE SMOOTH",
"193 262 LINE",
"298 262 LINE",
"321 308 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */\01210 9 2 2 1 1 74 29 28 2 7 72 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01242 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 36 values pushed */\0120 2 1 3 1 2 3 112 5 1 0 4 1 1 2 0 1 97 9 1 6 6 7 89 8 1 7 7 45 75 0 3 3 46 3 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 34 values pushed */\0120 2 1 3 1 2 3 112 8 1 7 9 1 6 0 7 6 97 5 1 0 4 1 1 2 0 1 97 0 3 3 46 3 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\01233 32 19 17 17 17 18 40 35 17 16 10 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 345;
}
);
leftKerningGroup = t;
note = tbar;
rightKerningGroup = t;
unicode = 0167;
},
{
glyphname = tcaron;
layers = (
{
components = (
{
alignment = -1;
name = t;
},
{
alignment = -1;
name = commaaboverightcomb;
transform = "{1, 0, 0, 1, 391, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 346;
}
);
leftKerningGroup = t;
note = tcaron;
rightKerningGroup = t;
unicode = 0165;
},
{
glyphname = tcommaaccent;
layers = (
{
components = (
{
alignment = -1;
name = t;
},
{
alignment = -1;
name = commaaccentcomb;
transform = "{1, 0, 0, 1, 253, 0}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 346;
}
);
leftKerningGroup = t;
note = uni021B;
rightKerningGroup = t;
unicode = 021B;
},
{
glyphname = u;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"484 514 LINE",
"384 469 LINE",
"384 455.667 OFFCURVE",
"376.167 415.333 OFFCURVE",
"360.5 348 CURVE SMOOTH",
"329.167 213.333 OFFCURVE",
"277.333 79 OFFCURVE",
"220 79 CURVE SMOOTH",
"215.333 79 OFFCURVE",
"211.333 82.167 OFFCURVE",
"208 88.5 CURVE SMOOTH",
"204.667 94.833 OFFCURVE",
"203 105.333 OFFCURVE",
"203 120 CURVE SMOOTH",
"203 408 LINE SMOOTH",
"203 474 OFFCURVE",
"174.333 507 OFFCURVE",
"117 507 CURVE",
"119.667 507 OFFCURVE",
"121.667 507.167 OFFCURVE",
"123 507.5 CURVE SMOOTH",
"124.333 507.833 OFFCURVE",
"125.333 508 OFFCURVE",
"126 508 CURVE",
"126 530.511 OFFCURVE",
"39.821 478.825 OFFCURVE",
"18 427 CURVE",
"30 411 LINE",
"50 437.667 OFFCURVE",
"68 451 OFFCURVE",
"84 451 CURVE SMOOTH",
"101.333 451 OFFCURVE",
"112 436.667 OFFCURVE",
"112 414 CURVE SMOOTH",
"112 132 LINE SMOOTH",
"112 63.128 OFFCURVE",
"133.384 -12 OFFCURVE",
"179 -12 CURVE SMOOTH",
"293.667 -12 OFFCURVE",
"349.333 160 OFFCURVE",
"384 324 CURVE",
"387 324 LINE",
"395 304 LINE",
"394.333 282 OFFCURVE",
"394 252.667 OFFCURVE",
"394 216 CURVE SMOOTH",
"394 88.049 OFFCURVE",
"424.21 -5 OFFCURVE",
"473 -5 CURVE SMOOTH",
"520 -5 OFFCURVE",
"543.831 1.638 OFFCURVE",
"579 77 CURVE",
"564 92 LINE",
"544 66 OFFCURVE",
"527 53 OFFCURVE",
"513 53 CURVE SMOOTH",
"494.333 53 OFFCURVE",
"484 67 OFFCURVE",
"484 87 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */\01249 1 3 4 32 31 17 16 5 5 5 3 6 1 0 5 3 74 50 1 4 72 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01234 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 33 values pushed */\0120 3 4 5 4 3 5 112 0 0 5 1 5 0 1 112 0 4 4 45 75 0 5 5 1 92 2 1 1 1 46 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 37 values pushed */\0120 3 4 5 4 3 5 112 0 0 5 1 5 0 1 112 0 4 4 45 75 0 1 1 46 75 0 5 5 2 92 0 2 2 43 2 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 9 values pushed */\01236 40 38 41 52 34 6 7 26 \012CALL[ ]	/* CallFunction */";
};
width = 593;
}
);
leftKerningGroup = u;
note = u;
rightKerningGroup = u;
unicode = 0075;
},
{
glyphname = uacute;
layers = (
{
components = (
{
alignment = -1;
name = u;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 209, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 593;
}
);
leftKerningGroup = u;
note = uacute;
rightKerningGroup = u;
unicode = 00FA;
},
{
glyphname = ubreve;
layers = (
{
components = (
{
alignment = -1;
name = u;
},
{
alignment = -1;
name = breve;
transform = "{1, 0, 0, 1, 192, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 593;
}
);
leftKerningGroup = u;
note = ubreve;
rightKerningGroup = u;
unicode = 016D;
},
{
glyphname = ucircumflex;
layers = (
{
components = (
{
alignment = -1;
name = u;
},
{
alignment = -1;
name = circumflex;
transform = "{1, 0, 0, 1, 158, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 593;
}
);
leftKerningGroup = u;
note = ucircumflex;
rightKerningGroup = u;
unicode = 00FB;
},
{
glyphname = udieresis;
layers = (
{
components = (
{
alignment = -1;
name = u;
},
{
alignment = -1;
name = dieresis;
transform = "{1, 0, 0, 1, 150, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 593;
}
);
leftKerningGroup = u;
note = udieresis;
rightKerningGroup = u;
unicode = 00FC;
},
{
glyphname = ugrave;
layers = (
{
components = (
{
alignment = -1;
name = u;
},
{
alignment = -1;
name = grave;
transform = "{1, 0, 0, 1, 208, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 593;
}
);
leftKerningGroup = u;
note = ugrave;
rightKerningGroup = u;
unicode = 00F9;
},
{
glyphname = uhungarumlaut;
layers = (
{
components = (
{
alignment = -1;
name = u;
},
{
alignment = -1;
name = hungarumlaut;
transform = "{1, 0, 0, 1, 137, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 593;
}
);
leftKerningGroup = u;
note = uhungarumlaut;
rightKerningGroup = u;
unicode = 0171;
},
{
glyphname = umacron;
layers = (
{
components = (
{
alignment = -1;
name = u;
},
{
alignment = -1;
name = macron;
transform = "{1, 0, 0, 1, 175, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 593;
}
);
leftKerningGroup = u;
note = umacron;
rightKerningGroup = u;
unicode = 016B;
},
{
glyphname = uogonek;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"564 -111 LINE",
"550.667 -128.333 OFFCURVE",
"534.333 -137 OFFCURVE",
"515 -137 CURVE SMOOTH",
"484.333 -137 OFFCURVE",
"469 -118.333 OFFCURVE",
"469 -89 CURVE SMOOTH",
"469 -58.333 OFFCURVE",
"486.667 -22.667 OFFCURVE",
"516 4 CURVE",
"514 6 LINE",
"540.667 19.333 OFFCURVE",
"562.333 43 OFFCURVE",
"579 77 CURVE",
"564 92 LINE",
"544 66 OFFCURVE",
"527 53 OFFCURVE",
"513 53 CURVE SMOOTH",
"494.333 53 OFFCURVE",
"484 67 OFFCURVE",
"484 87 CURVE SMOOTH",
"484 514 LINE",
"384 469 LINE",
"384 455.667 OFFCURVE",
"376.167 415.333 OFFCURVE",
"360.5 348 CURVE SMOOTH",
"329.167 213.333 OFFCURVE",
"277.333 79 OFFCURVE",
"220 79 CURVE SMOOTH",
"215.333 79 OFFCURVE",
"211.333 82.167 OFFCURVE",
"208 88.5 CURVE SMOOTH",
"204.667 94.833 OFFCURVE",
"203 105.333 OFFCURVE",
"203 120 CURVE SMOOTH",
"203 408 LINE SMOOTH",
"203 474 OFFCURVE",
"174.333 507 OFFCURVE",
"117 507 CURVE",
"119.667 507 OFFCURVE",
"121.667 507.167 OFFCURVE",
"123 507.5 CURVE SMOOTH",
"124.333 507.833 OFFCURVE",
"125.333 508 OFFCURVE",
"126 508 CURVE",
"126 530.511 OFFCURVE",
"39.821 478.825 OFFCURVE",
"18 427 CURVE",
"30 411 LINE",
"50 437.667 OFFCURVE",
"68 451 OFFCURVE",
"84 451 CURVE SMOOTH",
"101.333 451 OFFCURVE",
"112 436.667 OFFCURVE",
"112 414 CURVE SMOOTH",
"112 132 LINE SMOOTH",
"112 63.128 OFFCURVE",
"133.384 -12 OFFCURVE",
"179 -12 CURVE SMOOTH",
"293.667 -12 OFFCURVE",
"349.333 160 OFFCURVE",
"384 324 CURVE",
"387 324 LINE",
"395 304 LINE",
"394.333 282 OFFCURVE",
"394 252.667 OFFCURVE",
"394 216 CURVE SMOOTH",
"394 88.049 OFFCURVE",
"424.21 -5 OFFCURVE",
"473 -5 CURVE",
"463.667 -5 OFFCURVE",
"463 -7 OFFCURVE",
"471 -7 CURVE",
"429 -41.667 OFFCURVE",
"408 -79.333 OFFCURVE",
"408 -120 CURVE SMOOTH",
"408 -169.333 OFFCURVE",
"447 -195 OFFCURVE",
"487 -195 CURVE SMOOTH",
"524.333 -195 OFFCURVE",
"557 -167.333 OFFCURVE",
"581 -126 CURVE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01240 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 26 values pushed */\01250 1 3 4 57 33 32 18 17 5 5 3 58 1 6 5 69 1 7 1 4 74 51 1 4 72 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 26 values pushed */\01250 1 3 4 57 33 32 18 17 5 5 3 58 1 6 5 69 1 7 2 4 74 51 1 4 72 \012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01240 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 40 values pushed */\0120 3 4 5 4 3 5 112 0 6 5 1 5 6 1 112 0 7 0 0 7 0 96 0 4 4 45 75 0 5 5 1 92 2 1 1 1 46 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 44 values pushed */\0120 3 4 5 4 3 5 112 0 6 5 1 5 6 1 112 0 7 0 0 7 0 96 0 4 4 45 75 0 1 1 46 75 0 5 5 2 92 0 2 2 43 2 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 11 values pushed */\01242 39 36 40 38 41 68 34 8 7 28 \012CALL[ ]	/* CallFunction */";
};
width = 593;
}
);
leftKerningGroup = u;
note = uogonek;
rightKerningGroup = u;
unicode = 0173;
},
{
glyphname = uring;
layers = (
{
components = (
{
alignment = -1;
name = u;
},
{
alignment = -1;
name = ring;
transform = "{1, 0, 0, 1, 199, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 593;
}
);
leftKerningGroup = u;
note = uring;
rightKerningGroup = u;
unicode = 016F;
},
{
glyphname = utilde;
layers = (
{
components = (
{
alignment = -1;
name = u;
},
{
alignment = -1;
name = tilde;
transform = "{1, 0, 0, 1, 185, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 593;
}
);
leftKerningGroup = u;
note = utilde;
rightKerningGroup = u;
unicode = 0169;
},
{
glyphname = v;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"343 436 LINE",
"396.333 411.333 OFFCURVE",
"423 374.333 OFFCURVE",
"423 325 CURVE SMOOTH",
"423 313 OFFCURVE",
"420.5 300.667 OFFCURVE",
"415.5 288 CURVE SMOOTH",
"410.5 275.333 OFFCURVE",
"407.667 268 OFFCURVE",
"407 266 CURVE",
"318 85 LINE",
"178 396 LINE SMOOTH",
"169.071 416.835 OFFCURVE",
"143.332 500 OFFCURVE",
"109 500 CURVE SMOOTH",
"65 500 OFFCURVE",
"15 462.667 OFFCURVE",
"-1 412 CURVE",
"8 401 LINE",
"10 402.333 OFFCURVE",
"13.833 405.167 OFFCURVE",
"19.5 409.5 CURVE SMOOTH",
"25.167 413.833 OFFCURVE",
"31.333 416 OFFCURVE",
"38 416 CURVE SMOOTH",
"56 416 OFFCURVE",
"73.333 400.667 OFFCURVE",
"90 370 CURVE",
"263 -8 LINE",
"264.333 -12 OFFCURVE",
"276.333 -17 OFFCURVE",
"287 -17 CURVE SMOOTH",
"293.667 -17 OFFCURVE",
"304.333 -13.667 OFFCURVE",
"307 -11 CURVE",
"481 333 LINE SMOOTH",
"493 357 OFFCURVE",
"501 394 OFFCURVE",
"501 422 CURVE SMOOTH",
"501 474 OFFCURVE",
"470.333 516.667 OFFCURVE",
"417 534 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */\01233 1 1 2 27 19 2 0 1 2 74 34 1 2 72 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01242 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 19 values pushed */\0120 1 2 0 2 1 0 112 0 2 2 45 75 0 0 0 43 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 16 values pushed */\0120 2 1 2 114 0 1 0 1 114 0 0 0 43 0 76 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 6 values pushed */\01237 36 40 3 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 515;
}
);
leftKerningGroup = v;
note = v;
rightKerningGroup = v;
unicode = 0076;
},
{
glyphname = w;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"540 436 LINE",
"584 413.333 OFFCURVE",
"610 374.333 OFFCURVE",
"610 325 CURVE SMOOTH",
"610 303.667 OFFCURVE",
"607.333 287.667 OFFCURVE",
"602 277 CURVE",
"543 134 LINE",
"437 510 LINE",
"344 475 LINE",
"376 365 LINE",
"289 136 LINE",
"204 401 LINE SMOOTH",
"186.661 454.352 OFFCURVE",
"172.767 500 OFFCURVE",
"134 500 CURVE SMOOTH",
"83.333 500 OFFCURVE",
"42.333 465.333 OFFCURVE",
"13 412 CURVE",
"24 396 LINE",
"37.333 409.333 OFFCURVE",
"51.667 416 OFFCURVE",
"67 416 CURVE SMOOTH",
"93.667 416 OFFCURVE",
"106.333 403.333 OFFCURVE",
"117 366 CURVE SMOOTH",
"229 15 LINE",
"234.333 3 OFFCURVE",
"241 -4 OFFCURVE",
"257 -4 CURVE SMOOTH",
"273 -4 OFFCURVE",
"278 2.667 OFFCURVE",
"286 20 CURVE",
"393 303 LINE",
"475 18 LINE SMOOTH",
"479 5.333 OFFCURVE",
"489.667 -1 OFFCURVE",
"507 -1 CURVE SMOOTH",
"522.333 -1 OFFCURVE",
"531.667 5 OFFCURVE",
"535 17 CURVE",
"668 332 LINE SMOOTH",
"677.333 356 OFFCURVE",
"684 392.333 OFFCURVE",
"684 419 CURVE SMOOTH",
"684 475.667 OFFCURVE",
"660.333 515 OFFCURVE",
"613 537 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */\01242 34 2 2 3 36 33 32 24 23 10 6 0 2 2 74 43 35 2 3 72 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01242 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 20 values pushed */\0120 2 3 0 3 2 0 112 0 3 3 45 75 1 1 0 0 46 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 17 values pushed */\0120 3 2 3 114 0 2 0 2 114 1 1 0 0 46 0 76 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 7 values pushed */\01236 37 37 38 4 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 715;
}
);
leftKerningGroup = w;
note = w;
rightKerningGroup = w;
unicode = 0077;
},
{
glyphname = wacute;
layers = (
{
components = (
{
alignment = -1;
name = w;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 296, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 715;
}
);
leftKerningGroup = w;
note = wacute;
rightKerningGroup = w;
unicode = 1E83;
},
{
glyphname = wcircumflex;
layers = (
{
components = (
{
alignment = -1;
name = w;
},
{
alignment = -1;
name = circumflex;
transform = "{1, 0, 0, 1, 245, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 715;
}
);
leftKerningGroup = w;
note = wcircumflex;
rightKerningGroup = w;
unicode = 0175;
},
{
glyphname = wdieresis;
layers = (
{
components = (
{
alignment = -1;
name = w;
},
{
alignment = -1;
name = dieresis;
transform = "{1, 0, 0, 1, 237, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 715;
}
);
leftKerningGroup = w;
note = wdieresis;
rightKerningGroup = w;
unicode = 1E85;
},
{
glyphname = wgrave;
layers = (
{
components = (
{
alignment = -1;
name = w;
},
{
alignment = -1;
name = grave;
transform = "{1, 0, 0, 1, 295, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 715;
}
);
leftKerningGroup = w;
note = wgrave;
rightKerningGroup = w;
unicode = 1E81;
},
{
glyphname = x;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"514 82 LINE",
"500 74.667 OFFCURVE",
"489.667 71 OFFCURVE",
"483 71 CURVE SMOOTH",
"466.333 71 OFFCURVE",
"448.167 81.167 OFFCURVE",
"428.5 101.5 CURVE SMOOTH",
"389.167 142.167 OFFCURVE",
"359.667 190 OFFCURVE",
"297 294 CURVE",
"323.667 366 OFFCURVE",
"354.333 405 OFFCURVE",
"413 405 CURVE SMOOTH",
"433 405 OFFCURVE",
"457.667 394.667 OFFCURVE",
"471 384 CURVE",
"517 489 LINE",
"499.667 510.333 OFFCURVE",
"475.333 521 OFFCURVE",
"444 521 CURVE SMOOTH",
"348 521 OFFCURVE",
"306.667 454.333 OFFCURVE",
"272 337 CURVE",
"238.667 391.667 OFFCURVE",
"209.5 434 OFFCURVE",
"184.5 464 CURVE SMOOTH",
"159.5 494 OFFCURVE",
"136.667 509 OFFCURVE",
"116 509 CURVE SMOOTH",
"88 509 OFFCURVE",
"52.667 477.667 OFFCURVE",
"26 439 CURVE",
"38 422 LINE",
"47.333 429.333 OFFCURVE",
"58.333 433 OFFCURVE",
"71 433 CURVE SMOOTH",
"92.333 433 OFFCURVE",
"116.167 416 OFFCURVE",
"142.5 382 CURVE SMOOTH",
"168.833 348 OFFCURVE",
"201.667 298 OFFCURVE",
"241 232 CURVE",
"215.667 153.333 OFFCURVE",
"185.667 109 OFFCURVE",
"127 109 CURVE SMOOTH",
"111 109 OFFCURVE",
"84 122.667 OFFCURVE",
"76 132 CURVE",
"25 23 LINE",
"44.333 3 OFFCURVE",
"68 -7 OFFCURVE",
"96 -7 CURVE SMOOTH",
"130 -7 OFFCURVE",
"158 1.833 OFFCURVE",
"180 19.5 CURVE SMOOTH",
"224 54.833 OFFCURVE",
"244.333 107.333 OFFCURVE",
"267 190 CURVE",
"305 126.667 OFFCURVE",
"337.667 78 OFFCURVE",
"365 44 CURVE SMOOTH",
"392.333 10 OFFCURVE",
"417.333 -7 OFFCURVE",
"440 -7 CURVE SMOOTH",
"464 -7 OFFCURVE",
"501.667 26.333 OFFCURVE",
"527 65 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 79 values pushed */\01236 25 2 3 4 24 1 6 3 43 37 31 19 13 6 6 2 6 49 1 7 2 12 1 0 7 5 74 0 7 2 0 2 7 0 112 0 3 3 4 91 0 4 4 45 75 0 6 6 5 91 0 5 5 53 75 0 2 2 0 91 1 1 0 0 46 0 76 37 36 36 36 36 36 37 34 8 7 28 \012CALL[ ]	/* CallFunction */";
};
width = 563;
}
);
leftKerningGroup = x;
note = x;
rightKerningGroup = x;
unicode = 0078;
},
{
glyphname = y;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"484 514 LINE",
"385 469 LINE",
"385 431.667 OFFCURVE",
"375 383.167 OFFCURVE",
"355 323.5 CURVE SMOOTH",
"321.976 224.98 OFFCURVE",
"261.303 98 OFFCURVE",
"222 98 CURVE SMOOTH",
"208 98 OFFCURVE",
"201 110.333 OFFCURVE",
"201 135 CURVE SMOOTH",
"201 408 LINE SMOOTH",
"201 473.333 OFFCURVE",
"174.333 508 OFFCURVE",
"121 508 CURVE SMOOTH",
"66.333 508 OFFCURVE",
"44.333 489.667 OFFCURVE",
"15 427 CURVE",
"31 411 LINE",
"49.667 438.333 OFFCURVE",
"67.333 452 OFFCURVE",
"84 452 CURVE SMOOTH",
"100 452 OFFCURVE",
"112 435.333 OFFCURVE",
"112 414 CURVE SMOOTH",
"112 132 LINE SMOOTH",
"112 47.721 OFFCURVE",
"137.291 -12 OFFCURVE",
"179 -12 CURVE SMOOTH",
"266.333 -12 OFFCURVE",
"337.333 112 OFFCURVE",
"392 360 CURVE",
"398 360 LINE",
"398 300 LINE SMOOTH",
"397.333 264.667 OFFCURVE",
"397 185 OFFCURVE",
"397 61 CURVE SMOOTH",
"397 -59.952 OFFCURVE",
"349.125 -225 OFFCURVE",
"287 -225 CURVE SMOOTH",
"253.667 -225 OFFCURVE",
"212 -206 OFFCURVE",
"184 -178 CURVE",
"114 -267 LINE",
"148.667 -292.333 OFFCURVE",
"179 -302 OFFCURVE",
"215 -302 CURVE SMOOTH",
"261.667 -302 OFFCURVE",
"305.667 -285.667 OFFCURVE",
"347 -253 CURVE SMOOTH",
"429.667 -187.667 OFFCURVE",
"484 -71.333 OFFCURVE",
"484 54 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */\01245 1 3 4 32 31 18 3 5 3 8 1 1 2 7 1 0 1 4 74 46 1 4 72 0 3 3 4 91 0 4 4 45 75 0 5 5 2 91 0 2 2 43 75 0 1 1 0 91 0 0 0 47 0 76 36 36 38 40 37 35 6 7 26 \012CALL[ ]	/* CallFunction */";
};
width = 566;
}
);
leftKerningGroup = y;
note = y;
rightKerningGroup = y;
unicode = 0079;
},
{
glyphname = yacute;
layers = (
{
components = (
{
alignment = -1;
name = y;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 209, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 566;
}
);
leftKerningGroup = y;
note = yacute;
rightKerningGroup = y;
unicode = 00FD;
},
{
glyphname = ycircumflex;
layers = (
{
components = (
{
alignment = -1;
name = y;
},
{
alignment = -1;
name = circumflex;
transform = "{1, 0, 0, 1, 159, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 566;
}
);
leftKerningGroup = y;
note = ycircumflex;
rightKerningGroup = y;
unicode = 0177;
},
{
glyphname = ydieresis;
layers = (
{
components = (
{
alignment = -1;
name = y;
},
{
alignment = -1;
name = dieresis;
transform = "{1, 0, 0, 1, 151, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 566;
}
);
leftKerningGroup = y;
note = ydieresis;
rightKerningGroup = y;
unicode = 00FF;
},
{
glyphname = ygrave;
layers = (
{
components = (
{
alignment = -1;
name = y;
},
{
alignment = -1;
name = grave;
transform = "{1, 0, 0, 1, 208, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 566;
}
);
leftKerningGroup = y;
note = ygrave;
rightKerningGroup = y;
unicode = 1EF3;
},
{
glyphname = z;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"137 84 LINE",
"453 494 LINE",
"446 512 LINE",
"401.333 497.333 OFFCURVE",
"339.333 490 OFFCURVE",
"260 490 CURVE SMOOTH",
"240 490 OFFCURVE",
"218.333 491.667 OFFCURVE",
"195 495 CURVE SMOOTH",
"161.667 499 OFFCURVE",
"134 500.667 OFFCURVE",
"112 500 CURVE",
"31 394 LINE",
"41.667 396.667 OFFCURVE",
"84 404 OFFCURVE",
"96 404 CURVE SMOOTH",
"121.333 404 OFFCURVE",
"145 403 OFFCURVE",
"167 401 CURVE",
"192.333 399.667 OFFCURVE",
"212 399 OFFCURVE",
"226 399 CURVE SMOOTH",
"276 399 OFFCURVE",
"312.333 405 OFFCURVE",
"335 417 CURVE",
"340 409 LINE",
"31 8 LINE",
"44 -9 LINE",
"98.667 7.667 OFFCURVE",
"148.667 16 OFFCURVE",
"194 16 CURVE SMOOTH",
"210.667 16 OFFCURVE",
"239 12 OFFCURVE",
"279 4 CURVE",
"284.333 3.333 OFFCURVE",
"295.833 1.333 OFFCURVE",
"313.5 -2 CURVE SMOOTH",
"331.167 -5.333 OFFCURVE",
"346.667 -7 OFFCURVE",
"360 -7 CURVE SMOOTH",
"372.667 -7 OFFCURVE",
"383.667 -3.667 OFFCURVE",
"393 3 CURVE",
"472 113 LINE",
"440 101 OFFCURVE",
"402.667 95 OFFCURVE",
"360 95 CURVE SMOOTH",
"344 95 OFFCURVE",
"326.333 96 OFFCURVE",
"307 98 CURVE",
"283 99.333 OFFCURVE",
"266 100 OFFCURVE",
"256 100 CURVE SMOOTH",
"218.667 100 OFFCURVE",
"174 93.667 OFFCURVE",
"142 79 CURVE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01224 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 23 values pushed */\01221 1 4 6 30 8 2 0 4 40 1 3 0 3 74 37 1 6 72 18 1 2 71 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 23 values pushed */\01221 1 4 7 30 8 2 0 4 40 1 3 0 3 74 37 1 6 72 18 1 2 71 \012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01224 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 32 values pushed */\0120 3 0 2 0 3 2 112 5 1 4 4 6 91 7 1 6 6 45 75 1 1 0 0 2 91 0 2 2 46 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01242 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 37 values pushed */\0120 3 0 2 0 3 2 112 0 7 4 4 7 87 5 1 4 4 6 91 0 6 6 45 75 1 1 0 0 2 91 0 2 2 46 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 35 values pushed */\0120 3 0 2 0 3 2 112 0 6 7 4 6 87 0 7 5 1 4 0 7 4 99 1 1 0 0 2 91 0 2 2 46 2 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 11 values pushed */\01234 19 33 53 35 35 33 49 8 7 28 \012CALL[ ]	/* CallFunction */";
};
width = 497;
}
);
leftKerningGroup = z;
note = z;
rightKerningGroup = z;
unicode = 007A;
},
{
glyphname = zacute;
layers = (
{
components = (
{
alignment = -1;
name = z;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 205, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 497;
}
);
leftKerningGroup = z;
note = zacute;
rightKerningGroup = z;
unicode = 017A;
},
{
glyphname = zcaron;
layers = (
{
components = (
{
alignment = -1;
name = z;
},
{
alignment = -1;
name = caron;
transform = "{1, 0, 0, 1, 154, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 497;
}
);
leftKerningGroup = z;
note = zcaron;
rightKerningGroup = z;
unicode = 017E;
},
{
glyphname = zdotaccent;
layers = (
{
components = (
{
alignment = -1;
name = z;
},
{
alignment = -1;
name = dotaccent;
transform = "{1, 0, 0, 1, 233, 124}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 497;
}
);
leftKerningGroup = z;
note = zdotaccent;
rightKerningGroup = z;
unicode = 017C;
},
{
glyphname = f_f;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"479.333 718 OFFCURVE",
"433 694.333 OFFCURVE",
"401 647 CURVE",
"358.333 691 OFFCURVE",
"304.333 718 OFFCURVE",
"259 718 CURVE SMOOTH",
"128.333 718 OFFCURVE",
"69 614 OFFCURVE",
"69 490 CURVE SMOOTH",
"69 384 LINE",
"40 384 LINE",
"20 335 LINE",
"69 335 LINE",
"69 -139 LINE",
"157 -102 LINE",
"157 335 LINE",
"363 335 LINE",
"363 -139 LINE",
"450 -102 LINE",
"450 335 LINE",
"567 335 LINE",
"589 384 LINE",
"450 384 LINE",
"450 595 LINE SMOOTH",
"450 643 OFFCURVE",
"465.333 684 OFFCURVE",
"512 684 CURVE SMOOTH",
"546.667 684 OFFCURVE",
"572 654.667 OFFCURVE",
"584 616 CURVE",
"652 653 LINE",
"625.333 691.667 OFFCURVE",
"578.667 718 OFFCURVE",
"540 718 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"305 684 OFFCURVE",
"347 635.667 OFFCURVE",
"371 561 CURVE",
"365.667 539.667 OFFCURVE",
"363 516 OFFCURVE",
"363 490 CURVE SMOOTH",
"363 384 LINE",
"157 384 LINE",
"157 578 LINE SMOOTH",
"157 648.667 OFFCURVE",
"185 684 OFFCURVE",
"241 684 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */\01239 30 3 2 4 1 0 1 74 19 18 15 14 4 2 71 8 5 2 1 4 3 2 2 1 2 93 11 9 2 0 0 6 91 10 7 2 6 6 42 0 76 33 33 0 0 33 42 33 41 36 35 0 32 0 31 35 17 19 19 17 19 37 12 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 568;
}
);
leftKerningGroup = f;
note = f_f;
rightKerningGroup = f;
},
{
glyphname = f_f_i;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"780 71 LINE",
"767.333 53.667 OFFCURVE",
"755.333 45 OFFCURVE",
"744 45 CURVE SMOOTH",
"730 45 OFFCURVE",
"723 53.667 OFFCURVE",
"723 71 CURVE SMOOTH",
"723 412 LINE",
"635 384 LINE",
"447 384 LINE",
"447 578 LINE SMOOTH",
"447 638 OFFCURVE",
"464.333 683 OFFCURVE",
"527 683 CURVE SMOOTH",
"573.667 683 OFFCURVE",
"606.667 643.333 OFFCURVE",
"624 586 CURVE",
"707 616 LINE",
"669.667 677.333 OFFCURVE",
"600.333 718 OFFCURVE",
"543 718 CURVE SMOOTH",
"478.333 718 OFFCURVE",
"430 692.667 OFFCURVE",
"398 642 CURVE",
"356.667 694 OFFCURVE",
"308.333 718 OFFCURVE",
"259 718 CURVE SMOOTH",
"131 718 OFFCURVE",
"74 615.333 OFFCURVE",
"74 490 CURVE SMOOTH",
"74 384 LINE",
"46 384 LINE",
"24 335 LINE",
"74 335 LINE",
"74 -139 LINE",
"160 -102 LINE",
"160 335 LINE",
"359 335 LINE",
"359 -139 LINE",
"447 -102 LINE",
"447 335 LINE",
"635 335 LINE",
"635 75 LINE SMOOTH",
"635 23 OFFCURVE",
"663.333 -5 OFFCURVE",
"702 -5 CURVE SMOOTH",
"736.667 -5 OFFCURVE",
"772.667 16.667 OFFCURVE",
"794 58 CURVE"
);
},
{
closed = 1;
nodes = (
"359 384 LINE",
"160 384 LINE",
"160 578 LINE SMOOTH",
"160 638 OFFCURVE",
"177 683 OFFCURVE",
"241 683 CURVE SMOOTH",
"298.333 683 OFFCURVE",
"340 642 OFFCURVE",
"366 560 CURVE",
"361.333 537.333 OFFCURVE",
"359 514 OFFCURVE",
"359 490 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 75 values pushed */\01248 39 30 29 24 5 4 7 45 44 2 9 1 2 74 13 12 9 8 4 0 71 11 8 2 4 3 2 2 1 9 4 1 97 10 1 7 7 5 91 6 1 5 5 42 75 0 9 9 0 91 0 0 0 46 0 76 55 54 51 49 43 41 19 37 35 35 17 19 19 19 33 12 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 804;
}
);
note = f_f_i;
},
{
glyphname = f_f_l;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"131 718 OFFCURVE",
"74 615.333 OFFCURVE",
"74 490 CURVE SMOOTH",
"74 384 LINE",
"46 384 LINE",
"24 335 LINE",
"74 335 LINE",
"74 -139 LINE",
"160 -102 LINE",
"160 335 LINE",
"359 335 LINE",
"359 -139 LINE",
"447 -102 LINE",
"447 335 LINE",
"559 335 LINE",
"581 384 LINE",
"447 384 LINE",
"447 578 LINE SMOOTH",
"447 638 OFFCURVE",
"464.333 683 OFFCURVE",
"527 683 CURVE SMOOTH",
"580.333 683 OFFCURVE",
"618.333 641 OFFCURVE",
"637 581 CURVE",
"637 75 LINE SMOOTH",
"637 21.667 OFFCURVE",
"661 -5 OFFCURVE",
"709 -5 CURVE SMOOTH",
"745 -5 OFFCURVE",
"780 22 OFFCURVE",
"796 58 CURVE",
"783 71 LINE",
"772.333 57.667 OFFCURVE",
"757 45 OFFCURVE",
"745 45 CURVE SMOOTH",
"731.667 45 OFFCURVE",
"725 53.667 OFFCURVE",
"725 71 CURVE SMOOTH",
"725 711 LINE",
"645 682 LINE",
"613 706 OFFCURVE",
"576.333 718 OFFCURVE",
"543 718 CURVE SMOOTH",
"478.333 718 OFFCURVE",
"430 692.667 OFFCURVE",
"398 642 CURVE",
"356.667 694 OFFCURVE",
"308.333 718 OFFCURVE",
"259 718 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"298.333 683 OFFCURVE",
"340 642 OFFCURVE",
"366 560 CURVE",
"361.333 537.333 OFFCURVE",
"359 513.333 OFFCURVE",
"359 488 CURVE SMOOTH",
"359 384 LINE",
"160 384 LINE",
"160 578 LINE SMOOTH",
"160 638 OFFCURVE",
"177 683 OFFCURVE",
"241 683 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 88 values pushed */\0128 1 3 0 53 21 7 2 4 4 3 15 14 2 1 5 3 74 37 36 33 32 4 2 71 10 8 2 4 7 6 2 5 1 4 5 97 13 11 2 3 3 0 91 12 9 2 0 0 42 75 0 1 1 2 91 0 2 2 46 2 76 46 46 0 0 46 55 46 54 50 49 0 45 0 44 17 19 19 17 19 36 37 37 35 14 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 807;
}
);
note = f_f_l;
},
{
glyphname = fi;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"496 71 LINE",
"483.333 53 OFFCURVE",
"471 44 OFFCURVE",
"459 44 CURVE SMOOTH",
"444.333 44 OFFCURVE",
"436 53.667 OFFCURVE",
"436 71 CURVE SMOOTH",
"436 412 LINE",
"350 384 LINE",
"160 384 LINE",
"160 578 LINE SMOOTH",
"160 648.667 OFFCURVE",
"187 684 OFFCURVE",
"241 684 CURVE SMOOTH",
"289 684 OFFCURVE",
"323 642 OFFCURVE",
"339 586 CURVE",
"422 616 LINE",
"386 677.333 OFFCURVE",
"316.333 718 OFFCURVE",
"259 718 CURVE SMOOTH",
"132.333 718 OFFCURVE",
"74 614 OFFCURVE",
"74 490 CURVE SMOOTH",
"74 384 LINE",
"46 384 LINE",
"24 335 LINE",
"74 335 LINE",
"74 -139 LINE",
"160 -102 LINE",
"160 335 LINE",
"350 335 LINE",
"350 75 LINE SMOOTH",
"350 23 OFFCURVE",
"380.333 -5 OFFCURVE",
"419 -5 CURVE SMOOTH",
"451 -5 OFFCURVE",
"487.667 16.667 OFFCURVE",
"509 58 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */\01229 21 20 3 3 5 36 35 2 7 1 2 74 9 8 2 0 71 0 7 1 0 1 7 0 112 6 1 3 2 1 1 7 3 1 97 0 5 5 4 91 0 4 4 42 75 0 0 0 46 0 76 36 18 37 35 17 19 19 33 8 7 28 \012CALL[ ]	/* CallFunction */";
};
width = 521;
}
);
leftKerningGroup = f;
note = fi;
rightKerningGroup = i;
unicode = FB01;
},
{
glyphname = fl;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"498 71 LINE",
"483.333 53 OFFCURVE",
"470.667 44 OFFCURVE",
"460 44 CURVE SMOOTH",
"446.667 44 OFFCURVE",
"440 56.333 OFFCURVE",
"440 71 CURVE SMOOTH",
"440 711 LINE",
"360 681 LINE",
"329.333 705 OFFCURVE",
"291 718 OFFCURVE",
"259 718 CURVE SMOOTH",
"132.333 718 OFFCURVE",
"74 614 OFFCURVE",
"74 490 CURVE SMOOTH",
"74 384 LINE",
"46 384 LINE",
"24 335 LINE",
"74 335 LINE",
"74 -139 LINE",
"160 -102 LINE",
"160 335 LINE",
"274 335 LINE",
"295 384 LINE",
"160 384 LINE",
"160 578 LINE SMOOTH",
"160 648.667 OFFCURVE",
"187 684 OFFCURVE",
"241 684 CURVE SMOOTH",
"295.667 684 OFFCURVE",
"333 642.333 OFFCURVE",
"353 581 CURVE",
"353 75 LINE SMOOTH",
"353 21.667 OFFCURVE",
"377 -5 OFFCURVE",
"425 -5 CURVE SMOOTH",
"461 -5 OFFCURVE",
"495.333 23.333 OFFCURVE",
"510 58 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */\01228 1 1 6 27 5 2 2 1 35 34 2 7 3 3 74 16 15 2 0 71 0 7 3 0 3 7 0 112 5 1 2 4 1 3 7 2 3 97 0 1 1 6 91 0 6 6 42 75 0 0 0 46 0 76 38 35 17 19 17 18 36 33 8 7 28 \012CALL[ ]	/* CallFunction */";
};
width = 523;
}
);
leftKerningGroup = f;
note = fl;
rightKerningGroup = d;
unicode = FB02;
},
{
glyphname = ordfeminine;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"242.333 801 OFFCURVE",
"207 790.167 OFFCURVE",
"175 768.5 CURVE SMOOTH",
"111 725.167 OFFCURVE",
"71 646.667 OFFCURVE",
"71 564 CURVE SMOOTH",
"71 460 OFFCURVE",
"117.333 392 OFFCURVE",
"208 392 CURVE SMOOTH",
"257.333 392 OFFCURVE",
"306 433.667 OFFCURVE",
"334 491 CURVE",
"335 491 LINE",
"335 435 OFFCURVE",
"356.667 397 OFFCURVE",
"402 397 CURVE SMOOTH",
"434 397 OFFCURVE",
"470.667 426 OFFCURVE",
"484 462 CURVE",
"472 475 LINE",
"460 453.667 OFFCURVE",
"445.667 443 OFFCURVE",
"429 443 CURVE SMOOTH",
"414.333 443 OFFCURVE",
"407 458.667 OFFCURVE",
"407 472 CURVE SMOOTH",
"407 683 LINE",
"337 653 LINE",
"337 617 LINE SMOOTH",
"337 534.333 OFFCURVE",
"309 449 OFFCURVE",
"221 449 CURVE SMOOTH",
"159.667 449 OFFCURVE",
"132 506.667 OFFCURVE",
"132 592 CURVE SMOOTH",
"132 682.667 OFFCURVE",
"183.333 750 OFFCURVE",
"266 750 CURVE SMOOTH",
"299.333 750 OFFCURVE",
"331.667 727.333 OFFCURVE",
"349 702 CURVE",
"406 733 LINE",
"384.667 778.333 OFFCURVE",
"334.333 801 OFFCURVE",
"281 801 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"55 251 LINE",
"79 319 LINE",
"357 319 LINE",
"333 251 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */\01230 24 23 17 16 3 2 7 1 0 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01217 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 39 values pushed */\0120 7 3 6 3 7 104 0 6 6 113 8 1 5 0 0 1 5 0 99 2 1 1 3 3 1 87 2 1 1 1 3 91 4 1 3 1 3 79 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01240 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 40 values pushed */\0120 7 3 6 3 7 6 112 0 6 6 113 8 1 5 0 0 1 5 0 99 2 1 1 3 3 1 87 2 1 1 1 3 91 4 1 3 1 3 79 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01245 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 44 values pushed */\0120 7 3 6 3 7 6 112 0 6 6 113 8 1 5 0 0 1 5 0 99 0 1 2 3 1 87 0 2 3 3 2 87 0 2 2 3 91 4 1 3 2 3 79 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 45 values pushed */\0120 7 4 6 4 7 6 112 0 6 6 113 8 1 5 0 0 1 5 0 99 0 1 2 4 1 87 0 2 0 3 4 2 3 99 0 1 1 4 91 0 4 1 4 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 18 values pushed */\0120 0 45 44 43 42 0 41 0 40 37 36 39 36 37 9 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 418;
}
);
note = ordfeminine;
unicode = 00AA;
},
{
glyphname = ordmasculine;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"259 808 LINE",
"148.333 774.667 OFFCURVE",
"72 683.667 OFFCURVE",
"72 569 CURVE SMOOTH",
"72 535.667 OFFCURVE",
"79.833 505.333 OFFCURVE",
"95.5 478 CURVE SMOOTH",
"126.833 423.333 OFFCURVE",
"184 390 OFFCURVE",
"248 390 CURVE SMOOTH",
"288 390 OFFCURVE",
"322.667 400.833 OFFCURVE",
"352 422.5 CURVE SMOOTH",
"410.667 465.833 OFFCURVE",
"441 539.333 OFFCURVE",
"441 614 CURVE SMOOTH",
"441 698 OFFCURVE",
"395.333 773.667 OFFCURVE",
"322 799 CURVE",
"300 782 LINE SMOOTH",
"272 761.333 OFFCURVE",
"251.333 744.333 OFFCURVE",
"238 731 CURVE",
"263.333 728.333 OFFCURVE",
"288.333 718 OFFCURVE",
"313 700 CURVE SMOOTH",
"362.333 664 OFFCURVE",
"396 606.333 OFFCURVE",
"396 557 CURVE SMOOTH",
"396 490.333 OFFCURVE",
"347.333 438 OFFCURVE",
"278 438 CURVE SMOOTH",
"215.163 438 OFFCURVE",
"145 533.31 OFFCURVE",
"145 595 CURVE SMOOTH",
"145 680.333 OFFCURVE",
"194 741.333 OFFCURVE",
"274 792 CURVE"
);
},
{
closed = 1;
nodes = (
"55 251 LINE",
"79 319 LINE",
"357 319 LINE",
"333 251 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\01231 17 14 3 0 72 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 27 values pushed */\0120 3 1 2 1 3 104 0 2 2 113 0 0 1 1 0 87 0 0 0 1 91 0 1 0 1 79 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 28 values pushed */\0120 3 1 2 1 3 2 112 0 2 2 113 0 0 1 1 0 87 0 0 0 1 91 0 1 0 1 79 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 7 values pushed */\01217 23 47 38 4 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 406;
}
);
note = ordmasculine;
unicode = 00BA;
},
{
glyphname = Omega;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"405.667 731 OFFCURVE",
"345.167 718.167 OFFCURVE",
"289.5 692.5 CURVE SMOOTH",
"178.167 641.167 OFFCURVE",
"104 534.667 OFFCURVE",
"104 380 CURVE SMOOTH",
"104 336 OFFCURVE",
"113.667 293 OFFCURVE",
"133 251 CURVE SMOOTH",
"171.667 167 OFFCURVE",
"237.667 101.667 OFFCURVE",
"303 75 CURVE",
"97 75 LINE",
"64 0 LINE",
"404 0 LINE",
"404 70 LINE",
"373.333 86 OFFCURVE",
"343.333 109.333 OFFCURVE",
"314 140 CURVE SMOOTH",
"255.333 201.333 OFFCURVE",
"213 287.667 OFFCURVE",
"213 381 CURVE SMOOTH",
"213 445 OFFCURVE",
"224 499.667 OFFCURVE",
"246 545 CURVE SMOOTH",
"290 635.667 OFFCURVE",
"369.667 681 OFFCURVE",
"471 681 CURVE SMOOTH",
"521 681 OFFCURVE",
"565.333 669.667 OFFCURVE",
"604 647 CURVE SMOOTH",
"681.333 601.667 OFFCURVE",
"728 509 OFFCURVE",
"728 381 CURVE SMOOTH",
"728 334.333 OFFCURVE",
"718.333 290.167 OFFCURVE",
"699 248.5 CURVE SMOOTH",
"660.333 165.167 OFFCURVE",
"597.333 102 OFFCURVE",
"536 70 CURVE",
"536 0 LINE",
"877 0 LINE",
"843 75 LINE",
"639 75 LINE",
"671.667 88.333 OFFCURVE",
"703.167 110.5 OFFCURVE",
"733.5 141.5 CURVE SMOOTH",
"794.167 203.5 OFFCURVE",
"837 292 OFFCURVE",
"837 380 CURVE SMOOTH",
"837 457.333 OFFCURVE",
"820 522.333 OFFCURVE",
"786 575 CURVE SMOOTH",
"718 680.333 OFFCURVE",
"601.667 731 OFFCURVE",
"471 731 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0129 0 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 940;
}
);
note = Omega;
unicode = 03A9;
},
{
glyphname = pi;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"594 89 LINE",
"576 63 OFFCURVE",
"560 50 OFFCURVE",
"546 50 CURVE SMOOTH",
"527.333 50 OFFCURVE",
"514 64.667 OFFCURVE",
"514 86 CURVE SMOOTH",
"514 517 LINE",
"422 481 LINE",
"79 481 LINE",
"53 419 LINE",
"115 419 LINE",
"115 -27 LINE",
"207 0 LINE",
"207 419 LINE",
"422 419 LINE",
"422 96 LINE SMOOTH",
"422 25.333 OFFCURVE",
"462 -5 OFFCURVE",
"502 -5 CURVE SMOOTH",
"534 -5 OFFCURVE",
"580.667 18 OFFCURVE",
"610 74 CURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\01214 9 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 628;
}
);
leftKerningGroup = f;
note = pi;
rightKerningGroup = i;
unicode = 03C0;
},
{
glyphname = "aShort-deva";
layers = (
{
components = (
{
alignment = -1;
name = "a-deva";
},
{
alignment = -1;
name = "eShortMatra-deva";
transform = "{1, 0, 0, 1, 775, 0}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 775;
}
);
note = uni0904;
unicode = 0904;
},
{
glyphname = "aCandra-deva";
layers = (
{
components = (
{
alignment = -1;
name = "a-deva";
},
{
alignment = -1;
name = "eCandraMatra-deva";
transform = "{1, 0, 0, 1, 775, 4}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 775;
}
);
note = uni0972;
unicode = 0972;
},
{
glyphname = "a-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"28 352 LINE",
"50.667 288 OFFCURVE",
"79.667 231.333 OFFCURVE",
"115 182 CURVE SMOOTH",
"185.667 83.333 OFFCURVE",
"271.667 26 OFFCURVE",
"353 26 CURVE SMOOTH",
"380.333 26 OFFCURVE",
"405.333 33.167 OFFCURVE",
"428 47.5 CURVE SMOOTH",
"473.333 76.167 OFFCURVE",
"501 128.333 OFFCURVE",
"501 187 CURVE SMOOTH",
"501 245.667 OFFCURVE",
"469.667 316.333 OFFCURVE",
"415 387 CURVE",
"423 396 LINE",
"469 353.333 OFFCURVE",
"512 332 OFFCURVE",
"552 332 CURVE SMOOTH",
"563.333 332 OFFCURVE",
"576.333 334.667 OFFCURVE",
"591 340 CURVE",
"591 166 LINE SMOOTH",
"591 140 OFFCURVE",
"609.833 108.833 OFFCURVE",
"647.5 72.5 CURVE SMOOTH",
"722.833 -0.167 OFFCURVE",
"841 -61 OFFCURVE",
"917 -61 CURVE SMOOTH",
"939 -61 OFFCURVE",
"960.333 -50.667 OFFCURVE",
"981 -30 CURVE",
"907 17 LINE",
"895 -3 OFFCURVE",
"874.667 -13 OFFCURVE",
"856 -13 CURVE SMOOTH",
"803.32 -13 OFFCURVE",
"673 59.451 OFFCURVE",
"673 111 CURVE SMOOTH",
"673 609 LINE",
"597 689 LINE",
"426 689 LINE",
"496 609 LINE",
"591 609 LINE",
"591 429 LINE",
"572.333 403.667 OFFCURVE",
"542.333 392 OFFCURVE",
"513 392 CURVE SMOOTH",
"486.333 392 OFFCURVE",
"458.333 402.333 OFFCURVE",
"441 421 CURVE",
"459 449.667 OFFCURVE",
"468 480.667 OFFCURVE",
"468 514 CURVE SMOOTH",
"468 543.333 OFFCURVE",
"458.333 572.667 OFFCURVE",
"439 602 CURVE SMOOTH",
"400.333 660.667 OFFCURVE",
"333 702 OFFCURVE",
"265 702 CURVE SMOOTH",
"197 702 OFFCURVE",
"129 672 OFFCURVE",
"89 620 CURVE",
"151 558 LINE",
"196.333 610 OFFCURVE",
"255 643 OFFCURVE",
"311 643 CURVE SMOOTH",
"361.667 643 OFFCURVE",
"403 600 OFFCURVE",
"403 548 CURVE SMOOTH",
"403 512 OFFCURVE",
"389 473.667 OFFCURVE",
"365 451 CURVE",
"334.333 488.333 OFFCURVE",
"299 509 OFFCURVE",
"267 509 CURVE SMOOTH",
"216.333 509 OFFCURVE",
"166 469.333 OFFCURVE",
"166 428 CURVE SMOOTH",
"166 377.462 OFFCURVE",
"238.268 316 OFFCURVE",
"291 316 CURVE SMOOTH",
"320.333 316 OFFCURVE",
"358 334.333 OFFCURVE",
"394 365 CURVE",
"424.667 323 OFFCURVE",
"440 282.333 OFFCURVE",
"440 243 CURVE SMOOTH",
"440 166.529 OFFCURVE",
"386.321 100 OFFCURVE",
"313 100 CURVE SMOOTH",
"218.333 100 OFFCURVE",
"118.333 208.667 OFFCURVE",
"61 366 CURVE"
);
},
{
closed = 1;
nodes = (
"642 689 LINE",
"719 609 LINE",
"790 609 LINE",
"790 689 LINE"
);
},
{
closed = 1;
nodes = (
"235 371 OFFCURVE",
"226 383.333 OFFCURVE",
"226 394 CURVE SMOOTH",
"226 418 OFFCURVE",
"270.667 453 OFFCURVE",
"300 453 CURVE SMOOTH",
"316.667 453 OFFCURVE",
"332 444.333 OFFCURVE",
"346 427 CURVE",
"306 391 OFFCURVE",
"269.667 371 OFFCURVE",
"247 371 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */\01231 1 6 3 30 1 2 6 96 91 71 46 40 21 6 5 14 72 1 15 5 84 83 67 8 4 10 15 59 1 8 11 60 1 9 8 7 74 51 1 6 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0129 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 70 values pushed */\01216 1 15 5 10 5 15 10 112 0 1 10 0 14 1 104 0 2 0 14 5 2 14 99 0 5 0 10 1 5 10 99 0 0 0 11 8 0 11 99 0 8 0 9 8 9 95 0 3 3 4 91 0 4 4 24 75 13 1 6 6 7 89 12 1 7 7 24 6 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 71 values pushed */\01216 1 15 5 10 5 15 10 112 0 1 10 0 10 1 0 112 0 2 0 14 5 2 14 99 0 5 0 10 1 5 10 99 0 0 0 11 8 0 11 99 0 8 0 9 8 9 95 0 3 3 4 91 0 4 4 24 75 13 1 6 6 7 89 12 1 7 7 24 6 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01239 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 71 values pushed */\01216 1 15 5 10 5 15 10 112 0 1 10 0 10 1 0 112 0 2 0 14 5 2 14 99 0 5 0 10 1 5 10 99 0 0 0 11 8 0 11 99 0 8 0 9 8 9 95 0 3 3 4 91 0 4 4 25 75 13 1 6 6 7 89 12 1 7 7 25 6 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 69 values pushed */\01216 1 15 5 10 5 15 10 112 0 1 10 0 10 1 0 112 0 4 0 3 6 4 3 99 0 2 0 14 5 2 14 99 0 5 0 10 1 5 10 99 0 0 0 11 8 0 11 99 0 8 0 9 8 9 95 13 1 6 6 7 89 12 1 7 7 25 6 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 30 values pushed */\01289 89 89 99 89 98 94 92 88 87 86 85 80 78 70 68 63 61 37 17 19 39 37 39 37 39 33 17 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 775;
}
);
note = uni0905;
unicode = 0905;
},
{
glyphname = "aa-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"803.32 -13 OFFCURVE",
"673 59.451 OFFCURVE",
"673 111 CURVE SMOOTH",
"673 609 LINE",
"597 689 LINE",
"426 689 LINE",
"496 609 LINE",
"591 609 LINE",
"591 429 LINE",
"572.333 403.667 OFFCURVE",
"542.333 392 OFFCURVE",
"513 392 CURVE SMOOTH",
"486.333 392 OFFCURVE",
"458.333 402.333 OFFCURVE",
"441 421 CURVE",
"459 449.667 OFFCURVE",
"468 480.667 OFFCURVE",
"468 514 CURVE SMOOTH",
"468 543.333 OFFCURVE",
"458.333 572.667 OFFCURVE",
"439 602 CURVE SMOOTH",
"400.333 660.667 OFFCURVE",
"333 702 OFFCURVE",
"265 702 CURVE SMOOTH",
"197 702 OFFCURVE",
"129 672 OFFCURVE",
"89 620 CURVE",
"151 558 LINE",
"196.333 610 OFFCURVE",
"255 643 OFFCURVE",
"311 643 CURVE SMOOTH",
"361.667 643 OFFCURVE",
"403 600 OFFCURVE",
"403 548 CURVE SMOOTH",
"403 512 OFFCURVE",
"389 473.667 OFFCURVE",
"365 451 CURVE",
"334.333 488.333 OFFCURVE",
"299 509 OFFCURVE",
"267 509 CURVE SMOOTH",
"216.333 509 OFFCURVE",
"166 469.333 OFFCURVE",
"166 428 CURVE SMOOTH",
"166 377.462 OFFCURVE",
"238.268 316 OFFCURVE",
"291 316 CURVE SMOOTH",
"320.333 316 OFFCURVE",
"358 334.333 OFFCURVE",
"394 365 CURVE",
"424.667 323 OFFCURVE",
"440 282.333 OFFCURVE",
"440 243 CURVE SMOOTH",
"440 166.529 OFFCURVE",
"386.321 100 OFFCURVE",
"313 100 CURVE SMOOTH",
"218.333 100 OFFCURVE",
"118.333 208.667 OFFCURVE",
"61 366 CURVE",
"28 352 LINE",
"50.667 288 OFFCURVE",
"79.667 231.333 OFFCURVE",
"115 182 CURVE SMOOTH",
"185.667 83.333 OFFCURVE",
"271.667 26 OFFCURVE",
"353 26 CURVE SMOOTH",
"380.333 26 OFFCURVE",
"405.333 33.167 OFFCURVE",
"428 47.5 CURVE SMOOTH",
"473.333 76.167 OFFCURVE",
"501 128.333 OFFCURVE",
"501 187 CURVE SMOOTH",
"501 245.667 OFFCURVE",
"469.667 316.333 OFFCURVE",
"415 387 CURVE",
"423 396 LINE",
"469 353.333 OFFCURVE",
"512 332 OFFCURVE",
"552 332 CURVE SMOOTH",
"563.333 332 OFFCURVE",
"576.333 334.667 OFFCURVE",
"591 340 CURVE",
"591 166 LINE SMOOTH",
"591 140 OFFCURVE",
"609.833 108.833 OFFCURVE",
"647.5 72.5 CURVE SMOOTH",
"722.833 -0.167 OFFCURVE",
"841 -61 OFFCURVE",
"917 -61 CURVE SMOOTH",
"939 -61 OFFCURVE",
"960.333 -50.667 OFFCURVE",
"981 -30 CURVE",
"907 17 LINE",
"895 -3 OFFCURVE",
"874.667 -13 OFFCURVE",
"856 -13 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1193 17 LINE",
"1179.667 -1.667 OFFCURVE",
"1158.667 -13 OFFCURVE",
"1140 -13 CURVE SMOOTH",
"1087.514 -13 OFFCURVE",
"959 59.72 OFFCURVE",
"959 111 CURVE SMOOTH",
"959 609 LINE",
"879 689 LINE",
"642 689 LINE",
"719 609 LINE",
"790 609 LINE",
"877 609 LINE",
"877 168 LINE SMOOTH",
"877 141.333 OFFCURVE",
"895.833 109.833 OFFCURVE",
"933.5 73.5 CURVE SMOOTH",
"1008.833 0.833 OFFCURVE",
"1125.667 -61 OFFCURVE",
"1203 -61 CURVE SMOOTH",
"1226.333 -61 OFFCURVE",
"1247.333 -50.667 OFFCURVE",
"1266 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"1004 609 LINE",
"1075 609 LINE",
"1075 689 LINE",
"925 689 LINE"
);
},
{
closed = 1;
nodes = (
"235 371 OFFCURVE",
"226 383.333 OFFCURVE",
"226 394 CURVE SMOOTH",
"226 418 OFFCURVE",
"270.667 453 OFFCURVE",
"300 453 CURVE SMOOTH",
"316.667 453 OFFCURVE",
"332 444.333 OFFCURVE",
"346 427 CURVE",
"306 391 OFFCURVE",
"269.667 371 OFFCURVE",
"247 371 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */\01259 1 9 6 58 1 5 9 117 112 74 68 49 14 6 8 18 15 1 19 8 36 26 10 3 1 19 105 2 2 11 2 3 1 0 11 7 74 97 79 2 9 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0129 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 76 values pushed */\01222 1 19 8 1 8 19 1 112 0 4 1 3 18 4 104 0 5 0 18 8 5 18 99 0 8 0 1 4 8 1 99 0 3 0 2 11 3 2 99 15 20 2 11 12 1 0 11 0 95 0 6 6 7 91 0 7 7 24 75 21 17 13 3 9 9 10 89 16 14 2 10 10 24 9 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 77 values pushed */\01222 1 19 8 1 8 19 1 112 0 4 1 3 1 4 3 112 0 5 0 18 8 5 18 99 0 8 0 1 4 8 1 99 0 3 0 2 11 3 2 99 15 20 2 11 12 1 0 11 0 95 0 6 6 7 91 0 7 7 24 75 21 17 13 3 9 9 10 89 16 14 2 10 10 24 9 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01239 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 77 values pushed */\01222 1 19 8 1 8 19 1 112 0 4 1 3 1 4 3 112 0 5 0 18 8 5 18 99 0 8 0 1 4 8 1 99 0 3 0 2 11 3 2 99 15 20 2 11 12 1 0 11 0 95 0 6 6 7 91 0 7 7 25 75 21 17 13 3 9 9 10 89 16 14 2 10 10 25 9 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 75 values pushed */\01222 1 19 8 1 8 19 1 112 0 4 1 3 1 4 3 112 0 7 0 6 9 7 6 99 0 5 0 18 8 5 18 99 0 8 0 1 4 8 1 99 0 3 0 2 11 3 2 99 15 20 2 11 12 1 0 11 0 95 21 17 13 3 9 9 10 89 16 14 2 10 10 25 9 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 46 values pushed */\012110 110 106 106 0 0 110 120 110 119 115 113 106 109 106 109 108 107 103 101 96 95 94 92 88 86 0 84 0 83 78 77 76 75 39 37 39 37 39 38 40 37 36 23 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 1060;
}
);
note = uni0906;
unicode = 0906;
},
{
glyphname = "i-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"303 609 LINE",
"323 589 OFFCURVE",
"336 566 OFFCURVE",
"336 546 CURVE SMOOTH",
"336 528.667 OFFCURVE",
"317.333 514 OFFCURVE",
"296 514 CURVE SMOOTH",
"165 514 LINE SMOOTH",
"108.607 514 OFFCURVE",
"43 461.208 OFFCURVE",
"43 408 CURVE SMOOTH",
"43 348.196 OFFCURVE",
"158.963 256 OFFCURVE",
"222 256 CURVE SMOOTH",
"252.667 256 OFFCURVE",
"278.667 270.333 OFFCURVE",
"312 293 CURVE SMOOTH",
"318.282 297.188 OFFCURVE",
"344.062 314 OFFCURVE",
"356 314 CURVE SMOOTH",
"380 314 OFFCURVE",
"402 290.333 OFFCURVE",
"402 261 CURVE SMOOTH",
"402 200.994 OFFCURVE",
"273.115 124 OFFCURVE",
"209 124 CURVE",
"169.667 165.333 OFFCURVE",
"134.667 186 OFFCURVE",
"104 186 CURVE SMOOTH",
"77.333 186 OFFCURVE",
"52 166 OFFCURVE",
"52 142 CURVE SMOOTH",
"52 95.04 OFFCURVE",
"146.376 45 OFFCURVE",
"210 45 CURVE",
"303.333 -60.333 OFFCURVE",
"405.667 -120 OFFCURVE",
"495 -120 CURVE SMOOTH",
"527 -120 OFFCURVE",
"551 -110.667 OFFCURVE",
"567 -92 CURVE",
"503 -33 LINE",
"485.667 -51.667 OFFCURVE",
"461 -62 OFFCURVE",
"437 -62 CURVE SMOOTH",
"378.333 -62 OFFCURVE",
"306.333 -21 OFFCURVE",
"245 51 CURVE",
"285 57.667 OFFCURVE",
"321.167 69.5 OFFCURVE",
"353.5 86.5 CURVE SMOOTH",
"418.167 120.5 OFFCURVE",
"457 169.667 OFFCURVE",
"457 219 CURVE SMOOTH",
"457 287.725 OFFCURVE",
"387.774 369 OFFCURVE",
"319 369 CURVE SMOOTH",
"300.333 369 OFFCURVE",
"283.333 359.667 OFFCURVE",
"254 341 CURVE SMOOTH",
"220.667 319.667 OFFCURVE",
"201.667 310 OFFCURVE",
"179 310 CURVE SMOOTH",
"141.667 310 OFFCURVE",
"109 336.667 OFFCURVE",
"109 366 CURVE SMOOTH",
"109 404.795 OFFCURVE",
"162.135 443 OFFCURVE",
"210 443 CURVE SMOOTH",
"338 445 LINE SMOOTH",
"370 445 OFFCURVE",
"396 468.667 OFFCURVE",
"396 498 CURVE SMOOTH",
"396 531.333 OFFCURVE",
"377 571.667 OFFCURVE",
"345 609 CURVE",
"266 689 LINE"
);
},
{
closed = 1;
nodes = (
"312 689 LINE",
"391 609 LINE",
"512 609 LINE",
"512 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */\01230 1 6 8 36 1 4 6 37 1 5 4 3 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 73 values pushed */\0120 3 1 9 1 3 9 112 0 9 2 1 9 2 110 0 7 10 8 10 7 8 112 0 8 6 10 8 6 110 0 6 4 10 6 4 110 0 11 0 1 3 11 1 99 0 2 0 10 7 2 10 99 0 4 0 5 4 5 95 14 1 12 12 0 89 13 1 0 0 24 12 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 73 values pushed */\0120 3 1 9 1 3 9 112 0 9 2 1 9 2 110 0 7 10 8 10 7 8 112 0 8 6 10 8 6 110 0 6 4 10 6 4 110 0 11 0 1 3 11 1 99 0 2 0 10 7 2 10 99 0 4 0 5 4 5 95 14 1 12 12 0 89 13 1 0 0 25 12 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 24 values pushed */\01285 84 83 82 81 80 75 72 66 64 58 57 17 37 18 36 41 36 37 54 16 15 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 498;
}
);
note = uni0907;
unicode = 0907;
},
{
glyphname = "ii-deva";
layers = (
{
components = (
{
alignment = -1;
name = "i-deva";
},
{
alignment = -1;
name = "reph-deva";
transform = "{1, 0, 0, 1, 445, 0}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 498;
}
);
note = uni0908;
unicode = 0908;
},
{
glyphname = "u-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"358 609 LINE",
"396.667 583.667 OFFCURVE",
"422 544.333 OFFCURVE",
"422 507 CURVE SMOOTH",
"422 459 OFFCURVE",
"370.667 422 OFFCURVE",
"312 422 CURVE SMOOTH",
"278 422 OFFCURVE",
"249.333 424.667 OFFCURVE",
"226 430 CURVE",
"242 394.667 OFFCURVE",
"263.667 366 OFFCURVE",
"291 344 CURVE",
"297.667 340.667 OFFCURVE",
"312 339 OFFCURVE",
"334 339 CURVE SMOOTH",
"356.667 339 OFFCURVE",
"379.667 344 OFFCURVE",
"403 354 CURVE",
"440.333 316.667 OFFCURVE",
"461 275 OFFCURVE",
"461 239 CURVE SMOOTH",
"461 172.069 OFFCURVE",
"397.723 121 OFFCURVE",
"328 121 CURVE SMOOTH",
"217.333 121 OFFCURVE",
"118.333 238.667 OFFCURVE",
"49 416 CURVE",
"21 405 LINE",
"46.333 335 OFFCURVE",
"78.167 272.833 OFFCURVE",
"116.5 218.5 CURVE SMOOTH",
"193.167 109.833 OFFCURVE",
"286 47 OFFCURVE",
"374 47 CURVE SMOOTH",
"433.88 47 OFFCURVE",
"520 123.499 OFFCURVE",
"520 184 CURVE SMOOTH",
"520 245.333 OFFCURVE",
"487 310.333 OFFCURVE",
"427 369 CURVE",
"456.333 385 OFFCURVE",
"478 419.333 OFFCURVE",
"478 458 CURVE SMOOTH",
"478 503.333 OFFCURVE",
"455.333 561 OFFCURVE",
"410 609 CURVE SMOOTH",
"333 689 LINE"
);
},
{
closed = 1;
nodes = (
"379 689 LINE",
"456 609 LINE",
"588 609 LINE",
"588 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */\01236 1 4 5 30 19 8 3 3 4 2 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 28 values pushed */\0120 4 0 3 2 4 3 99 0 2 0 1 2 1 95 7 1 5 5 0 89 6 1 0 0 24 5 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 28 values pushed */\0120 4 0 3 2 4 3 99 0 2 0 1 2 1 95 7 1 5 5 0 89 6 1 0 0 25 5 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 11 values pushed */\01217 17 21 36 39 38 45 16 8 6 28 \012CALL[ ]	/* CallFunction */";
};
width = 574;
}
);
note = uni0909;
unicode = 0909;
},
{
glyphname = "uu-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"358 609 LINE",
"396.667 583.667 OFFCURVE",
"422 544.333 OFFCURVE",
"422 507 CURVE SMOOTH",
"422 459 OFFCURVE",
"370.667 422 OFFCURVE",
"312 422 CURVE SMOOTH",
"278 422 OFFCURVE",
"249.333 424.667 OFFCURVE",
"226 430 CURVE",
"242 394.667 OFFCURVE",
"263.667 366 OFFCURVE",
"291 344 CURVE",
"297.667 340.667 OFFCURVE",
"312 339 OFFCURVE",
"334 339 CURVE SMOOTH",
"356.667 339 OFFCURVE",
"379.667 344 OFFCURVE",
"403 354 CURVE",
"440.333 316.667 OFFCURVE",
"461 275 OFFCURVE",
"461 239 CURVE SMOOTH",
"461 172.069 OFFCURVE",
"397.723 121 OFFCURVE",
"328 121 CURVE SMOOTH",
"217.333 121 OFFCURVE",
"118.333 238.667 OFFCURVE",
"49 416 CURVE",
"21 405 LINE",
"46.333 335 OFFCURVE",
"78.167 272.833 OFFCURVE",
"116.5 218.5 CURVE SMOOTH",
"193.167 109.833 OFFCURVE",
"286 47 OFFCURVE",
"374 47 CURVE SMOOTH",
"433.88 47 OFFCURVE",
"520 123.499 OFFCURVE",
"520 184 CURVE SMOOTH",
"520 214 OFFCURVE",
"511.333 247 OFFCURVE",
"494 283 CURVE",
"536.667 336.333 OFFCURVE",
"595.333 369 OFFCURVE",
"658 369 CURVE SMOOTH",
"687.333 369 OFFCURVE",
"714 341.333 OFFCURVE",
"714 308 CURVE SMOOTH",
"714 245.333 OFFCURVE",
"673 189.333 OFFCURVE",
"613 168 CURVE",
"668 103 LINE",
"728 121.667 OFFCURVE",
"770 184 OFFCURVE",
"770 252 CURVE SMOOTH",
"770 278 OFFCURVE",
"761.167 305.333 OFFCURVE",
"743.5 334 CURVE SMOOTH",
"708.167 391.333 OFFCURVE",
"648.333 433 OFFCURVE",
"599 433 CURVE SMOOTH",
"544.333 433 OFFCURVE",
"487.333 401.333 OFFCURVE",
"446 348 CURVE",
"427 369 LINE",
"456.333 385 OFFCURVE",
"478 419.333 OFFCURVE",
"478 458 CURVE SMOOTH",
"478 503.333 OFFCURVE",
"455.333 561 OFFCURVE",
"410 609 CURVE SMOOTH",
"333 689 LINE"
);
},
{
closed = 1;
nodes = (
"379 689 LINE",
"456 609 LINE",
"821 609 LINE",
"821 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */\01256 1 6 1 39 1 2 6 50 9 2 5 2 29 20 2 4 5 19 1 3 4 5 74 8 1 2 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 36 values pushed */\0120 1 0 2 5 1 2 99 0 6 0 5 4 6 5 99 0 4 0 3 4 3 95 9 1 7 7 0 89 8 1 0 0 24 7 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 36 values pushed */\0120 1 0 2 5 1 2 99 0 6 0 5 4 6 5 99 0 4 0 3 4 3 95 9 1 7 7 0 89 8 1 0 0 25 7 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\01269 68 17 21 36 39 38 39 44 42 16 10 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 807;
}
);
note = uni090A;
unicode = 090A;
},
{
glyphname = "rVocalic-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"444 609 LINE",
"363 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"361 609 LINE",
"361 412 LINE",
"297 489.333 OFFCURVE",
"232 532 OFFCURVE",
"176 532 CURVE SMOOTH",
"113.333 532 OFFCURVE",
"56.333 509.333 OFFCURVE",
"15 468 CURVE",
"71 394 LINE",
"116.333 439.333 OFFCURVE",
"172.333 465 OFFCURVE",
"223 465 CURVE SMOOTH",
"256.333 465 OFFCURVE",
"305.333 433.333 OFFCURVE",
"348 380 CURVE",
"290 312 OFFCURVE",
"211.333 262.333 OFFCURVE",
"112 231 CURVE",
"189 165 LINE",
"257.667 196.333 OFFCURVE",
"315 235 OFFCURVE",
"361 281 CURVE",
"361 166 LINE SMOOTH",
"361 140 OFFCURVE",
"379.833 108.833 OFFCURVE",
"417.5 72.5 CURVE SMOOTH",
"492.833 -0.167 OFFCURVE",
"610.667 -61 OFFCURVE",
"688 -61 CURVE SMOOTH",
"711.333 -61 OFFCURVE",
"732.333 -50.667 OFFCURVE",
"751 -30 CURVE",
"678 17 LINE",
"663.333 -3 OFFCURVE",
"646 -13 OFFCURVE",
"626 -13 CURVE SMOOTH",
"574.134 -13 OFFCURVE",
"444 59.656 OFFCURVE",
"444 111 CURVE SMOOTH",
"444 363 LINE",
"486.667 330.333 OFFCURVE",
"531.667 314 OFFCURVE",
"579 314 CURVE SMOOTH",
"601.667 314 OFFCURVE",
"621 316.333 OFFCURVE",
"637 321 CURVE",
"683.667 281 OFFCURVE",
"713 242.667 OFFCURVE",
"713 220 CURVE SMOOTH",
"713 176 OFFCURVE",
"676 139 OFFCURVE",
"632 139 CURVE SMOOTH",
"606.667 139 OFFCURVE",
"578.667 154.333 OFFCURVE",
"556 177 CURVE",
"535 154 LINE",
"583 106 OFFCURVE",
"637 77 OFFCURVE",
"685 77 CURVE SMOOTH",
"735.916 77 OFFCURVE",
"785 125.48 OFFCURVE",
"785 179 CURVE SMOOTH",
"785 198.333 OFFCURVE",
"775.667 220.667 OFFCURVE",
"757 246 CURVE SMOOTH",
"738.333 271.333 OFFCURVE",
"709 302 OFFCURVE",
"669 338 CURVE",
"707.667 355.333 OFFCURVE",
"736 386.667 OFFCURVE",
"736 412 CURVE SMOOTH",
"736 457.213 OFFCURVE",
"673.238 514 OFFCURVE",
"625 514 CURVE SMOOTH",
"595.667 514 OFFCURVE",
"569 488.333 OFFCURVE",
"569 459 CURVE SMOOTH",
"569 434.333 OFFCURVE",
"578.333 411.667 OFFCURVE",
"597 391 CURVE",
"575.667 378.333 OFFCURVE",
"553.333 372 OFFCURVE",
"530 372 CURVE SMOOTH",
"495.333 372 OFFCURVE",
"464 383 OFFCURVE",
"444 403 CURVE"
);
},
{
closed = 1;
nodes = (
"837 609 LINE",
"837 689 LINE",
"409 689 LINE",
"490 609 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */\01269 1 7 1 75 68 62 6 1 5 0 7 42 38 18 3 4 0 60 59 57 29 28 5 3 4 49 1 5 2 50 1 6 5 6 74 0 1 9 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0129 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 51 values pushed */\0120 1 8 7 0 1 104 0 8 0 7 0 8 7 99 0 0 0 4 3 0 4 100 0 3 0 2 5 3 2 99 0 5 0 6 5 6 95 11 1 9 9 10 89 12 1 10 10 24 9 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 52 values pushed */\0120 1 8 7 8 1 7 112 0 8 0 7 0 8 7 99 0 0 0 4 3 0 4 100 0 3 0 2 5 3 2 99 0 5 0 6 5 6 95 11 1 9 9 10 89 12 1 10 10 24 9 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 52 values pushed */\0120 1 8 7 8 1 7 112 0 8 0 7 0 8 7 99 0 0 0 4 3 0 4 100 0 3 0 2 5 3 2 99 0 5 0 6 5 6 95 11 1 9 9 10 89 12 1 10 10 25 9 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 20 values pushed */\01283 82 81 80 79 78 77 76 37 43 35 37 38 37 44 37 35 13 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 822;
}
);
note = uni090B;
unicode = 090B;
},
{
glyphname = "rrVocalic-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"444 609 LINE",
"363 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"361 609 LINE",
"361 412 LINE",
"298.333 486.667 OFFCURVE",
"230.667 532 OFFCURVE",
"176 532 CURVE SMOOTH",
"113.333 532 OFFCURVE",
"55 509.333 OFFCURVE",
"15 468 CURVE",
"71 394 LINE",
"116.333 439.333 OFFCURVE",
"171 465 OFFCURVE",
"223 465 CURVE SMOOTH",
"256.333 465 OFFCURVE",
"302.667 433.333 OFFCURVE",
"348 380 CURVE",
"290 312 OFFCURVE",
"211.333 262.333 OFFCURVE",
"112 231 CURVE",
"189 165 LINE",
"257.667 196.333 OFFCURVE",
"315 235 OFFCURVE",
"361 281 CURVE",
"361 165 LINE SMOOTH",
"361 140.333 OFFCURVE",
"380.167 109.833 OFFCURVE",
"418.5 73.5 CURVE SMOOTH",
"495.167 0.833 OFFCURVE",
"613.333 -61 OFFCURVE",
"688 -61 CURVE SMOOTH",
"712 -61 OFFCURVE",
"733 -50.667 OFFCURVE",
"751 -30 CURVE",
"678 17 LINE",
"662 -3 OFFCURVE",
"644.667 -13 OFFCURVE",
"626 -13 CURVE SMOOTH",
"571.647 -13 OFFCURVE",
"444 61.12 OFFCURVE",
"444 111 CURVE SMOOTH",
"444 366 LINE",
"487.333 334 OFFCURVE",
"532.667 318 OFFCURVE",
"580 318 CURVE SMOOTH",
"605.333 318 OFFCURVE",
"630.333 322.667 OFFCURVE",
"655 332 CURVE",
"675 318.667 OFFCURVE",
"694 297.667 OFFCURVE",
"694 287 CURVE SMOOTH",
"694 280.333 OFFCURVE",
"689.833 275.167 OFFCURVE",
"681.5 271.5 CURVE SMOOTH",
"673.167 267.833 OFFCURVE",
"659 263.333 OFFCURVE",
"639 258 CURVE SMOOTH",
"579 242 OFFCURVE",
"541 226.333 OFFCURVE",
"541 185 CURVE SMOOTH",
"541 132.94 OFFCURVE",
"651.736 61 OFFCURVE",
"708 61 CURVE SMOOTH",
"752 61 OFFCURVE",
"798 77.667 OFFCURVE",
"834 107 CURVE",
"773 156 LINE",
"740.333 128 OFFCURVE",
"707 114 OFFCURVE",
"673 114 CURVE SMOOTH",
"638.333 114 OFFCURVE",
"612 132 OFFCURVE",
"612 152 CURVE SMOOTH",
"612 162 OFFCURVE",
"617.5 170.167 OFFCURVE",
"628.5 176.5 CURVE SMOOTH",
"639.5 182.833 OFFCURVE",
"655.667 189.333 OFFCURVE",
"677 196 CURVE SMOOTH",
"729 213.333 OFFCURVE",
"757 226.333 OFFCURVE",
"757 257 CURVE SMOOTH",
"757 281 OFFCURVE",
"731.333 315.333 OFFCURVE",
"690 346 CURVE",
"719.333 367.333 OFFCURVE",
"736 391.333 OFFCURVE",
"736 410 CURVE SMOOTH",
"736 456.16 OFFCURVE",
"673.079 517 OFFCURVE",
"625 517 CURVE SMOOTH",
"593 517 OFFCURVE",
"569 492.667 OFFCURVE",
"569 462 CURVE SMOOTH",
"569 439.333 OFFCURVE",
"578.333 416.667 OFFCURVE",
"597 394 CURVE",
"573.667 381.333 OFFCURVE",
"551.333 375 OFFCURVE",
"530 375 CURVE SMOOTH",
"494 375 OFFCURVE",
"465.333 385.667 OFFCURVE",
"444 407 CURVE"
);
},
{
closed = 1;
nodes = (
"862 609 LINE",
"862 689 LINE",
"409 689 LINE",
"490 609 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */\01279 1 7 1 85 78 72 5 1 5 0 7 52 48 17 3 4 0 70 69 67 45 31 5 2 4 32 1 3 2 59 1 5 3 60 1 6 5 7 74 0 1 9 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0129 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 51 values pushed */\0120 1 8 7 0 1 104 0 8 0 7 0 8 7 99 0 0 0 4 2 0 4 100 0 2 0 3 5 2 3 99 0 5 0 6 5 6 95 11 1 9 9 10 89 12 1 10 10 24 9 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 52 values pushed */\0120 1 8 7 8 1 7 112 0 8 0 7 0 8 7 99 0 0 0 4 2 0 4 100 0 2 0 3 5 2 3 99 0 5 0 6 5 6 95 11 1 9 9 10 89 12 1 10 10 24 9 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 52 values pushed */\0120 1 8 7 8 1 7 112 0 8 0 7 0 8 7 99 0 0 0 4 2 0 4 100 0 2 0 3 5 2 3 99 0 5 0 6 5 6 95 11 1 9 9 10 89 12 1 10 10 25 9 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 27 values pushed */\01293 92 91 90 89 88 87 86 83 81 76 74 63 61 58 56 51 49 36 34 30 28 37 34 13 6 22 \012CALL[ ]	/* CallFunction */";
};
width = 849;
}
);
note = uni0960;
unicode = 0960;
},
{
glyphname = "lVocalic-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"498 609 LINE",
"498 499 LINE",
"450 496.333 OFFCURVE",
"402.333 452.667 OFFCURVE",
"373 390 CURVE",
"323.667 455.333 OFFCURVE",
"265.333 494 OFFCURVE",
"208 494 CURVE SMOOTH",
"183.333 494 OFFCURVE",
"159.167 485.833 OFFCURVE",
"135.5 469.5 CURVE SMOOTH",
"88.167 436.833 OFFCURVE",
"54 380.333 OFFCURVE",
"54 327 CURVE SMOOTH",
"54 283.667 OFFCURVE",
"69.167 235.5 OFFCURVE",
"99.5 182.5 CURVE SMOOTH",
"160.167 76.5 OFFCURVE",
"259.667 -7 OFFCURVE",
"345 -7 CURVE SMOOTH",
"373 -7 OFFCURVE",
"396.333 2.333 OFFCURVE",
"415 21 CURVE",
"356 81 LINE",
"336 61.667 OFFCURVE",
"316.333 52 OFFCURVE",
"297 52 CURVE SMOOTH",
"275.667 52 OFFCURVE",
"250.833 63.667 OFFCURVE",
"222.5 87 CURVE SMOOTH",
"165.833 133.667 OFFCURVE",
"120 207.667 OFFCURVE",
"120 257 CURVE SMOOTH",
"120 322.206 OFFCURVE",
"196.048 428 OFFCURVE",
"259 428 CURVE SMOOTH",
"293.667 428 OFFCURVE",
"332.333 399.333 OFFCURVE",
"359 354 CURVE",
"353.667 325.333 OFFCURVE",
"351 301.667 OFFCURVE",
"351 283 CURVE",
"434 246 LINE",
"434 378 OFFCURVE",
"493.667 446 OFFCURVE",
"571 446 CURVE SMOOTH",
"634.353 446 OFFCURVE",
"690 388.387 OFFCURVE",
"690 324 CURVE SMOOTH",
"690 266.667 OFFCURVE",
"653.333 237.333 OFFCURVE",
"584 196 CURVE SMOOTH",
"529.326 163.195 OFFCURVE",
"482 131.231 OFFCURVE",
"482 75 CURVE SMOOTH",
"482 51.667 OFFCURVE",
"492.667 27.167 OFFCURVE",
"514 1.5 CURVE SMOOTH",
"556.667 -49.833 OFFCURVE",
"629.333 -88 OFFCURVE",
"696 -88 CURVE SMOOTH",
"750 -88 OFFCURVE",
"793.333 -70 OFFCURVE",
"826 -34 CURVE",
"767 20 LINE",
"730.333 -18.667 OFFCURVE",
"690 -38 OFFCURVE",
"646 -38 CURVE SMOOTH",
"590 -38 OFFCURVE",
"545 -8 OFFCURVE",
"545 32 CURVE SMOOTH",
"545 76 OFFCURVE",
"575.333 98.333 OFFCURVE",
"638 137 CURVE SMOOTH",
"699.051 173.3 OFFCURVE",
"750 208.688 OFFCURVE",
"750 276 CURVE SMOOTH",
"750 365.333 OFFCURVE",
"682.333 452.667 OFFCURVE",
"581 490 CURVE",
"581 609 LINE",
"506 689 LINE"
);
},
{
closed = 1;
nodes = (
"552 689 LINE",
"627 609 LINE",
"811 609 LINE",
"811 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */\0123 1 3 7 69 55 42 40 39 5 5 4 56 18 2 6 5 19 1 1 6 4 74 2 1 9 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 47 values pushed */\0120 3 7 4 7 3 4 112 8 1 7 0 4 5 7 4 99 0 1 0 2 1 2 95 11 1 9 9 0 89 10 1 0 0 24 75 0 5 5 6 91 0 6 6 26 6 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 47 values pushed */\0120 3 7 4 7 3 4 112 8 1 7 0 4 5 7 4 99 0 1 0 2 1 2 95 11 1 9 9 0 89 10 1 0 0 25 75 0 5 5 6 91 0 6 6 26 6 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 18 values pushed */\01278 77 76 75 74 73 20 38 35 38 39 45 35 46 16 12 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 798;
}
);
note = uni090C;
unicode = 090C;
},
{
glyphname = "llVocalic-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"498 609 LINE",
"-14 609 LINE",
"-14 689 LINE",
"506 689 LINE",
"581 609 LINE",
"581 490 LINE",
"683.667 452.667 OFFCURVE",
"751 375 OFFCURVE",
"751 291 CURVE SMOOTH",
"751 243 OFFCURVE",
"715.667 216.333 OFFCURVE",
"645 175 CURVE SMOOTH",
"583.667 140.333 OFFCURVE",
"555 121 OFFCURVE",
"555 85 CURVE SMOOTH",
"555 69 OFFCURVE",
"569.667 60 OFFCURVE",
"591 60 CURVE SMOOTH",
"611 60 OFFCURVE",
"636 69 OFFCURVE",
"666 87 CURVE",
"702 36 LINE",
"652.667 24 OFFCURVE",
"606 -7 OFFCURVE",
"606 -35 CURVE SMOOTH",
"606 -56.333 OFFCURVE",
"631 -70 OFFCURVE",
"663 -70 CURVE SMOOTH",
"707 -70 OFFCURVE",
"752.667 -45.667 OFFCURVE",
"790 -3 CURVE",
"846 -50 LINE",
"810 -84.667 OFFCURVE",
"761.333 -106 OFFCURVE",
"708 -106 CURVE SMOOTH",
"647.113 -106 OFFCURVE",
"546 -55.001 OFFCURVE",
"546 -10 CURVE SMOOTH",
"546 4.667 OFFCURVE",
"560.667 22.667 OFFCURVE",
"582 36 CURVE",
"524.667 40 OFFCURVE",
"483 77.333 OFFCURVE",
"483 116 CURVE SMOOTH",
"483 157.333 OFFCURVE",
"516.333 182.667 OFFCURVE",
"583 220 CURVE SMOOTH",
"655 261.333 OFFCURVE",
"692 289 OFFCURVE",
"692 337 CURVE SMOOTH",
"692 397 OFFCURVE",
"638.667 446 OFFCURVE",
"572 446 CURVE SMOOTH",
"489.333 446 OFFCURVE",
"434 372.667 OFFCURVE",
"434 246 CURVE",
"351 283 LINE",
"351 301.667 OFFCURVE",
"353.667 325.333 OFFCURVE",
"359 354 CURVE",
"332.333 399.333 OFFCURVE",
"293.667 428 OFFCURVE",
"259 428 CURVE SMOOTH",
"196.22 428 OFFCURVE",
"120 323.669 OFFCURVE",
"120 257 CURVE SMOOTH",
"120 231.667 OFFCURVE",
"130 202.667 OFFCURVE",
"150 170 CURVE SMOOTH",
"190 104.667 OFFCURVE",
"253 52 OFFCURVE",
"297 52 CURVE SMOOTH",
"320.333 52 OFFCURVE",
"341.667 61.667 OFFCURVE",
"361 81 CURVE",
"415 21 LINE",
"396.333 2.333 OFFCURVE",
"373 -7 OFFCURVE",
"345 -7 CURVE SMOOTH",
"306.333 -7 OFFCURVE",
"264 11.167 OFFCURVE",
"218 47.5 CURVE SMOOTH",
"126 120.167 OFFCURVE",
"54 237.667 OFFCURVE",
"54 327 CURVE SMOOTH",
"54 355 OFFCURVE",
"61.333 381.833 OFFCURVE",
"76 407.5 CURVE SMOOTH",
"105.333 458.833 OFFCURVE",
"157.333 494 OFFCURVE",
"208 494 CURVE SMOOTH",
"265.333 494 OFFCURVE",
"325 455.333 OFFCURVE",
"373 390 CURVE",
"401 452.667 OFFCURVE",
"448.667 493.667 OFFCURVE",
"498 499 CURVE"
);
},
{
closed = 1;
nodes = (
"808 609 LINE",
"627 609 LINE",
"552 689 LINE",
"808 689 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 34 values pushed */\0121 1 0 10 84 1 4 0 70 34 33 31 18 4 6 2 3 69 60 17 3 1 5 59 1 7 1 5 74 85 1 10 1 73 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 34 values pushed */\0121 1 0 10 84 1 4 0 70 34 33 31 18 4 6 8 3 69 60 17 3 1 5 59 1 7 1 5 74 85 1 10 1 73 \012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 55 values pushed */\0120 4 0 3 0 4 3 112 0 0 0 3 2 0 3 99 0 5 1 2 5 87 0 7 0 6 7 6 95 14 12 13 3 10 10 9 89 11 1 9 9 24 75 8 1 2 2 1 91 0 1 1 26 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 55 values pushed */\0120 4 0 3 0 4 3 112 0 0 0 3 2 0 3 99 0 5 1 2 5 87 0 7 0 6 7 6 95 14 12 13 3 10 10 9 89 11 1 9 9 25 75 8 1 2 2 1 91 0 1 1 26 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 56 values pushed */\0120 4 0 3 0 4 3 112 0 0 0 3 8 0 3 99 0 8 0 5 1 8 5 99 0 7 0 6 7 6 95 14 12 13 3 10 10 9 89 11 1 9 9 25 75 0 2 2 1 91 0 1 1 26 1 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 28 values pushed */\01289 89 0 0 89 92 89 92 91 90 0 88 0 88 87 86 39 37 38 26 39 38 35 38 38 15 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 794;
}
);
note = uni0961;
unicode = 0961;
},
{
glyphname = "eCandra-deva";
layers = (
{
components = (
{
alignment = -1;
name = "e-deva";
},
{
alignment = -1;
name = "eCandraMatra-deva";
transform = "{1, 0, 0, 1, 523, 4}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 549;
}
);
note = uni090D;
unicode = 090D;
},
{
glyphname = "eShort-deva";
layers = (
{
components = (
{
alignment = -1;
name = "e-deva";
},
{
alignment = -1;
name = "eShortMatra-deva";
transform = "{1, 0, 0, 1, 523, 0}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 549;
}
);
note = uni090E;
unicode = 090E;
},
{
glyphname = "e-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"161 609 LINE",
"91.667 524.333 OFFCURVE",
"57 434.667 OFFCURVE",
"57 340 CURVE SMOOTH",
"57 232 OFFCURVE",
"124 122.667 OFFCURVE",
"256 20 CURVE SMOOTH",
"389.333 -85.333 OFFCURVE",
"524 -138 OFFCURVE",
"660 -138 CURVE SMOOTH",
"682.667 -138 OFFCURVE",
"706.333 -130 OFFCURVE",
"731 -114 CURVE",
"667 -54 LINE",
"649.667 -72.667 OFFCURVE",
"622.333 -85 OFFCURVE",
"593 -85 CURVE SMOOTH",
"529 -85 OFFCURVE",
"460.833 -66.333 OFFCURVE",
"388.5 -29 CURVE SMOOTH",
"243.833 45.667 OFFCURVE",
"133 169.667 OFFCURVE",
"133 271 CURVE SMOOTH",
"133 403 OFFCURVE",
"179.667 526.333 OFFCURVE",
"261 609 CURVE",
"370 609 LINE",
"418 549 OFFCURVE",
"443 485.333 OFFCURVE",
"443 440 CURVE SMOOTH",
"443 366.082 OFFCURVE",
"389.511 303 OFFCURVE",
"319 303 CURVE SMOOTH",
"297.667 303 OFFCURVE",
"273 320 OFFCURVE",
"253 348 CURVE",
"238 330 LINE",
"272.667 266 OFFCURVE",
"326.333 226 OFFCURVE",
"377 226 CURVE SMOOTH",
"444.273 226 OFFCURVE",
"503 293.839 OFFCURVE",
"503 366 CURVE SMOOTH",
"503 440.667 OFFCURVE",
"473.667 525 OFFCURVE",
"407 609 CURVE SMOOTH",
"344 689 LINE"
);
},
{
closed = 1;
nodes = (
"390 689 LINE",
"454 609 LINE",
"563 609 LINE",
"563 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */\01213 12 2 2 3 34 1 4 1 35 1 5 4 3 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 29 values pushed */\0120 2 0 1 4 2 1 99 0 4 0 5 4 5 95 8 6 2 3 3 0 89 7 1 0 0 24 3 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 29 values pushed */\0120 2 0 1 4 2 1 99 0 4 0 5 4 5 95 8 6 2 3 3 0 89 7 1 0 0 25 3 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 12 values pushed */\01217 17 22 36 38 22 37 39 16 9 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 549;
}
);
note = uni090F;
unicode = 090F;
},
{
glyphname = "ai-deva";
layers = (
{
components = (
{
alignment = -1;
name = "e-deva";
},
{
alignment = -1;
name = "eMatra-deva";
transform = "{1, 0, 0, 1, 523, 0}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 549;
}
);
note = uni0910;
unicode = 0910;
},
{
glyphname = "oCandra-deva";
layers = (
{
components = (
{
alignment = -1;
name = "aa-deva";
},
{
alignment = -1;
name = "eCandraMatra-deva";
transform = "{1, 0, 0, 1, 1059, 4}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 1060;
}
);
note = uni0911;
unicode = 0911;
},
{
glyphname = "oShort-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"712.333 826 OFFCURVE",
"748 819.833 OFFCURVE",
"780 807.5 CURVE SMOOTH",
"844 782.833 OFFCURVE",
"884 738.333 OFFCURVE",
"884 689 CURVE",
"917 689 LINE",
"917 734.333 OFFCURVE",
"906 773.333 OFFCURVE",
"884 806 CURVE SMOOTH",
"840 871.333 OFFCURVE",
"760.333 906 OFFCURVE",
"667 906 CURVE SMOOTH",
"557.667 906 OFFCURVE",
"471 950 OFFCURVE",
"459 1014 CURVE",
"428 1014 LINE",
"433.333 973.333 OFFCURVE",
"448 938.833 OFFCURVE",
"472 910.5 CURVE SMOOTH",
"520 853.833 OFFCURVE",
"594.333 826 OFFCURVE",
"673 826 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"803.32 -13 OFFCURVE",
"673 59.451 OFFCURVE",
"673 111 CURVE SMOOTH",
"673 609 LINE",
"597 689 LINE",
"426 689 LINE",
"496 609 LINE",
"591 609 LINE",
"591 429 LINE",
"572.333 403.667 OFFCURVE",
"542.333 392 OFFCURVE",
"513 392 CURVE SMOOTH",
"486.333 392 OFFCURVE",
"458.333 402.333 OFFCURVE",
"441 421 CURVE",
"459 449.667 OFFCURVE",
"468 480.667 OFFCURVE",
"468 514 CURVE SMOOTH",
"468 543.333 OFFCURVE",
"458.333 572.667 OFFCURVE",
"439 602 CURVE SMOOTH",
"400.333 660.667 OFFCURVE",
"333 702 OFFCURVE",
"265 702 CURVE SMOOTH",
"197 702 OFFCURVE",
"129 672 OFFCURVE",
"89 620 CURVE",
"151 558 LINE",
"196.333 610 OFFCURVE",
"255 643 OFFCURVE",
"311 643 CURVE SMOOTH",
"361.667 643 OFFCURVE",
"403 600 OFFCURVE",
"403 548 CURVE SMOOTH",
"403 512 OFFCURVE",
"389 473.667 OFFCURVE",
"365 451 CURVE",
"334.333 488.333 OFFCURVE",
"299 509 OFFCURVE",
"267 509 CURVE SMOOTH",
"216.333 509 OFFCURVE",
"166 469.333 OFFCURVE",
"166 428 CURVE SMOOTH",
"166 377.462 OFFCURVE",
"238.268 316 OFFCURVE",
"291 316 CURVE SMOOTH",
"320.333 316 OFFCURVE",
"358 334.333 OFFCURVE",
"394 365 CURVE",
"424.667 323 OFFCURVE",
"440 282.333 OFFCURVE",
"440 243 CURVE SMOOTH",
"440 166.529 OFFCURVE",
"386.321 100 OFFCURVE",
"313 100 CURVE SMOOTH",
"218.333 100 OFFCURVE",
"118.333 208.667 OFFCURVE",
"61 366 CURVE",
"28 352 LINE",
"50.667 288 OFFCURVE",
"79.667 231.333 OFFCURVE",
"115 182 CURVE SMOOTH",
"185.667 83.333 OFFCURVE",
"271.667 26 OFFCURVE",
"353 26 CURVE SMOOTH",
"380.333 26 OFFCURVE",
"405.333 33.167 OFFCURVE",
"428 47.5 CURVE SMOOTH",
"473.333 76.167 OFFCURVE",
"501 128.333 OFFCURVE",
"501 187 CURVE SMOOTH",
"501 245.667 OFFCURVE",
"469.667 316.333 OFFCURVE",
"415 387 CURVE",
"423 396 LINE",
"469 353.333 OFFCURVE",
"512 332 OFFCURVE",
"552 332 CURVE SMOOTH",
"563.333 332 OFFCURVE",
"576.333 334.667 OFFCURVE",
"591 340 CURVE",
"591 166 LINE SMOOTH",
"591 140 OFFCURVE",
"609.833 108.833 OFFCURVE",
"647.5 72.5 CURVE SMOOTH",
"722.833 -0.167 OFFCURVE",
"841 -61 OFFCURVE",
"917 -61 CURVE SMOOTH",
"939 -61 OFFCURVE",
"960.333 -50.667 OFFCURVE",
"981 -30 CURVE",
"907 17 LINE",
"895 -3 OFFCURVE",
"874.667 -13 OFFCURVE",
"856 -13 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1193 17 LINE",
"1179.667 -1.667 OFFCURVE",
"1158.667 -13 OFFCURVE",
"1140 -13 CURVE SMOOTH",
"1087.514 -13 OFFCURVE",
"959 59.72 OFFCURVE",
"959 111 CURVE SMOOTH",
"959 609 LINE",
"879 689 LINE",
"642 689 LINE",
"719 609 LINE",
"790 609 LINE",
"877 609 LINE",
"877 168 LINE SMOOTH",
"877 141.333 OFFCURVE",
"895.833 109.833 OFFCURVE",
"933.5 73.5 CURVE SMOOTH",
"1008.833 0.833 OFFCURVE",
"1125.667 -61 OFFCURVE",
"1203 -61 CURVE SMOOTH",
"1226.333 -61 OFFCURVE",
"1247.333 -50.667 OFFCURVE",
"1266 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"1004 609 LINE",
"1075 609 LINE",
"1075 689 LINE",
"925 689 LINE"
);
},
{
closed = 1;
nodes = (
"235 371 OFFCURVE",
"226 383.333 OFFCURVE",
"226 394 CURVE SMOOTH",
"226 418 OFFCURVE",
"270.667 453 OFFCURVE",
"300 453 CURVE SMOOTH",
"316.667 453 OFFCURVE",
"332 444.333 OFFCURVE",
"346 427 CURVE",
"306 391 OFFCURVE",
"269.667 371 OFFCURVE",
"247 371 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */\01276 1 13 10 75 1 9 13 134 129 91 85 66 31 6 12 22 32 1 23 12 53 43 27 3 5 23 122 19 2 15 6 20 1 4 15 7 74 114 96 2 13 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0129 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 95 values pushed */\01227 1 23 12 5 12 23 5 112 0 8 5 7 22 8 104 0 1 24 1 3 11 1 3 99 0 9 0 22 12 9 22 99 0 12 0 5 8 12 5 99 0 7 0 6 15 7 6 99 19 25 2 15 16 1 4 15 4 95 0 0 0 23 75 0 2 2 25 75 0 10 10 11 91 0 11 11 24 75 26 21 17 3 13 13 14 89 20 18 2 14 14 24 13 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 96 values pushed */\01227 1 23 12 5 12 23 5 112 0 8 5 7 5 8 7 112 0 1 24 1 3 11 1 3 99 0 9 0 22 12 9 22 99 0 12 0 5 8 12 5 99 0 7 0 6 15 7 6 99 19 25 2 15 16 1 4 15 4 95 0 0 0 23 75 0 2 2 25 75 0 10 10 11 91 0 11 11 24 75 26 21 17 3 13 13 14 89 20 18 2 14 14 24 13 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01239 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 96 values pushed */\01227 1 23 12 5 12 23 5 112 0 8 5 7 5 8 7 112 0 1 24 1 3 11 1 3 99 0 9 0 22 12 9 22 99 0 12 0 5 8 12 5 99 0 7 0 6 15 7 6 99 19 25 2 15 16 1 4 15 4 95 0 0 0 23 75 0 2 2 25 75 0 10 10 11 91 0 11 11 25 75 26 21 17 3 13 13 14 89 20 18 2 14 14 25 13 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01245 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 94 values pushed */\01227 1 23 12 5 12 23 5 112 0 8 5 7 5 8 7 112 0 1 24 1 3 11 1 3 99 0 11 0 10 13 11 10 99 0 9 0 22 12 9 22 99 0 12 0 5 8 12 5 99 0 7 0 6 15 7 6 99 19 25 2 15 16 1 4 15 4 95 0 0 0 23 75 0 2 2 25 75 26 21 17 3 13 13 14 89 20 18 2 14 14 25 13 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 94 values pushed */\0120 0 1 0 114 27 1 23 12 5 12 23 5 112 0 8 5 7 5 8 7 112 0 1 24 1 3 11 1 3 99 0 11 0 10 13 11 10 99 0 9 0 22 12 9 22 99 0 12 0 5 8 12 5 99 0 7 0 6 15 7 6 99 19 25 2 15 16 1 4 15 4 95 0 2 2 25 75 26 21 17 3 13 13 14 89 20 18 2 14 14 25 13 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 64 values pushed */\012127 127 123 123 17 17 0 0 127 137 127 136 132 130 123 126 123 126 125 124 120 118 113 112 111 109 105 103 17 101 17 100 95 94 93 92 89 87 80 78 73 71 64 62 57 55 48 46 40 38 30 28 23 21 0 16 0 15 19 34 19 28 6 23 \012CALL[ ]	/* CallFunction */";
};
width = 1060;
}
);
note = uni0912;
unicode = 0912;
},
{
glyphname = "o-deva";
layers = (
{
components = (
{
alignment = -1;
name = "aa-deva";
},
{
alignment = -1;
name = "eMatra-deva";
transform = "{1, 0, 0, 1, 1059, 0}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 1060;
}
);
note = uni0913;
unicode = 0913;
},
{
glyphname = "au-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"1193 17 LINE",
"1179.667 -1.667 OFFCURVE",
"1158.667 -13 OFFCURVE",
"1140 -13 CURVE SMOOTH",
"1087.514 -13 OFFCURVE",
"959 59.72 OFFCURVE",
"959 111 CURVE SMOOTH",
"959 609 LINE",
"879 689 LINE",
"925 689 LINE",
"1004 609 LINE",
"1075 609 LINE",
"1075 689 LINE",
"932 689 LINE",
"845 924 LINE SMOOTH",
"823.667 980 OFFCURVE",
"787 1017 OFFCURVE",
"751 1017 CURVE SMOOTH",
"745.667 1017 OFFCURVE",
"731 1015 OFFCURVE",
"707 1011 CURVE SMOOTH",
"683 1007 OFFCURVE",
"667.667 1005 OFFCURVE",
"661 1005 CURVE SMOOTH",
"633 1005 OFFCURVE",
"606.333 1016.333 OFFCURVE",
"593 1035 CURVE",
"568 1017 LINE",
"606.667 959.667 OFFCURVE",
"654.667 923 OFFCURVE",
"688 923 CURVE SMOOTH",
"693.333 923 OFFCURVE",
"706.667 925 OFFCURVE",
"728 929 CURVE",
"734 929.667 OFFCURVE",
"740.5 930.667 OFFCURVE",
"747.5 932 CURVE SMOOTH",
"754.5 933.333 OFFCURVE",
"761 934 OFFCURVE",
"767 934 CURVE SMOOTH",
"789.667 934 OFFCURVE",
"815.333 903 OFFCURVE",
"830 863 CURVE SMOOTH",
"889 714 LINE",
"682 874 LINE SMOOTH",
"641.333 904 OFFCURVE",
"611.667 919 OFFCURVE",
"593 919 CURVE SMOOTH",
"586.333 919 OFFCURVE",
"571.333 915.333 OFFCURVE",
"548 908 CURVE SMOOTH",
"520 900 OFFCURVE",
"502.333 896 OFFCURVE",
"495 896 CURVE SMOOTH",
"481.667 896 OFFCURVE",
"460 907.667 OFFCURVE",
"448 925 CURVE",
"428 904 LINE",
"473.333 850.667 OFFCURVE",
"517.333 818 OFFCURVE",
"548 818 CURVE SMOOTH",
"554.667 818 OFFCURVE",
"568.667 821.333 OFFCURVE",
"590 828 CURVE SMOOTH",
"598 830.667 OFFCURVE",
"622 837 OFFCURVE",
"630 837 CURVE SMOOTH",
"653.333 837 OFFCURVE",
"679.667 826.333 OFFCURVE",
"709 805 CURVE SMOOTH",
"875 689 LINE",
"642 689 LINE",
"719 609 LINE",
"790 609 LINE",
"877 609 LINE",
"877 168 LINE SMOOTH",
"877 141.333 OFFCURVE",
"895.833 109.833 OFFCURVE",
"933.5 73.5 CURVE SMOOTH",
"1008.833 0.833 OFFCURVE",
"1125.667 -61 OFFCURVE",
"1203 -61 CURVE SMOOTH",
"1226.333 -61 OFFCURVE",
"1247.333 -50.667 OFFCURVE",
"1266 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"803.32 -13 OFFCURVE",
"673 59.451 OFFCURVE",
"673 111 CURVE SMOOTH",
"673 609 LINE",
"597 689 LINE",
"426 689 LINE",
"496 609 LINE",
"591 609 LINE",
"591 429 LINE",
"572.333 403.667 OFFCURVE",
"542.333 392 OFFCURVE",
"513 392 CURVE SMOOTH",
"486.333 392 OFFCURVE",
"458.333 402.333 OFFCURVE",
"441 421 CURVE",
"459 449.667 OFFCURVE",
"468 480.667 OFFCURVE",
"468 514 CURVE SMOOTH",
"468 543.333 OFFCURVE",
"458.333 572.667 OFFCURVE",
"439 602 CURVE SMOOTH",
"400.333 660.667 OFFCURVE",
"333 702 OFFCURVE",
"265 702 CURVE SMOOTH",
"197 702 OFFCURVE",
"129 672 OFFCURVE",
"89 620 CURVE",
"151 558 LINE",
"196.333 610 OFFCURVE",
"255 643 OFFCURVE",
"311 643 CURVE SMOOTH",
"361.667 643 OFFCURVE",
"403 600 OFFCURVE",
"403 548 CURVE SMOOTH",
"403 512 OFFCURVE",
"389 473.667 OFFCURVE",
"365 451 CURVE",
"334.333 488.333 OFFCURVE",
"299 509 OFFCURVE",
"267 509 CURVE SMOOTH",
"216.333 509 OFFCURVE",
"166 469.333 OFFCURVE",
"166 428 CURVE SMOOTH",
"166 377.462 OFFCURVE",
"238.268 316 OFFCURVE",
"291 316 CURVE SMOOTH",
"320.333 316 OFFCURVE",
"358 334.333 OFFCURVE",
"394 365 CURVE",
"424.667 323 OFFCURVE",
"440 282.333 OFFCURVE",
"440 243 CURVE SMOOTH",
"440 166.529 OFFCURVE",
"386.321 100 OFFCURVE",
"313 100 CURVE SMOOTH",
"218.333 100 OFFCURVE",
"118.333 208.667 OFFCURVE",
"61 366 CURVE",
"28 352 LINE",
"50.667 288 OFFCURVE",
"79.667 231.333 OFFCURVE",
"115 182 CURVE SMOOTH",
"185.667 83.333 OFFCURVE",
"271.667 26 OFFCURVE",
"353 26 CURVE SMOOTH",
"380.333 26 OFFCURVE",
"405.333 33.167 OFFCURVE",
"428 47.5 CURVE SMOOTH",
"473.333 76.167 OFFCURVE",
"501 128.333 OFFCURVE",
"501 187 CURVE SMOOTH",
"501 245.667 OFFCURVE",
"469.667 316.333 OFFCURVE",
"415 387 CURVE",
"423 396 LINE",
"469 353.333 OFFCURVE",
"512 332 OFFCURVE",
"552 332 CURVE SMOOTH",
"563.333 332 OFFCURVE",
"576.333 334.667 OFFCURVE",
"591 340 CURVE",
"591 166 LINE SMOOTH",
"591 140 OFFCURVE",
"609.833 108.833 OFFCURVE",
"647.5 72.5 CURVE SMOOTH",
"722.833 -0.167 OFFCURVE",
"841 -61 OFFCURVE",
"917 -61 CURVE SMOOTH",
"939 -61 OFFCURVE",
"960.333 -50.667 OFFCURVE",
"981 -30 CURVE",
"907 17 LINE",
"895 -3 OFFCURVE",
"874.667 -13 OFFCURVE",
"856 -13 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"235 371 OFFCURVE",
"226 383.333 OFFCURVE",
"226 394 CURVE SMOOTH",
"226 418 OFFCURVE",
"270.667 453 OFFCURVE",
"300 453 CURVE SMOOTH",
"316.667 453 OFFCURVE",
"332 444.333 OFFCURVE",
"346 427 CURVE",
"306 391 OFFCURVE",
"269.667 371 OFFCURVE",
"247 371 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */\01223 1 8 7 22 1 5 6 33 1 22 4 131 1 1 21 130 1 20 1 164 159 146 140 121 86 6 23 27 87 1 28 23 108 98 82 3 16 28 74 71 2 14 17 75 1 0 14 10 74 151 63 2 1 1 73 46 45 2 10 72 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0129 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 128 values pushed */\0120 6 8 5 8 6 5 112 0 5 3 8 5 3 110 0 3 4 8 3 102 0 4 22 8 4 22 110 30 1 28 23 16 23 28 16 112 0 19 16 18 27 19 104 0 20 0 27 23 20 27 99 0 23 0 16 19 23 16 99 0 18 0 17 14 18 17 99 29 26 2 14 15 1 0 14 0 95 0 7 7 10 91 0 10 10 30 75 0 8 8 9 91 0 9 9 23 75 0 13 13 25 75 0 21 21 22 91 0 22 22 24 75 24 12 2 1 1 2 89 25 11 2 2 2 24 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01211 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 129 values pushed */\0120 6 8 5 8 6 5 112 0 5 3 8 5 3 110 0 3 4 8 3 102 0 4 22 8 4 22 110 30 1 28 23 16 23 28 16 112 0 19 16 18 16 19 18 112 0 20 0 27 23 20 27 99 0 23 0 16 19 23 16 99 0 18 0 17 14 18 17 99 29 26 2 14 15 1 0 14 0 95 0 7 7 10 91 0 10 10 30 75 0 8 8 9 91 0 9 9 23 75 0 13 13 25 75 0 21 21 22 91 0 22 22 24 75 24 12 2 1 1 2 89 25 11 2 2 2 24 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01212 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 129 values pushed */\0120 6 8 5 8 6 5 112 0 5 3 8 5 3 110 0 3 4 8 3 102 0 4 22 8 4 22 110 30 1 28 23 16 23 28 16 112 0 19 16 18 16 19 18 112 0 20 0 27 23 20 27 99 0 23 0 16 19 23 16 99 0 18 0 17 14 18 17 99 29 26 2 14 15 1 0 14 0 95 0 7 7 10 91 0 10 10 23 75 0 8 8 9 91 0 9 9 23 75 0 13 13 25 75 0 21 21 22 91 0 22 22 24 75 24 12 2 1 1 2 89 25 11 2 2 2 24 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 129 values pushed */\0120 6 8 5 8 6 5 112 0 5 3 8 5 3 110 0 3 4 8 3 102 0 4 22 8 4 22 110 30 1 28 23 16 23 28 16 112 0 19 16 18 16 19 18 112 0 20 0 27 23 20 27 99 0 23 0 16 19 23 16 99 0 18 0 17 14 18 17 99 29 26 2 14 15 1 0 14 0 95 0 7 7 10 91 0 10 10 30 75 0 8 8 9 91 0 9 9 30 75 0 13 13 25 75 0 21 21 22 91 0 22 22 24 75 24 12 2 1 1 2 89 25 11 2 2 2 24 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 130 values pushed */\0120 6 8 5 8 6 5 112 0 5 3 8 5 3 110 0 3 4 8 3 4 110 0 4 22 8 4 22 110 30 1 28 23 16 23 28 16 112 0 19 16 18 16 19 18 112 0 20 0 27 23 20 27 99 0 23 0 16 19 23 16 99 0 18 0 17 14 18 17 99 29 26 2 14 15 1 0 14 0 95 0 7 7 10 91 0 10 10 30 75 0 8 8 9 91 0 9 9 30 75 0 13 13 25 75 0 21 21 22 91 0 22 22 24 75 24 12 2 1 1 2 89 25 11 2 2 2 24 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01239 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 130 values pushed */\0120 6 8 5 8 6 5 112 0 5 3 8 5 3 110 0 3 4 8 3 4 110 0 4 22 8 4 22 110 30 1 28 23 16 23 28 16 112 0 19 16 18 16 19 18 112 0 20 0 27 23 20 27 99 0 23 0 16 19 23 16 99 0 18 0 17 14 18 17 99 29 26 2 14 15 1 0 14 0 95 0 7 7 10 91 0 10 10 30 75 0 8 8 9 91 0 9 9 30 75 0 13 13 25 75 0 21 21 22 91 0 22 22 25 75 24 12 2 1 1 2 89 25 11 2 2 2 25 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 126 values pushed */\0120 6 8 5 8 6 5 112 0 5 3 8 5 3 110 0 3 4 8 3 4 110 0 4 22 8 4 22 110 30 1 28 23 16 23 28 16 112 0 19 16 18 16 19 18 112 0 10 0 7 8 10 7 99 0 22 0 21 1 22 21 99 0 20 0 27 23 20 27 99 0 23 0 16 19 23 16 99 0 18 0 17 14 18 17 99 29 26 2 14 15 1 0 14 0 95 0 8 8 9 91 0 9 9 30 75 0 13 13 25 75 24 12 2 1 1 2 89 25 11 2 2 2 25 1 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 60 values pushed */\012157 157 72 72 157 167 157 166 162 160 72 156 72 155 150 149 148 147 144 142 135 133 128 126 119 117 112 110 103 101 95 93 85 83 78 76 69 67 62 61 60 59 58 57 54 52 50 48 35 37 34 37 36 18 17 36 33 31 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 1060;
}
);
note = uni0914;
unicode = 0914;
},
{
glyphname = "oe-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"907 17 LINE",
"895 -3 OFFCURVE",
"874.667 -13 OFFCURVE",
"856 -13 CURVE SMOOTH",
"803.32 -13 OFFCURVE",
"673 59.451 OFFCURVE",
"673 111 CURVE SMOOTH",
"673 609 LINE",
"597 689 LINE",
"642 689 LINE",
"719 609 LINE",
"790 609 LINE",
"790 689 LINE",
"660 689 LINE",
"660 948 LINE",
"578 948 LINE",
"578 689 LINE",
"426 689 LINE",
"496 609 LINE",
"591 609 LINE",
"591 429 LINE",
"572.333 403.667 OFFCURVE",
"542.333 392 OFFCURVE",
"513 392 CURVE SMOOTH",
"486.333 392 OFFCURVE",
"458.333 402.333 OFFCURVE",
"441 421 CURVE",
"459 449.667 OFFCURVE",
"468 480.667 OFFCURVE",
"468 514 CURVE SMOOTH",
"468 543.333 OFFCURVE",
"458.333 572.667 OFFCURVE",
"439 602 CURVE SMOOTH",
"400.333 660.667 OFFCURVE",
"333 702 OFFCURVE",
"265 702 CURVE SMOOTH",
"197 702 OFFCURVE",
"129 672 OFFCURVE",
"89 620 CURVE",
"151 558 LINE",
"196.333 610 OFFCURVE",
"255 643 OFFCURVE",
"311 643 CURVE SMOOTH",
"361.667 643 OFFCURVE",
"403 600 OFFCURVE",
"403 548 CURVE SMOOTH",
"403 512 OFFCURVE",
"389 473.667 OFFCURVE",
"365 451 CURVE",
"334.333 488.333 OFFCURVE",
"299 509 OFFCURVE",
"267 509 CURVE SMOOTH",
"216.333 509 OFFCURVE",
"166 469.333 OFFCURVE",
"166 428 CURVE SMOOTH",
"166 377.462 OFFCURVE",
"238.268 316 OFFCURVE",
"291 316 CURVE SMOOTH",
"320.333 316 OFFCURVE",
"358 334.333 OFFCURVE",
"394 365 CURVE",
"424.667 323 OFFCURVE",
"440 282.333 OFFCURVE",
"440 243 CURVE SMOOTH",
"440 166.529 OFFCURVE",
"386.321 100 OFFCURVE",
"313 100 CURVE SMOOTH",
"218.333 100 OFFCURVE",
"118.333 208.667 OFFCURVE",
"61 366 CURVE",
"28 352 LINE",
"50.667 288 OFFCURVE",
"79.667 231.333 OFFCURVE",
"115 182 CURVE SMOOTH",
"185.667 83.333 OFFCURVE",
"271.667 26 OFFCURVE",
"353 26 CURVE SMOOTH",
"380.333 26 OFFCURVE",
"405.333 33.167 OFFCURVE",
"428 47.5 CURVE SMOOTH",
"473.333 76.167 OFFCURVE",
"501 128.333 OFFCURVE",
"501 187 CURVE SMOOTH",
"501 245.667 OFFCURVE",
"469.667 316.333 OFFCURVE",
"415 387 CURVE",
"423 396 LINE",
"469 353.333 OFFCURVE",
"512 332 OFFCURVE",
"552 332 CURVE SMOOTH",
"563.333 332 OFFCURVE",
"576.333 334.667 OFFCURVE",
"591 340 CURVE",
"591 166 LINE SMOOTH",
"591 140 OFFCURVE",
"609.833 108.833 OFFCURVE",
"647.5 72.5 CURVE SMOOTH",
"722.833 -0.167 OFFCURVE",
"841 -61 OFFCURVE",
"917 -61 CURVE SMOOTH",
"939 -61 OFFCURVE",
"960.333 -50.667 OFFCURVE",
"981 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"235 371 OFFCURVE",
"226 383.333 OFFCURVE",
"226 394 CURVE SMOOTH",
"226 418 OFFCURVE",
"270.667 453 OFFCURVE",
"300 453 CURVE SMOOTH",
"316.667 453 OFFCURVE",
"332 444.333 OFFCURVE",
"346 427 CURVE",
"306 391 OFFCURVE",
"269.667 371 OFFCURVE",
"247 371 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */\01256 1 9 6 55 1 5 9 100 95 71 65 46 11 6 8 16 12 1 17 8 33 23 7 3 1 17 92 1 15 2 6 74 84 1 9 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0129 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 80 values pushed */\01218 1 17 8 1 8 17 1 112 0 4 1 3 16 4 104 0 5 0 16 8 5 16 99 0 8 0 1 4 8 1 99 0 3 0 2 15 3 2 99 0 15 0 0 15 0 95 0 11 11 14 89 0 14 14 25 75 0 6 6 7 91 0 7 7 24 75 13 1 9 9 10 89 12 1 10 10 24 9 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 81 values pushed */\01218 1 17 8 1 8 17 1 112 0 4 1 3 1 4 3 112 0 5 0 16 8 5 16 99 0 8 0 1 4 8 1 99 0 3 0 2 15 3 2 99 0 15 0 0 15 0 95 0 11 11 14 89 0 14 14 25 75 0 6 6 7 91 0 7 7 24 75 13 1 9 9 10 89 12 1 10 10 24 9 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01239 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 81 values pushed */\01218 1 17 8 1 8 17 1 112 0 4 1 3 1 4 3 112 0 5 0 16 8 5 16 99 0 8 0 1 4 8 1 99 0 3 0 2 15 3 2 99 0 15 0 0 15 0 95 0 11 11 14 89 0 14 14 25 75 0 6 6 7 91 0 7 7 25 75 13 1 9 9 10 89 12 1 10 10 25 9 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 79 values pushed */\01218 1 17 8 1 8 17 1 112 0 4 1 3 1 4 3 112 0 7 0 6 9 7 6 99 0 5 0 16 8 5 16 99 0 8 0 1 4 8 1 99 0 3 0 2 15 3 2 99 0 15 0 0 15 0 95 0 11 11 14 89 0 14 14 25 75 13 1 9 9 10 89 12 1 10 10 25 9 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 34 values pushed */\01293 93 93 103 93 102 98 96 90 88 83 82 81 80 79 78 77 76 75 74 73 72 39 37 39 37 39 38 40 37 33 19 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 775;
}
);
note = uni0973;
unicode = 0973;
},
{
glyphname = "ooe-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"1193 17 LINE",
"1179.667 -1.667 OFFCURVE",
"1158.667 -13 OFFCURVE",
"1140 -13 CURVE SMOOTH",
"1087.514 -13 OFFCURVE",
"959 59.72 OFFCURVE",
"959 111 CURVE SMOOTH",
"959 609 LINE",
"879 689 LINE",
"925 689 LINE",
"1004 609 LINE",
"1075 609 LINE",
"1075 689 LINE",
"944 689 LINE",
"944 948 LINE",
"862 948 LINE",
"862 689 LINE",
"642 689 LINE",
"719 609 LINE",
"790 609 LINE",
"877 609 LINE",
"877 168 LINE SMOOTH",
"877 141.333 OFFCURVE",
"895.833 109.833 OFFCURVE",
"933.5 73.5 CURVE SMOOTH",
"1008.833 0.833 OFFCURVE",
"1125.667 -61 OFFCURVE",
"1203 -61 CURVE SMOOTH",
"1226.333 -61 OFFCURVE",
"1247.333 -50.667 OFFCURVE",
"1266 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"803.32 -13 OFFCURVE",
"673 59.451 OFFCURVE",
"673 111 CURVE SMOOTH",
"673 609 LINE",
"597 689 LINE",
"426 689 LINE",
"496 609 LINE",
"591 609 LINE",
"591 429 LINE",
"572.333 403.667 OFFCURVE",
"542.333 392 OFFCURVE",
"513 392 CURVE SMOOTH",
"486.333 392 OFFCURVE",
"458.333 402.333 OFFCURVE",
"441 421 CURVE",
"459 449.667 OFFCURVE",
"468 480.667 OFFCURVE",
"468 514 CURVE SMOOTH",
"468 543.333 OFFCURVE",
"458.333 572.667 OFFCURVE",
"439 602 CURVE SMOOTH",
"400.333 660.667 OFFCURVE",
"333 702 OFFCURVE",
"265 702 CURVE SMOOTH",
"197 702 OFFCURVE",
"129 672 OFFCURVE",
"89 620 CURVE",
"151 558 LINE",
"196.333 610 OFFCURVE",
"255 643 OFFCURVE",
"311 643 CURVE SMOOTH",
"361.667 643 OFFCURVE",
"403 600 OFFCURVE",
"403 548 CURVE SMOOTH",
"403 512 OFFCURVE",
"389 473.667 OFFCURVE",
"365 451 CURVE",
"334.333 488.333 OFFCURVE",
"299 509 OFFCURVE",
"267 509 CURVE SMOOTH",
"216.333 509 OFFCURVE",
"166 469.333 OFFCURVE",
"166 428 CURVE SMOOTH",
"166 377.462 OFFCURVE",
"238.268 316 OFFCURVE",
"291 316 CURVE SMOOTH",
"320.333 316 OFFCURVE",
"358 334.333 OFFCURVE",
"394 365 CURVE",
"424.667 323 OFFCURVE",
"440 282.333 OFFCURVE",
"440 243 CURVE SMOOTH",
"440 166.529 OFFCURVE",
"386.321 100 OFFCURVE",
"313 100 CURVE SMOOTH",
"218.333 100 OFFCURVE",
"118.333 208.667 OFFCURVE",
"61 366 CURVE",
"28 352 LINE",
"50.667 288 OFFCURVE",
"79.667 231.333 OFFCURVE",
"115 182 CURVE SMOOTH",
"185.667 83.333 OFFCURVE",
"271.667 26 OFFCURVE",
"353 26 CURVE SMOOTH",
"380.333 26 OFFCURVE",
"405.333 33.167 OFFCURVE",
"428 47.5 CURVE SMOOTH",
"473.333 76.167 OFFCURVE",
"501 128.333 OFFCURVE",
"501 187 CURVE SMOOTH",
"501 245.667 OFFCURVE",
"469.667 316.333 OFFCURVE",
"415 387 CURVE",
"423 396 LINE",
"469 353.333 OFFCURVE",
"512 332 OFFCURVE",
"552 332 CURVE SMOOTH",
"563.333 332 OFFCURVE",
"576.333 334.667 OFFCURVE",
"591 340 CURVE",
"591 166 LINE SMOOTH",
"591 140 OFFCURVE",
"609.833 108.833 OFFCURVE",
"647.5 72.5 CURVE SMOOTH",
"722.833 -0.167 OFFCURVE",
"841 -61 OFFCURVE",
"917 -61 CURVE SMOOTH",
"939 -61 OFFCURVE",
"960.333 -50.667 OFFCURVE",
"981 -30 CURVE",
"907 17 LINE",
"895 -3 OFFCURVE",
"874.667 -13 OFFCURVE",
"856 -13 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"235 371 OFFCURVE",
"226 383.333 OFFCURVE",
"226 394 CURVE SMOOTH",
"226 418 OFFCURVE",
"270.667 453 OFFCURVE",
"300 453 CURVE SMOOTH",
"316.667 453 OFFCURVE",
"332 444.333 OFFCURVE",
"346 427 CURVE",
"306 391 OFFCURVE",
"269.667 371 OFFCURVE",
"247 371 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */\01288 1 1 14 87 1 13 1 121 116 103 97 78 43 6 16 20 44 1 21 16 65 55 39 3 9 21 31 28 2 7 10 32 1 0 7 7 74 108 20 2 1 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0129 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 85 values pushed */\01223 1 21 16 9 16 21 9 112 0 12 9 11 20 12 104 0 13 0 20 16 13 20 99 0 16 0 9 12 16 9 99 0 11 0 10 7 11 10 99 22 19 2 7 8 1 0 7 0 95 0 3 3 6 89 0 6 6 25 75 0 14 14 15 91 0 15 15 24 75 17 5 2 1 1 2 89 18 4 2 2 2 24 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 86 values pushed */\01223 1 21 16 9 16 21 9 112 0 12 9 11 9 12 11 112 0 13 0 20 16 13 20 99 0 16 0 9 12 16 9 99 0 11 0 10 7 11 10 99 22 19 2 7 8 1 0 7 0 95 0 3 3 6 89 0 6 6 25 75 0 14 14 15 91 0 15 15 24 75 17 5 2 1 1 2 89 18 4 2 2 2 24 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01239 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 86 values pushed */\01223 1 21 16 9 16 21 9 112 0 12 9 11 9 12 11 112 0 13 0 20 16 13 20 99 0 16 0 9 12 16 9 99 0 11 0 10 7 11 10 99 22 19 2 7 8 1 0 7 0 95 0 3 3 6 89 0 6 6 25 75 0 14 14 15 91 0 15 15 25 75 17 5 2 1 1 2 89 18 4 2 2 2 25 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 84 values pushed */\01223 1 21 16 9 16 21 9 112 0 12 9 11 9 12 11 112 0 15 0 14 1 15 14 99 0 13 0 20 16 13 20 99 0 16 0 9 12 16 9 99 0 11 0 10 7 11 10 99 22 19 2 7 8 1 0 7 0 95 0 3 3 6 89 0 6 6 25 75 17 5 2 1 1 2 89 18 4 2 2 2 25 1 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 46 values pushed */\012114 114 29 29 114 124 114 123 119 117 29 113 29 112 107 106 105 104 101 99 92 90 85 83 76 74 69 67 60 58 52 50 42 40 39 37 17 17 17 17 17 36 33 24 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 1060;
}
);
note = uni0974;
unicode = 0974;
},
{
glyphname = "ue-deva";
layers = (
{
components = (
{
alignment = -1;
name = "a-deva";
},
{
alignment = -1;
name = "ueMatra-deva";
transform = "{1, 0, 0, 1, 587, -69}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 775;
}
);
note = uni0976;
unicode = 0976;
},
{
glyphname = "uue-deva";
layers = (
{
components = (
{
alignment = -1;
name = "a-deva";
},
{
alignment = -1;
name = "uueMatra-deva";
transform = "{1, 0, 0, 1, 587, -69}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 775;
}
);
note = uni0977;
unicode = 0977;
},
{
glyphname = "aaMatra-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"102 609 LINE",
"102 168 LINE SMOOTH",
"102 141.333 OFFCURVE",
"120.833 109.833 OFFCURVE",
"158.5 73.5 CURVE SMOOTH",
"233.833 0.833 OFFCURVE",
"350.667 -61 OFFCURVE",
"428 -61 CURVE SMOOTH",
"451.333 -61 OFFCURVE",
"472.333 -50.667 OFFCURVE",
"491 -30 CURVE",
"418 17 LINE",
"404.667 -1.667 OFFCURVE",
"383.667 -13 OFFCURVE",
"365 -13 CURVE SMOOTH",
"312.514 -13 OFFCURVE",
"184 59.72 OFFCURVE",
"184 111 CURVE SMOOTH",
"184 609 LINE",
"104 689 LINE"
);
},
{
closed = 1;
nodes = (
"150 689 LINE",
"229 609 LINE",
"300 609 LINE",
"300 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */\01210 1 1 3 11 1 2 1 2 74 2 1 3 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 20 values pushed */\0120 1 0 2 1 2 95 5 1 3 3 0 89 4 1 0 0 24 3 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 20 values pushed */\0120 1 0 2 1 2 95 5 1 3 3 0 89 4 1 0 0 25 3 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 9 values pushed */\01217 17 20 36 37 16 6 6 26 \012CALL[ ]	/* CallFunction */";
};
width = 286;
}
);
note = uni093E;
unicode = 093E;
},
{
glyphname = "iMatra-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"7 804 OFFCURVE",
"46 739.667 OFFCURVE",
"110 689 CURVE",
"143 689 LINE",
"101.667 727.667 OFFCURVE",
"81 771 OFFCURVE",
"81 811 CURVE SMOOTH",
"81 879 OFFCURVE",
"139.333 933 OFFCURVE",
"242 933 CURVE SMOOTH",
"278 933 OFFCURVE",
"311.167 925.833 OFFCURVE",
"341.5 911.5 CURVE SMOOTH",
"402.167 882.833 OFFCURVE",
"440.333 846.667 OFFCURVE",
"499 784 CURVE SMOOTH",
"555 724 OFFCURVE",
"585.667 696 OFFCURVE",
"623 696 CURVE SMOOTH",
"645.667 696 OFFCURVE",
"674.333 713.333 OFFCURVE",
"697 740 CURVE",
"642 793 LINE",
"630 774.333 OFFCURVE",
"612 762 OFFCURVE",
"596 762 CURVE SMOOTH",
"585.333 762 OFFCURVE",
"573.5 767.167 OFFCURVE",
"560.5 777.5 CURVE SMOOTH",
"547.5 787.833 OFFCURVE",
"529 805 OFFCURVE",
"505 829 CURVE SMOOTH",
"471.667 863 OFFCURVE",
"440.5 891.833 OFFCURVE",
"411.5 915.5 CURVE SMOOTH",
"353.5 962.833 OFFCURVE",
"270 1004 OFFCURVE",
"174 1004 CURVE SMOOTH",
"104.567 1004 OFFCURVE",
"7 925.87 OFFCURVE",
"7 864 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"102 609 LINE",
"102 168 LINE SMOOTH",
"102 141.333 OFFCURVE",
"120.833 109.833 OFFCURVE",
"158.5 73.5 CURVE SMOOTH",
"233.833 0.833 OFFCURVE",
"350.667 -61 OFFCURVE",
"428 -61 CURVE SMOOTH",
"451.333 -61 OFFCURVE",
"472.333 -50.667 OFFCURVE",
"491 -30 CURVE",
"418 17 LINE",
"404.667 -1.667 OFFCURVE",
"383.667 -13 OFFCURVE",
"365 -13 CURVE SMOOTH",
"312.514 -13 OFFCURVE",
"184 59.72 OFFCURVE",
"184 111 CURVE SMOOTH",
"184 609 LINE",
"104 689 LINE"
);
},
{
closed = 1;
nodes = (
"150 689 LINE",
"229 609 LINE",
"300 609 LINE",
"300 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */\01213 1 1 3 14 1 2 1 45 1 6 8 46 1 7 6 4 74 37 1 8 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 41 values pushed */\0120 6 0 7 6 7 95 0 3 3 0 91 0 0 0 30 75 0 1 1 2 91 4 1 2 2 25 75 10 1 8 8 5 89 9 1 5 5 24 8 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 41 values pushed */\0120 6 0 7 6 7 95 0 3 3 0 91 0 0 0 30 75 0 1 1 2 91 4 1 2 2 25 75 10 1 8 8 5 89 9 1 5 5 25 8 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 45 values pushed */\0120 6 0 7 6 7 95 0 3 3 0 91 0 0 0 30 75 0 1 1 2 91 0 2 2 25 75 0 4 4 25 75 10 1 8 8 5 89 9 1 5 5 25 8 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 16 values pushed */\01258 57 56 55 20 36 37 20 21 37 37 37 34 11 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 286;
}
);
note = uni093F;
unicode = 093F;
},
{
glyphname = "iMatra_anusvara-deva";
layers = (
{
components = (
{
alignment = -1;
name = "iMatra-deva";
},
{
alignment = -1;
name = "anusvara-deva";
transform = "{1, 0, 0, 1, 789, -24}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 300;
}
);
note = uni093F0902;
},
{
glyphname = "iMatra_reph-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"551.48 1008 OFFCURVE",
"487 937.701 OFFCURVE",
"487 877 CURVE SMOOTH",
"487 869.667 OFFCURVE",
"488 862 OFFCURVE",
"490 854 CURVE",
"383.333 954 OFFCURVE",
"278 1004 OFFCURVE",
"174 1004 CURVE SMOOTH",
"104.567 1004 OFFCURVE",
"7 925.87 OFFCURVE",
"7 864 CURVE SMOOTH",
"7 804 OFFCURVE",
"46 739.667 OFFCURVE",
"110 689 CURVE",
"143 689 LINE",
"101.667 727.667 OFFCURVE",
"81 771 OFFCURVE",
"81 811 CURVE SMOOTH",
"81 879 OFFCURVE",
"139.333 933 OFFCURVE",
"242 933 CURVE SMOOTH",
"279.333 933 OFFCURVE",
"316.333 923.667 OFFCURVE",
"353 905 CURVE SMOOTH",
"426.333 867.667 OFFCURVE",
"476.333 820 OFFCURVE",
"547 748 CURVE SMOOTH",
"574.333 720 OFFCURVE",
"595.333 700.333 OFFCURVE",
"610 689 CURVE",
"656 689 LINE",
"602.667 734.333 OFFCURVE",
"571 783.667 OFFCURVE",
"571 825 CURVE SMOOTH",
"571 875.074 OFFCURVE",
"613.326 931 OFFCURVE",
"658 931 CURVE SMOOTH",
"674.667 931 OFFCURVE",
"691 923 OFFCURVE",
"707 907 CURVE",
"730 928 LINE",
"688.667 978.667 OFFCURVE",
"645.667 1008 OFFCURVE",
"611 1008 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"312.514 -13 OFFCURVE",
"184 59.72 OFFCURVE",
"184 111 CURVE SMOOTH",
"184 609 LINE",
"104 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"102 609 LINE",
"102 168 LINE SMOOTH",
"102 141.333 OFFCURVE",
"120.833 109.833 OFFCURVE",
"158.5 73.5 CURVE SMOOTH",
"233.833 0.833 OFFCURVE",
"350.667 -61 OFFCURVE",
"428 -61 CURVE SMOOTH",
"451.333 -61 OFFCURVE",
"472.333 -50.667 OFFCURVE",
"491 -30 CURVE",
"418 17 LINE",
"404.667 -1.667 OFFCURVE",
"383.667 -13 OFFCURVE",
"365 -13 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"229 609 LINE",
"300 609 LINE",
"300 689 LINE",
"150 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 102 values pushed */\01235 3 2 3 1 0 44 1 9 7 45 1 6 9 3 74 56 1 7 1 73 2 1 0 1 4 0 87 12 5 2 4 3 1 1 8 4 1 97 10 1 8 14 11 2 7 9 8 7 97 13 1 9 6 6 9 87 13 1 9 9 6 91 0 6 9 6 79 62 62 42 42 0 0 62 65 62 65 64 63 42 61 42 60 55 54 53 52 48 46 0 41 0 40 38 21 37 22 36 15 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 286;
}
);
note = uni093F0930094D;
},
{
glyphname = "iMatra_reph_anusvara-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"571 875.074 OFFCURVE",
"613.326 931 OFFCURVE",
"658 931 CURVE SMOOTH",
"674.667 931 OFFCURVE",
"691 923 OFFCURVE",
"707 907 CURVE",
"730 928 LINE",
"688.667 978.667 OFFCURVE",
"645.667 1008 OFFCURVE",
"611 1008 CURVE SMOOTH",
"551.48 1008 OFFCURVE",
"487 937.701 OFFCURVE",
"487 877 CURVE SMOOTH",
"487 869.667 OFFCURVE",
"488 862 OFFCURVE",
"490 854 CURVE",
"383.333 954 OFFCURVE",
"278 1004 OFFCURVE",
"174 1004 CURVE SMOOTH",
"104.567 1004 OFFCURVE",
"7 925.87 OFFCURVE",
"7 864 CURVE SMOOTH",
"7 804 OFFCURVE",
"46 739.667 OFFCURVE",
"110 689 CURVE",
"143 689 LINE",
"101.667 727.667 OFFCURVE",
"81 771 OFFCURVE",
"81 811 CURVE SMOOTH",
"81 879 OFFCURVE",
"139.333 933 OFFCURVE",
"242 933 CURVE SMOOTH",
"279.333 933 OFFCURVE",
"316.333 923.667 OFFCURVE",
"353 905 CURVE SMOOTH",
"426.333 867.667 OFFCURVE",
"476.333 820 OFFCURVE",
"547 748 CURVE SMOOTH",
"574.333 720 OFFCURVE",
"595.333 700.333 OFFCURVE",
"610 689 CURVE",
"656 689 LINE",
"602.667 734.333 OFFCURVE",
"571 783.667 OFFCURVE",
"571 825 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"773 806 LINE",
"701 872 LINE",
"628 806 LINE",
"701 742 LINE"
);
},
{
closed = 1;
nodes = (
"312.514 -13 OFFCURVE",
"184 59.72 OFFCURVE",
"184 111 CURVE SMOOTH",
"184 609 LINE",
"104 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"102 609 LINE",
"102 168 LINE SMOOTH",
"102 141.333 OFFCURVE",
"120.833 109.833 OFFCURVE",
"158.5 73.5 CURVE SMOOTH",
"233.833 0.833 OFFCURVE",
"350.667 -61 OFFCURVE",
"428 -61 CURVE SMOOTH",
"451.333 -61 OFFCURVE",
"472.333 -50.667 OFFCURVE",
"491 -30 CURVE",
"418 17 LINE",
"404.667 -1.667 OFFCURVE",
"383.667 -13 OFFCURVE",
"365 -13 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"229 609 LINE",
"300 609 LINE",
"300 689 LINE",
"150 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 96 values pushed */\01245 44 43 35 34 25 6 0 1 48 1 9 7 49 1 6 9 3 74 60 1 7 1 73 5 1 1 0 3 1 87 4 1 3 2 1 0 8 3 0 97 10 1 8 13 11 2 7 9 8 7 97 12 1 9 6 6 9 87 12 1 9 9 6 91 0 6 9 6 79 66 66 46 46 66 69 66 69 68 67 46 65 46 64 17 20 44 36 38 38 21 37 18 14 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 286;
}
);
note = uni093F0930094D0902;
},
{
glyphname = "iiMatra-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-281 799 OFFCURVE",
"-240.667 746.667 OFFCURVE",
"-174 696 CURVE",
"-149 714 LINE",
"-188.333 749.333 OFFCURVE",
"-208 778.333 OFFCURVE",
"-208 801 CURVE SMOOTH",
"-208 854.152 OFFCURVE",
"-144.419 903 OFFCURVE",
"-88 903 CURVE SMOOTH",
"-34.667 903 OFFCURVE",
"-4.333 862 OFFCURVE",
"41 786 CURVE SMOOTH",
"59.667 754.667 OFFCURVE",
"75.167 731.833 OFFCURVE",
"87.5 717.5 CURVE SMOOTH",
"99.833 703.167 OFFCURVE",
"113.667 696 OFFCURVE",
"129 696 CURVE SMOOTH",
"153 696 OFFCURVE",
"178.333 708.333 OFFCURVE",
"197 731 CURVE",
"149 789 LINE",
"134.333 770.333 OFFCURVE",
"127 762 OFFCURVE",
"115 762 CURVE SMOOTH",
"106.333 762 OFFCURVE",
"98 767 OFFCURVE",
"90 777 CURVE SMOOTH",
"82 787 OFFCURVE",
"71 803.333 OFFCURVE",
"57 826 CURVE SMOOTH",
"39 855.333 OFFCURVE",
"22.167 880 OFFCURVE",
"6.5 900 CURVE SMOOTH",
"-24.833 940 OFFCURVE",
"-72.333 974 OFFCURVE",
"-135 974 CURVE SMOOTH",
"-206.666 974 OFFCURVE",
"-281 911.984 OFFCURVE",
"-281 847 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"102 609 LINE",
"102 168 LINE SMOOTH",
"102 141.333 OFFCURVE",
"120.833 109.833 OFFCURVE",
"158.5 73.5 CURVE SMOOTH",
"233.833 0.833 OFFCURVE",
"350.667 -61 OFFCURVE",
"428 -61 CURVE SMOOTH",
"451.333 -61 OFFCURVE",
"472.333 -50.667 OFFCURVE",
"491 -30 CURVE",
"418 17 LINE",
"404.667 -1.667 OFFCURVE",
"383.667 -13 OFFCURVE",
"365 -13 CURVE SMOOTH",
"312.514 -13 OFFCURVE",
"184 59.72 OFFCURVE",
"184 111 CURVE SMOOTH",
"184 609 LINE",
"104 689 LINE"
);
},
{
closed = 1;
nodes = (
"150 689 LINE",
"229 609 LINE",
"300 609 LINE",
"300 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */\01213 1 1 3 29 14 2 2 1 44 1 5 7 45 1 6 5 4 74 30 1 2 36 1 7 2 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 38 values pushed */\0120 0 0 3 1 0 3 99 0 5 0 6 5 6 95 0 1 1 2 91 0 2 2 25 75 9 1 7 7 4 89 8 1 4 4 24 7 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 38 values pushed */\0120 0 0 3 1 0 3 99 0 5 0 6 5 6 95 0 1 1 2 91 0 2 2 25 75 9 1 7 7 4 89 8 1 4 4 25 7 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\01257 56 17 20 36 37 26 36 37 37 34 10 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 286;
}
);
note = uni0940;
unicode = 0940;
},
{
glyphname = "iiMatra_anusvara-deva";
layers = (
{
components = (
{
alignment = -1;
name = "iiMatra-deva";
},
{
alignment = -1;
name = "anusvara-deva";
transform = "{1, 0, 0, 1, 355, -24}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 300;
}
);
note = uni09400902;
},
{
glyphname = "iiMatra_reph-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"52.691 1008 OFFCURVE",
"-12.948 955.308 OFFCURVE",
"-15 904 CURVE",
"-45.667 948 OFFCURVE",
"-83 974 OFFCURVE",
"-135 974 CURVE SMOOTH",
"-194.896 974 OFFCURVE",
"-281 896.092 OFFCURVE",
"-281 841 CURVE SMOOTH",
"-281 794.333 OFFCURVE",
"-243.333 748 OFFCURVE",
"-174 696 CURVE",
"-149 714 LINE",
"-185 746 OFFCURVE",
"-208 789.333 OFFCURVE",
"-208 816 CURVE SMOOTH",
"-208 868 OFFCURVE",
"-177.667 903 OFFCURVE",
"-139 903 CURVE SMOOTH",
"-117.667 903 OFFCURVE",
"-96 895.333 OFFCURVE",
"-74 880 CURVE SMOOTH",
"-29.811 849.201 OFFCURVE",
"28.931 779.494 OFFCURVE",
"104 689 CURVE",
"150 689 LINE",
"88.667 761 OFFCURVE",
"65 794 OFFCURVE",
"65 838 CURVE SMOOTH",
"65 881.542 OFFCURVE",
"109.986 931 OFFCURVE",
"152 931 CURVE SMOOTH",
"168.667 931 OFFCURVE",
"185 923 OFFCURVE",
"201 907 CURVE",
"224 928 LINE",
"181.333 978.667 OFFCURVE",
"138.667 1008 OFFCURVE",
"104 1008 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"102 609 LINE",
"102 168 LINE SMOOTH",
"102 141.333 OFFCURVE",
"120.833 109.833 OFFCURVE",
"158.5 73.5 CURVE SMOOTH",
"233.833 0.833 OFFCURVE",
"350.667 -61 OFFCURVE",
"428 -61 CURVE SMOOTH",
"451.333 -61 OFFCURVE",
"472.333 -50.667 OFFCURVE",
"491 -30 CURVE",
"418 17 LINE",
"404.667 -1.667 OFFCURVE",
"383.667 -13 OFFCURVE",
"365 -13 CURVE SMOOTH",
"312.514 -13 OFFCURVE",
"184 59.72 OFFCURVE",
"184 111 CURVE SMOOTH",
"184 609 LINE",
"104 689 LINE"
);
},
{
closed = 1;
nodes = (
"150 689 LINE",
"229 609 LINE",
"300 609 LINE",
"300 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */\01234 3 2 3 2 0 24 23 2 1 2 49 1 6 8 50 1 7 6 4 74 41 1 8 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0129 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 47 values pushed */\0120 0 3 2 3 0 2 112 0 3 0 2 1 3 2 99 0 6 0 7 6 7 95 0 1 1 4 91 11 1 4 4 30 75 10 1 8 8 5 89 9 1 5 5 24 8 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01211 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 47 values pushed */\0120 0 3 2 3 0 2 112 0 3 0 2 1 3 2 99 0 6 0 7 6 7 95 0 1 1 4 91 11 1 4 4 23 75 10 1 8 8 5 89 9 1 5 5 24 8 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 47 values pushed */\0120 0 3 2 3 0 2 112 0 3 0 2 1 3 2 99 0 6 0 7 6 7 95 0 1 1 4 91 11 1 4 4 30 75 10 1 8 8 5 89 9 1 5 5 24 8 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 47 values pushed */\0120 0 3 2 3 0 2 112 0 3 0 2 1 3 2 99 0 6 0 7 6 7 95 0 1 1 4 91 11 1 4 4 30 75 10 1 8 8 5 89 9 1 5 5 25 8 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 25 values pushed */\0120 0 62 61 60 59 58 57 53 51 47 45 40 39 0 38 0 37 44 35 22 36 12 6 24 \012CALL[ ]	/* CallFunction */";
};
width = 286;
}
);
note = uni09400930094D;
},
{
glyphname = "iiMatra_reph_anusvara-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"52.691 1008 OFFCURVE",
"-12.948 955.308 OFFCURVE",
"-15 904 CURVE",
"-45.667 948 OFFCURVE",
"-83 974 OFFCURVE",
"-135 974 CURVE SMOOTH",
"-194.896 974 OFFCURVE",
"-281 896.092 OFFCURVE",
"-281 841 CURVE SMOOTH",
"-281 794.333 OFFCURVE",
"-243.333 748 OFFCURVE",
"-174 696 CURVE",
"-149 714 LINE",
"-185 746 OFFCURVE",
"-208 789.333 OFFCURVE",
"-208 816 CURVE SMOOTH",
"-208 868 OFFCURVE",
"-177.667 903 OFFCURVE",
"-139 903 CURVE SMOOTH",
"-117.667 903 OFFCURVE",
"-96 895.333 OFFCURVE",
"-74 880 CURVE SMOOTH",
"-29.811 849.201 OFFCURVE",
"28.931 779.494 OFFCURVE",
"104 689 CURVE",
"150 689 LINE",
"88.667 761 OFFCURVE",
"65 794 OFFCURVE",
"65 838 CURVE SMOOTH",
"65 881.542 OFFCURVE",
"109.986 931 OFFCURVE",
"152 931 CURVE SMOOTH",
"168.667 931 OFFCURVE",
"185 923 OFFCURVE",
"201 907 CURVE",
"224 928 LINE",
"181.333 978.667 OFFCURVE",
"138.667 1008 OFFCURVE",
"104 1008 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"206 873 LINE",
"133 807 LINE",
"206 743 LINE",
"277 807 LINE"
);
},
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"102 609 LINE",
"102 168 LINE SMOOTH",
"102 141.333 OFFCURVE",
"120.833 109.833 OFFCURVE",
"158.5 73.5 CURVE SMOOTH",
"233.833 0.833 OFFCURVE",
"350.667 -61 OFFCURVE",
"428 -61 CURVE SMOOTH",
"451.333 -61 OFFCURVE",
"472.333 -50.667 OFFCURVE",
"491 -30 CURVE",
"418 17 LINE",
"404.667 -1.667 OFFCURVE",
"383.667 -13 OFFCURVE",
"365 -13 CURVE SMOOTH",
"312.514 -13 OFFCURVE",
"184 59.72 OFFCURVE",
"184 111 CURVE SMOOTH",
"184 609 LINE",
"104 689 LINE"
);
},
{
closed = 1;
nodes = (
"150 689 LINE",
"229 609 LINE",
"300 609 LINE",
"300 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */\01234 3 2 3 2 0 42 41 40 24 23 5 1 2 53 1 6 8 54 1 7 6 4 74 45 1 8 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0129 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 47 values pushed */\0120 0 3 2 3 0 2 112 0 3 0 2 1 3 2 99 0 6 0 7 6 7 95 0 1 1 4 91 11 1 4 4 30 75 10 1 8 8 5 89 9 1 5 5 24 8 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01211 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 47 values pushed */\0120 0 3 2 3 0 2 112 0 3 0 2 1 3 2 99 0 6 0 7 6 7 95 0 1 1 4 91 11 1 4 4 23 75 10 1 8 8 5 89 9 1 5 5 24 8 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 47 values pushed */\0120 0 3 2 3 0 2 112 0 3 0 2 1 3 2 99 0 6 0 7 6 7 95 0 1 1 4 91 11 1 4 4 30 75 10 1 8 8 5 89 9 1 5 5 24 8 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 47 values pushed */\0120 0 3 2 3 0 2 112 0 3 0 2 1 3 2 99 0 6 0 7 6 7 95 0 1 1 4 91 11 1 4 4 30 75 10 1 8 8 5 89 9 1 5 5 25 8 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 25 values pushed */\0120 0 66 65 64 63 62 61 57 55 51 49 44 43 0 38 0 37 44 35 22 36 12 6 24 \012CALL[ ]	/* CallFunction */";
};
width = 286;
}
);
note = uni09400930094D0902;
},
{
glyphname = "oCandraMatra-deva";
layers = (
{
components = (
{
alignment = -1;
name = "aaMatra-deva";
},
{
alignment = -1;
name = "eCandraMatra-deva";
transform = "{1, 0, 0, 1, 282, 4}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 286;
}
);
note = uni0949;
unicode = 0949;
},
{
glyphname = "oShortMatra-deva";
layers = (
{
components = (
{
alignment = -1;
name = "aaMatra-deva";
},
{
alignment = -1;
name = "eShortMatra-deva";
transform = "{1, 0, 0, 1, 282, 0}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 286;
}
);
note = uni094A;
unicode = 094A;
},
{
glyphname = "oMatra-deva";
layers = (
{
components = (
{
alignment = -1;
name = "aaMatra-deva";
},
{
alignment = -1;
name = "eMatra-deva";
transform = "{1, 0, 0, 1, 282, 0}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 286;
}
);
note = uni094B;
unicode = 094B;
},
{
glyphname = "oMatra_anusvara-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-323 982 LINE",
"-273.667 911.333 OFFCURVE",
"-224.333 868 OFFCURVE",
"-187 868 CURVE SMOOTH",
"-181 868 OFFCURVE",
"-166 872 OFFCURVE",
"-142 880 CURVE",
"-120 888.667 OFFCURVE",
"-104.333 893 OFFCURVE",
"-95 893 CURVE SMOOTH",
"-74.333 893 OFFCURVE",
"-45.667 870 OFFCURVE",
"-9 824 CURVE",
"108 689 LINE",
"146 689 LINE",
"-34 910 LINE SMOOTH",
"-71.333 955.333 OFFCURVE",
"-107.333 982 OFFCURVE",
"-134 982 CURVE SMOOTH",
"-145.333 982 OFFCURVE",
"-161 977 OFFCURVE",
"-181 967 CURVE",
"-205 956.333 OFFCURVE",
"-219.333 950 OFFCURVE",
"-238 950 CURVE SMOOTH",
"-258 950 OFFCURVE",
"-282.667 971 OFFCURVE",
"-300 1003 CURVE"
);
},
{
closed = 1;
nodes = (
"126 1003 LINE",
"51 936 LINE",
"126 871 LINE",
"200 936 LINE"
);
},
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"102 609 LINE",
"102 168 LINE SMOOTH",
"102 141.333 OFFCURVE",
"120.833 109.833 OFFCURVE",
"158.5 73.5 CURVE SMOOTH",
"233.833 0.833 OFFCURVE",
"350.667 -61 OFFCURVE",
"428 -61 CURVE SMOOTH",
"451.333 -61 OFFCURVE",
"472.333 -50.667 OFFCURVE",
"491 -30 CURVE",
"418 17 LINE",
"404.667 -1.667 OFFCURVE",
"383.667 -13 OFFCURVE",
"365 -13 CURVE SMOOTH",
"312.514 -13 OFFCURVE",
"184 59.72 OFFCURVE",
"184 111 CURVE SMOOTH",
"184 609 LINE",
"104 689 LINE"
);
},
{
closed = 1;
nodes = (
"150 689 LINE",
"229 609 LINE",
"300 609 LINE",
"300 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */\01227 25 2 3 0 26 1 4 3 38 1 6 8 39 1 7 6 4 74 30 1 8 1 73 23 22 2 1 72 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 52 values pushed */\0120 0 1 3 1 0 3 112 0 3 4 1 3 4 110 0 4 2 1 4 2 110 0 6 0 7 6 7 95 0 1 1 23 75 0 2 2 25 75 10 1 8 8 5 89 9 1 5 5 24 8 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01224 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 52 values pushed */\0120 0 1 3 1 0 3 112 0 3 4 1 3 4 110 0 4 2 1 4 2 110 0 6 0 7 6 7 95 0 1 1 23 75 0 2 2 25 75 10 1 8 8 5 89 9 1 5 5 25 8 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 45 values pushed */\0120 1 0 1 114 0 0 3 0 114 0 3 4 3 114 0 4 2 4 114 0 6 0 7 6 7 95 0 2 2 25 75 10 1 8 8 5 89 9 1 5 5 25 8 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 16 values pushed */\01251 50 49 48 20 36 37 24 34 34 19 35 33 11 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 286;
}
);
note = uni094B0902;
},
{
glyphname = "oMatra_reph-deva";
layers = (
{
components = (
{
alignment = -1;
name = "aaMatra-deva";
},
{
alignment = -1;
name = "eMatra_reph-deva";
transform = "{1, 0, 0, 1, 282, 0}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 286;
}
);
note = uni094B0930094D;
},
{
glyphname = "oMatra_reph_anusvara-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"418 17 LINE",
"404.667 -1.667 OFFCURVE",
"383.667 -13 OFFCURVE",
"365 -13 CURVE SMOOTH",
"312.514 -13 OFFCURVE",
"184 59.72 OFFCURVE",
"184 111 CURVE SMOOTH",
"184 609 LINE",
"104 689 LINE",
"150 689 LINE",
"229 609 LINE",
"300 609 LINE",
"300 689 LINE",
"154 689 LINE",
"99.333 734.333 OFFCURVE",
"69 783.667 OFFCURVE",
"69 825 CURVE SMOOTH",
"69 875.503 OFFCURVE",
"110.957 931 OFFCURVE",
"157 931 CURVE SMOOTH",
"174.333 931 OFFCURVE",
"190 923 OFFCURVE",
"204 907 CURVE",
"227 928 LINE",
"185.667 978.667 OFFCURVE",
"140.667 1008 OFFCURVE",
"106 1008 CURVE SMOOTH",
"47.071 1008 OFFCURVE",
"-15 937.61 OFFCURVE",
"-15 877 CURVE SMOOTH",
"-15 873 LINE",
"-45 910 LINE SMOOTH",
"-81 955.333 OFFCURVE",
"-116 982 OFFCURVE",
"-144 982 CURVE SMOOTH",
"-156 982 OFFCURVE",
"-171.333 977 OFFCURVE",
"-190 967 CURVE",
"-216.667 955 OFFCURVE",
"-229.333 950 OFFCURVE",
"-248 950 CURVE SMOOTH",
"-268 950 OFFCURVE",
"-292.667 971 OFFCURVE",
"-310 1003 CURVE",
"-334 982 LINE",
"-283.333 911.333 OFFCURVE",
"-234.667 868 OFFCURVE",
"-196 868 CURVE SMOOTH",
"-190 868 OFFCURVE",
"-175.667 872 OFFCURVE",
"-153 880 CURVE SMOOTH",
"-127 888.667 OFFCURVE",
"-110.667 893 OFFCURVE",
"-104 893 CURVE SMOOTH",
"-84.667 893 OFFCURVE",
"-56.333 870 OFFCURVE",
"-19 824 CURVE SMOOTH",
"98 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"102 609 LINE",
"102 168 LINE SMOOTH",
"102 141.333 OFFCURVE",
"120.833 109.833 OFFCURVE",
"158.5 73.5 CURVE SMOOTH",
"233.833 0.833 OFFCURVE",
"350.667 -61 OFFCURVE",
"428 -61 CURVE SMOOTH",
"451.333 -61 OFFCURVE",
"472.333 -50.667 OFFCURVE",
"491 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"201 876 LINE",
"128 810 LINE",
"201 745 LINE",
"272 810 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */\01221 1 6 7 42 41 2 3 8 33 1 4 3 69 68 67 3 11 4 65 1 12 1 5 74 20 1 6 57 1 1 2 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0129 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 64 values pushed */\0120 5 6 8 6 5 8 112 0 8 3 6 8 3 110 0 3 4 6 3 4 110 0 4 11 6 4 11 110 0 12 0 0 12 0 95 0 6 6 23 75 0 11 11 7 91 0 7 7 30 75 10 1 1 1 2 89 9 1 2 2 24 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01211 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 64 values pushed */\0120 5 6 8 6 5 8 112 0 8 3 6 8 3 110 0 3 4 6 3 4 110 0 4 11 6 4 11 110 0 12 0 0 12 0 95 0 6 6 23 75 0 11 11 7 91 0 7 7 23 75 10 1 1 1 2 89 9 1 2 2 24 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 64 values pushed */\0120 5 6 8 6 5 8 112 0 8 3 6 8 3 110 0 3 4 6 3 4 110 0 4 11 6 4 11 110 0 12 0 0 12 0 95 0 6 6 23 75 0 11 11 7 91 0 7 7 30 75 10 1 1 1 2 89 9 1 2 2 24 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01224 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 64 values pushed */\0120 5 6 8 6 5 8 112 0 8 3 6 8 3 110 0 3 4 6 3 4 110 0 4 11 6 4 11 110 0 12 0 0 12 0 95 0 6 6 23 75 0 11 11 7 91 0 7 7 30 75 10 1 1 1 2 89 9 1 2 2 25 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 66 values pushed */\0120 6 7 5 7 6 5 112 0 5 8 7 5 8 110 0 8 3 7 8 3 110 0 3 4 7 3 4 110 0 4 11 7 4 11 110 0 12 0 0 12 0 95 0 11 11 7 91 0 7 7 30 75 10 1 1 1 2 89 9 1 2 2 25 1 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 20 values pushed */\01263 61 56 55 54 53 52 51 36 39 35 37 34 34 17 20 33 13 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 286;
}
);
note = uni094B0930094D0902;
},
{
glyphname = "auMatra-deva";
layers = (
{
components = (
{
alignment = -1;
name = "aaMatra-deva";
},
{
alignment = -1;
name = "aiMatra-deva";
transform = "{1, 0, 0, 1, 282, 0}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 286;
}
);
note = uni094C;
unicode = 094C;
},
{
glyphname = "auMatra_anusvara-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"418 17 LINE",
"404.667 -1.667 OFFCURVE",
"383.667 -13 OFFCURVE",
"365 -13 CURVE SMOOTH",
"312.514 -13 OFFCURVE",
"184 59.72 OFFCURVE",
"184 111 CURVE SMOOTH",
"184 609 LINE",
"104 689 LINE",
"150 689 LINE",
"229 609 LINE",
"300 609 LINE",
"300 689 LINE",
"155 689 LINE",
"68 924 LINE SMOOTH",
"46.667 980 OFFCURVE",
"10 1017 OFFCURVE",
"-26 1017 CURVE SMOOTH",
"-31.333 1017 OFFCURVE",
"-46 1015 OFFCURVE",
"-70 1011 CURVE SMOOTH",
"-94 1007 OFFCURVE",
"-109.333 1005 OFFCURVE",
"-116 1005 CURVE SMOOTH",
"-144 1005 OFFCURVE",
"-170.667 1016.333 OFFCURVE",
"-184 1035 CURVE",
"-209 1017 LINE",
"-170.333 959.667 OFFCURVE",
"-122.333 923 OFFCURVE",
"-89 923 CURVE SMOOTH",
"-83.667 923 OFFCURVE",
"-70.333 925 OFFCURVE",
"-49 929 CURVE",
"-43 929.667 OFFCURVE",
"-36.5 930.667 OFFCURVE",
"-29.5 932 CURVE SMOOTH",
"-22.5 933.333 OFFCURVE",
"-16.333 934 OFFCURVE",
"-11 934 CURVE SMOOTH",
"13 934 OFFCURVE",
"38.333 904.333 OFFCURVE",
"53 863 CURVE",
"112 714 LINE",
"-95 874 LINE SMOOTH",
"-135.667 904 OFFCURVE",
"-165.333 919 OFFCURVE",
"-184 919 CURVE SMOOTH",
"-190.667 919 OFFCURVE",
"-206.333 915.333 OFFCURVE",
"-231 908 CURVE SMOOTH",
"-257.667 900 OFFCURVE",
"-274.667 896 OFFCURVE",
"-282 896 CURVE SMOOTH",
"-295.333 896 OFFCURVE",
"-317 907.667 OFFCURVE",
"-329 925 CURVE",
"-349 904 LINE",
"-303.667 850.667 OFFCURVE",
"-259.667 818 OFFCURVE",
"-229 818 CURVE SMOOTH",
"-223 818 OFFCURVE",
"-208.667 821.333 OFFCURVE",
"-186 828 CURVE",
"-168 834 OFFCURVE",
"-155.333 837 OFFCURVE",
"-148 837 CURVE SMOOTH",
"-125.333 837 OFFCURVE",
"-98.667 826.333 OFFCURVE",
"-68 805 CURVE SMOOTH",
"98 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"102 609 LINE",
"102 168 LINE SMOOTH",
"102 141.333 OFFCURVE",
"120.833 109.833 OFFCURVE",
"158.5 73.5 CURVE SMOOTH",
"233.833 0.833 OFFCURVE",
"350.667 -61 OFFCURVE",
"428 -61 CURVE SMOOTH",
"451.333 -61 OFFCURVE",
"472.333 -50.667 OFFCURVE",
"491 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"210 858 LINE",
"284 923 LINE",
"210 990 LINE",
"135 923 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */\01272 1 7 9 21 1 8 7 20 1 5 6 31 1 13 4 69 1 14 1 5 74 73 71 2 8 61 1 1 2 73 44 43 2 10 72 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01211 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 69 values pushed */\0120 5 6 3 6 5 3 112 0 4 3 13 3 4 13 112 0 6 0 3 4 6 3 99 0 14 0 0 14 0 95 0 7 7 10 91 0 10 10 30 75 0 8 8 9 91 0 9 9 23 75 0 13 13 25 75 12 1 1 1 2 89 11 1 2 2 24 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01212 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 69 values pushed */\0120 5 6 3 6 5 3 112 0 4 3 13 3 4 13 112 0 6 0 3 4 6 3 99 0 14 0 0 14 0 95 0 7 7 10 91 0 10 10 23 75 0 8 8 9 91 0 9 9 23 75 0 13 13 25 75 12 1 1 1 2 89 11 1 2 2 24 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 69 values pushed */\0120 5 6 3 6 5 3 112 0 4 3 13 3 4 13 112 0 6 0 3 4 6 3 99 0 14 0 0 14 0 95 0 7 7 10 91 0 10 10 30 75 0 8 8 9 91 0 9 9 30 75 0 13 13 25 75 12 1 1 1 2 89 11 1 2 2 24 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01239 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 69 values pushed */\0120 5 6 3 6 5 3 112 0 4 3 13 3 4 13 112 0 6 0 3 4 6 3 99 0 14 0 0 14 0 95 0 7 7 10 91 0 10 10 30 75 0 8 8 9 91 0 9 9 30 75 0 13 13 25 75 12 1 1 1 2 89 11 1 2 2 25 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 67 values pushed */\0120 5 6 3 6 5 3 112 0 4 3 13 3 4 13 112 0 10 0 7 8 10 7 99 0 6 0 3 4 6 3 99 0 14 0 0 14 0 95 0 8 8 9 91 0 9 9 30 75 0 13 13 25 75 12 1 1 1 2 89 11 1 2 2 25 1 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 24 values pushed */\01267 65 60 59 58 57 56 55 52 50 48 46 36 21 34 37 34 34 17 20 33 15 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 275;
}
);
note = uni094C0902;
},
{
glyphname = "auMatra_reph-deva";
layers = (
{
components = (
{
alignment = -1;
name = "aaMatra-deva";
},
{
alignment = -1;
name = "aiMatra_reph-deva";
transform = "{1, 0, 0, 1, 282, 0}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 286;
}
);
note = uni094C0930094D;
},
{
glyphname = "auMatra_reph_anusvara-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"418 17 LINE",
"404.667 -1.667 OFFCURVE",
"383.667 -13 OFFCURVE",
"365 -13 CURVE SMOOTH",
"312.514 -13 OFFCURVE",
"184 59.72 OFFCURVE",
"184 111 CURVE SMOOTH",
"184 609 LINE",
"104 689 LINE",
"150 689 LINE",
"229 609 LINE",
"300 609 LINE",
"300 689 LINE",
"156 689 LINE",
"130 773 LINE SMOOTH",
"122.667 796.333 OFFCURVE",
"119 815.667 OFFCURVE",
"119 831 CURVE SMOOTH",
"119 892.353 OFFCURVE",
"185.438 959 OFFCURVE",
"244 959 CURVE SMOOTH",
"260 959 OFFCURVE",
"277.333 949 OFFCURVE",
"292 933 CURVE",
"314 955 LINE",
"276.667 999 OFFCURVE",
"229.667 1026 OFFCURVE",
"191 1026 CURVE SMOOTH",
"135 1026 OFFCURVE",
"83.333 988.333 OFFCURVE",
"58 935 CURVE",
"35.333 984.333 OFFCURVE",
"1.667 1017 OFFCURVE",
"-25 1017 CURVE SMOOTH",
"-30.333 1017 OFFCURVE",
"-45.667 1015 OFFCURVE",
"-71 1011 CURVE SMOOTH",
"-95 1007 OFFCURVE",
"-110 1005 OFFCURVE",
"-116 1005 CURVE SMOOTH",
"-144 1005 OFFCURVE",
"-169.667 1016.333 OFFCURVE",
"-183 1035 CURVE",
"-208 1017 LINE",
"-169.333 959.667 OFFCURVE",
"-121.667 923 OFFCURVE",
"-87 923 CURVE SMOOTH",
"-81.667 923 OFFCURVE",
"-76 923.667 OFFCURVE",
"-70 925 CURVE SMOOTH",
"-64 926.333 OFFCURVE",
"-58.333 927.333 OFFCURVE",
"-53 928 CURVE",
"-33 932 OFFCURVE",
"-20.333 934 OFFCURVE",
"-15 934 CURVE SMOOTH",
"10.333 934 OFFCURVE",
"36.333 904.667 OFFCURVE",
"55 858 CURVE SMOOTH",
"113 714 LINE",
"-95 874 LINE SMOOTH",
"-135.667 904 OFFCURVE",
"-165.333 919 OFFCURVE",
"-184 919 CURVE SMOOTH",
"-190.667 919 OFFCURVE",
"-206.333 915.333 OFFCURVE",
"-231 908 CURVE SMOOTH",
"-257.667 900 OFFCURVE",
"-274.667 896 OFFCURVE",
"-282 896 CURVE SMOOTH",
"-295.333 896 OFFCURVE",
"-317 907.667 OFFCURVE",
"-329 925 CURVE",
"-349 904 LINE",
"-303.667 850.667 OFFCURVE",
"-259.667 818 OFFCURVE",
"-229 818 CURVE SMOOTH",
"-222.333 818 OFFCURVE",
"-207 821.333 OFFCURVE",
"-183 828 CURVE SMOOTH",
"-162.333 834 OFFCURVE",
"-148.667 837 OFFCURVE",
"-142 837 CURVE SMOOTH",
"-123.333 837 OFFCURVE",
"-98.667 826.333 OFFCURVE",
"-68 805 CURVE SMOOTH",
"97 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"102 609 LINE",
"102 168 LINE SMOOTH",
"102 141.333 OFFCURVE",
"120.833 109.833 OFFCURVE",
"158.5 73.5 CURVE SMOOTH",
"233.833 0.833 OFFCURVE",
"350.667 -61 OFFCURVE",
"428 -61 CURVE SMOOTH",
"451.333 -61 OFFCURVE",
"472.333 -50.667 OFFCURVE",
"491 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"256 876 LINE",
"183 810 LINE",
"256 745 LINE",
"327 810 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01212 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 39 values pushed */\01260 54 2 7 12 61 21 2 8 7 20 1 5 6 89 88 87 31 4 15 4 85 1 16 1 5 74 43 1 10 77 1 1 2 73 44 1 11 72 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 37 values pushed */\01260 54 2 7 12 61 21 2 8 7 20 1 5 6 89 88 87 31 4 15 4 85 1 16 1 5 74 77 1 1 1 73 44 43 2 10 72 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 39 values pushed */\01260 54 2 7 12 61 21 2 8 7 20 1 5 6 89 88 87 31 4 15 4 85 1 16 1 5 74 43 1 10 77 1 1 2 73 44 1 11 72 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01211 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 83 values pushed */\0120 6 8 5 8 6 5 112 0 5 3 8 5 3 110 0 3 4 8 3 102 0 4 15 8 4 15 110 0 16 0 0 16 0 95 0 12 12 11 91 0 11 11 30 75 0 7 7 10 91 0 10 10 30 75 0 8 8 9 91 0 9 9 23 75 0 15 15 25 75 14 1 1 1 2 89 13 1 2 2 24 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01212 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 83 values pushed */\0120 6 8 5 8 6 5 112 0 5 3 8 5 3 110 0 3 4 8 3 102 0 4 15 8 4 15 110 0 16 0 0 16 0 95 0 12 12 11 91 0 11 11 30 75 0 7 7 10 91 0 10 10 23 75 0 8 8 9 91 0 9 9 23 75 0 15 15 25 75 14 1 1 1 2 89 13 1 2 2 24 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 85 values pushed */\0120 6 8 5 8 6 5 112 0 5 3 8 5 3 110 0 3 4 8 3 102 0 4 15 8 4 15 110 0 16 0 0 16 0 95 0 12 12 10 91 11 1 10 10 30 75 0 7 7 10 91 11 1 10 10 30 75 0 8 8 9 91 0 9 9 30 75 0 15 15 25 75 14 1 1 1 2 89 13 1 2 2 24 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 84 values pushed */\0120 6 8 5 8 6 5 112 0 5 3 8 5 3 110 0 3 4 8 3 4 110 0 4 15 8 4 15 110 0 16 0 0 16 0 95 0 12 12 11 91 0 11 11 30 75 0 7 7 10 91 0 10 10 30 75 0 8 8 9 91 0 9 9 30 75 0 15 15 25 75 14 1 1 1 2 89 13 1 2 2 24 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01223 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 84 values pushed */\0120 6 8 5 8 6 5 112 0 5 3 8 5 3 110 0 3 4 8 3 4 110 0 4 15 8 4 15 110 0 16 0 0 16 0 95 0 12 12 11 91 0 11 11 30 75 0 7 7 10 91 0 10 10 30 75 0 8 8 9 91 0 9 9 30 75 0 15 15 25 75 14 1 1 1 2 89 13 1 2 2 25 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01239 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 82 values pushed */\0120 6 8 5 8 6 5 112 0 5 3 8 5 3 110 0 3 4 8 3 4 110 0 4 15 8 4 15 110 0 11 0 12 7 11 12 99 0 16 0 0 16 0 95 0 7 7 10 91 0 10 10 30 75 0 8 8 9 91 0 9 9 30 75 0 15 15 25 75 14 1 1 1 2 89 13 1 2 2 25 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 80 values pushed */\0120 6 8 5 8 6 5 112 0 5 3 8 5 3 110 0 3 4 8 3 4 110 0 4 15 8 4 15 110 0 11 0 12 7 11 12 99 0 10 0 7 8 10 7 99 0 16 0 0 16 0 95 0 8 8 9 91 0 9 9 30 75 0 15 15 25 75 14 1 1 1 2 89 13 1 2 2 25 1 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 28 values pushed */\01283 81 76 75 74 73 72 71 65 63 58 56 52 50 48 46 36 21 34 37 34 34 17 20 33 17 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 286;
}
);
note = uni094C0930094D0902;
},
{
glyphname = "ooeMatra-deva";
layers = (
{
components = (
{
alignment = -1;
name = "aaMatra-deva";
},
{
alignment = -1;
name = "oeMatra-deva";
transform = "{1, 0, 0, 1, 299, 0}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 286;
}
);
note = uni093B;
unicode = 093B;
},
{
glyphname = "iMatra-deva.0";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"7 804 OFFCURVE",
"46 739.667 OFFCURVE",
"110 689 CURVE",
"143 689 LINE",
"101.667 727.667 OFFCURVE",
"81 771 OFFCURVE",
"81 811 CURVE SMOOTH",
"81 879 OFFCURVE",
"139.333 933 OFFCURVE",
"242 933 CURVE SMOOTH",
"278 933 OFFCURVE",
"311.167 925.833 OFFCURVE",
"341.5 911.5 CURVE SMOOTH",
"402.167 882.833 OFFCURVE",
"440.333 846.667 OFFCURVE",
"499 784 CURVE SMOOTH",
"555 724 OFFCURVE",
"585.667 696 OFFCURVE",
"623 696 CURVE SMOOTH",
"645.667 696 OFFCURVE",
"674.333 713.333 OFFCURVE",
"697 740 CURVE",
"642 793 LINE",
"630 774.333 OFFCURVE",
"612 762 OFFCURVE",
"596 762 CURVE SMOOTH",
"585.333 762 OFFCURVE",
"573.5 767.167 OFFCURVE",
"560.5 777.5 CURVE SMOOTH",
"547.5 787.833 OFFCURVE",
"529 805 OFFCURVE",
"505 829 CURVE SMOOTH",
"471.667 863 OFFCURVE",
"440.5 891.833 OFFCURVE",
"411.5 915.5 CURVE SMOOTH",
"353.5 962.833 OFFCURVE",
"270 1004 OFFCURVE",
"174 1004 CURVE SMOOTH",
"104.567 1004 OFFCURVE",
"7 925.87 OFFCURVE",
"7 864 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"102 609 LINE",
"102 168 LINE SMOOTH",
"102 141.333 OFFCURVE",
"120.833 109.833 OFFCURVE",
"158.5 73.5 CURVE SMOOTH",
"233.833 0.833 OFFCURVE",
"350.667 -61 OFFCURVE",
"428 -61 CURVE SMOOTH",
"451.333 -61 OFFCURVE",
"472.333 -50.667 OFFCURVE",
"491 -30 CURVE",
"418 17 LINE",
"404.667 -1.667 OFFCURVE",
"383.667 -13 OFFCURVE",
"365 -13 CURVE SMOOTH",
"312.514 -13 OFFCURVE",
"184 59.72 OFFCURVE",
"184 111 CURVE SMOOTH",
"184 609 LINE",
"104 689 LINE"
);
},
{
closed = 1;
nodes = (
"150 689 LINE",
"229 609 LINE",
"300 609 LINE",
"300 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */\01213 1 1 3 14 1 2 1 45 1 6 8 46 1 7 6 4 74 37 1 8 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01234 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 43 values pushed */\0120 0 0 3 1 0 3 99 0 1 4 1 2 5 1 2 99 9 1 5 10 1 8 6 5 8 97 0 6 7 7 6 87 0 6 6 7 91 0 7 6 7 79 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 50 values pushed */\0120 4 2 5 2 4 5 112 0 0 0 3 1 0 3 99 0 1 0 2 4 1 2 99 9 1 5 10 1 8 6 5 8 97 0 6 7 7 6 87 0 6 6 7 91 0 7 6 7 79 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 16 values pushed */\01258 57 56 55 20 36 37 20 21 37 37 37 34 11 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 286;
}
);
note = uni093F.0;
},
{
glyphname = "iMatra_reph-deva.0";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"551.48 1008 OFFCURVE",
"487 937.701 OFFCURVE",
"487 877 CURVE SMOOTH",
"487 869.667 OFFCURVE",
"488 862 OFFCURVE",
"490 854 CURVE",
"383.333 954 OFFCURVE",
"278 1004 OFFCURVE",
"174 1004 CURVE SMOOTH",
"104.567 1004 OFFCURVE",
"7 925.87 OFFCURVE",
"7 864 CURVE SMOOTH",
"7 804 OFFCURVE",
"46 739.667 OFFCURVE",
"110 689 CURVE",
"143 689 LINE",
"101.667 727.667 OFFCURVE",
"81 771 OFFCURVE",
"81 811 CURVE SMOOTH",
"81 879 OFFCURVE",
"139.333 933 OFFCURVE",
"242 933 CURVE SMOOTH",
"279.333 933 OFFCURVE",
"316.333 923.667 OFFCURVE",
"353 905 CURVE SMOOTH",
"426.333 867.667 OFFCURVE",
"476.333 820 OFFCURVE",
"547 748 CURVE SMOOTH",
"574.333 720 OFFCURVE",
"595.333 700.333 OFFCURVE",
"610 689 CURVE",
"656 689 LINE",
"602.667 734.333 OFFCURVE",
"571 783.667 OFFCURVE",
"571 825 CURVE SMOOTH",
"571 875.074 OFFCURVE",
"613.326 931 OFFCURVE",
"658 931 CURVE SMOOTH",
"674.667 931 OFFCURVE",
"691 923 OFFCURVE",
"707 907 CURVE",
"730 928 LINE",
"688.667 978.667 OFFCURVE",
"645.667 1008 OFFCURVE",
"611 1008 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"312.514 -13 OFFCURVE",
"184 59.72 OFFCURVE",
"184 111 CURVE SMOOTH",
"184 609 LINE",
"104 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"102 609 LINE",
"102 168 LINE SMOOTH",
"102 141.333 OFFCURVE",
"120.833 109.833 OFFCURVE",
"158.5 73.5 CURVE SMOOTH",
"233.833 0.833 OFFCURVE",
"350.667 -61 OFFCURVE",
"428 -61 CURVE SMOOTH",
"451.333 -61 OFFCURVE",
"472.333 -50.667 OFFCURVE",
"491 -30 CURVE",
"418 17 LINE",
"404.667 -1.667 OFFCURVE",
"383.667 -13 OFFCURVE",
"365 -13 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"229 609 LINE",
"300 609 LINE",
"300 689 LINE",
"150 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 102 values pushed */\01235 3 2 3 1 0 44 1 9 7 45 1 6 9 3 74 56 1 7 1 73 2 1 0 1 4 0 87 12 5 2 4 3 1 1 8 4 1 97 10 1 8 14 11 2 7 9 8 7 97 13 1 9 6 6 9 87 13 1 9 9 6 91 0 6 9 6 79 62 62 42 42 0 0 62 65 62 65 64 63 42 61 42 60 55 54 53 52 48 46 0 41 0 40 38 21 37 22 36 15 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 286;
}
);
note = uni093F0930094D.0;
},
{
glyphname = "iMatra_reph_anusvara-deva.0";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"571 875.074 OFFCURVE",
"613.326 931 OFFCURVE",
"658 931 CURVE SMOOTH",
"674.667 931 OFFCURVE",
"691 923 OFFCURVE",
"707 907 CURVE",
"730 928 LINE",
"688.667 978.667 OFFCURVE",
"645.667 1008 OFFCURVE",
"611 1008 CURVE SMOOTH",
"551.48 1008 OFFCURVE",
"487 937.701 OFFCURVE",
"487 877 CURVE SMOOTH",
"487 869.667 OFFCURVE",
"488 862 OFFCURVE",
"490 854 CURVE",
"383.333 954 OFFCURVE",
"278 1004 OFFCURVE",
"174 1004 CURVE SMOOTH",
"104.567 1004 OFFCURVE",
"7 925.87 OFFCURVE",
"7 864 CURVE SMOOTH",
"7 804 OFFCURVE",
"46 739.667 OFFCURVE",
"110 689 CURVE",
"143 689 LINE",
"101.667 727.667 OFFCURVE",
"81 771 OFFCURVE",
"81 811 CURVE SMOOTH",
"81 879 OFFCURVE",
"139.333 933 OFFCURVE",
"242 933 CURVE SMOOTH",
"279.333 933 OFFCURVE",
"316.333 923.667 OFFCURVE",
"353 905 CURVE SMOOTH",
"426.333 867.667 OFFCURVE",
"476.333 820 OFFCURVE",
"547 748 CURVE SMOOTH",
"574.333 720 OFFCURVE",
"595.333 700.333 OFFCURVE",
"610 689 CURVE",
"656 689 LINE",
"602.667 734.333 OFFCURVE",
"571 783.667 OFFCURVE",
"571 825 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"773 806 LINE",
"701 872 LINE",
"628 806 LINE",
"701 742 LINE"
);
},
{
closed = 1;
nodes = (
"312.514 -13 OFFCURVE",
"184 59.72 OFFCURVE",
"184 111 CURVE SMOOTH",
"184 609 LINE",
"104 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"102 609 LINE",
"102 168 LINE SMOOTH",
"102 141.333 OFFCURVE",
"120.833 109.833 OFFCURVE",
"158.5 73.5 CURVE SMOOTH",
"233.833 0.833 OFFCURVE",
"350.667 -61 OFFCURVE",
"428 -61 CURVE SMOOTH",
"451.333 -61 OFFCURVE",
"472.333 -50.667 OFFCURVE",
"491 -30 CURVE",
"418 17 LINE",
"404.667 -1.667 OFFCURVE",
"383.667 -13 OFFCURVE",
"365 -13 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"229 609 LINE",
"300 609 LINE",
"300 689 LINE",
"150 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 96 values pushed */\01245 44 43 35 34 25 6 0 1 48 1 9 7 49 1 6 9 3 74 60 1 7 1 73 5 1 1 0 3 1 87 4 1 3 2 1 0 8 3 0 97 10 1 8 13 11 2 7 9 8 7 97 12 1 9 6 6 9 87 12 1 9 9 6 91 0 6 9 6 79 66 66 46 46 66 69 66 69 68 67 46 65 46 64 17 20 44 36 38 38 21 37 18 14 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 286;
}
);
note = uni093F0930094D0902.0;
},
{
glyphname = "iMatra-deva.05";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"18 795.667 OFFCURVE",
"52.333 733 OFFCURVE",
"111 689 CURVE",
"143 689 LINE",
"107.667 724.333 OFFCURVE",
"90 759.667 OFFCURVE",
"90 795 CURVE SMOOTH",
"90 824.333 OFFCURVE",
"99.667 851.5 OFFCURVE",
"119 876.5 CURVE SMOOTH",
"157.667 926.5 OFFCURVE",
"232 959 OFFCURVE",
"328 959 CURVE SMOOTH",
"384.667 959 OFFCURVE",
"436.167 951.833 OFFCURVE",
"482.5 937.5 CURVE SMOOTH",
"575.167 908.833 OFFCURVE",
"633.667 871 OFFCURVE",
"723 807 CURVE SMOOTH",
"757.667 782.333 OFFCURVE",
"786 763.333 OFFCURVE",
"808 750 CURVE SMOOTH",
"852 723.333 OFFCURVE",
"903.333 702 OFFCURVE",
"958 702 CURVE SMOOTH",
"993.333 702 OFFCURVE",
"1022.667 719.333 OFFCURVE",
"1046 754 CURVE",
"982 802 LINE",
"966 775.333 OFFCURVE",
"951 760 OFFCURVE",
"923 760 CURVE SMOOTH",
"871 760 OFFCURVE",
"825 787.333 OFFCURVE",
"733 850 CURVE SMOOTH",
"681 885.333 OFFCURVE",
"634.667 914.5 OFFCURVE",
"594 937.5 CURVE SMOOTH",
"512.667 983.5 OFFCURVE",
"400 1023 OFFCURVE",
"268 1023 CURVE SMOOTH",
"219.333 1023 OFFCURVE",
"176 1014.833 OFFCURVE",
"138 998.5 CURVE SMOOTH",
"62 965.833 OFFCURVE",
"18 909 OFFCURVE",
"18 849 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"102 609 LINE",
"102 168 LINE SMOOTH",
"102 141.333 OFFCURVE",
"120.833 109.833 OFFCURVE",
"158.5 73.5 CURVE SMOOTH",
"233.833 0.833 OFFCURVE",
"350.667 -61 OFFCURVE",
"428 -61 CURVE SMOOTH",
"451.333 -61 OFFCURVE",
"472.333 -50.667 OFFCURVE",
"491 -30 CURVE",
"418 17 LINE",
"404.667 -1.667 OFFCURVE",
"383.667 -13 OFFCURVE",
"365 -13 CURVE SMOOTH",
"312.514 -13 OFFCURVE",
"184 59.72 OFFCURVE",
"184 111 CURVE SMOOTH",
"184 609 LINE",
"104 689 LINE"
);
},
{
closed = 1;
nodes = (
"150 689 LINE",
"229 609 LINE",
"300 609 LINE",
"300 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 89 values pushed */\01213 1 1 3 14 1 2 1 45 1 6 8 46 1 7 6 4 74 37 1 8 1 73 0 4 2 5 2 4 5 112 0 0 0 3 1 0 3 99 0 1 0 2 4 1 2 99 9 1 5 10 1 8 6 5 8 97 0 6 7 7 6 87 0 6 6 7 91 0 7 6 7 79 58 57 56 55 20 36 37 20 21 38 36 37 34 11 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 286;
}
);
note = uni093F.05;
},
{
glyphname = "iMatra-deva.10";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"18 795.667 OFFCURVE",
"52.333 733 OFFCURVE",
"111 689 CURVE",
"143 689 LINE",
"107.667 724.333 OFFCURVE",
"90 759.667 OFFCURVE",
"90 795 CURVE SMOOTH",
"90 824.333 OFFCURVE",
"99.667 851.5 OFFCURVE",
"119 876.5 CURVE SMOOTH",
"157.667 926.5 OFFCURVE",
"232 959 OFFCURVE",
"328 959 CURVE SMOOTH",
"384.667 959 OFFCURVE",
"436.167 951.833 OFFCURVE",
"482.5 937.5 CURVE SMOOTH",
"575.167 908.833 OFFCURVE",
"633.667 871 OFFCURVE",
"723 807 CURVE SMOOTH",
"757.667 782.333 OFFCURVE",
"786 763.333 OFFCURVE",
"808 750 CURVE SMOOTH",
"852 723.333 OFFCURVE",
"903.333 702 OFFCURVE",
"958 702 CURVE SMOOTH",
"993.333 702 OFFCURVE",
"1022.667 719.333 OFFCURVE",
"1046 754 CURVE",
"982 802 LINE",
"966 775.333 OFFCURVE",
"951 760 OFFCURVE",
"923 760 CURVE SMOOTH",
"871 760 OFFCURVE",
"825 787.333 OFFCURVE",
"733 850 CURVE SMOOTH",
"681 885.333 OFFCURVE",
"634.667 914.5 OFFCURVE",
"594 937.5 CURVE SMOOTH",
"512.667 983.5 OFFCURVE",
"400 1023 OFFCURVE",
"268 1023 CURVE SMOOTH",
"219.333 1023 OFFCURVE",
"176 1014.833 OFFCURVE",
"138 998.5 CURVE SMOOTH",
"62 965.833 OFFCURVE",
"18 909 OFFCURVE",
"18 849 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"102 609 LINE",
"102 168 LINE SMOOTH",
"102 141.333 OFFCURVE",
"120.833 109.833 OFFCURVE",
"158.5 73.5 CURVE SMOOTH",
"233.833 0.833 OFFCURVE",
"350.667 -61 OFFCURVE",
"428 -61 CURVE SMOOTH",
"451.333 -61 OFFCURVE",
"472.333 -50.667 OFFCURVE",
"491 -30 CURVE",
"418 17 LINE",
"404.667 -1.667 OFFCURVE",
"383.667 -13 OFFCURVE",
"365 -13 CURVE SMOOTH",
"312.514 -13 OFFCURVE",
"184 59.72 OFFCURVE",
"184 111 CURVE SMOOTH",
"184 609 LINE",
"104 689 LINE"
);
},
{
closed = 1;
nodes = (
"150 689 LINE",
"229 609 LINE",
"300 609 LINE",
"300 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 89 values pushed */\01213 1 1 3 14 1 2 1 45 1 6 8 46 1 7 6 4 74 37 1 8 1 73 0 4 2 5 2 4 5 112 0 0 0 3 1 0 3 99 0 1 0 2 4 1 2 99 9 1 5 10 1 8 6 5 8 97 0 6 7 7 6 87 0 6 6 7 91 0 7 6 7 79 58 57 56 55 20 36 37 20 21 38 36 37 34 11 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 286;
}
);
note = uni093F.10;
},
{
glyphname = "iMatra_reph-deva.05";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"906.289 1008 OFFCURVE",
"842 937.309 OFFCURVE",
"842 877 CURVE SMOOTH",
"842 857 OFFCURVE",
"848.667 833.667 OFFCURVE",
"862 807 CURVE",
"687.333 937.667 OFFCURVE",
"501.333 1023 OFFCURVE",
"268 1023 CURVE SMOOTH",
"219.333 1023 OFFCURVE",
"176 1014.833 OFFCURVE",
"138 998.5 CURVE SMOOTH",
"62 965.833 OFFCURVE",
"18 909 OFFCURVE",
"18 849 CURVE SMOOTH",
"18 795.667 OFFCURVE",
"52.333 733 OFFCURVE",
"111 689 CURVE",
"143 689 LINE",
"107.667 724.333 OFFCURVE",
"90 759.667 OFFCURVE",
"90 795 CURVE SMOOTH",
"90 824.333 OFFCURVE",
"99.5 851.5 OFFCURVE",
"118.5 876.5 CURVE SMOOTH",
"156.5 926.5 OFFCURVE",
"230.333 959 OFFCURVE",
"325 959 CURVE SMOOTH",
"404.333 959 OFFCURVE",
"478.333 947.833 OFFCURVE",
"547 925.5 CURVE SMOOTH",
"684.333 880.833 OFFCURVE",
"767 826.667 OFFCURVE",
"883 744 CURVE SMOOTH",
"917.667 718 OFFCURVE",
"944.667 699.667 OFFCURVE",
"964 689 CURVE",
"1011 689 LINE",
"956.333 734.333 OFFCURVE",
"925 783.667 OFFCURVE",
"925 825 CURVE SMOOTH",
"925 875.503 OFFCURVE",
"966.957 931 OFFCURVE",
"1013 931 CURVE SMOOTH",
"1030.333 931 OFFCURVE",
"1046 923 OFFCURVE",
"1060 907 CURVE",
"1084 928 LINE",
"1042.667 978.667 OFFCURVE",
"999.667 1008 OFFCURVE",
"965 1008 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"312.514 -13 OFFCURVE",
"184 59.72 OFFCURVE",
"184 111 CURVE SMOOTH",
"184 609 LINE",
"104 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"102 609 LINE",
"102 168 LINE SMOOTH",
"102 141.333 OFFCURVE",
"120.833 109.833 OFFCURVE",
"158.5 73.5 CURVE SMOOTH",
"233.833 0.833 OFFCURVE",
"350.667 -61 OFFCURVE",
"428 -61 CURVE SMOOTH",
"451.333 -61 OFFCURVE",
"472.333 -50.667 OFFCURVE",
"491 -30 CURVE",
"418 17 LINE",
"404.667 -1.667 OFFCURVE",
"383.667 -13 OFFCURVE",
"365 -13 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"229 609 LINE",
"300 609 LINE",
"300 689 LINE",
"150 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 110 values pushed */\01236 3 2 3 1 0 45 1 9 7 46 1 6 9 3 74 57 1 7 1 73 0 0 2 1 2 0 1 112 0 4 0 2 0 4 2 99 12 1 5 3 1 1 8 5 1 97 10 1 8 14 11 2 7 9 8 7 97 13 1 9 6 6 9 87 13 1 9 9 6 91 0 6 9 6 79 63 63 43 43 0 0 63 66 63 66 65 64 43 62 43 61 56 55 54 53 49 47 0 42 0 41 38 21 37 22 36 15 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 286;
}
);
note = uni093F0930094D.05;
},
{
glyphname = "iMatra_reph-deva.10";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"906.289 1008 OFFCURVE",
"842 937.309 OFFCURVE",
"842 877 CURVE SMOOTH",
"842 857 OFFCURVE",
"848.667 833.667 OFFCURVE",
"862 807 CURVE",
"687.333 937.667 OFFCURVE",
"501.333 1023 OFFCURVE",
"268 1023 CURVE SMOOTH",
"219.333 1023 OFFCURVE",
"176 1014.833 OFFCURVE",
"138 998.5 CURVE SMOOTH",
"62 965.833 OFFCURVE",
"18 909 OFFCURVE",
"18 849 CURVE SMOOTH",
"18 795.667 OFFCURVE",
"52.333 733 OFFCURVE",
"111 689 CURVE",
"143 689 LINE",
"107.667 724.333 OFFCURVE",
"90 759.667 OFFCURVE",
"90 795 CURVE SMOOTH",
"90 824.333 OFFCURVE",
"99.5 851.5 OFFCURVE",
"118.5 876.5 CURVE SMOOTH",
"156.5 926.5 OFFCURVE",
"230.333 959 OFFCURVE",
"325 959 CURVE SMOOTH",
"404.333 959 OFFCURVE",
"478.333 947.833 OFFCURVE",
"547 925.5 CURVE SMOOTH",
"684.333 880.833 OFFCURVE",
"767 826.667 OFFCURVE",
"883 744 CURVE SMOOTH",
"917.667 718 OFFCURVE",
"944.667 699.667 OFFCURVE",
"964 689 CURVE",
"1011 689 LINE",
"956.333 734.333 OFFCURVE",
"925 783.667 OFFCURVE",
"925 825 CURVE SMOOTH",
"925 875.503 OFFCURVE",
"966.957 931 OFFCURVE",
"1013 931 CURVE SMOOTH",
"1030.333 931 OFFCURVE",
"1046 923 OFFCURVE",
"1060 907 CURVE",
"1084 928 LINE",
"1042.667 978.667 OFFCURVE",
"999.667 1008 OFFCURVE",
"965 1008 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"312.514 -13 OFFCURVE",
"184 59.72 OFFCURVE",
"184 111 CURVE SMOOTH",
"184 609 LINE",
"104 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"102 609 LINE",
"102 168 LINE SMOOTH",
"102 141.333 OFFCURVE",
"120.833 109.833 OFFCURVE",
"158.5 73.5 CURVE SMOOTH",
"233.833 0.833 OFFCURVE",
"350.667 -61 OFFCURVE",
"428 -61 CURVE SMOOTH",
"451.333 -61 OFFCURVE",
"472.333 -50.667 OFFCURVE",
"491 -30 CURVE",
"418 17 LINE",
"404.667 -1.667 OFFCURVE",
"383.667 -13 OFFCURVE",
"365 -13 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"229 609 LINE",
"300 609 LINE",
"300 689 LINE",
"150 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 110 values pushed */\01236 3 2 3 1 0 45 1 9 7 46 1 6 9 3 74 57 1 7 1 73 0 0 2 1 2 0 1 112 0 4 0 2 0 4 2 99 12 1 5 3 1 1 8 5 1 97 10 1 8 14 11 2 7 9 8 7 97 13 1 9 6 6 9 87 13 1 9 9 6 91 0 6 9 6 79 63 63 43 43 0 0 63 66 63 66 65 64 43 62 43 61 56 55 54 53 49 47 0 42 0 41 38 21 37 22 36 15 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 286;
}
);
note = uni093F0930094D.10;
},
{
glyphname = "iMatra_reph_anusvara-deva.05";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"925 875.503 OFFCURVE",
"966.957 931 OFFCURVE",
"1013 931 CURVE SMOOTH",
"1030.333 931 OFFCURVE",
"1046 923 OFFCURVE",
"1060 907 CURVE",
"1084 928 LINE",
"1042.667 978.667 OFFCURVE",
"999.667 1008 OFFCURVE",
"965 1008 CURVE SMOOTH",
"906.289 1008 OFFCURVE",
"842 937.309 OFFCURVE",
"842 877 CURVE SMOOTH",
"842 857 OFFCURVE",
"848.667 833.667 OFFCURVE",
"862 807 CURVE",
"687.333 937.667 OFFCURVE",
"501.333 1023 OFFCURVE",
"268 1023 CURVE SMOOTH",
"219.333 1023 OFFCURVE",
"176 1014.833 OFFCURVE",
"138 998.5 CURVE SMOOTH",
"62 965.833 OFFCURVE",
"18 909 OFFCURVE",
"18 849 CURVE SMOOTH",
"18 795.667 OFFCURVE",
"52.333 733 OFFCURVE",
"111 689 CURVE",
"143 689 LINE",
"107.667 724.333 OFFCURVE",
"90 759.667 OFFCURVE",
"90 795 CURVE SMOOTH",
"90 824.333 OFFCURVE",
"99.5 851.5 OFFCURVE",
"118.5 876.5 CURVE SMOOTH",
"156.5 926.5 OFFCURVE",
"230.333 959 OFFCURVE",
"325 959 CURVE SMOOTH",
"404.333 959 OFFCURVE",
"478.333 947.833 OFFCURVE",
"547 925.5 CURVE SMOOTH",
"684.333 880.833 OFFCURVE",
"767 826.667 OFFCURVE",
"883 744 CURVE SMOOTH",
"917.667 718 OFFCURVE",
"944.667 699.667 OFFCURVE",
"964 689 CURVE",
"1011 689 LINE",
"956.333 734.333 OFFCURVE",
"925 783.667 OFFCURVE",
"925 825 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1123 798 LINE",
"1051 864 LINE",
"978 798 LINE",
"1051 734 LINE"
);
},
{
closed = 1;
nodes = (
"312.514 -13 OFFCURVE",
"184 59.72 OFFCURVE",
"184 111 CURVE SMOOTH",
"184 609 LINE",
"104 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"102 609 LINE",
"102 168 LINE SMOOTH",
"102 141.333 OFFCURVE",
"120.833 109.833 OFFCURVE",
"158.5 73.5 CURVE SMOOTH",
"233.833 0.833 OFFCURVE",
"350.667 -61 OFFCURVE",
"428 -61 CURVE SMOOTH",
"451.333 -61 OFFCURVE",
"472.333 -50.667 OFFCURVE",
"491 -30 CURVE",
"418 17 LINE",
"404.667 -1.667 OFFCURVE",
"383.667 -13 OFFCURVE",
"365 -13 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"229 609 LINE",
"300 609 LINE",
"300 689 LINE",
"150 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 104 values pushed */\01246 45 44 36 35 26 6 0 5 49 1 9 7 50 1 6 9 3 74 61 1 7 1 73 0 5 1 0 1 5 0 112 0 3 0 1 5 3 1 99 0 4 2 1 0 8 4 0 97 10 1 8 13 11 2 7 9 8 7 97 12 1 9 6 6 9 87 12 1 9 9 6 91 0 6 9 6 79 67 67 47 47 67 70 67 70 69 68 47 66 47 65 17 20 44 36 39 38 21 37 18 14 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 286;
}
);
note = uni093F0930094D0902.05;
},
{
glyphname = "iMatra_reph_anusvara-deva.10";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"925 875.503 OFFCURVE",
"966.957 931 OFFCURVE",
"1013 931 CURVE SMOOTH",
"1030.333 931 OFFCURVE",
"1046 923 OFFCURVE",
"1060 907 CURVE",
"1084 928 LINE",
"1042.667 978.667 OFFCURVE",
"999.667 1008 OFFCURVE",
"965 1008 CURVE SMOOTH",
"906.289 1008 OFFCURVE",
"842 937.309 OFFCURVE",
"842 877 CURVE SMOOTH",
"842 857 OFFCURVE",
"848.667 833.667 OFFCURVE",
"862 807 CURVE",
"687.333 937.667 OFFCURVE",
"501.333 1023 OFFCURVE",
"268 1023 CURVE SMOOTH",
"219.333 1023 OFFCURVE",
"176 1014.833 OFFCURVE",
"138 998.5 CURVE SMOOTH",
"62 965.833 OFFCURVE",
"18 909 OFFCURVE",
"18 849 CURVE SMOOTH",
"18 795.667 OFFCURVE",
"52.333 733 OFFCURVE",
"111 689 CURVE",
"143 689 LINE",
"107.667 724.333 OFFCURVE",
"90 759.667 OFFCURVE",
"90 795 CURVE SMOOTH",
"90 824.333 OFFCURVE",
"99.5 851.5 OFFCURVE",
"118.5 876.5 CURVE SMOOTH",
"156.5 926.5 OFFCURVE",
"230.333 959 OFFCURVE",
"325 959 CURVE SMOOTH",
"404.333 959 OFFCURVE",
"478.333 947.833 OFFCURVE",
"547 925.5 CURVE SMOOTH",
"684.333 880.833 OFFCURVE",
"767 826.667 OFFCURVE",
"883 744 CURVE SMOOTH",
"917.667 718 OFFCURVE",
"944.667 699.667 OFFCURVE",
"964 689 CURVE",
"1011 689 LINE",
"956.333 734.333 OFFCURVE",
"925 783.667 OFFCURVE",
"925 825 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1123 798 LINE",
"1051 864 LINE",
"978 798 LINE",
"1051 734 LINE"
);
},
{
closed = 1;
nodes = (
"312.514 -13 OFFCURVE",
"184 59.72 OFFCURVE",
"184 111 CURVE SMOOTH",
"184 609 LINE",
"104 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"102 609 LINE",
"102 168 LINE SMOOTH",
"102 141.333 OFFCURVE",
"120.833 109.833 OFFCURVE",
"158.5 73.5 CURVE SMOOTH",
"233.833 0.833 OFFCURVE",
"350.667 -61 OFFCURVE",
"428 -61 CURVE SMOOTH",
"451.333 -61 OFFCURVE",
"472.333 -50.667 OFFCURVE",
"491 -30 CURVE",
"418 17 LINE",
"404.667 -1.667 OFFCURVE",
"383.667 -13 OFFCURVE",
"365 -13 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"229 609 LINE",
"300 609 LINE",
"300 689 LINE",
"150 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 104 values pushed */\01246 45 44 36 35 26 6 0 5 49 1 9 7 50 1 6 9 3 74 61 1 7 1 73 0 5 1 0 1 5 0 112 0 3 0 1 5 3 1 99 0 4 2 1 0 8 4 0 97 10 1 8 13 11 2 7 9 8 7 97 12 1 9 6 6 9 87 12 1 9 9 6 91 0 6 9 6 79 67 67 47 47 67 70 67 70 69 68 47 66 47 65 17 20 44 36 39 38 21 37 18 14 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 286;
}
);
note = uni093F0930094D0902.10;
},
{
glyphname = "iiMatra-deva.02";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-350 714 LINE",
"-384.667 746.667 OFFCURVE",
"-402 773.667 OFFCURVE",
"-402 795 CURVE SMOOTH",
"-402 855.628 OFFCURVE",
"-287.667 923 OFFCURVE",
"-210 923 CURVE SMOOTH",
"-177.333 923 OFFCURVE",
"-147 916.333 OFFCURVE",
"-119 903 CURVE SMOOTH",
"-63 876.333 OFFCURVE",
"-26.333 841.333 OFFCURVE",
"27 784 CURVE SMOOTH",
"55 754.667 OFFCURVE",
"76.833 733.667 OFFCURVE",
"92.5 721 CURVE SMOOTH",
"108.167 708.333 OFFCURVE",
"124.333 702 OFFCURVE",
"141 702 CURVE SMOOTH",
"166.333 702 OFFCURVE",
"194 716.333 OFFCURVE",
"214 739 CURVE",
"165 795 LINE",
"152.333 777 OFFCURVE",
"135 768 OFFCURVE",
"113 768 CURVE SMOOTH",
"102.333 768 OFFCURVE",
"91 772.833 OFFCURVE",
"79 782.5 CURVE SMOOTH",
"67 792.167 OFFCURVE",
"50.333 808 OFFCURVE",
"29 830 CURVE SMOOTH",
"1 860 OFFCURVE",
"-25.667 885.667 OFFCURVE",
"-51 907 CURVE SMOOTH",
"-101.667 949.667 OFFCURVE",
"-176.333 986 OFFCURVE",
"-267 986 CURVE SMOOTH",
"-303.667 986 OFFCURVE",
"-338.167 979.5 OFFCURVE",
"-370.5 966.5 CURVE SMOOTH",
"-435.167 940.5 OFFCURVE",
"-477 893.667 OFFCURVE",
"-477 843 CURVE SMOOTH",
"-477 797.667 OFFCURVE",
"-439.333 740 OFFCURVE",
"-378 696 CURVE"
);
},
{
closed = 1;
nodes = (
"451.333 -61 OFFCURVE",
"472.333 -50.667 OFFCURVE",
"491 -30 CURVE",
"418 17 LINE",
"404.667 -1.667 OFFCURVE",
"383.667 -13 OFFCURVE",
"365 -13 CURVE SMOOTH",
"312.514 -13 OFFCURVE",
"184 59.72 OFFCURVE",
"184 111 CURVE SMOOTH",
"184 609 LINE",
"104 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"102 609 LINE",
"102 168 LINE SMOOTH",
"102 141.333 OFFCURVE",
"120.833 109.833 OFFCURVE",
"158.5 73.5 CURVE SMOOTH",
"233.833 0.833 OFFCURVE",
"350.667 -61 OFFCURVE",
"428 -61 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"150 689 LINE",
"229 609 LINE",
"300 609 LINE",
"300 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 91 values pushed */\01215 1 1 3 32 16 2 2 1 33 1 5 2 50 1 6 4 51 1 7 6 5 74 42 1 4 1 73 0 0 0 3 1 0 3 99 0 1 0 2 5 1 2 99 8 1 5 9 1 4 6 5 4 97 0 6 7 7 6 87 0 6 6 7 91 10 1 7 6 7 79 34 34 57 56 55 54 34 53 34 52 37 17 27 37 36 37 37 11 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 286;
}
);
note = uni0940.02;
},
{
glyphname = "ka-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"419 609 LINE",
"344 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"336 609 LINE",
"336 373 LINE",
"289.333 313 OFFCURVE",
"227.667 279 OFFCURVE",
"169 279 CURVE SMOOTH",
"129 279 OFFCURVE",
"96 307 OFFCURVE",
"96 339 CURVE SMOOTH",
"96 394.404 OFFCURVE",
"195.458 460 OFFCURVE",
"257 460 CURVE SMOOTH",
"269 460 OFFCURVE",
"284.333 454.667 OFFCURVE",
"303 444 CURVE",
"311 462 LINE",
"279 500.667 OFFCURVE",
"255.667 520 OFFCURVE",
"241 520 CURVE SMOOTH",
"187 520 LINE SMOOTH",
"130.209 520 OFFCURVE",
"32 446.235 OFFCURVE",
"32 389 CURVE SMOOTH",
"32 362.333 OFFCURVE",
"41.333 335.5 OFFCURVE",
"60 308.5 CURVE SMOOTH",
"97.333 254.5 OFFCURVE",
"160.667 216 OFFCURVE",
"222 216 CURVE SMOOTH",
"262 216 OFFCURVE",
"300 234 OFFCURVE",
"336 270 CURVE",
"336 166 LINE SMOOTH",
"336 140 OFFCURVE",
"355 108.833 OFFCURVE",
"393 72.5 CURVE SMOOTH",
"469 -0.167 OFFCURVE",
"586.667 -61 OFFCURVE",
"664 -61 CURVE SMOOTH",
"686.667 -61 OFFCURVE",
"707.667 -50.667 OFFCURVE",
"727 -30 CURVE",
"653 17 LINE",
"634.333 -3 OFFCURVE",
"617.333 -13 OFFCURVE",
"602 -13 CURVE SMOOTH",
"549.32 -13 OFFCURVE",
"419 59.451 OFFCURVE",
"419 111 CURVE SMOOTH",
"419 333 LINE",
"475 407.667 OFFCURVE",
"532.667 452 OFFCURVE",
"582 452 CURVE SMOOTH",
"610 452 OFFCURVE",
"634 424.333 OFFCURVE",
"634 395 CURVE SMOOTH",
"634 328.333 OFFCURVE",
"572.333 267.333 OFFCURVE",
"491 254 CURVE",
"538 189 LINE",
"599.239 195.281 OFFCURVE",
"698 278.943 OFFCURVE",
"698 340 CURVE SMOOTH",
"698 365.333 OFFCURVE",
"689.667 391.667 OFFCURVE",
"673 419 CURVE SMOOTH",
"639.667 473.667 OFFCURVE",
"583 515 OFFCURVE",
"535 515 CURVE SMOOTH",
"499.667 515 OFFCURVE",
"461 491.667 OFFCURVE",
"419 445 CURVE"
);
},
{
closed = 1;
nodes = (
"747 609 LINE",
"747 689 LINE",
"390 689 LINE",
"466 609 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 32 values pushed */\01249 1 1 0 62 50 21 1 4 7 1 36 12 2 4 7 28 11 2 2 4 29 1 3 2 5 74 0 1 8 1 73 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 32 values pushed */\01249 1 6 0 62 50 21 1 4 7 1 36 12 2 4 7 28 11 2 2 4 29 1 3 2 5 74 0 1 8 1 73 \012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 38 values pushed */\0125 1 0 6 1 1 7 0 1 99 0 7 0 4 2 7 4 99 0 2 0 3 2 3 95 10 1 8 8 9 89 11 1 9 9 24 8 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 38 values pushed */\0125 1 0 6 1 1 7 0 1 99 0 7 0 4 2 7 4 99 0 2 0 3 2 3 95 10 1 8 8 9 89 11 1 9 9 25 8 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01246 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 43 values pushed */\0120 6 1 0 6 87 5 1 0 0 1 7 0 1 99 0 7 0 4 2 7 4 99 0 2 0 3 2 3 95 10 1 8 8 9 89 11 1 9 9 25 8 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 44 values pushed */\0120 5 0 6 1 5 6 99 0 0 0 1 7 0 1 99 0 7 0 4 2 7 4 99 0 2 0 3 2 3 95 10 1 8 8 9 89 11 1 9 9 25 8 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 18 values pushed */\01270 69 68 67 66 65 19 37 35 54 37 35 38 45 34 12 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 734;
}
);
note = uni0915;
unicode = 0915;
},
{
glyphname = "k-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"342 609 LINE",
"342 373 LINE",
"295.333 313 OFFCURVE",
"233.333 279 OFFCURVE",
"176 279 CURVE SMOOTH",
"136 279 OFFCURVE",
"103 307 OFFCURVE",
"103 339 CURVE SMOOTH",
"103 392.133 OFFCURVE",
"206.132 454 OFFCURVE",
"268 454 CURVE SMOOTH",
"276.667 454 OFFCURVE",
"290.667 450.667 OFFCURVE",
"310 444 CURVE",
"317 462 LINE",
"301 477.333 OFFCURVE",
"287.667 489 OFFCURVE",
"277 497 CURVE SMOOTH",
"266.333 505 OFFCURVE",
"257 509 OFFCURVE",
"249 509 CURVE SMOOTH",
"195 509 LINE SMOOTH",
"137.458 509 OFFCURVE",
"39 443.182 OFFCURVE",
"39 389 CURVE SMOOTH",
"39 363 OFFCURVE",
"48.833 336.5 OFFCURVE",
"68.5 309.5 CURVE SMOOTH",
"107.833 255.5 OFFCURVE",
"174.333 216 OFFCURVE",
"229 216 CURVE SMOOTH",
"269 216 OFFCURVE",
"308.667 235.333 OFFCURVE",
"342 270 CURVE",
"342 166 LINE SMOOTH",
"342 137.333 OFFCURVE",
"361.5 105 OFFCURVE",
"400.5 69 CURVE SMOOTH",
"478.5 -3 OFFCURVE",
"599.333 -61 OFFCURVE",
"670 -61 CURVE SMOOTH",
"693.333 -61 OFFCURVE",
"714.667 -50.667 OFFCURVE",
"734 -30 CURVE",
"660 17 LINE",
"645.333 -3 OFFCURVE",
"628 -13 OFFCURVE",
"608 -13 CURVE SMOOTH",
"555.32 -13 OFFCURVE",
"425 59.451 OFFCURVE",
"425 111 CURVE SMOOTH",
"425 333 LINE",
"482.333 407.667 OFFCURVE",
"540 452 OFFCURVE",
"588 452 CURVE SMOOTH",
"602.667 452 OFFCURVE",
"615.333 445.667 OFFCURVE",
"626 433 CURVE",
"649 457 LINE",
"617 493 OFFCURVE",
"576.333 515 OFFCURVE",
"543 515 CURVE SMOOTH",
"507.667 515 OFFCURVE",
"468.333 491.667 OFFCURVE",
"425 445 CURVE",
"425 609 LINE",
"345 689 LINE"
);
},
{
closed = 1;
nodes = (
"392 689 LINE",
"472 609 LINE",
"635 609 LINE",
"635 689 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01239 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 32 values pushed */\01244 8 2 2 1 57 45 14 9 3 5 8 2 29 1 5 8 21 1 3 5 22 1 4 3 5 74 2 1 9 1 73 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 32 values pushed */\01244 8 2 2 6 57 45 14 9 3 5 8 2 29 1 5 8 21 1 3 5 22 1 4 3 5 74 2 1 9 1 73 \012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 38 values pushed */\0126 1 1 7 1 2 8 1 2 99 0 8 0 5 3 8 5 99 0 3 0 4 3 4 95 11 1 9 9 0 89 10 1 0 0 24 9 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01239 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 38 values pushed */\0126 1 1 7 1 2 8 1 2 99 0 8 0 5 3 8 5 99 0 3 0 4 3 4 95 11 1 9 9 0 89 10 1 0 0 25 9 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 43 values pushed */\0120 1 6 2 1 87 0 6 7 1 2 8 6 2 99 0 8 0 5 3 8 5 99 0 3 0 4 3 4 95 11 1 9 9 0 89 10 1 0 0 25 9 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 18 values pushed */\01263 62 61 60 59 58 37 36 54 38 35 38 36 35 16 12 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 622;
}
);
note = uni0915094D;
},
{
glyphname = "kha-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"811 609 LINE",
"731 689 LINE",
"261 689 LINE",
"331 609 LINE",
"729 609 LINE",
"729 405 LINE",
"686.333 453 OFFCURVE",
"627 482 OFFCURVE",
"571 482 CURVE SMOOTH",
"507.556 482 OFFCURVE",
"415 414.794 OFFCURVE",
"415 358 CURVE SMOOTH",
"415 336 OFFCURVE",
"424.5 312.667 OFFCURVE",
"443.5 288 CURVE SMOOTH",
"481.5 238.667 OFFCURVE",
"545.333 201 OFFCURVE",
"596 201 CURVE SMOOTH",
"645.333 201 OFFCURVE",
"694.333 224.333 OFFCURVE",
"729 267 CURVE",
"729 184 LINE",
"665 102.667 OFFCURVE",
"575 53 OFFCURVE",
"495 53 CURVE SMOOTH",
"413.667 53 OFFCURVE",
"299.667 121 OFFCURVE",
"181 241 CURVE",
"275.667 274.333 OFFCURVE",
"342 343.667 OFFCURVE",
"342 417 CURVE SMOOTH",
"342 486.333 OFFCURVE",
"325.333 555.667 OFFCURVE",
"284 609 CURVE",
"215 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"252 609 LINE",
"278 564.333 OFFCURVE",
"291 522.333 OFFCURVE",
"291 483 CURVE SMOOTH",
"291 440.333 OFFCURVE",
"272 403 OFFCURVE",
"240 379 CURVE",
"201.333 440.333 OFFCURVE",
"157 480 OFFCURVE",
"121 480 CURVE SMOOTH",
"74.333 480 OFFCURVE",
"36 447 OFFCURVE",
"36 407 CURVE SMOOTH",
"36 344.333 OFFCURVE",
"103.667 258.333 OFFCURVE",
"233 153 CURVE SMOOTH",
"360.333 49 OFFCURVE",
"464.333 -3 OFFCURVE",
"545 -3 CURVE SMOOTH",
"617 -3 OFFCURVE",
"692.667 36 OFFCURVE",
"754 104 CURVE",
"854 0 OFFCURVE",
"965.667 -61 OFFCURVE",
"1051 -61 CURVE SMOOTH",
"1076.333 -61 OFFCURVE",
"1099 -50.667 OFFCURVE",
"1119 -30 CURVE",
"1046 17 LINE",
"1026 -3 OFFCURVE",
"1008.667 -13 OFFCURVE",
"994 -13 CURVE SMOOTH",
"941.32 -13 OFFCURVE",
"811 59.451 OFFCURVE",
"811 111 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"927 609 LINE",
"927 689 LINE",
"778 689 LINE",
"858 609 LINE"
);
},
{
closed = 1;
nodes = (
"664.333 424 OFFCURVE",
"701.667 403 OFFCURVE",
"727 367 CURVE",
"684.333 303 OFFCURVE",
"616.333 263 OFFCURVE",
"547 263 CURVE SMOOTH",
"512.333 263 OFFCURVE",
"481 284 OFFCURVE",
"481 312 CURVE SMOOTH",
"481 369.337 OFFCURVE",
"558.927 424 OFFCURVE",
"627 424 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"177.333 416 OFFCURVE",
"198.333 397 OFFCURVE",
"217 361 CURVE",
"193 335 OFFCURVE",
"163.333 316.667 OFFCURVE",
"128 306 CURVE",
"108 324 OFFCURVE",
"98 342.333 OFFCURVE",
"98 361 CURVE SMOOTH",
"98 390.333 OFFCURVE",
"129.333 416 OFFCURVE",
"160 416 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 33 values pushed */\01291 89 81 63 49 27 6 13 14 42 1 7 13 48 13 2 6 7 7 1 2 6 8 1 1 0 5 74 0 1 4 1 73 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 33 values pushed */\01291 89 81 63 49 27 6 13 15 42 1 7 13 48 13 2 6 7 7 1 2 6 8 1 1 0 5 74 0 1 4 1 73 \012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 52 values pushed */\0128 1 3 17 15 16 3 14 13 3 14 99 0 13 0 7 6 13 7 99 0 0 0 1 0 1 95 11 9 2 4 4 5 89 12 10 2 5 5 24 75 0 6 6 2 91 0 2 2 26 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 52 values pushed */\0128 1 3 17 15 16 3 14 13 3 14 99 0 13 0 7 6 13 7 99 0 0 0 1 0 1 95 11 9 2 4 4 5 89 12 10 2 5 5 25 75 0 6 6 2 91 0 2 2 26 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 57 values pushed */\01216 1 14 15 3 14 87 8 1 3 17 1 15 13 3 15 99 0 13 0 7 6 13 7 99 0 0 0 1 0 1 95 11 9 2 4 4 5 89 12 10 2 5 5 25 75 0 6 6 2 91 0 2 2 26 2 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 34 values pushed */\01285 85 72 72 85 94 85 93 72 84 72 83 79 77 71 70 69 68 67 66 65 64 38 37 41 17 23 38 36 35 36 18 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 914;
}
);
note = uni0916;
unicode = 0916;
},
{
glyphname = "kh-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"204 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"246 609 LINE",
"276 567.667 OFFCURVE",
"291 525.667 OFFCURVE",
"291 483 CURVE SMOOTH",
"291 440.333 OFFCURVE",
"272 403 OFFCURVE",
"240 379 CURVE",
"201.333 440.333 OFFCURVE",
"157 480 OFFCURVE",
"121 480 CURVE SMOOTH",
"74.333 480 OFFCURVE",
"36 447 OFFCURVE",
"36 407 CURVE SMOOTH",
"36 343 OFFCURVE",
"103.667 256.667 OFFCURVE",
"239 148 CURVE SMOOTH",
"361.667 46.667 OFFCURVE",
"464.333 -3 OFFCURVE",
"535 -3 CURVE SMOOTH",
"607 -3 OFFCURVE",
"684.333 30.333 OFFCURVE",
"747 89 CURVE",
"747 186 LINE",
"668.333 99.333 OFFCURVE",
"575.667 53 OFFCURVE",
"489 53 CURVE SMOOTH",
"409 53 OFFCURVE",
"297.333 122.333 OFFCURVE",
"176 245 CURVE",
"272 277 OFFCURVE",
"342 349 OFFCURVE",
"342 417 CURVE SMOOTH",
"342 489.667 OFFCURVE",
"322.667 553.667 OFFCURVE",
"284 609 CURVE"
);
},
{
closed = 1;
nodes = (
"733 609 LINE",
"733 689 LINE",
"250 689 LINE",
"331 609 LINE"
);
},
{
closed = 1;
nodes = (
"504.104 479 OFFCURVE",
"412 413.2 OFFCURVE",
"412 358 CURVE SMOOTH",
"412 336 OFFCURVE",
"421.667 312.667 OFFCURVE",
"441 288 CURVE SMOOTH",
"479.667 238.667 OFFCURVE",
"541.667 201 OFFCURVE",
"591 201 CURVE SMOOTH",
"653.667 201 OFFCURVE",
"712.333 239 OFFCURVE",
"747 299 CURVE",
"747 375 LINE",
"709.667 437.667 OFFCURVE",
"639.333 479 OFFCURVE",
"566 479 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"655 424 OFFCURVE",
"692.667 401.667 OFFCURVE",
"718 367 CURVE",
"676.667 304.333 OFFCURVE",
"608.667 263 OFFCURVE",
"542 263 CURVE SMOOTH",
"507.333 263 OFFCURVE",
"476 284 OFFCURVE",
"476 312 CURVE SMOOTH",
"476 369.325 OFFCURVE",
"553.972 424 OFFCURVE",
"623 424 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"178.667 416 OFFCURVE",
"199.667 397 OFFCURVE",
"217 361 CURVE",
"193 335 OFFCURVE",
"163.333 316.667 OFFCURVE",
"128 306 CURVE",
"108 324 OFFCURVE",
"98 342.333 OFFCURVE",
"98 361 CURVE SMOOTH",
"98 390.333 OFFCURVE",
"129.333 416 OFFCURVE",
"160 416 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 20 values pushed */\01273 71 63 42 41 26 6 9 10 5 1 7 9 12 11 2 0 7 3 74 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 20 values pushed */\01273 71 63 42 41 26 6 9 11 5 1 7 9 12 11 2 0 7 3 74 \012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 44 values pushed */\01212 8 2 2 14 11 13 3 10 9 2 10 99 0 9 0 7 0 9 7 99 5 1 3 3 4 89 6 1 4 4 24 75 0 0 0 1 91 0 1 1 26 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 44 values pushed */\01212 8 2 2 14 11 13 3 10 9 2 10 99 0 9 0 7 0 9 7 99 5 1 3 3 4 89 6 1 4 4 25 75 0 0 0 1 91 0 1 1 26 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 49 values pushed */\01213 1 10 11 2 10 87 12 8 2 2 14 1 11 9 2 11 99 0 9 0 7 0 9 7 99 5 1 3 3 4 89 6 1 4 4 25 75 0 0 0 1 91 0 1 1 26 1 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 31 values pushed */\01267 67 54 54 39 39 67 76 67 75 54 66 54 65 61 59 39 53 39 52 38 17 17 17 23 38 37 39 15 6 28 \012CALL[ ]	/* CallFunction */";
};
width = 720;
}
);
note = uni0916094D;
},
{
glyphname = "ga-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"209 609 LINE",
"251.667 533.667 OFFCURVE",
"273 472.333 OFFCURVE",
"273 425 CURVE SMOOTH",
"273 358.503 OFFCURVE",
"203.359 256 OFFCURVE",
"144 256 CURVE SMOOTH",
"122.667 256 OFFCURVE",
"104 273.667 OFFCURVE",
"104 295 CURVE SMOOTH",
"104 329.467 OFFCURVE",
"145.028 377 OFFCURVE",
"177 377 CURVE SMOOTH",
"185 377 OFFCURVE",
"199 370 OFFCURVE",
"211 358 CURVE",
"226 374 LINE",
"202 407.333 OFFCURVE",
"162.333 428 OFFCURVE",
"125 428 CURVE SMOOTH",
"79.667 428 OFFCURVE",
"33 382.667 OFFCURVE",
"33 336 CURVE SMOOTH",
"33 278.113 OFFCURVE",
"139.793 207 OFFCURVE",
"209 207 CURVE SMOOTH",
"272.369 207 OFFCURVE",
"331 281.011 OFFCURVE",
"331 349 CURVE SMOOTH",
"331 427 OFFCURVE",
"303.333 513.667 OFFCURVE",
"248 609 CURVE",
"506 609 LINE",
"506 168 LINE SMOOTH",
"506 140.667 OFFCURVE",
"525 108.833 OFFCURVE",
"563 72.5 CURVE SMOOTH",
"639 -0.167 OFFCURVE",
"756 -61 OFFCURVE",
"832 -61 CURVE SMOOTH",
"855.333 -61 OFFCURVE",
"876.333 -50.667 OFFCURVE",
"895 -30 CURVE",
"822 17 LINE",
"803.333 -3 OFFCURVE",
"786 -13 OFFCURVE",
"770 -13 CURVE SMOOTH",
"718.134 -13 OFFCURVE",
"588 59.656 OFFCURVE",
"588 111 CURVE SMOOTH",
"588 609 LINE",
"508 689 LINE"
);
},
{
closed = 1;
nodes = (
"554 689 LINE",
"633 609 LINE",
"704 609 LINE",
"704 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */\01235 34 2 7 6 9 1 1 4 10 1 2 1 3 74 2 1 3 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 44 values pushed */\0120 5 3 6 3 5 6 112 0 6 7 3 6 7 110 0 7 0 4 1 7 4 99 0 1 0 2 1 2 95 10 8 2 3 3 0 89 9 1 0 0 24 3 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 44 values pushed */\0120 5 3 6 3 5 6 112 0 6 7 3 6 7 110 0 7 0 4 1 7 4 99 0 1 0 2 1 2 95 10 8 2 3 3 0 89 9 1 0 0 25 3 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 16 values pushed */\01256 55 54 53 21 37 37 37 37 20 35 37 16 11 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 689;
}
);
note = uni0917;
unicode = 0917;
},
{
glyphname = "g-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"209 609 LINE",
"251.667 533.667 OFFCURVE",
"273 472.333 OFFCURVE",
"273 425 CURVE SMOOTH",
"273 358.503 OFFCURVE",
"203.359 256 OFFCURVE",
"144 256 CURVE SMOOTH",
"122.667 256 OFFCURVE",
"104 273.667 OFFCURVE",
"104 295 CURVE SMOOTH",
"104 329.467 OFFCURVE",
"145.028 377 OFFCURVE",
"177 377 CURVE SMOOTH",
"185 377 OFFCURVE",
"199 370 OFFCURVE",
"211 358 CURVE",
"226 374 LINE",
"202 407.333 OFFCURVE",
"162.333 428 OFFCURVE",
"125 428 CURVE SMOOTH",
"79.667 428 OFFCURVE",
"33 382.667 OFFCURVE",
"33 336 CURVE SMOOTH",
"33 277.013 OFFCURVE",
"145.542 207 OFFCURVE",
"209 207 CURVE SMOOTH",
"272.369 207 OFFCURVE",
"331 281.011 OFFCURVE",
"331 349 CURVE SMOOTH",
"331 427 OFFCURVE",
"303.333 513.667 OFFCURVE",
"248 609 CURVE",
"408 609 LINE",
"408 689 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */\01220 19 2 5 4 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 34 values pushed */\0120 3 1 4 1 3 4 112 0 4 5 1 4 5 110 0 5 0 2 5 2 95 6 1 1 1 0 89 0 0 0 24 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 34 values pushed */\0120 3 1 4 1 3 4 112 0 4 5 1 4 5 110 0 5 0 2 5 2 95 6 1 1 1 0 89 0 0 0 25 1 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 10 values pushed */\01221 37 37 37 37 17 16 7 6 27 \012CALL[ ]	/* CallFunction */";
};
width = 393;
}
);
note = uni0917094D;
},
{
glyphname = "gha-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"69 609 LINE",
"55.667 589.667 OFFCURVE",
"49 571 OFFCURVE",
"49 553 CURVE SMOOTH",
"49 518.333 OFFCURVE",
"79.667 485.667 OFFCURVE",
"145 443 CURVE",
"103.667 421.667 OFFCURVE",
"77 385.667 OFFCURVE",
"77 351 CURVE SMOOTH",
"77 322.333 OFFCURVE",
"87.167 294.167 OFFCURVE",
"107.5 266.5 CURVE SMOOTH",
"148.167 211.167 OFFCURVE",
"221.667 173 OFFCURVE",
"299 173 CURVE SMOOTH",
"361.667 173 OFFCURVE",
"425 205.333 OFFCURVE",
"461 260 CURVE",
"461 166 LINE SMOOTH",
"461 140 OFFCURVE",
"479.833 108.833 OFFCURVE",
"517.5 72.5 CURVE SMOOTH",
"592.833 -0.167 OFFCURVE",
"710.667 -61 OFFCURVE",
"788 -61 CURVE SMOOTH",
"811.333 -61 OFFCURVE",
"832.667 -50.667 OFFCURVE",
"852 -30 CURVE",
"779 17 LINE",
"759 -3 OFFCURVE",
"741.667 -13 OFFCURVE",
"727 -13 CURVE SMOOTH",
"674.32 -13 OFFCURVE",
"544 59.451 OFFCURVE",
"544 111 CURVE SMOOTH",
"544 609 LINE",
"464 689 LINE"
);
},
{
closed = 1;
nodes = (
"510 689 LINE",
"591 609 LINE",
"660 609 LINE",
"660 689 LINE"
);
},
{
closed = 1;
nodes = (
"186.333 222 OFFCURVE",
"140 254.333 OFFCURVE",
"140 297 CURVE SMOOTH",
"140 349.902 OFFCURVE",
"233.803 412 OFFCURVE",
"295 412 CURVE",
"242 476 LINE",
"225.333 476 OFFCURVE",
"202.667 469.667 OFFCURVE",
"174 457 CURVE",
"137.333 481 OFFCURVE",
"119 505.667 OFFCURVE",
"119 531 CURVE SMOOTH",
"119 558.333 OFFCURVE",
"136.333 584.333 OFFCURVE",
"171 609 CURVE",
"461 609 LINE",
"461 382 LINE",
"401 283.333 OFFCURVE",
"315.667 222 OFFCURVE",
"237 222 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 25 values pushed */\01246 27 2 9 8 40 17 2 10 9 9 1 1 3 10 1 2 1 4 74 2 1 4 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 45 values pushed */\0120 8 4 9 4 8 9 112 0 9 10 4 9 10 110 11 1 10 0 3 1 10 3 99 0 1 0 2 1 2 95 7 6 2 4 4 0 89 5 1 0 0 24 4 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 45 values pushed */\0120 8 4 9 4 8 9 112 0 9 10 4 9 10 110 11 1 10 0 3 1 10 3 99 0 1 0 2 1 2 95 7 6 2 4 4 0 89 5 1 0 0 25 4 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 20 values pushed */\01238 38 38 56 38 55 50 49 21 20 17 17 27 38 35 37 16 12 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 647;
}
);
note = uni0918;
unicode = 0918;
},
{
glyphname = "gh-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"69 609 LINE",
"55.667 593.667 OFFCURVE",
"49 575.333 OFFCURVE",
"49 554 CURVE SMOOTH",
"49 524.667 OFFCURVE",
"86.333 481.667 OFFCURVE",
"145 443 CURVE",
"103.667 421.667 OFFCURVE",
"77 385.667 OFFCURVE",
"77 351 CURVE SMOOTH",
"77 319 OFFCURVE",
"88.333 289.333 OFFCURVE",
"111 262 CURVE SMOOTH",
"156.333 207.333 OFFCURVE",
"233 173 OFFCURVE",
"305 173 CURVE SMOOTH",
"371.667 173 OFFCURVE",
"437 205.667 OFFCURVE",
"473 259 CURVE",
"473 385 LINE",
"423.667 286.333 OFFCURVE",
"332 222 OFFCURVE",
"244 222 CURVE SMOOTH",
"188 222 OFFCURVE",
"140 258 OFFCURVE",
"140 302 CURVE SMOOTH",
"140 352.337 OFFCURVE",
"233.809 412 OFFCURVE",
"295 412 CURVE",
"242 476 LINE",
"225.333 476 OFFCURVE",
"202.667 469.667 OFFCURVE",
"174 457 CURVE",
"137.333 481 OFFCURVE",
"119 503.333 OFFCURVE",
"119 524 CURVE SMOOTH",
"119 554.667 OFFCURVE",
"139 586.333 OFFCURVE",
"171 609 CURVE",
"459 609 LINE",
"459 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */\01232 8 2 3 2 22 21 2 4 3 2 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 34 values pushed */\0120 2 1 3 1 2 3 112 0 3 4 1 3 4 110 0 4 0 5 4 5 95 6 1 1 1 0 89 0 0 0 24 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 34 values pushed */\0120 2 1 3 1 2 3 112 0 3 4 1 3 4 110 0 4 0 5 4 5 95 6 1 1 1 0 89 0 0 0 25 1 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 10 values pushed */\01227 37 37 17 22 17 16 7 6 27 \012CALL[ ]	/* CallFunction */";
};
width = 446;
}
);
note = uni0918094D;
},
{
glyphname = "nga-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"405 609 LINE",
"427.667 583.667 OFFCURVE",
"444 553.667 OFFCURVE",
"444 535 CURVE SMOOTH",
"444 515 OFFCURVE",
"418.667 498 OFFCURVE",
"388 498 CURVE SMOOTH",
"261 498 LINE SMOOTH",
"198.333 498 OFFCURVE",
"143 454.333 OFFCURVE",
"143 401 CURVE SMOOTH",
"143 373.667 OFFCURVE",
"154.667 346.833 OFFCURVE",
"178 320.5 CURVE SMOOTH",
"224.667 267.833 OFFCURVE",
"303 232 OFFCURVE",
"371 232 CURVE SMOOTH",
"400.333 232 OFFCURVE",
"418 240.333 OFFCURVE",
"442 255 CURVE SMOOTH",
"459.333 265.667 OFFCURVE",
"471.667 272 OFFCURVE",
"489 272 CURVE SMOOTH",
"521 272 OFFCURVE",
"544 242 OFFCURVE",
"544 206 CURVE SMOOTH",
"544 146.596 OFFCURVE",
"428.677 75 OFFCURVE",
"362 75 CURVE SMOOTH",
"316.667 75 OFFCURVE",
"273.667 85.667 OFFCURVE",
"233 107 CURVE SMOOTH",
"151.667 149.667 OFFCURVE",
"88 226.667 OFFCURVE",
"56 316 CURVE",
"25 300 LINE",
"46.333 242 OFFCURVE",
"76.667 190.667 OFFCURVE",
"116 146 CURVE SMOOTH",
"194.667 56.667 OFFCURVE",
"301.667 5 OFFCURVE",
"411 5 CURVE SMOOTH",
"445 5 OFFCURVE",
"476.833 11.833 OFFCURVE",
"506.5 25.5 CURVE SMOOTH",
"565.833 52.833 OFFCURVE",
"604 101.333 OFFCURVE",
"604 156 CURVE SMOOTH",
"604 183.333 OFFCURVE",
"595.5 210.667 OFFCURVE",
"578.5 238 CURVE SMOOTH",
"544.5 292.667 OFFCURVE",
"488 333 OFFCURVE",
"436 333 CURVE SMOOTH",
"413.333 333 OFFCURVE",
"400 325.667 OFFCURVE",
"372 311 CURVE",
"344 295 OFFCURVE",
"327.333 287 OFFCURVE",
"302 287 CURVE SMOOTH",
"254 287 OFFCURVE",
"215 319 OFFCURVE",
"215 355 CURVE SMOOTH",
"215 393.667 OFFCURVE",
"254 427 OFFCURVE",
"302 427 CURVE SMOOTH",
"412 427 LINE SMOOTH",
"457.333 427 OFFCURVE",
"494 457 OFFCURVE",
"494 493 CURVE SMOOTH",
"494 519.667 OFFCURVE",
"475.667 562.333 OFFCURVE",
"445 609 CURVE",
"374 689 LINE"
);
},
{
closed = 1;
nodes = (
"421 689 LINE",
"492 609 LINE",
"712 609 LINE",
"712 689 LINE"
);
},
{
closed = 1;
nodes = (
"532 400 LINE",
"606 329 LINE",
"680 400 LINE",
"606 472 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */\01272 1 1 8 73 1 3 1 74 34 33 3 2 3 3 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 60 values pushed */\0120 3 1 2 1 3 2 112 0 2 6 1 2 6 110 0 6 7 1 6 7 110 0 7 5 1 7 5 110 0 8 0 1 3 8 1 99 11 1 9 9 0 89 10 1 0 0 24 75 0 5 5 4 92 0 4 4 26 4 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 60 values pushed */\0120 3 1 2 1 3 2 112 0 2 6 1 2 6 110 0 6 7 1 6 7 110 0 7 5 1 7 5 110 0 8 0 1 3 8 1 99 11 1 9 9 0 89 10 1 0 0 25 75 0 5 5 4 92 0 4 4 26 4 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 18 values pushed */\01270 69 68 67 66 65 53 36 37 39 38 36 36 54 16 12 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 698;
}
);
note = uni0919;
unicode = 0919;
},
{
glyphname = "ng-deva";
layers = (
{
components = (
{
alignment = -1;
name = "nga-deva";
},
{
alignment = -1;
name = "halant-deva";
transform = "{1, 0, 0, 1, 566, -3}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 698;
}
);
note = uni0919094D;
},
{
glyphname = "ca-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"507 609 LINE",
"507 348 LINE",
"445.667 274.667 OFFCURVE",
"368.667 233 OFFCURVE",
"298 233 CURVE SMOOTH",
"263.333 233 OFFCURVE",
"231 260.333 OFFCURVE",
"231 295 CURVE SMOOTH",
"231 364.333 OFFCURVE",
"306.667 421.333 OFFCURVE",
"404 432 CURVE",
"352 501 LINE",
"12 501 LINE",
"65 431 LINE",
"224 431 LINE",
"180 407 OFFCURVE",
"154 364.667 OFFCURVE",
"154 326 CURVE SMOOTH",
"154 306 OFFCURVE",
"164.5 284.167 OFFCURVE",
"185.5 260.5 CURVE SMOOTH",
"227.5 213.167 OFFCURVE",
"298.333 177 OFFCURVE",
"361 177 CURVE SMOOTH",
"411.667 177 OFFCURVE",
"466.333 202.667 OFFCURVE",
"509 244 CURVE",
"509 162 LINE SMOOTH",
"509 136.667 OFFCURVE",
"527.833 106.167 OFFCURVE",
"565.5 70.5 CURVE SMOOTH",
"640.833 -0.833 OFFCURVE",
"756.667 -61 OFFCURVE",
"834 -61 CURVE SMOOTH",
"857.333 -61 OFFCURVE",
"878.333 -50.667 OFFCURVE",
"897 -30 CURVE",
"824 17 LINE",
"806 -3 OFFCURVE",
"789 -13 OFFCURVE",
"773 -13 CURVE SMOOTH",
"720.32 -13 OFFCURVE",
"590 59.451 OFFCURVE",
"590 111 CURVE SMOOTH",
"590 609 LINE",
"510 689 LINE"
);
},
{
closed = 1;
nodes = (
"556 689 LINE",
"635 609 LINE",
"706 609 LINE",
"706 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */\01231 1 4 5 40 17 2 6 4 9 1 1 3 10 1 2 1 4 74 2 1 7 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 36 values pushed */\0120 5 0 4 6 5 4 97 0 6 0 3 1 6 3 99 0 1 0 2 1 2 95 9 1 7 7 0 89 8 1 0 0 24 7 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 36 values pushed */\0120 5 0 4 6 5 4 97 0 6 0 3 1 6 3 99 0 1 0 2 1 2 95 9 1 7 7 0 89 8 1 0 0 25 7 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\01246 45 17 19 38 17 22 38 35 37 16 10 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 691;
}
);
note = uni091A;
unicode = 091A;
},
{
glyphname = "c-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"490 609 LINE",
"490 689 LINE",
"-14 689 LINE",
"-14 609 LINE"
);
},
{
closed = 1;
nodes = (
"347 501 LINE",
"12 501 LINE",
"65 431 LINE",
"219 431 LINE",
"173.667 407 OFFCURVE",
"147 364.667 OFFCURVE",
"147 326 CURVE SMOOTH",
"147 304.667 OFFCURVE",
"158.333 282.333 OFFCURVE",
"181 259 CURVE SMOOTH",
"226.333 212.333 OFFCURVE",
"299 177 OFFCURVE",
"355 177 CURVE SMOOTH",
"407 177 OFFCURVE",
"462 202.667 OFFCURVE",
"502 244 CURVE",
"502 348 LINE",
"442 276 OFFCURVE",
"362.333 233 OFFCURVE",
"293 233 CURVE SMOOTH",
"257 233 OFFCURVE",
"225 260.333 OFFCURVE",
"225 295 CURVE SMOOTH",
"225 363 OFFCURVE",
"301 421.333 OFFCURVE",
"397 432 CURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */\01214 13 2 2 4 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 26 values pushed */\0120 5 0 4 2 5 4 97 0 2 0 3 2 3 95 0 0 0 1 89 0 1 1 24 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 26 values pushed */\0120 5 0 4 2 5 4 97 0 2 0 3 2 3 95 0 0 0 1 89 0 1 1 25 0 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 9 values pushed */\01217 22 37 38 17 16 6 6 26 \012CALL[ ]	/* CallFunction */";
};
width = 475;
}
);
note = uni091A094D;
},
{
glyphname = "cha-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"605 609 LINE",
"525 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"523 609 LINE",
"523 487 LINE",
"461.867 484.962 OFFCURVE",
"395 414.697 OFFCURVE",
"395 354 CURVE SMOOTH",
"395 296.667 OFFCURVE",
"462.667 233.333 OFFCURVE",
"560 196 CURVE",
"489.333 112 OFFCURVE",
"396 62 OFFCURVE",
"308 62 CURVE SMOOTH",
"244 62 OFFCURVE",
"188 93.333 OFFCURVE",
"188 132 CURVE SMOOTH",
"188 186.214 OFFCURVE",
"268.145 249 OFFCURVE",
"327 249 CURVE SMOOTH",
"339.667 249 OFFCURVE",
"353.333 244 OFFCURVE",
"368 234 CURVE",
"383 249 LINE",
"348.333 287.667 OFFCURVE",
"309 312 OFFCURVE",
"273 312 CURVE SMOOTH",
"257 312 OFFCURVE",
"236.333 305.667 OFFCURVE",
"211 293 CURVE",
"156.333 310.333 OFFCURVE",
"117 339 OFFCURVE",
"117 367 CURVE SMOOTH",
"117 412.645 OFFCURVE",
"195.783 456 OFFCURVE",
"259 456 CURVE SMOOTH",
"277 456 OFFCURVE",
"297 447.333 OFFCURVE",
"319 430 CURVE",
"339 452 LINE",
"295 493.333 OFFCURVE",
"249.667 515 OFFCURVE",
"219 515 CURVE SMOOTH",
"148.576 515 OFFCURVE",
"36 451.006 OFFCURVE",
"36 395 CURVE SMOOTH",
"36 352.333 OFFCURVE",
"95 304 OFFCURVE",
"183 272 CURVE",
"137.667 242.667 OFFCURVE",
"109 203.333 OFFCURVE",
"109 170 CURVE SMOOTH",
"109 144 OFFCURVE",
"122.167 119 OFFCURVE",
"148.5 95 CURVE SMOOTH",
"201.167 47 OFFCURVE",
"291 16 OFFCURVE",
"375 16 CURVE SMOOTH",
"467 16 OFFCURVE",
"563.667 71.667 OFFCURVE",
"633 161 CURVE",
"662.333 141 OFFCURVE",
"679 114.333 OFFCURVE",
"679 89 CURVE SMOOTH",
"679 42.333 OFFCURVE",
"647.667 12 OFFCURVE",
"609 12 CURVE SMOOTH",
"595.667 12 OFFCURVE",
"582.667 15.333 OFFCURVE",
"570 22 CURVE",
"554 1 LINE",
"595.333 -25 OFFCURVE",
"629 -38 OFFCURVE",
"655 -38 CURVE SMOOTH",
"703 -38 OFFCURVE",
"745 3 OFFCURVE",
"745 55 CURVE SMOOTH",
"745 103 OFFCURVE",
"708.667 152.333 OFFCURVE",
"650 187 CURVE",
"677.333 224.333 OFFCURVE",
"691 263.667 OFFCURVE",
"691 305 CURVE SMOOTH",
"691 359.667 OFFCURVE",
"658.333 413 OFFCURVE",
"605 449 CURVE"
);
},
{
closed = 1;
nodes = (
"775 609 LINE",
"775 689 LINE",
"571 689 LINE",
"650 609 LINE"
);
},
{
closed = 1;
nodes = (
"602 422 OFFCURVE",
"633 385.667 OFFCURVE",
"633 343 CURVE SMOOTH",
"633 302.333 OFFCURVE",
"614 262.333 OFFCURVE",
"576 223 CURVE",
"516 241.667 OFFCURVE",
"469 284 OFFCURVE",
"469 320 CURVE SMOOTH",
"469 367.23 OFFCURVE",
"521.116 422 OFFCURVE",
"566 422 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */\01244 43 1 3 13 4 53 33 2 6 5 93 71 59 23 6 5 7 6 15 1 2 7 14 1 0 1 5 74 0 1 9 58 1 6 2 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 69 values pushed */\0120 8 3 4 3 8 4 112 14 1 13 4 5 4 13 5 112 0 5 6 4 5 6 110 0 6 7 4 6 7 110 0 3 0 4 13 3 4 99 0 1 0 0 1 0 95 11 1 9 9 10 89 12 1 10 10 24 75 0 7 7 2 91 0 2 2 26 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01229 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 69 values pushed */\0120 8 3 4 3 8 4 112 14 1 13 4 5 4 13 5 112 0 5 6 4 5 6 110 0 6 7 4 6 7 110 0 3 0 4 13 3 4 99 0 1 0 0 1 0 95 11 1 9 9 10 89 12 1 10 10 25 75 0 7 7 2 91 0 2 2 26 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 67 values pushed */\0120 8 3 4 3 8 4 112 14 1 13 4 5 4 13 5 112 0 5 6 4 5 6 110 0 6 7 4 6 7 110 0 3 0 4 13 3 4 99 0 7 0 2 1 7 2 99 0 1 0 0 1 0 95 11 1 9 9 10 89 12 1 10 10 25 9 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 26 values pushed */\01287 87 87 98 87 97 86 85 84 83 82 81 80 79 24 37 36 39 36 44 39 35 43 15 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 760;
}
);
note = uni091B;
unicode = 091B;
},
{
glyphname = "ch-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"481 609 LINE",
"401 689 LINE"
);
},
{
closed = 1;
nodes = (
"649 609 LINE",
"649 689 LINE",
"446 689 LINE",
"526 609 LINE"
);
},
{
closed = 1;
nodes = (
"691 335 OFFCURVE",
"685.5 363.833 OFFCURVE",
"674.5 391.5 CURVE SMOOTH",
"652.5 446.833 OFFCURVE",
"604 487 OFFCURVE",
"528 487 CURVE SMOOTH",
"464.513 487 OFFCURVE",
"395 415.561 OFFCURVE",
"395 354 CURVE SMOOTH",
"395 296.667 OFFCURVE",
"462.667 233.333 OFFCURVE",
"560 196 CURVE",
"489.333 112 OFFCURVE",
"396 62 OFFCURVE",
"308 62 CURVE SMOOTH",
"244 62 OFFCURVE",
"188 93.333 OFFCURVE",
"188 132 CURVE SMOOTH",
"188 186.214 OFFCURVE",
"268.145 249 OFFCURVE",
"327 249 CURVE SMOOTH",
"339.667 249 OFFCURVE",
"353.333 244 OFFCURVE",
"368 234 CURVE",
"383 249 LINE",
"348.333 287.667 OFFCURVE",
"309 312 OFFCURVE",
"273 312 CURVE SMOOTH",
"257 312 OFFCURVE",
"236.333 305.667 OFFCURVE",
"211 293 CURVE",
"156.333 310.333 OFFCURVE",
"117 339 OFFCURVE",
"117 367 CURVE SMOOTH",
"117 412.645 OFFCURVE",
"195.783 456 OFFCURVE",
"259 456 CURVE SMOOTH",
"277 456 OFFCURVE",
"297 447.333 OFFCURVE",
"319 430 CURVE",
"339 452 LINE",
"295 493.333 OFFCURVE",
"249.667 515 OFFCURVE",
"219 515 CURVE SMOOTH",
"148.576 515 OFFCURVE",
"36 451.006 OFFCURVE",
"36 395 CURVE SMOOTH",
"36 352.333 OFFCURVE",
"95 304 OFFCURVE",
"183 272 CURVE",
"137.667 242.667 OFFCURVE",
"109 203.333 OFFCURVE",
"109 170 CURVE SMOOTH",
"109 144 OFFCURVE",
"122.167 119 OFFCURVE",
"148.5 95 CURVE SMOOTH",
"201.167 47 OFFCURVE",
"291 16 OFFCURVE",
"375 16 CURVE SMOOTH",
"425.667 16 OFFCURVE",
"475.5 31.167 OFFCURVE",
"524.5 61.5 CURVE SMOOTH",
"622.5 122.167 OFFCURVE",
"691 222.333 OFFCURVE",
"691 305 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"602 422 OFFCURVE",
"633 385.667 OFFCURVE",
"633 343 CURVE SMOOTH",
"633 302.333 OFFCURVE",
"614 262.333 OFFCURVE",
"576 223 CURVE",
"516 241.667 OFFCURVE",
"469 284 OFFCURVE",
"469 320 CURVE SMOOTH",
"469 367.23 OFFCURVE",
"521.116 422 OFFCURVE",
"566 422 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */\01229 28 2 11 6 38 18 2 8 7 74 56 44 3 9 8 3 74 43 1 8 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 55 values pushed */\0120 7 11 8 11 7 8 112 0 8 9 11 8 9 110 0 5 0 6 11 5 6 99 0 10 12 1 11 7 10 11 99 2 1 1 1 0 89 3 1 0 0 24 75 0 9 9 4 91 0 4 4 26 4 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01229 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 55 values pushed */\0120 7 11 8 11 7 8 112 0 8 9 11 8 9 110 0 5 0 6 11 5 6 99 0 10 12 1 11 7 10 11 99 2 1 1 1 0 89 3 1 0 0 25 75 0 9 9 4 91 0 4 4 26 4 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 52 values pushed */\0120 7 11 8 11 7 8 112 0 8 9 11 8 9 110 0 5 0 6 11 5 6 99 0 10 12 1 11 7 10 11 99 0 9 0 4 9 4 95 2 1 1 1 0 89 3 1 0 0 25 1 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 22 values pushed */\01268 68 68 79 68 78 64 62 54 52 36 39 36 44 35 17 17 17 16 13 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 636;
}
);
note = uni091B094D;
},
{
glyphname = "ja-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"673 609 LINE",
"593 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"591 609 LINE",
"591 495 LINE",
"343 495 LINE SMOOTH",
"304.333 495 OFFCURVE",
"270 470.333 OFFCURVE",
"270 441 CURVE SMOOTH",
"270 403.667 OFFCURVE",
"297.333 382 OFFCURVE",
"352 350 CURVE SMOOTH",
"398.667 320.667 OFFCURVE",
"419 306.333 OFFCURVE",
"419 281 CURVE SMOOTH",
"419 230.333 OFFCURVE",
"369.667 192 OFFCURVE",
"311 192 CURVE SMOOTH",
"276.333 192 OFFCURVE",
"243 204 OFFCURVE",
"211 228 CURVE SMOOTH",
"147 276 OFFCURVE",
"95 359.667 OFFCURVE",
"67 449 CURVE",
"27 435 LINE",
"49.667 373 OFFCURVE",
"79 318.167 OFFCURVE",
"115 270.5 CURVE SMOOTH",
"187 175.167 OFFCURVE",
"277 120 OFFCURVE",
"365 120 CURVE SMOOTH",
"437.279 120 OFFCURVE",
"500 169.226 OFFCURVE",
"500 233 CURVE SMOOTH",
"500 285 OFFCURVE",
"459.667 317.667 OFFCURVE",
"397 359 CURVE SMOOTH",
"382.333 369 OFFCURVE",
"371.5 376.833 OFFCURVE",
"364.5 382.5 CURVE SMOOTH",
"357.5 388.167 OFFCURVE",
"354 393.333 OFFCURVE",
"354 398 CURVE SMOOTH",
"354 411.333 OFFCURVE",
"369 424 OFFCURVE",
"385 424 CURVE SMOOTH",
"591 424 LINE",
"591 166 LINE SMOOTH",
"591 140 OFFCURVE",
"609.833 108.833 OFFCURVE",
"647.5 72.5 CURVE SMOOTH",
"722.833 -0.167 OFFCURVE",
"841 -61 OFFCURVE",
"917 -61 CURVE SMOOTH",
"939 -61 OFFCURVE",
"960.333 -50.667 OFFCURVE",
"981 -30 CURVE",
"907 17 LINE",
"889 -3 OFFCURVE",
"872 -13 OFFCURVE",
"856 -13 CURVE SMOOTH",
"803.32 -13 OFFCURVE",
"673 59.451 OFFCURVE",
"673 111 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"794 609 LINE",
"794 689 LINE",
"639 689 LINE",
"719 609 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */\01233 1 2 5 19 1 4 2 7 1 0 3 8 1 1 0 4 74 0 1 6 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 36 values pushed */\0120 5 0 2 4 5 2 99 0 4 0 3 0 4 3 99 0 0 0 1 0 1 95 8 1 6 6 7 89 9 1 7 7 24 6 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 36 values pushed */\0120 5 0 2 4 5 2 99 0 4 0 3 0 4 3 99 0 0 0 1 0 1 95 8 1 6 6 7 89 9 1 7 7 25 6 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\01259 58 17 17 17 42 39 43 36 35 36 10 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 780;
}
);
note = uni091C;
unicode = 091C;
},
{
glyphname = "j-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"574 609 LINE",
"574 689 LINE",
"-14 689 LINE",
"-14 609 LINE"
);
},
{
closed = 1;
nodes = (
"588 424 LINE",
"588 495 LINE",
"341 495 LINE SMOOTH",
"301 495 OFFCURVE",
"267 470.333 OFFCURVE",
"267 441 CURVE SMOOTH",
"267 403.667 OFFCURVE",
"294.333 382 OFFCURVE",
"349 350 CURVE SMOOTH",
"395.667 320.667 OFFCURVE",
"416 306.333 OFFCURVE",
"416 281 CURVE SMOOTH",
"416 230.333 OFFCURVE",
"366.333 192 OFFCURVE",
"309 192 CURVE SMOOTH",
"206.333 192 OFFCURVE",
"110.667 307.667 OFFCURVE",
"64 449 CURVE",
"25 435 LINE",
"47.667 373 OFFCURVE",
"77 318.167 OFFCURVE",
"113 270.5 CURVE SMOOTH",
"185 175.167 OFFCURVE",
"275 120 OFFCURVE",
"363 120 CURVE SMOOTH",
"433.882 120 OFFCURVE",
"497 169.64 OFFCURVE",
"497 233 CURVE SMOOTH",
"497 282.333 OFFCURVE",
"460 314 OFFCURVE",
"396 358 CURVE SMOOTH",
"379.333 369.333 OFFCURVE",
"367.833 377.667 OFFCURVE",
"361.5 383 CURVE SMOOTH",
"355.167 388.333 OFFCURVE",
"352 393.333 OFFCURVE",
"352 398 CURVE SMOOTH",
"352 411.333 OFFCURVE",
"365.333 424 OFFCURVE",
"384 424 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */\01223 22 2 2 5 8 1 4 2 2 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 26 values pushed */\0120 5 0 2 4 5 2 99 0 4 0 3 4 3 95 0 0 0 1 89 0 1 1 24 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 26 values pushed */\0120 5 0 2 4 5 2 99 0 4 0 3 4 3 95 0 0 0 1 89 0 1 1 25 0 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 9 values pushed */\01242 38 43 33 17 16 6 6 26 \012CALL[ ]	/* CallFunction */";
};
width = 560;
}
);
note = uni091C094D;
},
{
glyphname = "jha-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"896 17 LINE",
"884 -1.667 OFFCURVE",
"863.667 -13 OFFCURVE",
"845 -13 CURVE SMOOTH",
"794.86 -13 OFFCURVE",
"662 54.818 OFFCURVE",
"662 111 CURVE SMOOTH",
"662 609 LINE",
"583 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"292 609 LINE",
"313.333 586.333 OFFCURVE",
"324 565.333 OFFCURVE",
"324 546 CURVE SMOOTH",
"324 527.333 OFFCURVE",
"305.333 514 OFFCURVE",
"284 514 CURVE SMOOTH",
"156 514 LINE SMOOTH",
"99.206 514 OFFCURVE",
"37 461.411 OFFCURVE",
"37 408 CURVE SMOOTH",
"37 348.438 OFFCURVE",
"152.592 256 OFFCURVE",
"214 256 CURVE SMOOTH",
"243.333 256 OFFCURVE",
"267.333 269.333 OFFCURVE",
"298 292 CURVE SMOOTH",
"319.333 308 OFFCURVE",
"330 314 OFFCURVE",
"342 314 CURVE SMOOTH",
"367.333 314 OFFCURVE",
"388 291.667 OFFCURVE",
"388 261 CURVE SMOOTH",
"388 201.241 OFFCURVE",
"261.647 124 OFFCURVE",
"200 124 CURVE",
"165.333 162.667 OFFCURVE",
"126.333 186 OFFCURVE",
"97 186 CURVE SMOOTH",
"70.333 186 OFFCURVE",
"47 166.333 OFFCURVE",
"47 141 CURVE SMOOTH",
"47 95.295 OFFCURVE",
"137.678 45 OFFCURVE",
"201 45 CURVE",
"287.667 -60.333 OFFCURVE",
"387.667 -120 OFFCURVE",
"477 -120 CURVE SMOOTH",
"506.333 -120 OFFCURVE",
"530.333 -110.667 OFFCURVE",
"549 -92 CURVE",
"487 -33 LINE",
"469.667 -55.667 OFFCURVE",
"444.333 -68 OFFCURVE",
"423 -68 CURVE SMOOTH",
"369.667 -68 OFFCURVE",
"296 -22.333 OFFCURVE",
"236 51 CURVE",
"272.667 57 OFFCURVE",
"306.333 68.5 OFFCURVE",
"337 85.5 CURVE SMOOTH",
"398.333 119.5 OFFCURVE",
"436 169.333 OFFCURVE",
"436 220 CURVE SMOOTH",
"436 238 OFFCURVE",
"430.333 258.333 OFFCURVE",
"419 281 CURVE",
"457 257 OFFCURVE",
"490.667 245 OFFCURVE",
"520 245 CURVE SMOOTH",
"539.333 245 OFFCURVE",
"559.333 253.667 OFFCURVE",
"580 271 CURVE",
"580 166 LINE SMOOTH",
"580 136 OFFCURVE",
"600 103.167 OFFCURVE",
"640 67.5 CURVE SMOOTH",
"720 -3.833 OFFCURVE",
"843 -61 OFFCURVE",
"907 -61 CURVE SMOOTH",
"929.667 -61 OFFCURVE",
"950.667 -50.667 OFFCURVE",
"970 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"708 609 LINE",
"787 609 LINE",
"787 689 LINE",
"628 689 LINE"
);
},
{
closed = 1;
nodes = (
"580 609 LINE",
"580 352 LINE",
"550.667 320 OFFCURVE",
"506 302 OFFCURVE",
"462 302 CURVE SMOOTH",
"435.333 302 OFFCURVE",
"416 313.333 OFFCURVE",
"384 336 CURVE SMOOTH",
"350.667 358.667 OFFCURVE",
"332.333 369 OFFCURVE",
"307 369 CURVE SMOOTH",
"292.333 369 OFFCURVE",
"275.333 359.333 OFFCURVE",
"246 342 CURVE",
"212.667 320.667 OFFCURVE",
"191 310 OFFCURVE",
"171 310 CURVE SMOOTH",
"133.667 310 OFFCURVE",
"103 334 OFFCURVE",
"103 366 CURVE SMOOTH",
"103 407.333 OFFCURVE",
"152 449 OFFCURVE",
"200 449 CURVE SMOOTH",
"324 450 LINE SMOOTH",
"358.667 451.333 OFFCURVE",
"383 472.667 OFFCURVE",
"383 498 CURVE SMOOTH",
"383 525.333 OFFCURVE",
"365.667 562.333 OFFCURVE",
"331 609 CURVE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 32 values pushed */\012111 1 7 18 11 7 2 8 17 17 1 4 6 78 1 12 4 23 1 0 12 24 1 3 2 6 74 70 1 10 1 73 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 32 values pushed */\012111 1 7 18 11 7 2 8 19 17 1 4 6 78 1 12 4 23 1 0 12 24 1 3 2 6 74 70 1 10 1 73 \012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 96 values pushed */\0120 18 16 7 16 18 7 112 0 7 17 16 7 17 110 0 5 1 6 1 5 6 112 0 6 4 1 6 4 110 0 4 12 1 4 12 110 0 12 0 1 12 0 110 0 0 2 1 0 2 110 0 9 0 16 18 9 16 99 0 8 1 17 8 87 19 1 17 0 1 5 17 1 99 0 2 0 3 2 3 95 15 20 14 3 10 10 11 89 13 1 11 11 24 10 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 96 values pushed */\0120 18 16 7 16 18 7 112 0 7 17 16 7 17 110 0 5 1 6 1 5 6 112 0 6 4 1 6 4 110 0 4 12 1 4 12 110 0 12 0 1 12 0 110 0 0 2 1 0 2 110 0 9 0 16 18 9 16 99 0 8 1 17 8 87 19 1 17 0 1 5 17 1 99 0 2 0 3 2 3 95 15 20 14 3 10 10 11 89 13 1 11 11 25 10 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 97 values pushed */\0120 18 16 7 16 18 7 112 0 7 17 16 7 17 110 0 5 1 6 1 5 6 112 0 6 4 1 6 4 110 0 4 12 1 4 12 110 0 12 0 1 12 0 110 0 0 2 1 0 2 110 0 9 0 16 18 9 16 99 0 17 0 8 1 17 8 99 0 19 0 1 5 19 1 99 0 2 0 3 2 3 95 15 20 14 3 10 10 11 89 13 1 11 11 25 10 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 38 values pushed */\01279 79 109 107 103 101 97 95 91 88 84 83 79 82 79 82 81 80 76 74 69 68 67 66 62 59 36 37 18 37 18 36 41 37 33 21 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 772;
}
);
note = uni091D;
unicode = 091D;
},
{
glyphname = "jh-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"300 609 LINE",
"321.333 586.333 OFFCURVE",
"332 565.333 OFFCURVE",
"332 546 CURVE SMOOTH",
"332 527.333 OFFCURVE",
"314.667 514 OFFCURVE",
"292 514 CURVE SMOOTH",
"164 514 LINE SMOOTH",
"107.206 514 OFFCURVE",
"45 461.411 OFFCURVE",
"45 408 CURVE SMOOTH",
"45 348.359 OFFCURVE",
"158.892 256 OFFCURVE",
"221 256 CURVE SMOOTH",
"250.333 256 OFFCURVE",
"271 268 OFFCURVE",
"307 292 CURVE",
"328.333 308 OFFCURVE",
"339.333 314 OFFCURVE",
"350 314 CURVE SMOOTH",
"375.333 314 OFFCURVE",
"396 291.667 OFFCURVE",
"396 261 CURVE SMOOTH",
"396 201.416 OFFCURVE",
"271.029 124 OFFCURVE",
"208 124 CURVE",
"173.333 162.667 OFFCURVE",
"135.333 186 OFFCURVE",
"106 186 CURVE SMOOTH",
"79.333 186 OFFCURVE",
"55 166.333 OFFCURVE",
"55 141 CURVE SMOOTH",
"55 95.354 OFFCURVE",
"147.088 45 OFFCURVE",
"209 45 CURVE",
"297 -60.333 OFFCURVE",
"396.667 -120 OFFCURVE",
"486 -120 CURVE SMOOTH",
"514.667 -120 OFFCURVE",
"538.667 -110.667 OFFCURVE",
"558 -92 CURVE",
"494 -33 LINE",
"476.667 -55.667 OFFCURVE",
"452.333 -68 OFFCURVE",
"431 -68 CURVE SMOOTH",
"376.333 -68 OFFCURVE",
"304.333 -22.333 OFFCURVE",
"243 51 CURVE",
"280.333 57 OFFCURVE",
"314.333 68.5 OFFCURVE",
"345 85.5 CURVE SMOOTH",
"406.333 119.5 OFFCURVE",
"445 169.333 OFFCURVE",
"445 220 CURVE SMOOTH",
"445 238.667 OFFCURVE",
"439 259 OFFCURVE",
"427 281 CURVE",
"465.667 257 OFFCURVE",
"499.333 245 OFFCURVE",
"528 245 CURVE SMOOTH",
"548 245 OFFCURVE",
"568 253.667 OFFCURVE",
"588 271 CURVE",
"588 352 LINE",
"557.333 320 OFFCURVE",
"514.333 302 OFFCURVE",
"469 302 CURVE SMOOTH",
"443.667 302 OFFCURVE",
"425.667 313.333 OFFCURVE",
"391 336 CURVE SMOOTH",
"356.333 358.667 OFFCURVE",
"340.333 369 OFFCURVE",
"315 369 CURVE SMOOTH",
"300.333 369 OFFCURVE",
"283.333 359.333 OFFCURVE",
"254 342 CURVE SMOOTH",
"220.667 322 OFFCURVE",
"199 310 OFFCURVE",
"179 310 CURVE SMOOTH",
"141.667 310 OFFCURVE",
"111 334 OFFCURVE",
"111 366 CURVE SMOOTH",
"111 407.333 OFFCURVE",
"160 449 OFFCURVE",
"208 449 CURVE SMOOTH",
"332 450 LINE SMOOTH",
"366.667 451.333 OFFCURVE",
"391 472.667 OFFCURVE",
"391 498 CURVE SMOOTH",
"391 524 OFFCURVE",
"373.667 561 OFFCURVE",
"339 609 CURVE",
"575 609 LINE",
"575 689 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 23 values pushed */\01230 1 12 4 35 31 2 13 3 41 1 9 11 47 1 7 9 48 1 8 7 5 74 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 23 values pushed */\01230 1 12 4 35 31 2 13 5 41 1 9 11 47 1 7 9 48 1 8 7 5 74 \012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 79 values pushed */\0120 4 2 12 2 4 12 112 0 12 3 2 12 3 110 0 10 6 11 6 10 11 112 0 11 9 6 11 9 110 0 9 7 6 9 7 110 0 14 0 2 4 14 2 99 0 13 6 3 13 87 5 1 3 0 6 10 3 6 99 0 7 0 8 7 8 95 15 1 1 1 0 89 0 0 0 24 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 79 values pushed */\0120 4 2 12 2 4 12 112 0 12 3 2 12 3 110 0 10 6 11 6 10 11 112 0 11 9 6 11 9 110 0 9 7 6 9 7 110 0 14 0 2 4 14 2 99 0 13 6 3 13 87 5 1 3 0 6 10 3 6 99 0 7 0 8 7 8 95 15 1 1 1 0 89 0 0 0 25 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 80 values pushed */\0120 4 2 12 2 4 12 112 0 12 3 2 12 3 110 0 10 6 11 6 10 11 112 0 11 9 6 11 9 110 0 9 7 6 9 7 110 0 14 0 2 4 14 2 99 0 3 0 13 6 3 13 99 0 5 0 6 10 5 6 99 0 7 0 8 7 8 95 15 1 1 1 0 89 0 0 0 25 1 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 26 values pushed */\01291 90 86 83 77 75 70 69 64 63 61 59 54 53 36 41 36 36 36 36 52 17 16 16 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 561;
}
);
note = uni091D094D;
},
{
glyphname = "nya-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"568 609 LINE",
"568 398 LINE",
"541.333 356.667 OFFCURVE",
"499 330 OFFCURVE",
"467 330 CURVE SMOOTH",
"439 330 OFFCURVE",
"416.667 350.667 OFFCURVE",
"378 396 CURVE SMOOTH",
"356.667 419.333 OFFCURVE",
"338.167 438.167 OFFCURVE",
"322.5 452.5 CURVE SMOOTH",
"291.167 481.167 OFFCURVE",
"246.667 506 OFFCURVE",
"192 506 CURVE SMOOTH",
"150.667 506 OFFCURVE",
"106.333 486.667 OFFCURVE",
"59 448 CURVE",
"122 381 LINE",
"154 419.667 OFFCURVE",
"202.667 443 OFFCURVE",
"248 443 CURVE SMOOTH",
"304 443 OFFCURVE",
"349 397 OFFCURVE",
"349 341 CURVE SMOOTH",
"349 281.717 OFFCURVE",
"272.107 192 OFFCURVE",
"210 192 CURVE SMOOTH",
"150 192 OFFCURVE",
"91.333 235 OFFCURVE",
"58 307 CURVE",
"27 291 LINE",
"87 189.667 OFFCURVE",
"177.333 125 OFFCURVE",
"268 125 CURVE SMOOTH",
"294 125 OFFCURVE",
"318.167 131.5 OFFCURVE",
"340.5 144.5 CURVE SMOOTH",
"385.167 170.5 OFFCURVE",
"414 218.333 OFFCURVE",
"414 269 CURVE SMOOTH",
"414 287.667 OFFCURVE",
"408 310 OFFCURVE",
"396 336 CURVE",
"440 288 OFFCURVE",
"475 262 OFFCURVE",
"511 262 CURVE SMOOTH",
"529 262 OFFCURVE",
"548 272 OFFCURVE",
"568 292 CURVE",
"568 166 LINE SMOOTH",
"568 140 OFFCURVE",
"586.833 108.833 OFFCURVE",
"624.5 72.5 CURVE SMOOTH",
"699.833 -0.167 OFFCURVE",
"817.667 -61 OFFCURVE",
"895 -61 CURVE SMOOTH",
"917.667 -61 OFFCURVE",
"938.333 -50.667 OFFCURVE",
"957 -30 CURVE",
"885 17 LINE",
"870.333 -3 OFFCURVE",
"853 -13 OFFCURVE",
"833 -13 CURVE SMOOTH",
"780.32 -13 OFFCURVE",
"650 59.451 OFFCURVE",
"650 111 CURVE SMOOTH",
"650 609 LINE",
"570 689 LINE"
);
},
{
closed = 1;
nodes = (
"616 689 LINE",
"696 609 LINE",
"767 609 LINE",
"767 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */\01246 1 6 7 58 45 22 3 8 6 32 31 17 3 3 8 9 1 1 4 10 1 2 1 5 74 2 1 9 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 44 values pushed */\0120 7 0 6 8 7 6 99 0 8 0 3 5 8 3 99 0 5 0 4 1 5 4 99 0 1 0 2 1 2 95 11 1 9 9 0 89 10 1 0 0 24 9 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 44 values pushed */\0120 7 0 6 8 7 6 99 0 8 0 3 5 8 3 99 0 5 0 4 1 5 4 99 0 1 0 2 1 2 95 11 1 9 9 0 89 10 1 0 0 25 9 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 18 values pushed */\01264 63 62 61 60 59 37 36 37 37 39 37 35 37 16 12 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 753;
}
);
note = uni091E;
unicode = 091E;
},
{
glyphname = "ny-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"466 609 LINE",
"466 689 LINE"
);
},
{
closed = 1;
nodes = (
"294 125 OFFCURVE",
"318.167 131.5 OFFCURVE",
"340.5 144.5 CURVE SMOOTH",
"385.167 170.5 OFFCURVE",
"414 218.333 OFFCURVE",
"414 269 CURVE SMOOTH",
"414 289 OFFCURVE",
"406.667 321 OFFCURVE",
"396 337 CURVE",
"438.667 286.333 OFFCURVE",
"473.667 262 OFFCURVE",
"511 262 CURVE SMOOTH",
"529 262 OFFCURVE",
"548 272 OFFCURVE",
"568 292 CURVE",
"568 398 LINE",
"541.333 356.667 OFFCURVE",
"499 331.333 OFFCURVE",
"467 330 CURVE SMOOTH",
"445.667 328.667 OFFCURVE",
"417 348.667 OFFCURVE",
"381 390 CURVE",
"339.667 455.333 OFFCURVE",
"268 506 OFFCURVE",
"192 506 CURVE SMOOTH",
"150.667 506 OFFCURVE",
"106.333 486.667 OFFCURVE",
"59 448 CURVE",
"122 381 LINE",
"154 419.667 OFFCURVE",
"202.667 443 OFFCURVE",
"248 443 CURVE SMOOTH",
"304 443 OFFCURVE",
"349 397 OFFCURVE",
"349 341 CURVE SMOOTH",
"349 281.717 OFFCURVE",
"272.107 192 OFFCURVE",
"210 192 CURVE SMOOTH",
"150 192 OFFCURVE",
"91.333 235 OFFCURVE",
"58 307 CURVE",
"27 291 LINE",
"87 189.667 OFFCURVE",
"177.333 125 OFFCURVE",
"268 125 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */\01221 1 3 4 37 31 20 3 5 3 32 7 6 3 6 5 3 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 35 values pushed */\0120 4 0 3 5 4 3 99 0 5 0 6 2 5 6 99 0 2 8 1 7 2 7 95 0 1 1 0 89 0 0 0 24 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 35 values pushed */\0120 4 0 3 5 4 3 99 0 5 0 6 2 5 6 99 0 2 8 1 7 2 7 95 0 1 1 0 89 0 0 0 25 1 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 16 values pushed */\0124 4 4 44 4 43 36 35 36 37 38 17 16 9 6 27 \012CALL[ ]	/* CallFunction */";
};
width = 452;
}
);
note = uni091E094D;
},
{
glyphname = "tta-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"353 609 LINE",
"389 577 OFFCURVE",
"410 537.333 OFFCURVE",
"410 500 CURVE SMOOTH",
"410 449.865 OFFCURVE",
"343.74 439.274 OFFCURVE",
"268 430 CURVE SMOOTH",
"221.333 423.333 OFFCURVE",
"183.5 416 OFFCURVE",
"154.5 408 CURVE SMOOTH",
"96.5 392 OFFCURVE",
"48 353 OFFCURVE",
"48 277 CURVE SMOOTH",
"48 229.667 OFFCURVE",
"62.833 184.667 OFFCURVE",
"92.5 142 CURVE SMOOTH",
"151.833 56.667 OFFCURVE",
"253.667 0 OFFCURVE",
"351 0 CURVE SMOOTH",
"428.333 0 OFFCURVE",
"502 33 OFFCURVE",
"550 89 CURVE",
"484 150 LINE",
"438.667 92.667 OFFCURVE",
"365.667 58 OFFCURVE",
"295 58 CURVE SMOOTH",
"264.333 58 OFFCURVE",
"234.333 65.833 OFFCURVE",
"205 81.5 CURVE SMOOTH",
"146.333 112.833 OFFCURVE",
"105 167 OFFCURVE",
"105 219 CURVE SMOOTH",
"105 249.667 OFFCURVE",
"114 273.5 OFFCURVE",
"132 290.5 CURVE SMOOTH",
"168 324.5 OFFCURVE",
"215.333 334.333 OFFCURVE",
"302 349 CURVE SMOOTH",
"369.67 359.685 OFFCURVE",
"469 394.944 OFFCURVE",
"469 446 CURVE SMOOTH",
"469 495.333 OFFCURVE",
"443 558.333 OFFCURVE",
"399 609 CURVE SMOOTH",
"326 689 LINE"
);
},
{
closed = 1;
nodes = (
"371 689 LINE",
"443 609 LINE",
"575 609 LINE",
"575 689 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */\01221 20 2 1 3 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 23 values pushed */\0125 1 3 3 0 89 4 1 0 0 24 75 0 1 1 2 91 0 2 2 26 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 23 values pushed */\0125 1 3 3 0 89 4 1 0 0 25 75 0 1 1 2 91 0 2 2 26 2 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 9 values pushed */\01217 17 30 37 47 16 6 6 26 \012CALL[ ]	/* CallFunction */";
};
width = 561;
}
);
note = uni091F;
unicode = 091F;
},
{
glyphname = "tt-deva";
layers = (
{
components = (
{
alignment = -1;
name = "tta-deva";
},
{
alignment = -1;
name = "halant-deva";
transform = "{1, 0, 0, 1, 430, 0}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 561;
}
);
note = uni091F094D;
},
{
glyphname = "ttha-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"368 609 LINE",
"401.333 574.333 OFFCURVE",
"418 538.333 OFFCURVE",
"418 501 CURVE SMOOTH",
"418 452.961 OFFCURVE",
"355.08 442.583 OFFCURVE",
"281 432 CURVE SMOOTH",
"232.333 425.333 OFFCURVE",
"192.333 417.333 OFFCURVE",
"161 408 CURVE SMOOTH",
"98.333 389.333 OFFCURVE",
"46 343 OFFCURVE",
"46 255 CURVE SMOOTH",
"46 216.333 OFFCURVE",
"60.167 177 OFFCURVE",
"88.5 137 CURVE SMOOTH",
"145.167 57 OFFCURVE",
"244 -1 OFFCURVE",
"340 -1 CURVE SMOOTH",
"384 -1 OFFCURVE",
"425 9.333 OFFCURVE",
"463 30 CURVE SMOOTH",
"539 71.333 OFFCURVE",
"587 146.667 OFFCURVE",
"587 228 CURVE SMOOTH",
"587 286.711 OFFCURVE",
"513.126 389 OFFCURVE",
"455 389 CURVE SMOOTH",
"438.333 389 OFFCURVE",
"425 386 OFFCURVE",
"415 380 CURVE",
"412 382 LINE",
"449.333 402 OFFCURVE",
"475 433.667 OFFCURVE",
"475 467 CURVE",
"473.667 508.333 OFFCURVE",
"450.333 561 OFFCURVE",
"409 609 CURVE SMOOTH",
"338 689 LINE"
);
},
{
closed = 1;
nodes = (
"385 689 LINE",
"456 609 LINE",
"646 609 LINE",
"646 689 LINE"
);
},
{
closed = 1;
nodes = (
"253.667 61 OFFCURVE",
"226.333 67.167 OFFCURVE",
"201 79.5 CURVE SMOOTH",
"150.333 104.167 OFFCURVE",
"118 149 OFFCURVE",
"118 201 CURVE SMOOTH",
"118 241 OFFCURVE",
"126.167 271.333 OFFCURVE",
"142.5 292 CURVE SMOOTH",
"175.167 333.333 OFFCURVE",
"218.333 343.333 OFFCURVE",
"297 354 CURVE SMOOTH",
"335.667 359.333 OFFCURVE",
"364 365 OFFCURVE",
"382 371 CURVE",
"385 368 LINE",
"355.667 349.333 OFFCURVE",
"333 316.667 OFFCURVE",
"321 278 CURVE",
"394 239 LINE",
"404.667 299 OFFCURVE",
"437 343 OFFCURVE",
"473 343 CURVE SMOOTH",
"502.333 343 OFFCURVE",
"527 315 OFFCURVE",
"527 283 CURVE SMOOTH",
"527 244.333 OFFCURVE",
"515.667 207.833 OFFCURVE",
"493 173.5 CURVE SMOOTH",
"447.667 104.833 OFFCURVE",
"367 61 OFFCURVE",
"283 61 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */\01252 8 2 6 1 49 48 2 7 6 2 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 32 values pushed */\0120 1 0 6 7 1 6 99 5 1 3 3 0 89 4 1 0 0 24 75 8 1 7 7 2 91 0 2 2 26 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 32 values pushed */\0120 1 0 6 7 1 6 99 5 1 3 3 0 89 4 1 0 0 25 75 8 1 7 7 2 91 0 2 2 26 2 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 16 values pushed */\01239 39 39 63 39 62 38 17 17 29 38 41 16 9 6 27 \012CALL[ ]	/* CallFunction */";
};
width = 632;
}
);
note = uni0920;
unicode = 0920;
},
{
glyphname = "tth-deva";
layers = (
{
components = (
{
alignment = -1;
name = "ttha-deva";
},
{
alignment = -1;
name = "halant-deva";
transform = "{1, 0, 0, 1, 435, 0}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 632;
}
);
note = uni0920094D;
},
{
glyphname = "dda-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"403 609 LINE",
"425.667 585 OFFCURVE",
"440 553.667 OFFCURVE",
"440 535 CURVE SMOOTH",
"440 517.667 OFFCURVE",
"419.667 503 OFFCURVE",
"397 503 CURVE SMOOTH",
"259 503 LINE SMOOTH",
"196.333 503 OFFCURVE",
"140 457 OFFCURVE",
"140 401 CURVE SMOOTH",
"140 375.667 OFFCURVE",
"151 349.167 OFFCURVE",
"173 321.5 CURVE SMOOTH",
"217 266.167 OFFCURVE",
"289.667 226 OFFCURVE",
"351 226 CURVE SMOOTH",
"376.333 226 OFFCURVE",
"396.667 235 OFFCURVE",
"426 251 CURVE SMOOTH",
"451.333 265.667 OFFCURVE",
"464.667 272 OFFCURVE",
"482 272 CURVE SMOOTH",
"516.667 272 OFFCURVE",
"542 240.667 OFFCURVE",
"542 206 CURVE SMOOTH",
"542 143.39 OFFCURVE",
"420.891 69 OFFCURVE",
"353 69 CURVE SMOOTH",
"313.667 69 OFFCURVE",
"274.5 80.333 OFFCURVE",
"235.5 103 CURVE SMOOTH",
"157.5 148.333 OFFCURVE",
"92.333 227.333 OFFCURVE",
"55 314 CURVE",
"23 300 LINE",
"108.333 117.333 OFFCURVE",
"247.667 5 OFFCURVE",
"409 5 CURVE SMOOTH",
"443 5 OFFCURVE",
"474.833 12 OFFCURVE",
"504.5 26 CURVE SMOOTH",
"563.833 54 OFFCURVE",
"602 105.667 OFFCURVE",
"602 163 CURVE SMOOTH",
"602 189 OFFCURVE",
"593.667 215.167 OFFCURVE",
"577 241.5 CURVE SMOOTH",
"543.667 294.167 OFFCURVE",
"485.667 333 OFFCURVE",
"435 333 CURVE SMOOTH",
"417.667 333 OFFCURVE",
"402 325.667 OFFCURVE",
"370 311 CURVE SMOOTH",
"338 295 OFFCURVE",
"319.333 287 OFFCURVE",
"298 287 CURVE SMOOTH",
"251.333 287 OFFCURVE",
"213 319 OFFCURVE",
"213 355 CURVE SMOOTH",
"213 397.667 OFFCURVE",
"250.667 433 OFFCURVE",
"300 433 CURVE SMOOTH",
"416 433 LINE SMOOTH",
"456 433 OFFCURVE",
"491 458.333 OFFCURVE",
"491 493 CURVE SMOOTH",
"491 519 OFFCURVE",
"475.333 557.667 OFFCURVE",
"444 609 CURVE",
"373 689 LINE"
);
},
{
closed = 1;
nodes = (
"418 689 LINE",
"489 609 LINE",
"646 609 LINE",
"646 689 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\01231 1 2 3 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 47 values pushed */\0120 8 0 1 3 8 1 99 0 3 0 6 7 3 6 99 0 2 0 7 5 2 7 99 11 1 9 9 0 89 10 1 0 0 24 75 0 5 5 4 91 0 4 4 26 4 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 47 values pushed */\0120 8 0 1 3 8 1 99 0 3 0 6 7 3 6 99 0 2 0 7 5 2 7 99 11 1 9 9 0 89 10 1 0 0 25 75 0 5 5 4 91 0 4 4 26 4 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 18 values pushed */\01268 67 66 65 64 63 53 36 37 38 38 36 36 53 16 12 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 633;
}
);
note = uni0921;
unicode = 0921;
},
{
glyphname = "dd-deva";
layers = (
{
components = (
{
alignment = -1;
name = "dda-deva";
},
{
alignment = -1;
name = "halant-deva";
transform = "{1, 0, 0, 1, 474, 0}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 633;
}
);
note = uni0921094D;
},
{
glyphname = "ddha-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"385 609 LINE",
"415 570.333 OFFCURVE",
"430 539 OFFCURVE",
"430 515 CURVE SMOOTH",
"430 491 OFFCURVE",
"409 470 OFFCURVE",
"381 470 CURVE SMOOTH",
"221 469 LINE SMOOTH",
"191.667 469 OFFCURVE",
"164.167 462.333 OFFCURVE",
"138.5 449 CURVE SMOOTH",
"87.167 422.333 OFFCURVE",
"54 375 OFFCURVE",
"54 323 CURVE SMOOTH",
"54 266.333 OFFCURVE",
"67.5 212.667 OFFCURVE",
"94.5 162 CURVE SMOOTH",
"148.5 60.667 OFFCURVE",
"246.333 -7 OFFCURVE",
"357 -7 CURVE SMOOTH",
"387.667 -7 OFFCURVE",
"418.167 1 OFFCURVE",
"448.5 17 CURVE SMOOTH",
"509.167 49 OFFCURVE",
"551 104 OFFCURVE",
"551 156 CURVE SMOOTH",
"551 221.966 OFFCURVE",
"480.883 294 OFFCURVE",
"415 294 CURVE SMOOTH",
"351.271 294 OFFCURVE",
"285 232.355 OFFCURVE",
"285 172 CURVE SMOOTH",
"285 133.333 OFFCURVE",
"316 93.333 OFFCURVE",
"368 64 CURVE",
"356.667 55.333 OFFCURVE",
"334 51 OFFCURVE",
"300 51 CURVE SMOOTH",
"270 51 OFFCURVE",
"240.667 60.667 OFFCURVE",
"212 80 CURVE SMOOTH",
"154.667 118.667 OFFCURVE",
"115 186.333 OFFCURVE",
"115 253 CURVE SMOOTH",
"115 316.301 OFFCURVE",
"200.709 397 OFFCURVE",
"259 397 CURVE SMOOTH",
"401 398 LINE SMOOTH",
"442.333 399.333 OFFCURVE",
"478 430.333 OFFCURVE",
"478 469 CURVE SMOOTH",
"478 519.667 OFFCURVE",
"455 569 OFFCURVE",
"423 609 CURVE",
"350 689 LINE"
);
},
{
closed = 1;
nodes = (
"396 689 LINE",
"469 609 LINE",
"598 609 LINE",
"598 689 LINE"
);
},
{
closed = 1;
nodes = (
"370.333 91.333 OFFCURVE",
"356 111 OFFCURVE",
"356 131 CURVE SMOOTH",
"356 179.273 OFFCURVE",
"411.898 239 OFFCURVE",
"457 239 CURVE SMOOTH",
"478.333 239 OFFCURVE",
"496 222 OFFCURVE",
"496 202 CURVE SMOOTH",
"496 159.333 OFFCURVE",
"458.333 115.333 OFFCURVE",
"397 78 CURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */\01266 19 2 2 9 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 39 values pushed */\0120 5 0 1 3 5 1 99 0 3 0 9 2 3 9 99 8 1 6 6 0 89 7 1 0 0 24 75 0 2 2 4 91 0 4 4 26 4 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 39 values pushed */\0120 5 0 1 3 5 1 99 0 3 0 9 2 3 9 99 8 1 6 6 0 89 7 1 0 0 25 75 0 2 2 4 91 0 4 4 26 4 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\01260 58 17 17 20 54 38 39 38 54 16 10 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 584;
}
);
note = uni0922;
unicode = 0922;
},
{
glyphname = "ddh-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"385 609 LINE",
"415 570.333 OFFCURVE",
"430 539 OFFCURVE",
"430 515 CURVE SMOOTH",
"430 491 OFFCURVE",
"409 470 OFFCURVE",
"381 470 CURVE SMOOTH",
"221 469 LINE SMOOTH",
"191.667 469 OFFCURVE",
"164.167 462.333 OFFCURVE",
"138.5 449 CURVE SMOOTH",
"87.167 422.333 OFFCURVE",
"54 375 OFFCURVE",
"54 323 CURVE SMOOTH",
"54 266.333 OFFCURVE",
"67.5 212.667 OFFCURVE",
"94.5 162 CURVE SMOOTH",
"148.5 60.667 OFFCURVE",
"246.333 -7 OFFCURVE",
"357 -7 CURVE SMOOTH",
"387.667 -7 OFFCURVE",
"418.167 1 OFFCURVE",
"448.5 17 CURVE SMOOTH",
"509.167 49 OFFCURVE",
"551 104 OFFCURVE",
"551 156 CURVE SMOOTH",
"551 221.966 OFFCURVE",
"480.883 294 OFFCURVE",
"415 294 CURVE SMOOTH",
"351.271 294 OFFCURVE",
"285 232.355 OFFCURVE",
"285 172 CURVE SMOOTH",
"285 133.333 OFFCURVE",
"316 93.333 OFFCURVE",
"368 64 CURVE",
"356.667 55.333 OFFCURVE",
"334 51 OFFCURVE",
"300 51 CURVE SMOOTH",
"270 51 OFFCURVE",
"240.667 60.667 OFFCURVE",
"212 80 CURVE SMOOTH",
"154.667 118.667 OFFCURVE",
"115 186.333 OFFCURVE",
"115 253 CURVE SMOOTH",
"115 316.301 OFFCURVE",
"200.709 397 OFFCURVE",
"259 397 CURVE SMOOTH",
"401 398 LINE SMOOTH",
"442.333 399.333 OFFCURVE",
"478 430.333 OFFCURVE",
"478 469 CURVE SMOOTH",
"478 519.667 OFFCURVE",
"455 569 OFFCURVE",
"423 609 CURVE",
"350 689 LINE"
);
},
{
closed = 1;
nodes = (
"396 689 LINE",
"469 609 LINE",
"598 609 LINE",
"598 689 LINE"
);
},
{
closed = 1;
nodes = (
"370.333 91.333 OFFCURVE",
"356 111 OFFCURVE",
"356 131 CURVE SMOOTH",
"356 179.273 OFFCURVE",
"411.898 239 OFFCURVE",
"457 239 CURVE SMOOTH",
"478.333 239 OFFCURVE",
"496 222 OFFCURVE",
"496 202 CURVE SMOOTH",
"496 159.333 OFFCURVE",
"458.333 115.333 OFFCURVE",
"397 78 CURVE"
);
},
{
closed = 1;
nodes = (
"571 -250 LINE",
"410 -110 LINE SMOOTH",
"360 -69.333 OFFCURVE",
"312 -49 OFFCURVE",
"266 -49 CURVE SMOOTH",
"234.667 -49 OFFCURVE",
"198.667 -51.333 OFFCURVE",
"158 -56 CURVE",
"207 -123 LINE",
"251.667 -113.667 OFFCURVE",
"290.667 -109 OFFCURVE",
"324 -109 CURVE SMOOTH",
"367.333 -109 OFFCURVE",
"440.667 -162.667 OFFCURVE",
"544 -270 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */\01266 19 2 2 9 71 1 10 11 2 74 77 76 70 3 10 71 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 46 values pushed */\0120 5 0 1 3 5 1 99 0 3 0 9 2 3 9 99 0 11 0 10 11 10 95 8 1 6 6 0 89 7 1 0 0 24 75 0 2 2 4 91 0 4 4 26 4 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 46 values pushed */\0120 5 0 1 3 5 1 99 0 3 0 9 2 3 9 99 0 11 0 10 11 10 95 8 1 6 6 0 89 7 1 0 0 25 75 0 2 2 4 91 0 4 4 26 4 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 18 values pushed */\01274 72 69 67 60 58 17 17 20 54 38 39 38 54 16 12 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 573;
}
);
note = uni0922094D;
},
{
glyphname = "nna-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"577 609 LINE",
"577 166 LINE SMOOTH",
"577 140 OFFCURVE",
"595.833 108.833 OFFCURVE",
"633.5 72.5 CURVE SMOOTH",
"708.833 -0.167 OFFCURVE",
"826.667 -61 OFFCURVE",
"904 -61 CURVE SMOOTH",
"926.667 -61 OFFCURVE",
"947.667 -50.667 OFFCURVE",
"967 -30 CURVE",
"893 17 LINE",
"881 -3 OFFCURVE",
"860.667 -13 OFFCURVE",
"842 -13 CURVE SMOOTH",
"789.32 -13 OFFCURVE",
"659 59.451 OFFCURVE",
"659 111 CURVE SMOOTH",
"659 609 LINE",
"580 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"87 609 LINE",
"67 557.667 OFFCURVE",
"57 499.333 OFFCURVE",
"57 434 CURVE SMOOTH",
"57 405.333 OFFCURVE",
"68.5 373.167 OFFCURVE",
"91.5 337.5 CURVE SMOOTH",
"137.5 266.167 OFFCURVE",
"213.333 209 OFFCURVE",
"276 209 CURVE SMOOTH",
"337.772 209 OFFCURVE",
"415 322.268 OFFCURVE",
"415 388 CURVE SMOOTH",
"415 460.667 OFFCURVE",
"389.667 534.333 OFFCURVE",
"339 609 CURVE"
);
},
{
closed = 1;
nodes = (
"625 689 LINE",
"705 609 LINE",
"776 609 LINE",
"776 689 LINE"
);
},
{
closed = 1;
nodes = (
"184.581 272 OFFCURVE",
"135 328.009 OFFCURVE",
"135 371 CURVE SMOOTH",
"135 457 OFFCURVE",
"148.333 536.333 OFFCURVE",
"175 609 CURVE",
"295 609 LINE",
"332.333 555.667 OFFCURVE",
"352 503.667 OFFCURVE",
"352 461 CURVE SMOOTH",
"352 393.099 OFFCURVE",
"283.56 272 OFFCURVE",
"226 272 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */\01223 1 3 0 24 1 4 3 2 74 15 1 1 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 31 values pushed */\01210 1 9 0 0 3 9 0 99 0 3 0 4 3 4 95 8 7 5 3 1 1 2 89 6 1 2 2 24 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 31 values pushed */\01210 1 9 0 0 3 9 0 99 0 3 0 4 3 4 95 8 7 5 3 1 1 2 89 6 1 2 2 25 1 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 18 values pushed */\01237 37 37 50 37 49 23 17 17 20 36 37 17 21 36 11 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 770;
}
);
note = uni0923;
unicode = 0923;
},
{
glyphname = "nn-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"87 609 LINE",
"67 557.667 OFFCURVE",
"57 499.333 OFFCURVE",
"57 434 CURVE SMOOTH",
"57 405.333 OFFCURVE",
"68.5 373.167 OFFCURVE",
"91.5 337.5 CURVE SMOOTH",
"137.5 266.167 OFFCURVE",
"213.333 209 OFFCURVE",
"276 209 CURVE SMOOTH",
"337.772 209 OFFCURVE",
"415 322.268 OFFCURVE",
"415 388 CURVE SMOOTH",
"415 460.667 OFFCURVE",
"389.667 534.333 OFFCURVE",
"339 609 CURVE",
"491 609 LINE",
"491 689 LINE"
);
},
{
closed = 1;
nodes = (
"184.581 272 OFFCURVE",
"135 328.009 OFFCURVE",
"135 371 CURVE SMOOTH",
"135 457 OFFCURVE",
"148.333 536.333 OFFCURVE",
"175 609 CURVE",
"295 609 LINE",
"332.333 555.667 OFFCURVE",
"352 503.667 OFFCURVE",
"352 461 CURVE SMOOTH",
"352 393.099 OFFCURVE",
"283.56 272 OFFCURVE",
"226 272 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 21 values pushed */\0126 1 5 0 2 5 2 95 4 3 2 1 1 0 89 0 0 0 24 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 21 values pushed */\0126 1 5 0 2 5 2 95 4 3 2 1 1 0 89 0 0 0 25 1 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\01217 17 17 30 17 29 23 21 37 17 16 7 6 25 \012CALL[ ]	/* CallFunction */";
};
width = 477;
}
);
note = uni0923094D;
},
{
glyphname = "ta-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"466 609 LINE",
"466 400 LINE",
"396.667 456 OFFCURVE",
"321 488 OFFCURVE",
"261 488 CURVE SMOOTH",
"224.333 488 OFFCURVE",
"190.167 479.667 OFFCURVE",
"158.5 463 CURVE SMOOTH",
"95.167 429.667 OFFCURVE",
"55 369 OFFCURVE",
"55 301 CURVE SMOOTH",
"55 253.667 OFFCURVE",
"69 204.167 OFFCURVE",
"97 152.5 CURVE SMOOTH",
"153 49.167 OFFCURVE",
"246.333 -29 OFFCURVE",
"333 -29 CURVE SMOOTH",
"361 -29 OFFCURVE",
"386 -21.667 OFFCURVE",
"398 -7 CURVE",
"334 45 LINE",
"320.667 30.333 OFFCURVE",
"303.333 23 OFFCURVE",
"290 23 CURVE SMOOTH",
"266.667 23 OFFCURVE",
"241.833 34.5 OFFCURVE",
"215.5 57.5 CURVE SMOOTH",
"162.833 103.5 OFFCURVE",
"121 179.333 OFFCURVE",
"121 234 CURVE SMOOTH",
"121 267.333 OFFCURVE",
"130.667 298.333 OFFCURVE",
"150 327 CURVE SMOOTH",
"188.667 384.333 OFFCURVE",
"258 421 OFFCURVE",
"334 421 CURVE SMOOTH",
"375.333 421 OFFCURVE",
"426 398 OFFCURVE",
"466 358 CURVE",
"466 168 LINE SMOOTH",
"466 141.333 OFFCURVE",
"485 109.833 OFFCURVE",
"523 73.5 CURVE SMOOTH",
"599 0.833 OFFCURVE",
"717 -61 OFFCURVE",
"793 -61 CURVE SMOOTH",
"815.667 -61 OFFCURVE",
"836.667 -50.667 OFFCURVE",
"856 -30 CURVE",
"782 17 LINE",
"767.333 -3 OFFCURVE",
"750 -13 OFFCURVE",
"730 -13 CURVE SMOOTH",
"678.134 -13 OFFCURVE",
"548 59.656 OFFCURVE",
"548 111 CURVE SMOOTH",
"548 609 LINE",
"469 689 LINE"
);
},
{
closed = 1;
nodes = (
"513 689 LINE",
"595 609 LINE",
"664 609 LINE",
"664 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */\01246 31 17 3 4 3 32 9 2 1 4 10 1 2 5 3 74 2 1 7 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 36 values pushed */\0120 6 0 3 4 6 3 99 0 4 0 5 2 4 5 99 0 1 0 2 1 2 95 9 1 7 7 0 89 8 1 0 0 24 7 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 36 values pushed */\0120 6 0 3 4 6 3 99 0 4 0 5 2 4 5 99 0 1 0 2 1 2 95 9 1 7 7 0 89 8 1 0 0 25 7 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\01252 51 17 19 38 37 38 38 35 37 16 10 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 651;
}
);
note = uni0924;
unicode = 0924;
},
{
glyphname = "t-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"451 609 LINE",
"451 689 LINE",
"-14 689 LINE",
"-14 609 LINE"
);
},
{
closed = 1;
nodes = (
"229 488 OFFCURVE",
"194.667 479.333 OFFCURVE",
"162 462 CURVE SMOOTH",
"96.667 427.333 OFFCURVE",
"54 366.333 OFFCURVE",
"54 301 CURVE SMOOTH",
"54 253.667 OFFCURVE",
"67.833 204.167 OFFCURVE",
"95.5 152.5 CURVE SMOOTH",
"150.833 49.167 OFFCURVE",
"245.667 -29 OFFCURVE",
"331 -29 CURVE SMOOTH",
"361 -29 OFFCURVE",
"383 -21.667 OFFCURVE",
"397 -7 CURVE",
"334 45 LINE",
"319.333 30.333 OFFCURVE",
"304.333 23 OFFCURVE",
"289 23 CURVE SMOOTH",
"265.667 23 OFFCURVE",
"240.833 34.5 OFFCURVE",
"214.5 57.5 CURVE SMOOTH",
"161.833 103.5 OFFCURVE",
"120 179.333 OFFCURVE",
"120 234 CURVE SMOOTH",
"120 269.333 OFFCURVE",
"129 301.167 OFFCURVE",
"147 329.5 CURVE SMOOTH",
"183 386.167 OFFCURVE",
"248.333 421 OFFCURVE",
"327 421 CURVE SMOOTH",
"372.333 421 OFFCURVE",
"422.333 396.667 OFFCURVE",
"465 358 CURVE",
"465 400 LINE",
"394.333 456 OFFCURVE",
"321 488 OFFCURVE",
"265 488 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */\01220 7 6 3 3 2 21 1 4 3 2 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 27 values pushed */\0126 1 5 0 2 3 5 2 99 0 3 0 4 3 4 95 0 0 0 1 89 0 1 1 24 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 27 values pushed */\0126 1 5 0 2 3 5 2 99 0 3 0 4 3 4 95 0 0 0 1 89 0 1 1 25 0 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\0124 4 4 31 4 30 35 38 38 17 16 7 6 25 \012CALL[ ]	/* CallFunction */";
};
width = 437;
}
);
note = uni0924094D;
},
{
glyphname = "tha-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"822 17 LINE",
"808.667 -1.667 OFFCURVE",
"788.667 -13 OFFCURVE",
"770 -13 CURVE SMOOTH",
"718.134 -13 OFFCURVE",
"588 59.656 OFFCURVE",
"588 111 CURVE SMOOTH",
"588 609 LINE",
"508 689 LINE",
"347 689 LINE",
"411 609 LINE",
"505 609 LINE",
"505 400 LINE",
"447.667 298.667 OFFCURVE",
"353.333 234 OFFCURVE",
"264 234 CURVE SMOOTH",
"194.667 234 OFFCURVE",
"130.667 279 OFFCURVE",
"108 343 CURVE",
"127.333 335 OFFCURVE",
"147.667 331 OFFCURVE",
"169 331 CURVE SMOOTH",
"203.667 331 OFFCURVE",
"235.667 341.167 OFFCURVE",
"265 361.5 CURVE SMOOTH",
"323.667 402.167 OFFCURVE",
"360 474 OFFCURVE",
"360 554 CURVE SMOOTH",
"360 580.667 OFFCURVE",
"350.5 608 OFFCURVE",
"331.5 636 CURVE SMOOTH",
"293.5 692 OFFCURVE",
"229.667 732 OFFCURVE",
"171 732 CURVE SMOOTH",
"106.018 732 OFFCURVE",
"38 668.611 OFFCURVE",
"38 607 CURVE SMOOTH",
"38 547.776 OFFCURVE",
"145.071 460 OFFCURVE",
"202 460 CURVE SMOOTH",
"223.333 460 OFFCURVE",
"246 469 OFFCURVE",
"262 485 CURVE",
"266 485 LINE",
"258 435.667 OFFCURVE",
"202.333 399 OFFCURVE",
"133 399 CURVE SMOOTH",
"99 399 OFFCURVE",
"69.667 406 OFFCURVE",
"45 420 CURVE",
"57.667 372 OFFCURVE",
"77.5 329 OFFCURVE",
"104.5 291 CURVE SMOOTH",
"158.5 215 OFFCURVE",
"235.667 170 OFFCURVE",
"317 170 CURVE SMOOTH",
"386.333 170 OFFCURVE",
"458.333 209.667 OFFCURVE",
"505 275 CURVE",
"505 168 LINE SMOOTH",
"505 140.667 OFFCURVE",
"524 108.833 OFFCURVE",
"562 72.5 CURVE SMOOTH",
"638 -0.167 OFFCURVE",
"756.667 -61 OFFCURVE",
"834 -61 CURVE SMOOTH",
"856.667 -61 OFFCURVE",
"877.333 -50.667 OFFCURVE",
"896 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"634 609 LINE",
"704 609 LINE",
"704 689 LINE",
"554 689 LINE"
);
},
{
closed = 1;
nodes = (
"143.667 520 OFFCURVE",
"115 542.667 OFFCURVE",
"115 572 CURVE SMOOTH",
"115 621.181 OFFCURVE",
"169.569 677 OFFCURVE",
"220 677 CURVE SMOOTH",
"252 677 OFFCURVE",
"277 654 OFFCURVE",
"277 626 CURVE SMOOTH",
"277 575.672 OFFCURVE",
"223.834 520 OFFCURVE",
"177 520 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */\01219 1 3 13 47 14 2 2 3 41 1 5 2 7 1 6 5 60 1 9 1 5 74 52 1 7 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 56 values pushed */\01215 1 13 0 3 2 13 3 99 0 2 0 5 6 2 5 99 0 6 0 1 9 6 1 99 0 9 0 0 9 0 95 0 12 12 4 91 0 4 4 31 75 14 11 2 7 7 8 89 10 1 8 8 24 7 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01242 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 56 values pushed */\01215 1 13 0 3 2 13 3 99 0 2 0 5 6 2 5 99 0 6 0 1 9 6 1 99 0 9 0 0 9 0 95 0 4 4 12 91 0 12 12 25 75 14 11 2 7 7 8 89 10 1 8 8 25 7 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 54 values pushed */\0120 4 0 12 7 4 12 99 15 1 13 0 3 2 13 3 99 0 2 0 5 6 2 5 99 0 6 0 1 9 6 1 99 0 9 0 0 9 0 95 14 11 2 7 7 8 89 10 1 8 8 25 7 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 30 values pushed */\01265 65 61 61 65 78 65 77 72 70 61 64 61 64 63 62 58 56 17 19 35 38 38 37 36 38 33 16 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 690;
}
);
note = uni0925;
unicode = 0925;
},
{
glyphname = "th-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"106.018 732 OFFCURVE",
"38 668.611 OFFCURVE",
"38 607 CURVE SMOOTH",
"38 547.776 OFFCURVE",
"145.071 460 OFFCURVE",
"202 460 CURVE SMOOTH",
"223.333 460 OFFCURVE",
"246 469 OFFCURVE",
"262 485 CURVE",
"266 485 LINE",
"258 435.667 OFFCURVE",
"202.333 399 OFFCURVE",
"133 399 CURVE SMOOTH",
"99 399 OFFCURVE",
"69.667 406 OFFCURVE",
"45 420 CURVE",
"57.667 372 OFFCURVE",
"77.5 329 OFFCURVE",
"104.5 291 CURVE SMOOTH",
"158.5 215 OFFCURVE",
"235.667 170 OFFCURVE",
"317 170 CURVE SMOOTH",
"386.333 170 OFFCURVE",
"458.333 209.667 OFFCURVE",
"505 275 CURVE",
"505 400 LINE",
"447.667 298.667 OFFCURVE",
"353.333 234 OFFCURVE",
"264 234 CURVE SMOOTH",
"194.667 234 OFFCURVE",
"130.667 279 OFFCURVE",
"108 343 CURVE",
"127.333 335 OFFCURVE",
"147.667 331 OFFCURVE",
"169 331 CURVE SMOOTH",
"203.667 331 OFFCURVE",
"235.667 341.167 OFFCURVE",
"265 361.5 CURVE SMOOTH",
"323.667 402.167 OFFCURVE",
"360 474 OFFCURVE",
"360 554 CURVE SMOOTH",
"360 580.667 OFFCURVE",
"350.5 608 OFFCURVE",
"331.5 636 CURVE SMOOTH",
"293.5 692 OFFCURVE",
"229.667 732 OFFCURVE",
"171 732 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"491 609 LINE",
"491 689 LINE",
"330 689 LINE",
"396 609 LINE"
);
},
{
closed = 1;
nodes = (
"252 677 OFFCURVE",
"277 654 OFFCURVE",
"277 626 CURVE SMOOTH",
"277 575.672 OFFCURVE",
"223.834 520 OFFCURVE",
"177 520 CURVE SMOOTH",
"143.667 520 OFFCURVE",
"115 542.667 OFFCURVE",
"115 572 CURVE SMOOTH",
"115 621.181 OFFCURVE",
"169.569 677 OFFCURVE",
"220 677 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */\01228 1 4 8 23 15 2 3 4 9 1 0 3 16 1 1 0 4 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 46 values pushed */\0120 8 0 4 3 8 4 99 0 3 0 0 1 3 0 99 0 1 0 2 1 2 95 11 1 9 9 5 91 10 1 5 5 31 75 0 6 6 7 89 0 7 7 24 6 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01242 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 46 values pushed */\0120 8 0 4 3 8 4 99 0 3 0 0 1 3 0 99 0 1 0 2 1 2 95 10 1 5 5 9 91 11 1 9 9 25 75 0 6 6 7 89 0 7 7 25 6 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 44 values pushed */\01210 1 5 11 1 9 6 5 9 99 0 8 0 4 3 8 4 99 0 3 0 0 1 3 0 99 0 1 0 2 1 2 95 0 6 6 7 89 0 7 7 25 6 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 26 values pushed */\01245 45 0 0 45 58 45 57 52 50 44 43 42 41 0 40 0 39 37 36 37 35 38 12 6 25 \012CALL[ ]	/* CallFunction */";
};
width = 478;
}
);
note = uni0925094D;
},
{
glyphname = "da-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"354 609 LINE",
"378 583.667 OFFCURVE",
"394 550.333 OFFCURVE",
"394 529 CURVE SMOOTH",
"394 501.667 OFFCURVE",
"375.333 483.667 OFFCURVE",
"338 475 CURVE SMOOTH",
"161 437 LINE SMOOTH",
"93 421 OFFCURVE",
"46 374.667 OFFCURVE",
"46 324 CURVE SMOOTH",
"46 282 OFFCURVE",
"58.167 242.167 OFFCURVE",
"82.5 204.5 CURVE SMOOTH",
"131.167 129.167 OFFCURVE",
"218.333 80 OFFCURVE",
"317 80 CURVE SMOOTH",
"345 80 OFFCURVE",
"369.333 84 OFFCURVE",
"390 92 CURVE",
"448.667 -6.667 OFFCURVE",
"526.333 -70 OFFCURVE",
"589 -70 CURVE SMOOTH",
"619 -70 OFFCURVE",
"643 -60.667 OFFCURVE",
"661 -42 CURVE",
"596 11 LINE",
"576 -7 OFFCURVE",
"559.667 -16 OFFCURVE",
"547 -16 CURVE SMOOTH",
"512.333 -16 OFFCURVE",
"462.333 33 OFFCURVE",
"421 105 CURVE",
"465 127.667 OFFCURVE",
"494 162.333 OFFCURVE",
"494 197 CURVE SMOOTH",
"494 250.333 OFFCURVE",
"446.333 300 OFFCURVE",
"389 300 CURVE SMOOTH",
"359.667 300 OFFCURVE",
"338 276.333 OFFCURVE",
"338 247 CURVE SMOOTH",
"338 218.333 OFFCURVE",
"344.667 193 OFFCURVE",
"358 171 CURVE",
"325.333 152.333 OFFCURVE",
"289.333 143 OFFCURVE",
"250 143 CURVE SMOOTH",
"174.937 143 OFFCURVE",
"109 198.555 OFFCURVE",
"109 267 CURVE SMOOTH",
"109 313.667 OFFCURVE",
"153 355 OFFCURVE",
"213 367 CURVE SMOOTH",
"358 400 LINE SMOOTH",
"419.333 413.333 OFFCURVE",
"449 443.667 OFFCURVE",
"449 493 CURVE SMOOTH",
"449 536.333 OFFCURVE",
"433 575 OFFCURVE",
"401 609 CURVE SMOOTH",
"322 689 LINE"
);
},
{
closed = 1;
nodes = (
"369 689 LINE",
"446 609 LINE",
"555 609 LINE",
"555 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */\01217 1 1 2 39 28 2 5 1 33 1 3 5 34 1 4 3 4 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 36 values pushed */\0120 2 6 1 6 2 1 112 0 1 0 5 3 1 5 99 0 3 0 4 3 4 95 8 1 6 6 0 89 7 1 0 0 24 6 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 36 values pushed */\0120 2 6 1 6 2 1 112 0 1 0 5 3 1 5 99 0 3 0 4 3 4 95 8 1 6 6 0 89 7 1 0 0 25 6 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 12 values pushed */\01217 17 28 35 35 39 37 45 16 9 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 541;
}
);
note = uni0926;
unicode = 0926;
},
{
glyphname = "d-deva";
layers = (
{
components = (
{
alignment = -1;
name = "da-deva";
},
{
alignment = -1;
name = "halant-deva";
transform = "{1, 0, 0, 1, 685, -26}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 541;
}
);
note = uni0926094D;
},
{
glyphname = "d_rVocalicMatra-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-14 609 LINE",
"-14 689 LINE",
"313 689 LINE",
"390 603 LINE",
"422.667 557 OFFCURVE",
"439 518.667 OFFCURVE",
"439 488 CURVE SMOOTH",
"439 454.667 OFFCURVE",
"398.333 421.333 OFFCURVE",
"341 408 CURVE SMOOTH",
"210 381 LINE",
"144.667 365 OFFCURVE",
"98 323 OFFCURVE",
"98 279 CURVE SMOOTH",
"98 208.163 OFFCURVE",
"163.18 154 OFFCURVE",
"239 154 CURVE SMOOTH",
"278.333 154 OFFCURVE",
"314.667 163.667 OFFCURVE",
"348 183 CURVE",
"334.667 207.667 OFFCURVE",
"328 232.667 OFFCURVE",
"328 258 CURVE SMOOTH",
"328 287.333 OFFCURVE",
"351.333 311 OFFCURVE",
"378 311 CURVE SMOOTH",
"436.667 311 OFFCURVE",
"483 264.333 OFFCURVE",
"483 207 CURVE SMOOTH",
"483 173.667 OFFCURVE",
"456 138.667 OFFCURVE",
"412 116 CURVE",
"500 -44 LINE",
"384 -58.667 OFFCURVE",
"296 -105.667 OFFCURVE",
"296 -155 CURVE SMOOTH",
"296 -189.667 OFFCURVE",
"339 -218 OFFCURVE",
"391 -218 CURVE SMOOTH",
"467 -218 OFFCURVE",
"531 -195.333 OFFCURVE",
"571 -154 CURVE",
"623 -226 LINE",
"588.333 -256.667 OFFCURVE",
"538.667 -272 OFFCURVE",
"474 -272 CURVE SMOOTH",
"433.333 -272 OFFCURVE",
"393.667 -264 OFFCURVE",
"355 -248 CURVE SMOOTH",
"277.667 -216 OFFCURVE",
"224 -160.333 OFFCURVE",
"224 -107 CURVE SMOOTH",
"224 -54.395 OFFCURVE",
"343.3 6.527 OFFCURVE",
"427 14 CURVE",
"380 103 LINE",
"357.333 95 OFFCURVE",
"332.667 91 OFFCURVE",
"306 91 CURVE SMOOTH",
"260.667 91 OFFCURVE",
"217 102.333 OFFCURVE",
"175 125 CURVE SMOOTH",
"91 170.333 OFFCURVE",
"35 248.667 OFFCURVE",
"35 330 CURVE SMOOTH",
"35 383.333 OFFCURVE",
"83.333 432 OFFCURVE",
"150 448 CURVE SMOOTH",
"328 487 LINE",
"361.333 492.333 OFFCURVE",
"383 516 OFFCURVE",
"383 540 CURVE SMOOTH",
"383 556.667 OFFCURVE",
"370.333 579.667 OFFCURVE",
"345 609 CURVE"
);
},
{
closed = 1;
nodes = (
"548 609 LINE",
"430 609 LINE",
"359 689 LINE",
"548 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */\01248 1 4 3 37 15 2 0 4 36 27 16 3 2 0 26 1 1 2 4 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 41 values pushed */\0120 3 6 4 6 3 4 112 0 4 0 0 2 4 0 99 10 8 9 3 6 6 5 89 7 1 5 5 24 75 0 2 2 1 91 0 1 1 27 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01224 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 41 values pushed */\0120 3 6 4 6 3 4 112 0 4 0 0 2 4 0 99 10 8 9 3 6 6 5 89 7 1 5 5 25 75 0 2 2 1 91 0 1 1 27 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 38 values pushed */\0120 3 6 4 6 3 4 112 0 4 0 0 2 4 0 99 0 2 0 1 2 1 95 10 8 9 3 6 6 5 89 7 1 5 5 25 6 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 23 values pushed */\01267 67 0 0 67 70 67 70 69 68 0 66 0 66 29 37 43 36 41 44 11 6 26 \012CALL[ ]	/* CallFunction */";
};
width = 533;
}
);
note = uni0926094D0943;
},
{
glyphname = "dha-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"52 554.333 OFFCURVE",
"87.333 493 OFFCURVE",
"146 453 CURVE",
"96.667 429 OFFCURVE",
"67 385.667 OFFCURVE",
"67 343 CURVE SMOOTH",
"67 315 OFFCURVE",
"77.167 287.667 OFFCURVE",
"97.5 261 CURVE SMOOTH",
"138.167 207.667 OFFCURVE",
"211 170 OFFCURVE",
"291 170 CURVE SMOOTH",
"357.667 170 OFFCURVE",
"431 206.667 OFFCURVE",
"483 268 CURVE",
"483 166 LINE SMOOTH",
"483 140 OFFCURVE",
"502 108.833 OFFCURVE",
"540 72.5 CURVE SMOOTH",
"616 -0.167 OFFCURVE",
"733 -61 OFFCURVE",
"809 -61 CURVE SMOOTH",
"831.667 -61 OFFCURVE",
"852.667 -50.667 OFFCURVE",
"872 -30 CURVE",
"800 17 LINE",
"785.333 -3 OFFCURVE",
"765.333 -13 OFFCURVE",
"748 -13 CURVE SMOOTH",
"695.32 -13 OFFCURVE",
"565 59.451 OFFCURVE",
"565 111 CURVE SMOOTH",
"565 609 LINE",
"485 689 LINE",
"349 689 LINE",
"413 609 LINE",
"483 609 LINE",
"483 388 LINE",
"435 293.333 OFFCURVE",
"333.333 231 OFFCURVE",
"228 231 CURVE SMOOTH",
"177.333 231 OFFCURVE",
"132 259.667 OFFCURVE",
"132 297 CURVE SMOOTH",
"132 351.9 OFFCURVE",
"233.434 413 OFFCURVE",
"303 413 CURVE",
"260 486 LINE",
"240 486 OFFCURVE",
"212.667 479.333 OFFCURVE",
"178 466 CURVE",
"143.333 486 OFFCURVE",
"123 523 OFFCURVE",
"123 563 CURVE SMOOTH",
"123 569.667 OFFCURVE",
"124 576.167 OFFCURVE",
"126 582.5 CURVE SMOOTH",
"128 588.833 OFFCURVE",
"129.333 593.333 OFFCURVE",
"130 596 CURVE",
"160 564.667 OFFCURVE",
"195.333 549 OFFCURVE",
"236 549 CURVE SMOOTH",
"285.333 549 OFFCURVE",
"326 580 OFFCURVE",
"326 620 CURVE SMOOTH",
"326 682.837 OFFCURVE",
"251.337 742 OFFCURVE",
"183 742 CURVE SMOOTH",
"112.129 742 OFFCURVE",
"52 681.21 OFFCURVE",
"52 609 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"531 689 LINE",
"611 609 LINE",
"680 609 LINE",
"680 689 LINE"
);
},
{
closed = 1;
nodes = (
"153.333 653.667 OFFCURVE",
"177.667 677.667 OFFCURVE",
"203 679 CURVE",
"208.333 680.333 OFFCURVE",
"212.333 681 OFFCURVE",
"215 681 CURVE SMOOTH",
"231 681 OFFCURVE",
"245.333 670 OFFCURVE",
"248 654 CURVE",
"249.333 631.333 OFFCURVE",
"226.667 605.667 OFFCURVE",
"204 603 CURVE",
"198.667 601.667 OFFCURVE",
"194.333 601 OFFCURVE",
"191 601 CURVE SMOOTH",
"172.333 601 OFFCURVE",
"156.667 608.333 OFFCURVE",
"144 623 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */\01284 76 2 5 13 12 1 1 12 62 18 2 3 2 52 31 2 4 3 44 1 7 9 45 1 8 7 6 74 36 1 5 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 55 values pushed */\0120 12 0 1 2 12 1 99 0 2 0 3 4 2 3 99 0 4 0 9 7 4 9 99 0 7 0 8 7 8 95 14 1 13 13 0 91 0 0 0 31 75 11 1 5 5 6 89 10 1 6 6 24 5 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 55 values pushed */\0120 12 0 1 2 12 1 99 0 2 0 3 4 2 3 99 0 4 0 9 7 4 9 99 0 7 0 8 7 8 95 0 0 0 13 91 14 1 13 13 25 75 11 1 5 5 6 89 10 1 6 6 25 5 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 24 values pushed */\01282 81 79 78 71 70 69 68 67 66 56 54 36 37 17 19 37 17 24 37 34 15 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 668;
}
);
note = uni0927;
unicode = 0927;
},
{
glyphname = "dh-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"52 554.333 OFFCURVE",
"87.333 493 OFFCURVE",
"146 453 CURVE",
"96.667 429 OFFCURVE",
"67 385.667 OFFCURVE",
"67 343 CURVE SMOOTH",
"67 315 OFFCURVE",
"77.5 287.667 OFFCURVE",
"98.5 261 CURVE SMOOTH",
"140.5 207.667 OFFCURVE",
"213.667 170 OFFCURVE",
"291 170 CURVE SMOOTH",
"357.667 170 OFFCURVE",
"431 206.667 OFFCURVE",
"483 268 CURVE",
"483 388 LINE",
"435 293.333 OFFCURVE",
"333.333 231 OFFCURVE",
"228 231 CURVE SMOOTH",
"177.333 231 OFFCURVE",
"132 259.667 OFFCURVE",
"132 297 CURVE SMOOTH",
"132 351.9 OFFCURVE",
"233.434 413 OFFCURVE",
"303 413 CURVE",
"260 486 LINE",
"240 486 OFFCURVE",
"212.667 479.333 OFFCURVE",
"178 466 CURVE",
"143.333 486 OFFCURVE",
"123 523.667 OFFCURVE",
"123 561 CURVE SMOOTH",
"123 570.333 OFFCURVE",
"125.333 582 OFFCURVE",
"130 596 CURVE",
"160 564.667 OFFCURVE",
"195.333 549 OFFCURVE",
"236 549 CURVE SMOOTH",
"285.333 549 OFFCURVE",
"326 580 OFFCURVE",
"326 620 CURVE SMOOTH",
"326 682.522 OFFCURVE",
"249.782 742 OFFCURVE",
"183 742 CURVE SMOOTH",
"111.139 742 OFFCURVE",
"52 681.552 OFFCURVE",
"52 609 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"324 689 LINE",
"393 609 LINE",
"469 609 LINE",
"469 689 LINE"
);
},
{
closed = 1;
nodes = (
"153.333 653.667 OFFCURVE",
"177.667 677.667 OFFCURVE",
"203 679 CURVE",
"208.333 680.333 OFFCURVE",
"212.333 681 OFFCURVE",
"215 681 CURVE SMOOTH",
"231 681 OFFCURVE",
"245.333 670 OFFCURVE",
"248 654 CURVE",
"249.333 631.333 OFFCURVE",
"226.667 605.667 OFFCURVE",
"204 603 CURVE",
"198.667 601.667 OFFCURVE",
"194.333 601 OFFCURVE",
"191 601 CURVE SMOOTH",
"172.333 601 OFFCURVE",
"156.667 608.333 OFFCURVE",
"144 623 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */\01263 55 2 7 9 12 1 1 8 41 17 2 3 2 31 30 2 4 3 4 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 45 values pushed */\0120 8 0 1 2 8 1 99 0 2 0 3 4 2 3 99 0 4 0 5 4 5 95 10 1 9 9 0 91 0 0 0 31 75 0 7 7 6 89 0 6 6 24 7 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 45 values pushed */\0120 8 0 1 2 8 1 99 0 2 0 3 4 2 3 99 0 4 0 5 4 5 95 0 0 0 9 91 10 1 9 9 25 75 0 7 7 6 89 0 6 6 25 7 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 16 values pushed */\01261 60 58 57 17 17 26 37 37 17 23 37 34 11 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 455;
}
);
note = uni0927094D;
},
{
glyphname = "na-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"479 609 LINE",
"479 358 LINE",
"412.333 434 OFFCURVE",
"324 479 OFFCURVE",
"236 479 CURVE SMOOTH",
"203.333 479 OFFCURVE",
"172 472 OFFCURVE",
"142 458 CURVE SMOOTH",
"82 430 OFFCURVE",
"42 382.333 OFFCURVE",
"42 333 CURVE SMOOTH",
"42 303 OFFCURVE",
"53.167 271.833 OFFCURVE",
"75.5 239.5 CURVE SMOOTH",
"120.167 174.833 OFFCURVE",
"193 127 OFFCURVE",
"257 127 CURVE SMOOTH",
"313 127 OFFCURVE",
"362 170.667 OFFCURVE",
"362 224 CURVE SMOOTH",
"362 272 OFFCURVE",
"317.333 338 OFFCURVE",
"240 402 CURVE",
"247.333 406.667 OFFCURVE",
"268 409 OFFCURVE",
"302 409 CURVE SMOOTH",
"366 409 OFFCURVE",
"428.333 376.333 OFFCURVE",
"479 319 CURVE",
"479 168 LINE SMOOTH",
"479 140.667 OFFCURVE",
"498 108.833 OFFCURVE",
"536 72.5 CURVE SMOOTH",
"612 -0.167 OFFCURVE",
"730 -61 OFFCURVE",
"806 -61 CURVE SMOOTH",
"828 -61 OFFCURVE",
"849.333 -50.667 OFFCURVE",
"870 -30 CURVE",
"795 17 LINE",
"781.667 -1.667 OFFCURVE",
"761.667 -13 OFFCURVE",
"743 -13 CURVE SMOOTH",
"691.134 -13 OFFCURVE",
"561 59.656 OFFCURVE",
"561 111 CURVE SMOOTH",
"561 609 LINE",
"482 689 LINE"
);
},
{
closed = 1;
nodes = (
"527 689 LINE",
"607 609 LINE",
"677 609 LINE",
"677 689 LINE"
);
},
{
closed = 1;
nodes = (
"156.408 187 OFFCURVE",
"105 236.493 OFFCURVE",
"105 279 CURVE SMOOTH",
"105 325.667 OFFCURVE",
"146.333 368.333 OFFCURVE",
"209 391 CURVE",
"259.667 349.667 OFFCURVE",
"290 303.667 OFFCURVE",
"290 269 CURVE SMOOTH",
"290 223.667 OFFCURVE",
"247 187 OFFCURVE",
"199 187 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */\01252 40 23 18 4 9 3 10 1 1 4 11 1 2 1 3 74 2 1 6 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 37 values pushed */\0120 5 0 3 9 5 3 99 10 1 9 0 4 1 9 4 99 0 1 0 2 1 2 95 8 1 6 6 0 89 7 1 0 0 24 6 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 37 values pushed */\0120 5 0 3 9 5 3 99 10 1 9 0 4 1 9 4 99 0 1 0 2 1 2 95 8 1 6 6 0 89 7 1 0 0 25 6 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 18 values pushed */\01247 47 47 59 47 58 17 17 19 38 38 38 36 37 16 11 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 664;
}
);
note = uni0928;
unicode = 0928;
},
{
glyphname = "n-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"466 609 LINE",
"466 689 LINE",
"-14 689 LINE",
"-14 609 LINE"
);
},
{
closed = 1;
nodes = (
"203.333 479 OFFCURVE",
"172 472 OFFCURVE",
"142 458 CURVE SMOOTH",
"82 430 OFFCURVE",
"42 382.333 OFFCURVE",
"42 333 CURVE SMOOTH",
"42 302.333 OFFCURVE",
"52.167 271 OFFCURVE",
"72.5 239 CURVE SMOOTH",
"113.167 175 OFFCURVE",
"185 127 OFFCURVE",
"257 127 CURVE SMOOTH",
"313 127 OFFCURVE",
"362 170.667 OFFCURVE",
"362 224 CURVE SMOOTH",
"362 272 OFFCURVE",
"317.333 338 OFFCURVE",
"240 402 CURVE",
"247.333 406.667 OFFCURVE",
"268 409 OFFCURVE",
"302 409 CURVE SMOOTH",
"366 409 OFFCURVE",
"428.333 376.333 OFFCURVE",
"479 319 CURVE",
"479 358 LINE",
"412.333 434 OFFCURVE",
"324 479 OFFCURVE",
"236 479 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"259.667 349.667 OFFCURVE",
"290 303.667 OFFCURVE",
"290 269 CURVE SMOOTH",
"290 223.667 OFFCURVE",
"247 187 OFFCURVE",
"199 187 CURVE SMOOTH",
"156.408 187 OFFCURVE",
"105 236.493 OFFCURVE",
"105 279 CURVE SMOOTH",
"105 325.667 OFFCURVE",
"146.333 368.333 OFFCURVE",
"209 391 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */\01239 12 7 6 4 5 2 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 27 values pushed */\0126 1 4 0 2 5 4 2 99 0 5 0 3 5 3 95 0 0 0 1 89 0 1 1 24 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 27 values pushed */\0126 1 4 0 2 5 4 2 99 0 5 0 3 5 3 95 0 0 0 1 89 0 1 1 25 0 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 15 values pushed */\0124 4 34 32 4 26 4 25 38 38 17 16 7 6 24 \012CALL[ ]	/* CallFunction */";
};
width = 452;
}
);
note = uni0928094D;
},
{
glyphname = "nnna-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"479 609 LINE",
"479 358 LINE",
"412.333 434 OFFCURVE",
"324 479 OFFCURVE",
"236 479 CURVE SMOOTH",
"203.333 479 OFFCURVE",
"172 472 OFFCURVE",
"142 458 CURVE SMOOTH",
"82 430 OFFCURVE",
"42 382.333 OFFCURVE",
"42 333 CURVE SMOOTH",
"42 303 OFFCURVE",
"53.167 271.833 OFFCURVE",
"75.5 239.5 CURVE SMOOTH",
"120.167 174.833 OFFCURVE",
"193 127 OFFCURVE",
"257 127 CURVE SMOOTH",
"313 127 OFFCURVE",
"362 170.667 OFFCURVE",
"362 224 CURVE SMOOTH",
"362 272 OFFCURVE",
"317.333 338 OFFCURVE",
"240 402 CURVE",
"247.333 406.667 OFFCURVE",
"268 409 OFFCURVE",
"302 409 CURVE SMOOTH",
"366 409 OFFCURVE",
"428.333 376.333 OFFCURVE",
"479 319 CURVE",
"479 168 LINE SMOOTH",
"479 140.667 OFFCURVE",
"498 108.833 OFFCURVE",
"536 72.5 CURVE SMOOTH",
"612 -0.167 OFFCURVE",
"730 -61 OFFCURVE",
"806 -61 CURVE SMOOTH",
"828 -61 OFFCURVE",
"849.333 -50.667 OFFCURVE",
"870 -30 CURVE",
"795 17 LINE",
"781.667 -1.667 OFFCURVE",
"761.667 -13 OFFCURVE",
"743 -13 CURVE SMOOTH",
"691.134 -13 OFFCURVE",
"561 59.656 OFFCURVE",
"561 111 CURVE SMOOTH",
"561 609 LINE",
"482 689 LINE"
);
},
{
closed = 1;
nodes = (
"527 689 LINE",
"607 609 LINE",
"677 609 LINE",
"677 689 LINE"
);
},
{
closed = 1;
nodes = (
"156.408 187 OFFCURVE",
"105 236.493 OFFCURVE",
"105 279 CURVE SMOOTH",
"105 325.667 OFFCURVE",
"146.333 368.333 OFFCURVE",
"209 391 CURVE",
"259.667 349.667 OFFCURVE",
"290 303.667 OFFCURVE",
"290 269 CURVE SMOOTH",
"290 223.667 OFFCURVE",
"247 187 OFFCURVE",
"199 187 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"211 66 LINE",
"137 -7 LINE",
"211 -79 LINE",
"282 -7 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */\01252 40 23 18 4 9 3 63 61 10 3 1 4 11 1 2 1 3 74 2 1 6 1 73 62 1 2 71 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 37 values pushed */\0120 5 0 3 9 5 3 99 10 1 9 0 4 1 9 4 99 0 1 0 2 1 2 95 8 1 6 6 0 89 7 1 0 0 24 6 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 37 values pushed */\0120 5 0 3 9 5 3 99 10 1 9 0 4 1 9 4 99 0 1 0 2 1 2 95 8 1 6 6 0 89 7 1 0 0 25 6 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 18 values pushed */\01247 47 47 59 47 58 17 17 19 38 38 38 36 37 16 11 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 664;
}
);
note = uni0929;
unicode = 0929;
},
{
glyphname = "nnn-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"466 609 LINE",
"466 689 LINE",
"-14 689 LINE",
"-14 609 LINE"
);
},
{
closed = 1;
nodes = (
"203.333 479 OFFCURVE",
"172 472 OFFCURVE",
"142 458 CURVE SMOOTH",
"82 430 OFFCURVE",
"42 382.333 OFFCURVE",
"42 333 CURVE SMOOTH",
"42 302.333 OFFCURVE",
"52.167 271 OFFCURVE",
"72.5 239 CURVE SMOOTH",
"113.167 175 OFFCURVE",
"185 127 OFFCURVE",
"257 127 CURVE SMOOTH",
"313 127 OFFCURVE",
"362 170.667 OFFCURVE",
"362 224 CURVE SMOOTH",
"362 272 OFFCURVE",
"317.333 338 OFFCURVE",
"240 402 CURVE",
"247.333 406.667 OFFCURVE",
"268 409 OFFCURVE",
"302 409 CURVE SMOOTH",
"366 409 OFFCURVE",
"428.333 376.333 OFFCURVE",
"479 319 CURVE",
"479 358 LINE",
"412.333 434 OFFCURVE",
"324 479 OFFCURVE",
"236 479 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"259.667 349.667 OFFCURVE",
"290 303.667 OFFCURVE",
"290 269 CURVE SMOOTH",
"290 223.667 OFFCURVE",
"247 187 OFFCURVE",
"199 187 CURVE SMOOTH",
"156.408 187 OFFCURVE",
"105 236.493 OFFCURVE",
"105 279 CURVE SMOOTH",
"105 325.667 OFFCURVE",
"146.333 368.333 OFFCURVE",
"209 391 CURVE"
);
},
{
closed = 1;
nodes = (
"126 72 LINE",
"53 0 LINE",
"126 -72 LINE",
"198 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */\01239 12 7 6 4 5 2 1 74 43 42 41 3 3 71 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 27 values pushed */\0126 1 4 0 2 5 4 2 99 0 5 0 3 5 3 95 0 0 0 1 89 0 1 1 24 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 27 values pushed */\0126 1 4 0 2 5 4 2 99 0 5 0 3 5 3 95 0 0 0 1 89 0 1 1 25 0 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 15 values pushed */\0124 4 34 32 4 26 4 25 38 38 17 16 7 6 24 \012CALL[ ]	/* CallFunction */";
};
width = 452;
}
);
note = uni0929094D;
},
{
glyphname = "pa-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"61 609 LINE",
"61 404 LINE SMOOTH",
"61 382 OFFCURVE",
"72.833 357.167 OFFCURVE",
"96.5 329.5 CURVE SMOOTH",
"143.833 274.167 OFFCURVE",
"222 230 OFFCURVE",
"286 230 CURVE SMOOTH",
"320.667 230 OFFCURVE",
"364 250 OFFCURVE",
"396 282 CURVE",
"396 166 LINE SMOOTH",
"396 140 OFFCURVE",
"414.833 108.833 OFFCURVE",
"452.5 72.5 CURVE SMOOTH",
"527.833 -0.167 OFFCURVE",
"645.667 -61 OFFCURVE",
"723 -61 CURVE SMOOTH",
"744.333 -61 OFFCURVE",
"765.333 -50.667 OFFCURVE",
"786 -30 CURVE",
"713 17 LINE",
"698.333 -3 OFFCURVE",
"678.667 -13 OFFCURVE",
"660 -13 CURVE SMOOTH",
"607.514 -13 OFFCURVE",
"479 59.72 OFFCURVE",
"479 111 CURVE SMOOTH",
"479 609 LINE",
"398 689 LINE"
);
},
{
closed = 1;
nodes = (
"446 689 LINE",
"524 609 LINE",
"594 609 LINE",
"594 689 LINE"
);
},
{
closed = 1;
nodes = (
"183.333 285 OFFCURVE",
"143 317.667 OFFCURVE",
"143 359 CURVE SMOOTH",
"143 609 LINE",
"396 609 LINE",
"396 392 LINE",
"349.333 325.333 OFFCURVE",
"286 285 OFFCURVE",
"230 285 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */\01234 1 8 4 18 1 3 8 10 1 1 3 11 1 2 1 4 74 2 1 4 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 30 values pushed */\0129 1 8 0 3 1 8 3 99 0 1 0 2 1 2 95 7 6 2 4 4 0 89 5 1 0 0 24 4 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 30 values pushed */\0129 1 8 0 3 1 8 3 99 0 1 0 2 1 2 95 7 6 2 4 4 0 89 5 1 0 0 25 4 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 17 values pushed */\01232 32 32 40 32 39 20 17 17 20 38 36 37 16 10 6 28 \012CALL[ ]	/* CallFunction */";
};
width = 581;
}
);
note = uni092A;
unicode = 092A;
},
{
glyphname = "p-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"61 609 LINE",
"61 404 LINE SMOOTH",
"61 382 OFFCURVE",
"72.833 357.167 OFFCURVE",
"96.5 329.5 CURVE SMOOTH",
"143.833 274.167 OFFCURVE",
"222 230 OFFCURVE",
"286 230 CURVE SMOOTH",
"320.667 230 OFFCURVE",
"364 250 OFFCURVE",
"396 282 CURVE",
"396 392 LINE",
"349.333 325.333 OFFCURVE",
"286 285 OFFCURVE",
"230 285 CURVE SMOOTH",
"183.333 285 OFFCURVE",
"143 317.667 OFFCURVE",
"143 359 CURVE SMOOTH",
"143 609 LINE",
"382 609 LINE",
"382 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */\01210 1 2 1 11 1 3 2 2 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 19 values pushed */\0120 2 0 3 2 3 95 4 1 1 1 0 89 0 0 0 24 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 19 values pushed */\0120 2 0 3 2 3 95 4 1 1 1 0 89 0 0 0 25 1 76 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01220 37 35 17 16 5 6 25 \012CALL[ ]	/* CallFunction */";
};
width = 368;
}
);
note = uni092A094D;
},
{
glyphname = "pha-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"426 609 LINE",
"346 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"49 609 LINE",
"49 402 LINE SMOOTH",
"49 380 OFFCURVE",
"59.667 354.5 OFFCURVE",
"81 325.5 CURVE SMOOTH",
"123.667 267.5 OFFCURVE",
"192.333 219 OFFCURVE",
"247 219 CURVE SMOOTH",
"279 219 OFFCURVE",
"315 238.333 OFFCURVE",
"343 269 CURVE",
"343 166 LINE SMOOTH",
"343 140 OFFCURVE",
"361.833 108.833 OFFCURVE",
"399.5 72.5 CURVE SMOOTH",
"474.833 -0.167 OFFCURVE",
"593.667 -61 OFFCURVE",
"671 -61 CURVE SMOOTH",
"692.333 -61 OFFCURVE",
"713.333 -50.667 OFFCURVE",
"734 -30 CURVE",
"661 17 LINE",
"645 -3 OFFCURVE",
"627.667 -13 OFFCURVE",
"609 -13 CURVE SMOOTH",
"556.32 -13 OFFCURVE",
"426 59.451 OFFCURVE",
"426 111 CURVE SMOOTH",
"426 327 LINE",
"482 399 OFFCURVE",
"546 445 OFFCURVE",
"594 445 CURVE SMOOTH",
"623.333 445 OFFCURVE",
"648 418.667 OFFCURVE",
"648 388 CURVE SMOOTH",
"648 326.667 OFFCURVE",
"583.667 267.667 OFFCURVE",
"493 249 CURVE",
"549 190 LINE",
"642.333 208.667 OFFCURVE",
"712 270.667 OFFCURVE",
"712 340 CURVE SMOOTH",
"712 364.667 OFFCURVE",
"703.333 389.5 OFFCURVE",
"686 414.5 CURVE SMOOTH",
"651.333 464.5 OFFCURVE",
"593 501 OFFCURVE",
"545 501 CURVE SMOOTH",
"505 501 OFFCURVE",
"459.333 477 OFFCURVE",
"426 437 CURVE"
);
},
{
closed = 1;
nodes = (
"761 609 LINE",
"761 689 LINE",
"391 689 LINE",
"473 609 LINE"
);
},
{
closed = 1;
nodes = (
"132 609 LINE",
"343 609 LINE",
"343 372 LINE",
"297.667 312 OFFCURVE",
"244.333 277 OFFCURVE",
"199 277 CURVE SMOOTH",
"167 277 OFFCURVE",
"132 313 OFFCURVE",
"132 349 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */\01259 21 1 3 9 1 36 12 2 4 9 28 11 2 2 4 29 1 3 2 4 74 0 1 5 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 38 values pushed */\0120 0 0 1 9 0 1 99 0 9 0 4 2 9 4 99 0 2 0 3 2 3 95 11 10 7 3 5 5 6 89 8 1 6 6 24 5 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 38 values pushed */\0120 0 0 1 9 0 1 99 0 9 0 4 2 9 4 99 0 2 0 3 2 3 95 11 10 7 3 5 5 6 89 8 1 6 6 25 5 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 20 values pushed */\01252 52 52 60 52 60 57 55 17 17 17 20 38 35 38 44 35 12 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 747;
}
);
note = uni092B;
unicode = 092B;
},
{
glyphname = "ph-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"439 609 LINE",
"359 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"62 609 LINE",
"62 402 LINE SMOOTH",
"62 380 OFFCURVE",
"72.667 354.5 OFFCURVE",
"94 325.5 CURVE SMOOTH",
"136.667 267.5 OFFCURVE",
"205.333 219 OFFCURVE",
"260 219 CURVE SMOOTH",
"292 219 OFFCURVE",
"329.333 238.333 OFFCURVE",
"356 269 CURVE",
"356 166 LINE SMOOTH",
"356 140 OFFCURVE",
"375 108.833 OFFCURVE",
"413 72.5 CURVE SMOOTH",
"489 -0.167 OFFCURVE",
"607 -61 OFFCURVE",
"683 -61 CURVE SMOOTH",
"705.667 -61 OFFCURVE",
"726.667 -50.667 OFFCURVE",
"746 -30 CURVE",
"672 17 LINE",
"660 -3 OFFCURVE",
"639.667 -13 OFFCURVE",
"621 -13 CURVE SMOOTH",
"569.134 -13 OFFCURVE",
"439 59.656 OFFCURVE",
"439 111 CURVE SMOOTH",
"439 327 LINE",
"495 399 OFFCURVE",
"557.333 445 OFFCURVE",
"604 445 CURVE SMOOTH",
"616 445 OFFCURVE",
"634.667 436 OFFCURVE",
"648 420 CURVE",
"671 439 LINE",
"627 483 OFFCURVE",
"591.667 506 OFFCURVE",
"557 506 CURVE SMOOTH",
"518.333 506 OFFCURVE",
"473.667 479.667 OFFCURVE",
"439 437 CURVE"
);
},
{
closed = 1;
nodes = (
"657 609 LINE",
"657 689 LINE",
"404 689 LINE",
"484 609 LINE"
);
},
{
closed = 1;
nodes = (
"145 609 LINE",
"356 609 LINE",
"356 372 LINE",
"310.667 310.667 OFFCURVE",
"257.667 277 OFFCURVE",
"211 277 CURVE SMOOTH",
"179 277 OFFCURVE",
"145 313 OFFCURVE",
"145 349 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */\01253 14 8 7 1 5 9 1 30 1 4 9 22 1 2 4 23 1 3 2 4 74 0 1 5 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 38 values pushed */\0120 0 0 1 9 0 1 99 0 9 0 4 2 9 4 99 0 2 0 3 2 3 95 11 10 7 3 5 5 6 89 8 1 6 6 24 5 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 38 values pushed */\0120 0 0 1 9 0 1 99 0 9 0 4 2 9 4 99 0 2 0 3 2 3 95 11 10 7 3 5 5 6 89 8 1 6 6 25 5 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 20 values pushed */\01246 46 46 54 46 54 51 49 17 17 17 20 38 36 38 37 35 12 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 643;
}
);
note = uni092B094D;
},
{
glyphname = "ba-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"709 17 LINE",
"695.667 -1.667 OFFCURVE",
"675.667 -13 OFFCURVE",
"657 -13 CURVE SMOOTH",
"605.134 -13 OFFCURVE",
"475 59.656 OFFCURVE",
"475 111 CURVE SMOOTH",
"475 609 LINE",
"395 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"393 609 LINE",
"393 434 LINE",
"349 494 OFFCURVE",
"281.333 529 OFFCURVE",
"212 529 CURVE SMOOTH",
"145.502 529 OFFCURVE",
"43 454.306 OFFCURVE",
"43 391 CURVE SMOOTH",
"43 360.333 OFFCURVE",
"54.167 328.667 OFFCURVE",
"76.5 296 CURVE SMOOTH",
"121.167 230.667 OFFCURVE",
"199.333 182 OFFCURVE",
"278 182 CURVE SMOOTH",
"320.667 182 OFFCURVE",
"363.333 201.333 OFFCURVE",
"394 236 CURVE",
"394 165 LINE SMOOTH",
"394 140.333 OFFCURVE",
"412.667 109.833 OFFCURVE",
"450 73.5 CURVE SMOOTH",
"524.667 0.833 OFFCURVE",
"641.333 -61 OFFCURVE",
"720 -61 CURVE SMOOTH",
"742.667 -61 OFFCURVE",
"763.333 -50.667 OFFCURVE",
"782 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"520 609 LINE",
"591 609 LINE",
"591 689 LINE",
"441 689 LINE"
);
},
{
closed = 1;
nodes = (
"393 345 LINE",
"379 323 OFFCURVE",
"362 304 OFFCURVE",
"342 288 CURVE",
"202 448 LINE",
"228 460 OFFCURVE",
"254.333 466 OFFCURVE",
"281 466 CURVE SMOOTH",
"319.667 466 OFFCURVE",
"363.667 435.667 OFFCURVE",
"393 389 CURVE"
);
},
{
closed = 1;
nodes = (
"164.667 244 OFFCURVE",
"113 286 OFFCURVE",
"113 330 CURVE SMOOTH",
"113 366 OFFCURVE",
"134.667 401.667 OFFCURVE",
"168 427 CURVE",
"309 268 LINE",
"277 252 OFFCURVE",
"245.333 244 OFFCURVE",
"214 244 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 25 values pushed */\01250 49 47 45 44 39 21 7 9 8 7 1 1 9 34 1 5 1 3 74 26 1 3 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 38 values pushed */\0120 2 0 8 9 2 8 99 11 1 9 0 1 5 9 1 99 0 5 0 0 5 0 95 10 7 2 3 3 4 89 6 1 4 4 24 3 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 38 values pushed */\0120 2 0 8 9 2 8 99 11 1 9 0 1 5 9 1 99 0 5 0 0 5 0 95 10 7 2 3 3 4 89 6 1 4 4 25 3 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 24 values pushed */\01248 48 35 35 48 56 48 55 43 41 35 38 35 38 20 37 17 19 38 38 33 12 6 27 \012CALL[ ]	/* CallFunction */";
};
width = 578;
}
);
note = uni092C;
unicode = 092C;
},
{
glyphname = "b-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"378 609 LINE",
"378 689 LINE",
"-14 689 LINE",
"-14 609 LINE"
);
},
{
closed = 1;
nodes = (
"148.439 528 OFFCURVE",
"42 450.174 OFFCURVE",
"42 388 CURVE SMOOTH",
"42 356.667 OFFCURVE",
"53.167 325.167 OFFCURVE",
"75.5 293.5 CURVE SMOOTH",
"120.167 230.167 OFFCURVE",
"198.667 184 OFFCURVE",
"276 184 CURVE SMOOTH",
"317.333 184 OFFCURVE",
"359.333 199 OFFCURVE",
"390 227 CURVE",
"390 336 LINE",
"380.667 316 OFFCURVE",
"361 298.333 OFFCURVE",
"341 289 CURVE",
"204 446 LINE",
"228 460 OFFCURVE",
"254 467 OFFCURVE",
"282 467 CURVE SMOOTH",
"320.667 467 OFFCURVE",
"362 441.667 OFFCURVE",
"390 399 CURVE",
"390 451 LINE",
"343.333 499 OFFCURVE",
"280 528 OFFCURVE",
"216 528 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"307 270 LINE",
"275 253.333 OFFCURVE",
"242.667 245 OFFCURVE",
"210 245 CURVE SMOOTH",
"159.092 245 OFFCURVE",
"105 288.615 OFFCURVE",
"105 332 CURVE SMOOTH",
"105 366.667 OFFCURVE",
"132.333 405 OFFCURVE",
"171 425 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */\01238 37 16 13 12 7 6 7 5 2 17 1 3 5 2 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 27 values pushed */\0126 1 4 0 2 5 4 2 99 0 5 0 3 5 3 95 0 0 0 1 89 0 1 1 24 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 27 values pushed */\0126 1 4 0 2 5 4 2 99 0 5 0 3 5 3 95 0 0 0 1 89 0 1 1 25 0 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 15 values pushed */\0124 4 36 34 4 28 4 27 40 38 17 16 7 6 24 \012CALL[ ]	/* CallFunction */";
};
width = 364;
}
);
note = uni092C094D;
},
{
glyphname = "bha-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"3 599 OFFCURVE",
"59.333 532.333 OFFCURVE",
"146 495 CURVE",
"163 522 LINE",
"109.667 550 OFFCURVE",
"76 587.333 OFFCURVE",
"76 618 CURVE SMOOTH",
"76 660.882 OFFCURVE",
"117.467 716 OFFCURVE",
"154 716 CURVE SMOOTH",
"178 716 OFFCURVE",
"198 695.333 OFFCURVE",
"198 666 CURVE SMOOTH",
"198 368 LINE",
"117 368 LINE SMOOTH",
"103.667 368 OFFCURVE",
"95 359 OFFCURVE",
"95 347 CURVE SMOOTH",
"95 303.014 OFFCURVE",
"211.989 197 OFFCURVE",
"258 197 CURVE SMOOTH",
"271.333 197 OFFCURVE",
"280 204.667 OFFCURVE",
"280 218 CURVE SMOOTH",
"280 295 LINE",
"476 295 LINE",
"476 166 LINE SMOOTH",
"476 140 OFFCURVE",
"494.833 108.833 OFFCURVE",
"532.5 72.5 CURVE SMOOTH",
"607.833 -0.167 OFFCURVE",
"725.667 -61 OFFCURVE",
"803 -61 CURVE SMOOTH",
"825.667 -61 OFFCURVE",
"846.667 -50.667 OFFCURVE",
"866 -30 CURVE",
"794 17 LINE",
"778 -3 OFFCURVE",
"760.667 -13 OFFCURVE",
"742 -13 CURVE SMOOTH",
"689.32 -13 OFFCURVE",
"559 59.451 OFFCURVE",
"559 111 CURVE SMOOTH",
"559 609 LINE",
"478 689 LINE",
"308 689 LINE",
"360 609 LINE",
"476 609 LINE",
"476 368 LINE",
"280 368 LINE",
"280 598 LINE SMOOTH",
"280 622.667 OFFCURVE",
"270.833 649.167 OFFCURVE",
"252.5 677.5 CURVE SMOOTH",
"215.833 734.167 OFFCURVE",
"155.333 779 OFFCURVE",
"110 779 CURVE SMOOTH",
"55.79 779 OFFCURVE",
"3 717.146 OFFCURVE",
"3 659 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"524 689 LINE",
"605 609 LINE",
"675 609 LINE",
"675 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */\01254 53 2 1 2 21 1 4 7 22 1 5 4 3 74 14 1 2 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 45 values pushed */\0120 7 6 4 6 7 4 112 0 0 0 9 3 0 9 99 8 1 1 0 6 7 1 6 97 0 4 0 5 4 5 95 11 1 2 2 3 89 10 1 3 3 24 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 45 values pushed */\0120 7 6 4 6 7 4 112 0 0 0 9 3 0 9 99 8 1 1 0 6 7 1 6 97 0 4 0 5 4 5 95 11 1 2 2 3 89 10 1 3 3 25 2 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 18 values pushed */\01261 60 59 58 47 45 37 35 20 35 37 17 17 20 34 12 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 662;
}
);
note = uni092D;
unicode = 092D;
},
{
glyphname = "bh-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"3 599 OFFCURVE",
"59.333 532.333 OFFCURVE",
"146 495 CURVE",
"163 522 LINE",
"109.667 550 OFFCURVE",
"76 587.333 OFFCURVE",
"76 618 CURVE SMOOTH",
"76 660.882 OFFCURVE",
"117.467 716 OFFCURVE",
"154 716 CURVE SMOOTH",
"178 716 OFFCURVE",
"198 695.333 OFFCURVE",
"198 666 CURVE SMOOTH",
"198 368 LINE",
"117 368 LINE SMOOTH",
"103.667 368 OFFCURVE",
"95 359 OFFCURVE",
"95 347 CURVE SMOOTH",
"95 303.014 OFFCURVE",
"211.989 197 OFFCURVE",
"258 197 CURVE SMOOTH",
"271.333 197 OFFCURVE",
"280 204.667 OFFCURVE",
"280 218 CURVE SMOOTH",
"280 295 LINE",
"476 295 LINE",
"476 368 LINE",
"280 368 LINE",
"280 598 LINE SMOOTH",
"280 625.333 OFFCURVE",
"270.833 653.167 OFFCURVE",
"252.5 681.5 CURVE SMOOTH",
"215.833 738.167 OFFCURVE",
"156.667 779 OFFCURVE",
"110 779 CURVE SMOOTH",
"55.79 779 OFFCURVE",
"3 717.146 OFFCURVE",
"3 659 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"295 689 LINE",
"346 609 LINE",
"462 609 LINE",
"462 689 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */\01235 34 2 1 7 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 33 values pushed */\0120 3 2 3 115 0 0 0 5 6 0 5 99 4 1 1 0 2 3 1 2 97 0 7 7 6 89 0 6 6 24 7 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 33 values pushed */\0120 3 2 3 115 0 0 0 5 6 0 5 99 4 1 1 0 2 3 1 2 97 0 7 7 6 89 0 6 6 25 7 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 11 values pushed */\01217 27 35 37 35 17 20 34 8 6 28 \012CALL[ ]	/* CallFunction */";
};
width = 449;
}
);
note = uni092D094D;
},
{
glyphname = "ma-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"488 609 LINE",
"407 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"121 609 LINE",
"121 391 LINE",
"52 391 LINE SMOOTH",
"36 391 OFFCURVE",
"23 382 OFFCURVE",
"23 370 CURVE SMOOTH",
"23 332.818 OFFCURVE",
"144.616 219 OFFCURVE",
"182 219 CURVE SMOOTH",
"195.333 219 OFFCURVE",
"204 227.667 OFFCURVE",
"204 241 CURVE SMOOTH",
"204 313 LINE",
"405 313 LINE",
"405 166 LINE SMOOTH",
"405 140 OFFCURVE",
"424 108.833 OFFCURVE",
"462 72.5 CURVE SMOOTH",
"538 -0.167 OFFCURVE",
"656 -61 OFFCURVE",
"732 -61 CURVE SMOOTH",
"755.333 -61 OFFCURVE",
"776.667 -50.667 OFFCURVE",
"796 -30 CURVE",
"723 17 LINE",
"707 -3 OFFCURVE",
"689.667 -13 OFFCURVE",
"671 -13 CURVE SMOOTH",
"618.32 -13 OFFCURVE",
"488 59.451 OFFCURVE",
"488 111 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"604 609 LINE",
"604 689 LINE",
"454 689 LINE",
"534 609 LINE"
);
},
{
closed = 1;
nodes = (
"204 609 LINE",
"405 609 LINE",
"405 391 LINE",
"204 391 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */\0127 1 0 3 8 1 1 0 2 74 0 1 5 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 39 values pushed */\0120 3 2 0 2 3 0 112 9 1 4 0 2 3 4 2 97 0 0 0 1 0 1 95 11 10 7 3 5 5 6 89 8 1 6 6 24 5 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 39 values pushed */\0120 3 2 0 2 3 0 112 9 1 4 0 2 3 4 2 97 0 0 0 1 0 1 95 11 10 7 3 5 5 6 89 8 1 6 6 25 5 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 20 values pushed */\01237 37 37 40 37 40 39 38 17 17 17 17 37 35 20 35 36 12 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 591;
}
);
note = uni092E;
unicode = 092E;
},
{
glyphname = "m-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"121 609 LINE",
"121 391 LINE",
"52 391 LINE SMOOTH",
"36 391 OFFCURVE",
"23 382 OFFCURVE",
"23 370 CURVE SMOOTH",
"23 332.818 OFFCURVE",
"144.616 219 OFFCURVE",
"182 219 CURVE SMOOTH",
"195.333 219 OFFCURVE",
"204 227.667 OFFCURVE",
"204 241 CURVE SMOOTH",
"204 313 LINE",
"405 313 LINE",
"405 391 LINE",
"204 391 LINE",
"204 609 LINE",
"391 609 LINE",
"391 689 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 26 values pushed */\0120 4 3 4 115 5 1 2 0 3 4 2 3 97 6 1 1 1 0 89 0 0 0 24 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 26 values pushed */\0120 4 3 4 115 5 1 2 0 3 4 2 3 97 6 1 1 1 0 89 0 0 0 25 1 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 10 values pushed */\01217 37 35 17 17 17 16 7 6 27 \012CALL[ ]	/* CallFunction */";
};
width = 378;
}
);
note = uni092E094D;
},
{
glyphname = "ya-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"509 609 LINE",
"429 689 LINE",
"181 689 LINE",
"260 609 LINE",
"427 609 LINE",
"427 371 LINE",
"379 305.667 OFFCURVE",
"305.667 265 OFFCURVE",
"231 265 CURVE SMOOTH",
"169.667 265 OFFCURVE",
"113.333 310.333 OFFCURVE",
"92 373 CURVE",
"196 373 OFFCURVE",
"262 418 OFFCURVE",
"262 486 CURVE SMOOTH",
"262 528.667 OFFCURVE",
"248.333 574.333 OFFCURVE",
"215 609 CURVE SMOOTH",
"135 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"151 609 LINE SMOOTH",
"188.333 609 OFFCURVE",
"211 577.333 OFFCURVE",
"211 540 CURVE SMOOTH",
"211 486.667 OFFCURVE",
"155 451 OFFCURVE",
"91 451 CURVE SMOOTH",
"72.333 451 OFFCURVE",
"55.667 454.667 OFFCURVE",
"41 462 CURVE",
"29 453 LINE",
"37.667 406.333 OFFCURVE",
"54.5 363.667 OFFCURVE",
"79.5 325 CURVE SMOOTH",
"129.5 247.667 OFFCURVE",
"205 199 OFFCURVE",
"285 199 CURVE SMOOTH",
"335.667 199 OFFCURVE",
"387 220.333 OFFCURVE",
"427 259 CURVE",
"427 166 LINE SMOOTH",
"427 140 OFFCURVE",
"445.833 108.833 OFFCURVE",
"483.5 72.5 CURVE SMOOTH",
"558.833 -0.167 OFFCURVE",
"676.667 -61 OFFCURVE",
"754 -61 CURVE SMOOTH",
"776.667 -61 OFFCURVE",
"797.667 -50.667 OFFCURVE",
"817 -30 CURVE",
"744 17 LINE",
"728 -3 OFFCURVE",
"710.333 -13 OFFCURVE",
"691 -13 CURVE SMOOTH",
"639.134 -13 OFFCURVE",
"509 59.656 OFFCURVE",
"509 111 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"625 609 LINE",
"625 689 LINE",
"476 689 LINE",
"555 609 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */\01223 1 3 4 47 1 7 6 15 1 2 7 7 1 0 2 8 1 1 0 5 74 0 1 4 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 38 values pushed */\0120 3 0 6 7 3 6 99 0 7 0 2 0 7 2 99 0 0 0 1 0 1 95 10 8 2 4 4 5 89 11 9 2 5 5 24 4 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 38 values pushed */\0120 3 0 6 7 3 6 99 0 7 0 2 0 7 2 99 0 0 0 1 0 1 95 10 8 2 4 4 5 89 11 9 2 5 5 25 4 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 18 values pushed */\01255 54 53 52 51 50 19 34 22 17 36 37 38 35 36 12 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 611;
}
);
note = uni092F;
unicode = 092F;
},
{
glyphname = "y-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"135 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"174 609 LINE",
"198.667 584.333 OFFCURVE",
"211 559.333 OFFCURVE",
"211 534 CURVE SMOOTH",
"211 490.51 OFFCURVE",
"146.977 453 OFFCURVE",
"93 453 CURVE SMOOTH",
"70.333 453 OFFCURVE",
"53.667 454.333 OFFCURVE",
"43 457 CURVE",
"30 448 LINE",
"40.667 400.667 OFFCURVE",
"58.667 358.167 OFFCURVE",
"84 320.5 CURVE SMOOTH",
"134.667 245.167 OFFCURVE",
"207.667 199 OFFCURVE",
"285 199 CURVE SMOOTH",
"334.333 199 OFFCURVE",
"384.333 221.667 OFFCURVE",
"427 263 CURVE",
"427 371 LINE",
"379 305.667 OFFCURVE",
"305.667 265 OFFCURVE",
"231 265 CURVE SMOOTH",
"169.667 265 OFFCURVE",
"113.333 310.333 OFFCURVE",
"92 373 CURVE",
"193.333 373 OFFCURVE",
"262 418 OFFCURVE",
"262 486 CURVE SMOOTH",
"262 519.333 OFFCURVE",
"246.333 560.333 OFFCURVE",
"215 609 CURVE"
);
},
{
closed = 1;
nodes = (
"413 609 LINE",
"413 689 LINE",
"181 689 LINE",
"260 609 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */\01220 1 3 4 11 1 1 0 12 1 2 1 3 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 28 values pushed */\0120 3 0 0 1 3 0 99 0 1 0 2 1 2 95 6 1 4 4 5 89 7 1 5 5 24 4 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 28 values pushed */\0120 3 0 0 1 3 0 99 0 1 0 2 1 2 95 6 1 4 4 5 89 7 1 5 5 25 4 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 11 values pushed */\01217 17 17 21 37 37 34 20 8 6 28 \012CALL[ ]	/* CallFunction */";
};
width = 399;
}
);
note = uni092F094D;
},
{
glyphname = "ra-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"221 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"241 609 LINE",
"289 569 OFFCURVE",
"321 511.667 OFFCURVE",
"321 465 CURVE SMOOTH",
"321 430.333 OFFCURVE",
"298.333 398.333 OFFCURVE",
"265 381 CURVE",
"235.667 454.333 OFFCURVE",
"186 505 OFFCURVE",
"134 505 CURVE SMOOTH",
"82 505 OFFCURVE",
"39 469.333 OFFCURVE",
"39 428 CURVE SMOOTH",
"39 398.667 OFFCURVE",
"55.167 360.667 OFFCURVE",
"87.5 314 CURVE SMOOTH",
"152.167 220.667 OFFCURVE",
"252.333 120 OFFCURVE",
"327 56 CURVE SMOOTH",
"421 -26 OFFCURVE",
"498 -67 OFFCURVE",
"558 -67 CURVE SMOOTH",
"592.667 -67 OFFCURVE",
"622.333 -53.333 OFFCURVE",
"641 -32 CURVE",
"564 20 LINE",
"553.333 1.333 OFFCURVE",
"532.333 -11 OFFCURVE",
"507 -11 CURVE SMOOTH",
"427 -11 OFFCURVE",
"298.333 96 OFFCURVE",
"161 272 CURVE",
"171 270 OFFCURVE",
"181.667 269 OFFCURVE",
"193 269 CURVE SMOOTH",
"221 269 OFFCURVE",
"249.5 275.167 OFFCURVE",
"278.5 287.5 CURVE SMOOTH",
"336.5 312.167 OFFCURVE",
"380 360 OFFCURVE",
"380 420 CURVE SMOOTH",
"380 472 OFFCURVE",
"350 541 OFFCURVE",
"290 609 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"442 609 LINE",
"442 689 LINE",
"266 689 LINE",
"336 609 LINE"
);
},
{
closed = 1;
nodes = (
"190 433 OFFCURVE",
"224.667 405.667 OFFCURVE",
"238 367 CURVE",
"208.667 351 OFFCURVE",
"174 343 OFFCURVE",
"134 343 CURVE SMOOTH",
"114 343 OFFCURVE",
"96 364.333 OFFCURVE",
"96 387 CURVE SMOOTH",
"96 409.667 OFFCURVE",
"127.333 433 OFFCURVE",
"158 433 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */\01252 31 2 8 9 9 1 0 8 15 1 1 0 16 1 2 1 4 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 37 values pushed */\0120 3 10 1 9 8 3 9 99 0 8 0 0 1 8 0 99 0 1 0 2 1 2 95 6 1 4 4 5 89 7 1 5 5 24 4 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 37 values pushed */\0120 3 10 1 9 8 3 9 99 0 8 0 0 1 8 0 99 0 1 0 2 1 2 95 6 1 4 4 5 89 7 1 5 5 25 4 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 18 values pushed */\01245 45 45 55 45 54 37 17 17 17 24 39 37 35 38 11 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 429;
}
);
note = uni0930;
unicode = 0930;
},
{
glyphname = "ra_uMatra-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"241 609 LINE",
"289 569 OFFCURVE",
"321 511.667 OFFCURVE",
"321 465 CURVE SMOOTH",
"321 430.333 OFFCURVE",
"298.333 398.333 OFFCURVE",
"265 381 CURVE",
"235.667 454.333 OFFCURVE",
"186 505 OFFCURVE",
"134 505 CURVE SMOOTH",
"82 505 OFFCURVE",
"39 469.333 OFFCURVE",
"39 428 CURVE SMOOTH",
"39 398.667 OFFCURVE",
"55.167 360.667 OFFCURVE",
"87.5 314 CURVE SMOOTH",
"152.167 220.667 OFFCURVE",
"252.333 120 OFFCURVE",
"327 56 CURVE SMOOTH",
"421 -26 OFFCURVE",
"498 -67 OFFCURVE",
"558 -67 CURVE SMOOTH",
"592.667 -67 OFFCURVE",
"622.333 -53.333 OFFCURVE",
"641 -32 CURVE",
"564 20 LINE",
"553.333 1.333 OFFCURVE",
"532.333 -11 OFFCURVE",
"507 -11 CURVE SMOOTH",
"427 -11 OFFCURVE",
"298.333 96 OFFCURVE",
"161 272 CURVE",
"171 270 OFFCURVE",
"181.667 269 OFFCURVE",
"193 269 CURVE SMOOTH",
"221 269 OFFCURVE",
"249.5 275.167 OFFCURVE",
"278.5 287.5 CURVE SMOOTH",
"336.5 312.167 OFFCURVE",
"380 360 OFFCURVE",
"380 420 CURVE SMOOTH",
"380 472 OFFCURVE",
"350 541 OFFCURVE",
"290 609 CURVE SMOOTH",
"221 689 LINE"
);
},
{
closed = 1;
nodes = (
"266 689 LINE",
"336 609 LINE",
"807 609 LINE",
"807 689 LINE"
);
},
{
closed = 1;
nodes = (
"526 117 LINE",
"577.333 120.333 OFFCURVE",
"620 131.167 OFFCURVE",
"654 149.5 CURVE SMOOTH",
"722 186.167 OFFCURVE",
"754 245.667 OFFCURVE",
"754 311 CURVE SMOOTH",
"754 342.333 OFFCURVE",
"744.333 373 OFFCURVE",
"725 403 CURVE SMOOTH",
"686.333 463 OFFCURVE",
"618.667 503 OFFCURVE",
"552 503 CURVE SMOOTH",
"487.603 503 OFFCURVE",
"393 423.825 OFFCURVE",
"393 361 CURVE",
"489 314 LINE",
"484.333 324.667 OFFCURVE",
"482 335.333 OFFCURVE",
"482 346 CURVE SMOOTH",
"482 402.584 OFFCURVE",
"539.023 449 OFFCURVE",
"607 449 CURVE SMOOTH",
"655 449 OFFCURVE",
"696 408.333 OFFCURVE",
"696 359 CURVE SMOOTH",
"696 325.667 OFFCURVE",
"685.5 296.5 OFFCURVE",
"664.5 271.5 CURVE SMOOTH",
"622.5 221.5 OFFCURVE",
"546.667 192.667 OFFCURVE",
"460 190 CURVE"
);
},
{
closed = 1;
nodes = (
"114 343 OFFCURVE",
"96 364.333 OFFCURVE",
"96 387 CURVE SMOOTH",
"96 409.667 OFFCURVE",
"127.333 433 OFFCURVE",
"158 433 CURVE SMOOTH",
"190 433 OFFCURVE",
"224.667 405.667 OFFCURVE",
"238 367 CURVE",
"208.667 351 OFFCURVE",
"174 343 OFFCURVE",
"134 343 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */\01273 58 33 3 13 12 57 11 2 1 13 17 1 2 10 18 1 3 2 4 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 60 values pushed */\01214 1 11 1 10 1 11 10 112 0 10 2 1 10 2 110 0 8 12 4 8 87 9 1 4 0 12 13 4 12 99 15 1 13 0 1 11 13 1 99 0 2 0 3 2 3 96 7 1 5 5 0 89 6 1 0 0 24 5 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 60 values pushed */\01214 1 11 1 10 1 11 10 112 0 10 2 1 10 2 110 0 8 12 4 8 87 9 1 4 0 12 13 4 12 99 15 1 13 0 1 11 13 1 99 0 2 0 3 2 3 96 7 1 5 5 0 89 6 1 0 0 25 5 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 30 values pushed */\01272 72 45 45 72 82 72 81 77 75 45 71 45 71 70 69 63 61 38 17 17 24 39 37 35 39 16 16 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 793;
}
);
note = uni09300941;
},
{
glyphname = "ra_uuMatra-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"241 609 LINE",
"289 569 OFFCURVE",
"321 511.667 OFFCURVE",
"321 465 CURVE SMOOTH",
"321 430.333 OFFCURVE",
"298.333 398.333 OFFCURVE",
"265 381 CURVE",
"235.667 454.333 OFFCURVE",
"186 505 OFFCURVE",
"134 505 CURVE SMOOTH",
"82 505 OFFCURVE",
"39 469.333 OFFCURVE",
"39 428 CURVE SMOOTH",
"39 398.667 OFFCURVE",
"55.167 360.667 OFFCURVE",
"87.5 314 CURVE SMOOTH",
"152.167 220.667 OFFCURVE",
"252.333 120 OFFCURVE",
"327 56 CURVE SMOOTH",
"421 -26 OFFCURVE",
"498 -67 OFFCURVE",
"558 -67 CURVE SMOOTH",
"592.667 -67 OFFCURVE",
"622.333 -53.333 OFFCURVE",
"641 -32 CURVE",
"564 20 LINE",
"553.333 1.333 OFFCURVE",
"532.333 -11 OFFCURVE",
"507 -11 CURVE SMOOTH",
"427 -11 OFFCURVE",
"298.333 96 OFFCURVE",
"161 272 CURVE",
"171 270 OFFCURVE",
"181.667 269 OFFCURVE",
"193 269 CURVE SMOOTH",
"221 269 OFFCURVE",
"249.5 275.167 OFFCURVE",
"278.5 287.5 CURVE SMOOTH",
"336.5 312.167 OFFCURVE",
"380 360 OFFCURVE",
"380 420 CURVE SMOOTH",
"380 472 OFFCURVE",
"350 541 OFFCURVE",
"290 609 CURVE SMOOTH",
"221 689 LINE"
);
},
{
closed = 1;
nodes = (
"266 689 LINE",
"336 609 LINE",
"1014 609 LINE",
"1014 689 LINE"
);
},
{
closed = 1;
nodes = (
"927.667 22 OFFCURVE",
"960 38 OFFCURVE",
"988 66 CURVE",
"937 115 LINE",
"923.667 92.333 OFFCURVE",
"895.667 79 OFFCURVE",
"869 79 CURVE SMOOTH",
"834.333 79 OFFCURVE",
"796 115.667 OFFCURVE",
"768 173 CURVE SMOOTH",
"692 336 LINE SMOOTH",
"654.667 416 OFFCURVE",
"595.333 469 OFFCURVE",
"538 469 CURVE SMOOTH",
"465.055 469 OFFCURVE",
"388 413.259 OFFCURVE",
"388 350 CURVE SMOOTH",
"388 323.333 OFFCURVE",
"397.833 297.167 OFFCURVE",
"417.5 271.5 CURVE SMOOTH",
"456.833 220.167 OFFCURVE",
"524 184 OFFCURVE",
"584 184 CURVE SMOOTH",
"606.667 184 OFFCURVE",
"634.667 197.333 OFFCURVE",
"656 216 CURVE",
"604 281 LINE",
"580 254.333 OFFCURVE",
"547.333 239 OFFCURVE",
"514 239 CURVE SMOOTH",
"480.667 239 OFFCURVE",
"452 264.333 OFFCURVE",
"452 295 CURVE SMOOTH",
"452 344.953 OFFCURVE",
"522.498 398 OFFCURVE",
"579 398 CURVE SMOOTH",
"604.333 398 OFFCURVE",
"635.333 368 OFFCURVE",
"658 324 CURVE SMOOTH",
"746 149 LINE SMOOTH",
"784.667 71.667 OFFCURVE",
"842.333 22 OFFCURVE",
"897 22 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"114 343 OFFCURVE",
"96 364.333 OFFCURVE",
"96 387 CURVE SMOOTH",
"96 409.667 OFFCURVE",
"127.333 433 OFFCURVE",
"158 433 CURVE SMOOTH",
"190 433 OFFCURVE",
"224.667 405.667 OFFCURVE",
"238 367 CURVE",
"208.667 351 OFFCURVE",
"174 343 OFFCURVE",
"134 343 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */\01289 33 2 15 8 61 11 2 1 15 62 1 10 9 83 1 12 10 84 1 13 12 17 1 2 13 18 1 3 2 7 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 71 values pushed */\0120 9 1 10 1 9 10 112 0 10 12 1 10 12 110 0 4 0 14 8 4 14 99 0 11 0 8 15 11 8 99 17 1 15 0 1 9 15 1 99 0 2 0 3 2 3 96 7 1 5 5 0 89 6 1 0 0 24 75 0 12 12 13 91 16 1 13 13 26 13 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 71 values pushed */\0120 9 1 10 1 9 10 112 0 10 12 1 10 12 110 0 4 0 14 8 4 14 99 0 11 0 8 15 11 8 99 17 1 15 0 1 9 15 1 99 0 2 0 3 2 3 96 7 1 5 5 0 89 6 1 0 0 25 75 0 12 12 13 91 16 1 13 13 26 13 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 69 values pushed */\0120 9 1 10 1 9 10 112 0 10 12 1 10 12 110 0 4 0 14 8 4 14 99 0 11 0 8 15 11 8 99 17 1 15 0 1 9 15 1 99 0 12 16 1 13 2 12 13 99 0 2 0 3 2 3 96 7 1 5 5 0 89 6 1 0 0 25 5 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 34 values pushed */\01288 88 45 45 88 98 88 97 93 91 45 87 45 86 81 79 74 72 66 64 59 57 38 17 17 24 39 37 35 39 16 18 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 999;
}
);
note = uni09300942;
},
{
glyphname = "rra-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"221 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"241 609 LINE",
"289 569 OFFCURVE",
"321 511.667 OFFCURVE",
"321 465 CURVE SMOOTH",
"321 430.333 OFFCURVE",
"298.333 398.333 OFFCURVE",
"265 381 CURVE",
"235.667 454.333 OFFCURVE",
"186 505 OFFCURVE",
"134 505 CURVE SMOOTH",
"82 505 OFFCURVE",
"39 469.333 OFFCURVE",
"39 428 CURVE SMOOTH",
"39 398.667 OFFCURVE",
"55.167 360.667 OFFCURVE",
"87.5 314 CURVE SMOOTH",
"152.167 220.667 OFFCURVE",
"252.333 120 OFFCURVE",
"327 56 CURVE SMOOTH",
"421 -26 OFFCURVE",
"498 -67 OFFCURVE",
"558 -67 CURVE SMOOTH",
"592.667 -67 OFFCURVE",
"622.333 -53.333 OFFCURVE",
"641 -32 CURVE",
"564 20 LINE",
"553.333 1.333 OFFCURVE",
"532.333 -11 OFFCURVE",
"507 -11 CURVE SMOOTH",
"427 -11 OFFCURVE",
"298.333 96 OFFCURVE",
"161 272 CURVE",
"171 270 OFFCURVE",
"181.667 269 OFFCURVE",
"193 269 CURVE SMOOTH",
"221 269 OFFCURVE",
"249.5 275.167 OFFCURVE",
"278.5 287.5 CURVE SMOOTH",
"336.5 312.167 OFFCURVE",
"380 360 OFFCURVE",
"380 420 CURVE SMOOTH",
"380 472 OFFCURVE",
"350 541 OFFCURVE",
"290 609 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"442 609 LINE",
"442 689 LINE",
"266 689 LINE",
"336 609 LINE"
);
},
{
closed = 1;
nodes = (
"190 433 OFFCURVE",
"224.667 405.667 OFFCURVE",
"238 367 CURVE",
"208.667 351 OFFCURVE",
"174 343 OFFCURVE",
"134 343 CURVE SMOOTH",
"114 343 OFFCURVE",
"96 364.333 OFFCURVE",
"96 387 CURVE SMOOTH",
"96 409.667 OFFCURVE",
"127.333 433 OFFCURVE",
"158 433 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"135 122 LINE",
"61 50 LINE",
"135 -22 LINE",
"206 50 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */\01252 31 2 8 9 9 1 0 8 59 57 15 3 1 0 58 16 2 2 1 4 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 37 values pushed */\0120 3 10 1 9 8 3 9 99 0 8 0 0 1 8 0 99 0 1 0 2 1 2 95 6 1 4 4 5 89 7 1 5 5 24 4 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 37 values pushed */\0120 3 10 1 9 8 3 9 99 0 8 0 0 1 8 0 99 0 1 0 2 1 2 95 6 1 4 4 5 89 7 1 5 5 25 4 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 18 values pushed */\01245 45 45 55 45 54 37 17 17 17 24 39 37 35 38 11 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 429;
}
);
note = uni0931;
unicode = 0931;
},
{
glyphname = "rr-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"434 609 LINE",
"434 689 LINE"
);
},
{
closed = 1;
nodes = (
"324.667 311 OFFCURVE",
"392 337 OFFCURVE",
"448 385 CURVE",
"393 449 LINE",
"335.667 401 OFFCURVE",
"264.667 374 OFFCURVE",
"194 374 CURVE SMOOTH",
"130 374 OFFCURVE",
"68.667 396.333 OFFCURVE",
"30 435 CURVE",
"14 413 LINE",
"76.667 346.333 OFFCURVE",
"164.667 311 OFFCURVE",
"258 311 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */\01214 13 7 6 4 2 1 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 19 values pushed */\0120 2 4 1 3 2 3 95 0 1 1 0 89 0 0 0 24 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 19 values pushed */\0120 2 4 1 3 2 3 95 0 1 1 0 89 0 0 0 25 1 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 12 values pushed */\0124 4 4 17 4 16 38 17 16 5 6 23 \012CALL[ ]	/* CallFunction */";
};
width = 420;
}
);
note = uni0931094D;
},
{
glyphname = "la-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"550 609 LINE",
"550 415 LINE",
"506 457.667 OFFCURVE",
"461.333 482 OFFCURVE",
"432 482 CURVE SMOOTH",
"386.667 482 OFFCURVE",
"343.667 443.333 OFFCURVE",
"329 390 CURVE",
"287.667 451.333 OFFCURVE",
"229.667 489 OFFCURVE",
"183 489 CURVE SMOOTH",
"126.387 489 OFFCURVE",
"56 384.204 OFFCURVE",
"56 323 CURVE SMOOTH",
"56 274.333 OFFCURVE",
"74.667 221.333 OFFCURVE",
"112 164 CURVE SMOOTH",
"186.667 49.333 OFFCURVE",
"309 -40 OFFCURVE",
"409 -40 CURVE SMOOTH",
"438.333 -40 OFFCURVE",
"462.333 -30.333 OFFCURVE",
"481 -11 CURVE",
"430 45 LINE",
"411.333 26.333 OFFCURVE",
"384.333 15 OFFCURVE",
"359 15 CURVE SMOOTH",
"329 15 OFFCURVE",
"295.833 28.667 OFFCURVE",
"259.5 56 CURVE SMOOTH",
"186.833 110.667 OFFCURVE",
"128 198.667 OFFCURVE",
"128 264 CURVE SMOOTH",
"128 336.526 OFFCURVE",
"174.015 416 OFFCURVE",
"233 416 CURVE SMOOTH",
"261 416 OFFCURVE",
"292.667 390.333 OFFCURVE",
"314 353 CURVE",
"313.333 347 OFFCURVE",
"312 336.167 OFFCURVE",
"310 320.5 CURVE SMOOTH",
"308 304.833 OFFCURVE",
"307 290.333 OFFCURVE",
"307 277 CURVE",
"388 239 LINE",
"388 357.667 OFFCURVE",
"426.333 420 OFFCURVE",
"481 420 CURVE SMOOTH",
"501 420 OFFCURVE",
"526 402.333 OFFCURVE",
"550 369 CURVE",
"550 168 LINE SMOOTH",
"550 140.667 OFFCURVE",
"569 108.833 OFFCURVE",
"607 72.5 CURVE SMOOTH",
"683 -0.167 OFFCURVE",
"802.333 -61 OFFCURVE",
"877 -61 CURVE SMOOTH",
"900.333 -61 OFFCURVE",
"921.667 -50.667 OFFCURVE",
"941 -30 CURVE",
"867 17 LINE",
"852.333 -3 OFFCURVE",
"834.667 -13 OFFCURVE",
"814 -13 CURVE SMOOTH",
"762.809 -13 OFFCURVE",
"633 59.544 OFFCURVE",
"633 111 CURVE SMOOTH",
"633 609 LINE",
"553 689 LINE"
);
},
{
closed = 1;
nodes = (
"598 689 LINE",
"679 609 LINE",
"749 609 LINE",
"749 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */\01261 55 41 27 24 23 17 9 8 5 3 42 1 1 5 10 1 6 1 3 74 2 1 9 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 38 values pushed */\0128 1 7 4 1 3 5 7 3 99 0 5 0 6 2 5 6 99 0 1 0 2 1 2 95 11 1 9 9 0 89 10 1 0 0 24 9 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 38 values pushed */\0128 1 7 4 1 3 5 7 3 99 0 5 0 6 2 5 6 99 0 1 0 2 1 2 95 11 1 9 9 0 89 10 1 0 0 25 9 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 43 values pushed */\0120 7 8 3 7 87 0 8 4 1 3 5 8 3 99 0 5 0 6 2 5 6 99 0 1 0 2 1 2 95 11 1 9 9 0 89 10 1 0 0 25 9 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 18 values pushed */\01267 66 65 64 63 62 36 38 36 38 40 38 35 37 16 12 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 735;
}
);
note = uni0932;
unicode = 0932;
},
{
glyphname = "l-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"537 609 LINE",
"537 689 LINE",
"-14 689 LINE",
"-14 609 LINE"
);
},
{
closed = 1;
nodes = (
"126.387 489 OFFCURVE",
"56 384.204 OFFCURVE",
"56 323 CURVE SMOOTH",
"56 274.333 OFFCURVE",
"74.667 221.333 OFFCURVE",
"112 164 CURVE SMOOTH",
"186.667 49.333 OFFCURVE",
"309 -40 OFFCURVE",
"409 -40 CURVE SMOOTH",
"438.333 -40 OFFCURVE",
"462.333 -30.333 OFFCURVE",
"481 -11 CURVE",
"418 45 LINE",
"404.667 26.333 OFFCURVE",
"380.333 15 OFFCURVE",
"359 15 CURVE SMOOTH",
"329 15 OFFCURVE",
"295.833 28.667 OFFCURVE",
"259.5 56 CURVE SMOOTH",
"186.833 110.667 OFFCURVE",
"128 198.667 OFFCURVE",
"128 264 CURVE SMOOTH",
"128 336.526 OFFCURVE",
"174.015 416 OFFCURVE",
"233 416 CURVE SMOOTH",
"261 416 OFFCURVE",
"292.667 390.333 OFFCURVE",
"314 353 CURVE",
"313.333 347 OFFCURVE",
"312 336.167 OFFCURVE",
"310 320.5 CURVE SMOOTH",
"308 304.833 OFFCURVE",
"307 290.333 OFFCURVE",
"307 277 CURVE",
"388 239 LINE",
"388 267 LINE SMOOTH",
"388 326.571 OFFCURVE",
"435.42 420 OFFCURVE",
"481 420 CURVE SMOOTH",
"501 420 OFFCURVE",
"526 402.333 OFFCURVE",
"550 369 CURVE",
"550 415 LINE",
"506 457.667 OFFCURVE",
"461.333 482 OFFCURVE",
"432 482 CURVE SMOOTH",
"386.667 482 OFFCURVE",
"343.667 443.333 OFFCURVE",
"329 390 CURVE",
"287.667 451.333 OFFCURVE",
"229.667 489 OFFCURVE",
"183 489 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */\01239 25 22 21 13 12 6 7 5 3 40 1 6 5 2 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 29 values pushed */\0128 7 2 2 4 1 3 5 2 3 99 0 5 0 6 5 6 95 0 0 0 1 89 0 1 1 24 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 29 values pushed */\0128 7 2 2 4 1 3 5 2 3 99 0 5 0 6 5 6 95 0 0 0 1 89 0 1 1 25 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 36 values pushed */\0120 2 7 3 7 2 3 112 8 1 7 4 1 3 5 7 3 99 0 5 0 6 5 6 95 0 0 0 1 89 0 1 1 25 0 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 16 values pushed */\0124 4 4 50 4 49 36 38 42 37 37 17 16 9 6 27 \012CALL[ ]	/* CallFunction */";
};
width = 523;
}
);
note = uni0932094D;
},
{
glyphname = "lla-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"560 609 LINE",
"480 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"478 609 LINE",
"478 478 LINE",
"432.667 456.667 OFFCURVE",
"393.667 404.333 OFFCURVE",
"375 339 CURVE",
"333.667 424.333 OFFCURVE",
"270.667 478 OFFCURVE",
"216 478 CURVE SMOOTH",
"186.667 478 OFFCURVE",
"160 468.667 OFFCURVE",
"136 450 CURVE SMOOTH",
"88 412.667 OFFCURVE",
"58 347.667 OFFCURVE",
"58 277 CURVE SMOOTH",
"58 238.333 OFFCURVE",
"68.5 198.333 OFFCURVE",
"89.5 157 CURVE SMOOTH",
"131.5 74.333 OFFCURVE",
"203 13 OFFCURVE",
"267 13 CURVE SMOOTH",
"328.333 13 OFFCURVE",
"388.333 82 OFFCURVE",
"411 174 CURVE",
"448.333 72.667 OFFCURVE",
"513.667 4 OFFCURVE",
"575 4 CURVE SMOOTH",
"601.667 4 OFFCURVE",
"625.333 13 OFFCURVE",
"646 31 CURVE SMOOTH",
"687.333 67 OFFCURVE",
"713 132.667 OFFCURVE",
"713 214 CURVE SMOOTH",
"713 251.333 OFFCURVE",
"705.833 288.5 OFFCURVE",
"691.5 325.5 CURVE SMOOTH",
"662.833 399.5 OFFCURVE",
"613.333 460 OFFCURVE",
"560 480 CURVE"
);
},
{
closed = 1;
nodes = (
"782 689 LINE",
"527 689 LINE",
"606 609 LINE",
"782 609 LINE"
);
},
{
closed = 1;
nodes = (
"497 78 OFFCURVE",
"449.667 134 OFFCURVE",
"427 218 CURVE",
"440.333 282 OFFCURVE",
"459 333.833 OFFCURVE",
"483 373.5 CURVE SMOOTH",
"507 413.167 OFFCURVE",
"531.667 433 OFFCURVE",
"557 433 CURVE SMOOTH",
"608.789 433 OFFCURVE",
"654 345.261 OFFCURVE",
"654 277 CURVE SMOOTH",
"654 196.724 OFFCURVE",
"596.927 78 OFFCURVE",
"541 78 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"170.968 71 OFFCURVE",
"130 151.956 OFFCURVE",
"130 222 CURVE SMOOTH",
"130 293.565 OFFCURVE",
"200.005 412 OFFCURVE",
"262 412 CURVE SMOOTH",
"295.333 412 OFFCURVE",
"332.333 367.333 OFFCURVE",
"359 298 CURVE",
"345 220.667 OFFCURVE",
"326 163.5 OFFCURVE",
"302 126.5 CURVE SMOOTH",
"278 89.5 OFFCURVE",
"252.333 71 OFFCURVE",
"225 71 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */\01233 1 2 3 54 48 24 10 4 8 9 2 74 32 1 3 27 1 2 2 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01212 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 56 values pushed */\0120 7 2 9 2 7 9 112 0 2 0 9 8 2 9 99 5 1 3 3 4 89 11 6 2 4 4 24 75 13 10 12 3 8 8 1 91 0 1 1 26 75 13 10 12 3 8 8 0 91 0 0 0 26 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 44 values pushed */\0120 7 2 9 2 7 9 112 0 2 0 9 8 2 9 99 5 1 3 3 4 89 11 6 2 4 4 24 75 13 10 12 3 8 8 0 91 1 1 0 0 26 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 56 values pushed */\0120 7 2 9 2 7 9 112 0 2 0 9 8 2 9 99 5 1 3 3 4 89 11 6 2 4 4 24 75 13 10 12 3 8 8 1 91 0 1 1 26 75 13 10 12 3 8 8 0 91 0 0 0 26 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 56 values pushed */\0120 7 2 9 2 7 9 112 0 2 0 9 8 2 9 99 5 1 3 3 4 89 11 6 2 4 4 25 75 13 10 12 3 8 8 1 91 0 1 1 26 75 13 10 12 3 8 8 0 91 0 0 0 26 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01236 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 52 values pushed */\0120 7 2 9 2 7 9 112 0 2 0 9 8 2 9 99 5 1 3 3 4 89 11 6 2 4 4 25 75 13 1 10 10 1 91 0 1 1 26 75 12 1 8 8 0 91 0 0 0 26 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 50 values pushed */\0120 7 2 9 2 7 9 112 0 2 0 9 8 2 9 99 13 1 10 0 1 0 10 1 99 5 1 3 3 4 89 11 6 2 4 4 25 75 12 1 8 8 0 91 0 0 0 26 0 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 31 values pushed */\01252 52 38 38 34 34 52 65 52 64 58 56 38 51 38 50 46 44 34 37 34 37 20 17 22 38 36 38 14 6 26 \012CALL[ ]	/* CallFunction */";
};
width = 767;
}
);
note = uni0933;
unicode = 0933;
},
{
glyphname = "ll-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"700 609 LINE",
"700 689 LINE"
);
},
{
closed = 1;
nodes = (
"328.333 13 OFFCURVE",
"388.333 82 OFFCURVE",
"411 174 CURVE",
"448.333 72.667 OFFCURVE",
"513.667 4 OFFCURVE",
"575 4 CURVE SMOOTH",
"601.667 4 OFFCURVE",
"625.333 13 OFFCURVE",
"646 31 CURVE SMOOTH",
"687.333 67 OFFCURVE",
"713 132.667 OFFCURVE",
"713 214 CURVE SMOOTH",
"713 257.333 OFFCURVE",
"703.5 300.333 OFFCURVE",
"684.5 343 CURVE SMOOTH",
"646.5 428.333 OFFCURVE",
"582.333 488 OFFCURVE",
"521 488 CURVE SMOOTH",
"459.667 488 OFFCURVE",
"400.333 427 OFFCURVE",
"375 339 CURVE",
"333.667 424.333 OFFCURVE",
"270.667 478 OFFCURVE",
"216 478 CURVE SMOOTH",
"186.667 478 OFFCURVE",
"160 468.667 OFFCURVE",
"136 450 CURVE SMOOTH",
"88 412.667 OFFCURVE",
"58 347.667 OFFCURVE",
"58 277 CURVE SMOOTH",
"58 238.333 OFFCURVE",
"68.5 198.333 OFFCURVE",
"89.5 157 CURVE SMOOTH",
"131.5 74.333 OFFCURVE",
"203 13 OFFCURVE",
"267 13 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"497 78 OFFCURVE",
"449.667 134 OFFCURVE",
"427 218 CURVE",
"440.333 282 OFFCURVE",
"459 333.833 OFFCURVE",
"483 373.5 CURVE SMOOTH",
"507 413.167 OFFCURVE",
"531.667 433 OFFCURVE",
"557 433 CURVE SMOOTH",
"608.789 433 OFFCURVE",
"654 345.261 OFFCURVE",
"654 277 CURVE SMOOTH",
"654 196.724 OFFCURVE",
"596.927 78 OFFCURVE",
"541 78 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"170.968 71 OFFCURVE",
"130 151.956 OFFCURVE",
"130 222 CURVE SMOOTH",
"130 293.565 OFFCURVE",
"200.005 412 OFFCURVE",
"262 412 CURVE SMOOTH",
"295.333 412 OFFCURVE",
"332.333 367.333 OFFCURVE",
"359 298 CURVE",
"345 220.667 OFFCURVE",
"326 163.5 OFFCURVE",
"302 126.5 CURVE SMOOTH",
"278 89.5 OFFCURVE",
"252.333 71 OFFCURVE",
"225 71 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */\01248 42 28 14 4 7 8 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01212 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 54 values pushed */\0120 3 0 6 8 3 6 99 0 2 0 8 7 2 8 99 0 1 1 0 89 0 0 0 24 75 12 9 11 3 7 7 5 91 10 1 5 5 26 75 12 9 11 3 7 7 4 91 0 4 4 26 4 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 42 values pushed */\0120 3 0 6 8 3 6 99 0 2 0 8 7 2 8 99 0 1 1 0 89 0 0 0 24 75 12 9 11 3 7 7 4 91 10 5 2 4 4 26 4 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 54 values pushed */\0120 3 0 6 8 3 6 99 0 2 0 8 7 2 8 99 0 1 1 0 89 0 0 0 24 75 12 9 11 3 7 7 5 91 10 1 5 5 26 75 12 9 11 3 7 7 4 91 0 4 4 26 4 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 54 values pushed */\0120 3 0 6 8 3 6 99 0 2 0 8 7 2 8 99 0 1 1 0 89 0 0 0 25 75 12 9 11 3 7 7 5 91 10 1 5 5 26 75 12 9 11 3 7 7 4 91 0 4 4 26 4 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01236 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 50 values pushed */\0120 3 0 6 8 3 6 99 0 2 0 8 7 2 8 99 0 1 1 0 89 0 0 0 25 75 12 1 9 9 5 91 10 1 5 5 26 75 11 1 7 7 4 91 0 4 4 26 4 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 48 values pushed */\0120 3 0 6 8 3 6 99 0 2 0 8 7 2 8 99 12 1 9 10 1 5 4 9 5 99 0 1 1 0 89 0 0 0 25 75 11 1 7 7 4 91 0 4 4 26 4 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 30 values pushed */\01246 46 32 32 4 4 46 59 46 58 52 50 32 45 32 44 40 38 4 31 4 30 38 36 39 17 16 13 6 25 \012CALL[ ]	/* CallFunction */";
};
width = 686;
}
);
note = uni0933094D;
},
{
glyphname = "llla-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"560 609 LINE",
"480 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"478 609 LINE",
"478 478 LINE",
"432.667 456.667 OFFCURVE",
"393.667 404.333 OFFCURVE",
"375 339 CURVE",
"333.667 424.333 OFFCURVE",
"270.667 478 OFFCURVE",
"216 478 CURVE SMOOTH",
"186.667 478 OFFCURVE",
"160 468.667 OFFCURVE",
"136 450 CURVE SMOOTH",
"88 412.667 OFFCURVE",
"58 347.667 OFFCURVE",
"58 277 CURVE SMOOTH",
"58 238.333 OFFCURVE",
"68.5 198.333 OFFCURVE",
"89.5 157 CURVE SMOOTH",
"131.5 74.333 OFFCURVE",
"203 13 OFFCURVE",
"267 13 CURVE SMOOTH",
"328.333 13 OFFCURVE",
"388.333 82 OFFCURVE",
"411 174 CURVE",
"448.333 72.667 OFFCURVE",
"513.667 4 OFFCURVE",
"575 4 CURVE SMOOTH",
"601.667 4 OFFCURVE",
"625.333 13 OFFCURVE",
"646 31 CURVE SMOOTH",
"687.333 67 OFFCURVE",
"713 132.667 OFFCURVE",
"713 214 CURVE SMOOTH",
"713 251.333 OFFCURVE",
"705.833 288.5 OFFCURVE",
"691.5 325.5 CURVE SMOOTH",
"662.833 399.5 OFFCURVE",
"613.333 460 OFFCURVE",
"560 480 CURVE"
);
},
{
closed = 1;
nodes = (
"782 689 LINE",
"527 689 LINE",
"606 609 LINE",
"782 609 LINE"
);
},
{
closed = 1;
nodes = (
"497 78 OFFCURVE",
"449.667 134 OFFCURVE",
"427 218 CURVE",
"440.333 282 OFFCURVE",
"459 333.833 OFFCURVE",
"483 373.5 CURVE SMOOTH",
"507 413.167 OFFCURVE",
"531.667 433 OFFCURVE",
"557 433 CURVE SMOOTH",
"608.789 433 OFFCURVE",
"654 345.261 OFFCURVE",
"654 277 CURVE SMOOTH",
"654 196.724 OFFCURVE",
"596.927 78 OFFCURVE",
"541 78 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"170.968 71 OFFCURVE",
"130 151.956 OFFCURVE",
"130 222 CURVE SMOOTH",
"130 293.565 OFFCURVE",
"200.005 412 OFFCURVE",
"262 412 CURVE SMOOTH",
"295.333 412 OFFCURVE",
"332.333 367.333 OFFCURVE",
"359 298 CURVE",
"345 220.667 OFFCURVE",
"326 163.5 OFFCURVE",
"302 126.5 CURVE SMOOTH",
"278 89.5 OFFCURVE",
"252.333 71 OFFCURVE",
"225 71 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"416 0 LINE",
"343 -72 LINE",
"416 -145 LINE",
"488 -72 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */\01233 1 2 3 54 48 24 10 4 8 9 2 74 32 1 3 27 1 2 2 73 69 68 67 3 0 71 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01212 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 56 values pushed */\0120 7 2 9 2 7 9 112 0 2 0 9 8 2 9 99 5 1 3 3 4 89 11 6 2 4 4 24 75 13 10 12 3 8 8 1 91 0 1 1 26 75 13 10 12 3 8 8 0 91 0 0 0 26 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 44 values pushed */\0120 7 2 9 2 7 9 112 0 2 0 9 8 2 9 99 5 1 3 3 4 89 11 6 2 4 4 24 75 13 10 12 3 8 8 0 91 1 1 0 0 26 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 56 values pushed */\0120 7 2 9 2 7 9 112 0 2 0 9 8 2 9 99 5 1 3 3 4 89 11 6 2 4 4 24 75 13 10 12 3 8 8 1 91 0 1 1 26 75 13 10 12 3 8 8 0 91 0 0 0 26 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 56 values pushed */\0120 7 2 9 2 7 9 112 0 2 0 9 8 2 9 99 5 1 3 3 4 89 11 6 2 4 4 25 75 13 10 12 3 8 8 1 91 0 1 1 26 75 13 10 12 3 8 8 0 91 0 0 0 26 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01236 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 52 values pushed */\0120 7 2 9 2 7 9 112 0 2 0 9 8 2 9 99 5 1 3 3 4 89 11 6 2 4 4 25 75 13 1 10 10 1 91 0 1 1 26 75 12 1 8 8 0 91 0 0 0 26 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 50 values pushed */\0120 7 2 9 2 7 9 112 0 2 0 9 8 2 9 99 13 1 10 0 1 0 10 1 99 5 1 3 3 4 89 11 6 2 4 4 25 75 12 1 8 8 0 91 0 0 0 26 0 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 31 values pushed */\01252 52 38 38 34 34 52 65 52 64 58 56 38 51 38 50 46 44 34 37 34 37 20 17 22 38 36 38 14 6 26 \012CALL[ ]	/* CallFunction */";
};
width = 767;
}
);
note = uni0934;
unicode = 0934;
},
{
glyphname = "lll-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"700 609 LINE",
"700 689 LINE"
);
},
{
closed = 1;
nodes = (
"328.333 13 OFFCURVE",
"388.333 82 OFFCURVE",
"411 174 CURVE",
"448.333 72.667 OFFCURVE",
"513.667 4 OFFCURVE",
"575 4 CURVE SMOOTH",
"601.667 4 OFFCURVE",
"625.333 13 OFFCURVE",
"646 31 CURVE SMOOTH",
"687.333 67 OFFCURVE",
"713 132.667 OFFCURVE",
"713 214 CURVE SMOOTH",
"713 257.333 OFFCURVE",
"703.5 300.333 OFFCURVE",
"684.5 343 CURVE SMOOTH",
"646.5 428.333 OFFCURVE",
"582.333 488 OFFCURVE",
"521 488 CURVE SMOOTH",
"459.667 488 OFFCURVE",
"400.333 427 OFFCURVE",
"375 339 CURVE",
"333.667 424.333 OFFCURVE",
"270.667 478 OFFCURVE",
"216 478 CURVE SMOOTH",
"186.667 478 OFFCURVE",
"160 468.667 OFFCURVE",
"136 450 CURVE SMOOTH",
"88 412.667 OFFCURVE",
"58 347.667 OFFCURVE",
"58 277 CURVE SMOOTH",
"58 238.333 OFFCURVE",
"68.5 198.333 OFFCURVE",
"89.5 157 CURVE SMOOTH",
"131.5 74.333 OFFCURVE",
"203 13 OFFCURVE",
"267 13 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"497 78 OFFCURVE",
"449.667 134 OFFCURVE",
"427 218 CURVE",
"440.333 282 OFFCURVE",
"459 333.833 OFFCURVE",
"483 373.5 CURVE SMOOTH",
"507 413.167 OFFCURVE",
"531.667 433 OFFCURVE",
"557 433 CURVE SMOOTH",
"608.789 433 OFFCURVE",
"654 345.261 OFFCURVE",
"654 277 CURVE SMOOTH",
"654 196.724 OFFCURVE",
"596.927 78 OFFCURVE",
"541 78 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"170.968 71 OFFCURVE",
"130 151.956 OFFCURVE",
"130 222 CURVE SMOOTH",
"130 293.565 OFFCURVE",
"200.005 412 OFFCURVE",
"262 412 CURVE SMOOTH",
"295.333 412 OFFCURVE",
"332.333 367.333 OFFCURVE",
"359 298 CURVE",
"345 220.667 OFFCURVE",
"326 163.5 OFFCURVE",
"302 126.5 CURVE SMOOTH",
"278 89.5 OFFCURVE",
"252.333 71 OFFCURVE",
"225 71 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"416 0 LINE",
"343 -72 LINE",
"416 -145 LINE",
"488 -72 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */\01248 42 28 14 4 7 8 1 74 63 62 61 3 4 71 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01212 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 54 values pushed */\0120 3 0 6 8 3 6 99 0 2 0 8 7 2 8 99 0 1 1 0 89 0 0 0 24 75 12 9 11 3 7 7 5 91 10 1 5 5 26 75 12 9 11 3 7 7 4 91 0 4 4 26 4 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 42 values pushed */\0120 3 0 6 8 3 6 99 0 2 0 8 7 2 8 99 0 1 1 0 89 0 0 0 24 75 12 9 11 3 7 7 4 91 10 5 2 4 4 26 4 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 54 values pushed */\0120 3 0 6 8 3 6 99 0 2 0 8 7 2 8 99 0 1 1 0 89 0 0 0 24 75 12 9 11 3 7 7 5 91 10 1 5 5 26 75 12 9 11 3 7 7 4 91 0 4 4 26 4 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 54 values pushed */\0120 3 0 6 8 3 6 99 0 2 0 8 7 2 8 99 0 1 1 0 89 0 0 0 25 75 12 9 11 3 7 7 5 91 10 1 5 5 26 75 12 9 11 3 7 7 4 91 0 4 4 26 4 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01236 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 50 values pushed */\0120 3 0 6 8 3 6 99 0 2 0 8 7 2 8 99 0 1 1 0 89 0 0 0 25 75 12 1 9 9 5 91 10 1 5 5 26 75 11 1 7 7 4 91 0 4 4 26 4 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 48 values pushed */\0120 3 0 6 8 3 6 99 0 2 0 8 7 2 8 99 12 1 9 10 1 5 4 9 5 99 0 1 1 0 89 0 0 0 25 75 11 1 7 7 4 91 0 4 4 26 4 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 30 values pushed */\01246 46 32 32 4 4 46 59 46 58 52 50 32 45 32 44 40 38 4 31 4 30 38 36 39 17 16 13 6 25 \012CALL[ ]	/* CallFunction */";
};
width = 686;
}
);
note = uni0934094D;
},
{
glyphname = "va-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"475 609 LINE",
"395 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"393 609 LINE",
"393 434 LINE",
"349 494 OFFCURVE",
"281.333 529 OFFCURVE",
"212 529 CURVE SMOOTH",
"145.502 529 OFFCURVE",
"43 454.306 OFFCURVE",
"43 391 CURVE SMOOTH",
"43 360.333 OFFCURVE",
"54.167 328.667 OFFCURVE",
"76.5 296 CURVE SMOOTH",
"121.167 230.667 OFFCURVE",
"199.333 182 OFFCURVE",
"278 182 CURVE SMOOTH",
"320.667 182 OFFCURVE",
"363.333 201.333 OFFCURVE",
"394 236 CURVE",
"394 165 LINE SMOOTH",
"394 140.333 OFFCURVE",
"412.667 109.833 OFFCURVE",
"450 73.5 CURVE SMOOTH",
"524.667 0.833 OFFCURVE",
"641.333 -61 OFFCURVE",
"720 -61 CURVE SMOOTH",
"742.667 -61 OFFCURVE",
"763.333 -50.667 OFFCURVE",
"782 -30 CURVE",
"709 17 LINE",
"695.667 -1.667 OFFCURVE",
"675.667 -13 OFFCURVE",
"657 -13 CURVE SMOOTH",
"605.134 -13 OFFCURVE",
"475 59.656 OFFCURVE",
"475 111 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"591 609 LINE",
"591 689 LINE",
"441 689 LINE",
"520 609 LINE"
);
},
{
closed = 1;
nodes = (
"319.667 466 OFFCURVE",
"363.667 435.667 OFFCURVE",
"393 389 CURVE",
"393 345 LINE",
"354.333 282.333 OFFCURVE",
"283.333 244 OFFCURVE",
"214 244 CURVE SMOOTH",
"164.667 244 OFFCURVE",
"113 286 OFFCURVE",
"113 330 CURVE SMOOTH",
"113 391.243 OFFCURVE",
"216.739 466 OFFCURVE",
"281 466 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 25 values pushed */\01249 48 30 3 8 9 16 1 2 8 8 1 0 2 9 1 1 0 4 74 0 1 4 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 37 values pushed */\0120 3 10 1 9 8 3 9 99 0 8 0 2 0 8 2 99 0 0 0 1 0 1 95 6 1 4 4 5 89 7 1 5 5 24 4 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 37 values pushed */\0120 3 10 1 9 8 3 9 99 0 8 0 2 0 8 2 99 0 0 0 1 0 1 95 6 1 4 4 5 89 7 1 5 5 25 4 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 18 values pushed */\01239 39 39 52 39 51 38 17 17 17 19 38 38 36 36 11 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 578;
}
);
note = uni0935;
unicode = 0935;
},
{
glyphname = "v-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"379 609 LINE",
"379 689 LINE",
"-14 689 LINE",
"-14 609 LINE"
);
},
{
closed = 1;
nodes = (
"145.502 529 OFFCURVE",
"43 454.306 OFFCURVE",
"43 391 CURVE SMOOTH",
"43 360.333 OFFCURVE",
"54.167 328.667 OFFCURVE",
"76.5 296 CURVE SMOOTH",
"121.167 230.667 OFFCURVE",
"199.333 182 OFFCURVE",
"278 182 CURVE SMOOTH",
"319.333 182 OFFCURVE",
"362.333 201.333 OFFCURVE",
"393 236 CURVE",
"393 345 LINE",
"354.333 282.333 OFFCURVE",
"283.333 244 OFFCURVE",
"214 244 CURVE SMOOTH",
"164.667 244 OFFCURVE",
"113 286 OFFCURVE",
"113 330 CURVE SMOOTH",
"113 391.243 OFFCURVE",
"216.739 466 OFFCURVE",
"281 466 CURVE SMOOTH",
"319.667 466 OFFCURVE",
"363.667 435.667 OFFCURVE",
"393 389 CURVE",
"393 434 LINE",
"349 494 OFFCURVE",
"281.333 529 OFFCURVE",
"212 529 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */\01220 7 6 3 3 2 21 1 4 3 2 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 27 values pushed */\0126 1 5 0 2 3 5 2 99 0 3 0 4 3 4 95 0 0 0 1 89 0 1 1 24 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 27 values pushed */\0126 1 5 0 2 3 5 2 99 0 3 0 4 3 4 95 0 0 0 1 89 0 1 1 25 0 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\0124 4 4 32 4 31 37 37 38 17 16 7 6 25 \012CALL[ ]	/* CallFunction */";
};
width = 365;
}
);
note = uni0935094D;
},
{
glyphname = "sha-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"118.871 706 OFFCURVE",
"54 635.263 OFFCURVE",
"54 565 CURVE SMOOTH",
"54 539 OFFCURVE",
"62.667 513.333 OFFCURVE",
"80 488 CURVE SMOOTH",
"114.667 437.333 OFFCURVE",
"172.333 402 OFFCURVE",
"219 402 CURVE SMOOTH",
"251 402 OFFCURVE",
"283 421 OFFCURVE",
"303 453 CURVE",
"308 451 LINE",
"297.333 365.667 OFFCURVE",
"253.667 295 OFFCURVE",
"199 267 CURVE",
"167 304.333 OFFCURVE",
"130 329 OFFCURVE",
"106 329 CURVE SMOOTH",
"79.333 329 OFFCURVE",
"56 309.667 OFFCURVE",
"56 283 CURVE SMOOTH",
"56 223.282 OFFCURVE",
"114.513 166 OFFCURVE",
"173 166 CURVE SMOOTH",
"185 166 OFFCURVE",
"197.667 169 OFFCURVE",
"211 175 CURVE",
"328 44 LINE SMOOTH",
"392 -28 OFFCURVE",
"446.333 -62 OFFCURVE",
"497 -62 CURVE SMOOTH",
"528.333 -62 OFFCURVE",
"553 -53 OFFCURVE",
"571 -35 CURVE",
"503 20 LINE",
"489.667 5.333 OFFCURVE",
"475 -2 OFFCURVE",
"459 -2 CURVE SMOOTH",
"427 -2 OFFCURVE",
"376.667 29 OFFCURVE",
"322 93 CURVE SMOOTH",
"241 191 LINE",
"325 239 OFFCURVE",
"380 339.333 OFFCURVE",
"380 450 CURVE SMOOTH",
"380 490.667 OFFCURVE",
"370.5 530.833 OFFCURVE",
"351.5 570.5 CURVE SMOOTH",
"313.5 649.833 OFFCURVE",
"248.333 706 OFFCURVE",
"187 706 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"638 609 LINE",
"561 689 LINE",
"356 689 LINE",
"422 609 LINE",
"557 609 LINE",
"557 166 LINE SMOOTH",
"557 140 OFFCURVE",
"575.833 108.833 OFFCURVE",
"613.5 72.5 CURVE SMOOTH",
"688.833 -0.167 OFFCURVE",
"805.667 -61 OFFCURVE",
"883 -61 CURVE SMOOTH",
"905.667 -61 OFFCURVE",
"926.667 -50.667 OFFCURVE",
"946 -30 CURVE",
"873 17 LINE",
"859.667 -3 OFFCURVE",
"839.667 -13 OFFCURVE",
"821 -13 CURVE SMOOTH",
"768.32 -13 OFFCURVE",
"638 59.451 OFFCURVE",
"638 111 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"754 609 LINE",
"754 689 LINE",
"607 689 LINE",
"684 609 LINE"
);
},
{
closed = 1;
nodes = (
"267.333 644 OFFCURVE",
"294 607.667 OFFCURVE",
"294 577 CURVE SMOOTH",
"294 519.869 OFFCURVE",
"233.433 456 OFFCURVE",
"180 456 CURVE SMOOTH",
"154.667 456 OFFCURVE",
"119 491.667 OFFCURVE",
"119 517 CURVE SMOOTH",
"119 577.281 OFFCURVE",
"178.049 644 OFFCURVE",
"238 644 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */\01234 1 4 12 31 6 2 2 3 55 12 2 0 2 56 13 2 1 6 4 74 47 1 8 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 62 values pushed */\0120 3 4 2 4 3 2 112 0 2 0 4 2 0 110 0 12 0 4 3 12 4 99 0 0 6 1 0 87 0 6 7 1 1 6 1 95 15 1 13 13 5 91 14 1 5 5 24 75 10 1 8 8 9 89 11 1 9 9 24 8 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01229 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 62 values pushed */\0120 3 4 2 4 3 2 112 0 2 0 4 2 0 110 0 12 0 4 3 12 4 99 0 0 6 1 0 87 0 6 7 1 1 6 1 95 15 1 13 13 5 91 14 1 5 5 25 75 10 1 8 8 9 89 11 1 9 9 25 8 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 60 values pushed */\0120 3 4 2 4 3 2 112 0 2 0 4 2 0 110 14 1 5 15 1 13 8 5 13 99 0 12 0 4 3 12 4 99 0 0 6 1 0 87 0 6 7 1 1 6 1 95 10 1 8 8 9 89 11 1 9 9 25 8 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 34 values pushed */\01271 71 0 0 71 84 71 83 78 76 70 69 68 67 66 65 64 63 59 57 53 51 0 46 0 45 40 37 36 35 41 16 6 25 \012CALL[ ]	/* CallFunction */";
};
width = 741;
}
);
note = uni0936;
unicode = 0936;
},
{
glyphname = "sh-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"118.871 706 OFFCURVE",
"54 635.263 OFFCURVE",
"54 565 CURVE SMOOTH",
"54 542.333 OFFCURVE",
"62.5 518.167 OFFCURVE",
"79.5 492.5 CURVE SMOOTH",
"113.5 441.167 OFFCURVE",
"169.667 402 OFFCURVE",
"219 402 CURVE SMOOTH",
"249.667 402 OFFCURVE",
"281.667 421.333 OFFCURVE",
"303 452 CURVE",
"308 449 LINE",
"294.667 363.667 OFFCURVE",
"253.667 293.667 OFFCURVE",
"199 267 CURVE",
"164.333 307 OFFCURVE",
"135.333 329 OFFCURVE",
"106 329 CURVE SMOOTH",
"78 329 OFFCURVE",
"56 308 OFFCURVE",
"56 276 CURVE SMOOTH",
"56 222.34 OFFCURVE",
"116.208 166 OFFCURVE",
"173 166 CURVE SMOOTH",
"185 166 OFFCURVE",
"197.667 169 OFFCURVE",
"211 175 CURVE",
"328 44 LINE SMOOTH",
"388 -26.667 OFFCURVE",
"444.333 -62 OFFCURVE",
"497 -62 CURVE SMOOTH",
"528.333 -62 OFFCURVE",
"553 -53 OFFCURVE",
"571 -35 CURVE",
"503 20 LINE",
"488.333 5.333 OFFCURVE",
"474 -2 OFFCURVE",
"460 -2 CURVE SMOOTH",
"425.333 -2 OFFCURVE",
"371.333 34.333 OFFCURVE",
"322 93 CURVE SMOOTH",
"241 191 LINE",
"325 239 OFFCURVE",
"380 339.333 OFFCURVE",
"380 450 CURVE SMOOTH",
"380 490.667 OFFCURVE",
"370.5 530.833 OFFCURVE",
"351.5 570.5 CURVE SMOOTH",
"313.5 649.833 OFFCURVE",
"248.333 706 OFFCURVE",
"187 706 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"458 609 LINE",
"458 689 LINE",
"331 689 LINE",
"393 609 LINE"
);
},
{
closed = 1;
nodes = (
"267.333 644 OFFCURVE",
"294 607.667 OFFCURVE",
"294 577 CURVE SMOOTH",
"294 519.869 OFFCURVE",
"233.433 456 OFFCURVE",
"180 456 CURVE SMOOTH",
"154.667 456 OFFCURVE",
"119 491.667 OFFCURVE",
"119 517 CURVE SMOOTH",
"119 577.281 OFFCURVE",
"178.049 644 OFFCURVE",
"238 644 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */\01233 1 4 8 30 6 2 2 3 12 1 0 2 13 1 1 0 4 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 53 values pushed */\0120 3 4 2 4 3 2 112 0 2 0 4 2 0 110 0 8 0 4 3 8 4 99 0 0 0 1 0 1 95 11 1 9 9 5 91 10 1 5 5 24 75 0 6 6 7 89 0 7 7 24 6 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01229 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 53 values pushed */\0120 3 4 2 4 3 2 112 0 2 0 4 2 0 110 0 8 0 4 3 8 4 99 0 0 0 1 0 1 95 11 1 9 9 5 91 10 1 5 5 25 75 0 6 6 7 89 0 7 7 25 6 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 51 values pushed */\0120 3 4 2 4 3 2 112 0 2 0 4 2 0 110 10 1 5 11 1 9 6 5 9 99 0 8 0 4 3 8 4 99 0 0 0 1 0 1 95 0 6 6 7 89 0 7 7 25 6 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 26 values pushed */\01250 50 0 0 50 63 50 62 57 55 49 48 47 46 0 45 0 44 40 37 35 35 41 12 6 25 \012CALL[ ]	/* CallFunction */";
};
width = 444;
}
);
note = uni0936094D;
},
{
glyphname = "ssa-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"713 17 LINE",
"698.333 -3 OFFCURVE",
"678.667 -13 OFFCURVE",
"660 -13 CURVE SMOOTH",
"607.514 -13 OFFCURVE",
"479 59.72 OFFCURVE",
"479 111 CURVE SMOOTH",
"479 609 LINE",
"398 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"61 609 LINE",
"61 404 LINE SMOOTH",
"61 382 OFFCURVE",
"72.833 357.167 OFFCURVE",
"96.5 329.5 CURVE SMOOTH",
"143.833 274.167 OFFCURVE",
"222 230 OFFCURVE",
"286 230 CURVE SMOOTH",
"320.667 230 OFFCURVE",
"364 250 OFFCURVE",
"396 282 CURVE",
"396 166 LINE SMOOTH",
"396 140 OFFCURVE",
"414.833 108.833 OFFCURVE",
"452.5 72.5 CURVE SMOOTH",
"527.833 -0.167 OFFCURVE",
"645.667 -61 OFFCURVE",
"723 -61 CURVE SMOOTH",
"744.333 -61 OFFCURVE",
"765.333 -50.667 OFFCURVE",
"786 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"524 609 LINE",
"594 609 LINE",
"594 689 LINE",
"446 689 LINE"
);
},
{
closed = 1;
nodes = (
"143 609 LINE",
"396 609 LINE",
"396 392 LINE",
"381 373 LINE",
"176 592 LINE",
"143 590 LINE"
);
},
{
closed = 1;
nodes = (
"183.333 285 OFFCURVE",
"143 317.667 OFFCURVE",
"143 359 CURVE SMOOTH",
"143 571 LINE",
"340 360 LINE",
"364 354 LINE",
"321.333 310 OFFCURVE",
"274 285 OFFCURVE",
"230 285 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */\01242 40 36 35 4 9 7 7 1 1 9 27 1 4 1 3 74 19 1 2 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 40 values pushed */\0120 7 2 9 2 7 9 112 12 1 9 0 1 4 9 1 99 0 4 0 0 4 0 95 11 8 10 6 4 2 2 3 89 5 1 3 3 24 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 40 values pushed */\0120 7 2 9 2 7 9 112 12 1 9 0 1 4 9 1 99 0 4 0 0 4 0 95 11 8 10 6 4 2 2 3 89 5 1 3 3 25 2 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 29 values pushed */\01238 38 32 32 28 28 38 46 38 45 32 37 32 37 34 33 28 31 28 31 20 37 17 20 38 33 13 6 26 \012CALL[ ]	/* CallFunction */";
};
width = 581;
}
);
note = uni0937;
unicode = 0937;
},
{
glyphname = "ss-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"382 609 LINE",
"382 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"61 609 LINE",
"61 404 LINE SMOOTH",
"61 382 OFFCURVE",
"72.833 357.167 OFFCURVE",
"96.5 329.5 CURVE SMOOTH",
"143.833 274.167 OFFCURVE",
"222 230 OFFCURVE",
"286 230 CURVE SMOOTH",
"320.667 230 OFFCURVE",
"364 250 OFFCURVE",
"396 282 CURVE",
"396 394 LINE",
"384 378 LINE",
"159 609 LINE"
);
},
{
closed = 1;
nodes = (
"143 558 LINE",
"354 345 LINE",
"315.333 307.667 OFFCURVE",
"268.667 285 OFFCURVE",
"230 285 CURVE SMOOTH",
"183.333 285 OFFCURVE",
"143 317.667 OFFCURVE",
"143 359 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */\01223 22 3 2 4 4 0 4 1 1 4 2 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 19 values pushed */\0120 4 0 1 4 1 95 2 1 0 0 3 89 0 3 3 24 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 19 values pushed */\0120 4 0 1 4 1 95 2 1 0 0 3 89 0 3 3 25 0 76 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01235 17 20 37 16 5 6 25 \012CALL[ ]	/* CallFunction */";
};
width = 368;
}
);
note = uni0937094D;
},
{
glyphname = "sa-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"834 17 LINE",
"818 -3 OFFCURVE",
"800.333 -13 OFFCURVE",
"781 -13 CURVE SMOOTH",
"728.514 -13 OFFCURVE",
"600 59.72 OFFCURVE",
"600 111 CURVE SMOOTH",
"600 609 LINE",
"519 689 LINE",
"251 689 LINE",
"325 609 LINE",
"517 609 LINE",
"517 384 LINE",
"483.667 368 OFFCURVE",
"450.333 360 OFFCURVE",
"417 360 CURVE SMOOTH",
"390.333 360 OFFCURVE",
"367.667 366 OFFCURVE",
"349 378 CURVE",
"355.667 396.667 OFFCURVE",
"359 414.333 OFFCURVE",
"359 431 CURVE",
"357.667 489.667 OFFCURVE",
"324.333 559.667 OFFCURVE",
"279 609 CURVE SMOOTH",
"205 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"229 609 LINE",
"271.667 566.333 OFFCURVE",
"297 513.667 OFFCURVE",
"297 467 CURVE SMOOTH",
"297 433.667 OFFCURVE",
"279.333 403.333 OFFCURVE",
"250 386 CURVE",
"224.667 455.333 OFFCURVE",
"175.667 501 OFFCURVE",
"129 501 CURVE SMOOTH",
"82.333 501 OFFCURVE",
"40 471 OFFCURVE",
"40 431 CURVE SMOOTH",
"40 390.333 OFFCURVE",
"66.167 332.333 OFFCURVE",
"118.5 257 CURVE SMOOTH",
"223.167 106.333 OFFCURVE",
"377.333 -34 OFFCURVE",
"456 -34 CURVE SMOOTH",
"486.667 -34 OFFCURVE",
"518.333 -20.333 OFFCURVE",
"537 1 CURVE",
"470 55 LINE",
"454.667 34.333 OFFCURVE",
"439 24 OFFCURVE",
"423 24 CURVE SMOOTH",
"392.333 24 OFFCURVE",
"353.167 46 OFFCURVE",
"305.5 90 CURVE SMOOTH",
"257.833 134 OFFCURVE",
"206.667 195 OFFCURVE",
"152 273 CURVE",
"158 272.333 OFFCURVE",
"166.667 272 OFFCURVE",
"178 272 CURVE SMOOTH",
"240.667 272 OFFCURVE",
"296.667 296 OFFCURVE",
"334 348 CURVE",
"379.333 316.667 OFFCURVE",
"422.667 301 OFFCURVE",
"464 301 CURVE SMOOTH",
"480 301 OFFCURVE",
"497.667 303.667 OFFCURVE",
"517 309 CURVE",
"517 168 LINE SMOOTH",
"517 141.333 OFFCURVE",
"535.833 109.833 OFFCURVE",
"573.5 73.5 CURVE SMOOTH",
"648.833 0.833 OFFCURVE",
"766.667 -61 OFFCURVE",
"844 -61 CURVE SMOOTH",
"867.333 -61 OFFCURVE",
"888.333 -50.667 OFFCURVE",
"907 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"645 609 LINE",
"715 609 LINE",
"715 689 LINE",
"565 689 LINE"
);
},
{
closed = 1;
nodes = (
"111.667 346 OFFCURVE",
"97 367.333 OFFCURVE",
"97 390 CURVE SMOOTH",
"97 411.333 OFFCURVE",
"126.667 431 OFFCURVE",
"156 431 CURVE SMOOTH",
"184 431 OFFCURVE",
"215.333 403.333 OFFCURVE",
"226 370 CURVE",
"196 354 OFFCURVE",
"163.667 346 OFFCURVE",
"129 346 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */\01272 54 50 35 4 8 14 11 1 15 8 7 1 1 15 21 1 3 2 66 22 2 11 3 5 74 59 1 6 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 56 values pushed */\0120 5 0 14 8 5 14 99 0 8 0 1 2 8 1 99 17 1 15 0 2 3 15 2 99 0 3 0 4 0 3 4 99 0 11 0 0 11 0 95 16 13 9 3 6 6 7 89 12 10 2 7 7 24 6 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 56 values pushed */\0120 5 0 14 8 5 14 99 0 8 0 1 2 8 1 99 17 1 15 0 2 3 15 2 99 0 3 0 4 0 3 4 99 0 11 0 0 11 0 95 16 13 9 3 6 6 7 89 12 10 2 7 7 25 6 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 34 values pushed */\01271 71 67 67 71 81 71 80 76 74 67 70 67 70 69 68 65 63 58 57 56 55 39 17 24 37 36 35 35 37 33 18 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 702;
}
);
note = uni0938;
unicode = 0938;
},
{
glyphname = "s-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"205 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"229 609 LINE",
"271.667 566.333 OFFCURVE",
"297 513.667 OFFCURVE",
"297 467 CURVE SMOOTH",
"297 433.667 OFFCURVE",
"279.333 403.333 OFFCURVE",
"250 386 CURVE",
"224.667 455.333 OFFCURVE",
"175.667 501 OFFCURVE",
"129 501 CURVE SMOOTH",
"82.333 501 OFFCURVE",
"40 471 OFFCURVE",
"40 431 CURVE SMOOTH",
"40 390.333 OFFCURVE",
"66.167 332.333 OFFCURVE",
"118.5 257 CURVE SMOOTH",
"223.167 106.333 OFFCURVE",
"377.333 -34 OFFCURVE",
"456 -34 CURVE SMOOTH",
"486.667 -34 OFFCURVE",
"518.333 -20.333 OFFCURVE",
"537 1 CURVE",
"470 55 LINE",
"454.667 34.333 OFFCURVE",
"439 24 OFFCURVE",
"423 24 CURVE SMOOTH",
"392.333 24 OFFCURVE",
"353.167 46 OFFCURVE",
"305.5 90 CURVE SMOOTH",
"257.833 134 OFFCURVE",
"206.667 195 OFFCURVE",
"152 273 CURVE",
"158 272.333 OFFCURVE",
"166.667 272 OFFCURVE",
"178 272 CURVE SMOOTH",
"240.667 272 OFFCURVE",
"296.667 296 OFFCURVE",
"334 348 CURVE",
"376 318 OFFCURVE",
"420.333 303 OFFCURVE",
"467 303 CURVE SMOOTH",
"478.333 303 OFFCURVE",
"492 305.333 OFFCURVE",
"508 310 CURVE",
"508 386 LINE",
"473.333 368.667 OFFCURVE",
"439.333 360 OFFCURVE",
"406 360 CURVE SMOOTH",
"388 360 OFFCURVE",
"369 366 OFFCURVE",
"349 378 CURVE",
"355.667 396.667 OFFCURVE",
"359 414.333 OFFCURVE",
"359 431 CURVE SMOOTH",
"359 489.667 OFFCURVE",
"325.667 558.333 OFFCURVE",
"279 609 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"494 609 LINE",
"494 689 LINE",
"251 689 LINE",
"325 609 LINE"
);
},
{
closed = 1;
nodes = (
"184 431 OFFCURVE",
"215.333 403.333 OFFCURVE",
"226 370 CURVE",
"196 354 OFFCURVE",
"163.667 346 OFFCURVE",
"129 346 CURVE SMOOTH",
"111.667 346 OFFCURVE",
"97 367.333 OFFCURVE",
"97 390 CURVE SMOOTH",
"97 411.333 OFFCURVE",
"126.667 431 OFFCURVE",
"156 431 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 25 values pushed */\01259 38 9 5 4 0 11 14 1 10 0 10 1 1 10 24 1 3 2 25 1 4 3 5 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 45 values pushed */\0120 5 12 1 11 0 5 11 99 0 0 0 1 2 0 1 99 0 10 0 2 3 10 2 99 0 3 0 4 3 4 95 8 1 6 6 7 89 9 1 7 7 24 6 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 45 values pushed */\0120 5 12 1 11 0 5 11 99 0 0 0 1 2 0 1 99 0 10 0 2 3 10 2 99 0 3 0 4 3 4 95 8 1 6 6 7 89 9 1 7 7 25 6 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 22 values pushed */\01252 52 52 62 52 61 58 56 51 50 17 17 24 37 36 35 35 35 38 13 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 481;
}
);
note = uni0938094D;
},
{
glyphname = "ha-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"320 609 LINE",
"353.333 575.667 OFFCURVE",
"370 549 OFFCURVE",
"370 529 CURVE SMOOTH",
"370 517 OFFCURVE",
"357.333 509 OFFCURVE",
"344 509 CURVE SMOOTH",
"317.333 509 OFFCURVE",
"283.667 510.667 OFFCURVE",
"253 512 CURVE SMOOTH",
"205 514.667 OFFCURVE",
"174 516 OFFCURVE",
"160 516 CURVE SMOOTH",
"109.374 516 OFFCURVE",
"57 474.086 OFFCURVE",
"57 431 CURVE SMOOTH",
"57 396.333 OFFCURVE",
"86.667 353.333 OFFCURVE",
"136 312 CURVE",
"88 282.667 OFFCURVE",
"57 242.333 OFFCURVE",
"57 209 CURVE SMOOTH",
"57 171.667 OFFCURVE",
"77.833 131 OFFCURVE",
"119.5 87 CURVE SMOOTH",
"202.833 -1 OFFCURVE",
"338.667 -69 OFFCURVE",
"448 -69 CURVE SMOOTH",
"488 -69 OFFCURVE",
"519.667 -59.333 OFFCURVE",
"543 -40 CURVE",
"466 14 LINE",
"451.333 -6 OFFCURVE",
"421.333 -17 OFFCURVE",
"388 -17 CURVE SMOOTH",
"356 -17 OFFCURVE",
"320.333 -7.333 OFFCURVE",
"281 12 CURVE SMOOTH",
"202.333 50.667 OFFCURVE",
"138 113.333 OFFCURVE",
"138 160 CURVE SMOOTH",
"138 181.333 OFFCURVE",
"149.667 202.667 OFFCURVE",
"173 224 CURVE SMOOTH",
"219.667 266.667 OFFCURVE",
"297.667 297 OFFCURVE",
"363 297 CURVE SMOOTH",
"391 297 OFFCURVE",
"412 276.667 OFFCURVE",
"412 254 CURVE SMOOTH",
"412 222 OFFCURVE",
"379 192.667 OFFCURVE",
"327 174 CURVE",
"401 110 LINE",
"451.667 128.667 OFFCURVE",
"484 168.667 OFFCURVE",
"484 214 CURVE SMOOTH",
"484 271.752 OFFCURVE",
"368.196 363 OFFCURVE",
"317 363 CURVE SMOOTH",
"264.333 363 OFFCURVE",
"214 352 OFFCURVE",
"166 330 CURVE",
"139.333 355.333 OFFCURVE",
"126 375 OFFCURVE",
"126 389 CURVE SMOOTH",
"126 415.667 OFFCURVE",
"153.333 436 OFFCURVE",
"188 436 CURVE SMOOTH",
"211.333 436 OFFCURVE",
"240.333 435 OFFCURVE",
"275 433 CURVE SMOOTH",
"305.667 431.667 OFFCURVE",
"339.333 430 OFFCURVE",
"362 430 CURVE SMOOTH",
"398 430 OFFCURVE",
"427 453 OFFCURVE",
"427 481 CURVE SMOOTH",
"427 518.333 OFFCURVE",
"405 569 OFFCURVE",
"365 609 CURVE SMOOTH",
"288 689 LINE"
);
},
{
closed = 1;
nodes = (
"333 689 LINE",
"411 609 LINE",
"542 609 LINE",
"542 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */\01255 18 2 3 2 45 28 27 3 4 3 46 1 5 4 3 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 36 values pushed */\0120 6 0 1 2 6 1 99 0 2 0 3 4 2 3 99 0 4 0 5 4 5 95 9 1 7 7 0 89 8 1 0 0 24 7 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 36 values pushed */\0120 6 0 1 2 6 1 99 0 2 0 3 4 2 3 99 0 4 0 5 4 5 95 9 1 7 7 0 89 8 1 0 0 25 7 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\01277 76 17 20 124 36 38 44 37 118 16 10 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 528;
}
);
note = uni0939;
unicode = 0939;
},
{
glyphname = "ha_uMatra-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"508.333 -61.333 OFFCURVE",
"528.333 -52.667 OFFCURVE",
"543 -40 CURVE",
"466 14 LINE",
"451.333 -6 OFFCURVE",
"421.333 -17 OFFCURVE",
"388 -17 CURVE SMOOTH",
"356 -17 OFFCURVE",
"320.333 -7.333 OFFCURVE",
"281 12 CURVE SMOOTH",
"202.333 50.667 OFFCURVE",
"138 113.333 OFFCURVE",
"138 160 CURVE SMOOTH",
"138 181.333 OFFCURVE",
"149.667 202.667 OFFCURVE",
"173 224 CURVE SMOOTH",
"219.667 266.667 OFFCURVE",
"297.667 297 OFFCURVE",
"363 297 CURVE SMOOTH",
"391 297 OFFCURVE",
"412 276.667 OFFCURVE",
"412 254 CURVE SMOOTH",
"412 222 OFFCURVE",
"379 192.667 OFFCURVE",
"327 174 CURVE",
"401 110 LINE",
"451.667 128.667 OFFCURVE",
"484 168.667 OFFCURVE",
"484 214 CURVE SMOOTH",
"484 271.752 OFFCURVE",
"368.196 363 OFFCURVE",
"317 363 CURVE SMOOTH",
"264.333 363 OFFCURVE",
"214 352 OFFCURVE",
"166 330 CURVE",
"139.333 355.333 OFFCURVE",
"126 375 OFFCURVE",
"126 389 CURVE SMOOTH",
"126 415.667 OFFCURVE",
"153.333 436 OFFCURVE",
"188 436 CURVE SMOOTH",
"211.333 436 OFFCURVE",
"240.333 435 OFFCURVE",
"275 433 CURVE SMOOTH",
"305.667 431.667 OFFCURVE",
"339.333 430 OFFCURVE",
"362 430 CURVE SMOOTH",
"398 430 OFFCURVE",
"427 453 OFFCURVE",
"427 481 CURVE SMOOTH",
"427 518.333 OFFCURVE",
"405 569 OFFCURVE",
"365 609 CURVE SMOOTH",
"288 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"320 609 LINE",
"353.333 575.667 OFFCURVE",
"370 549 OFFCURVE",
"370 529 CURVE SMOOTH",
"370 517 OFFCURVE",
"357.333 509 OFFCURVE",
"344 509 CURVE SMOOTH",
"317.333 509 OFFCURVE",
"283.667 510.667 OFFCURVE",
"253 512 CURVE SMOOTH",
"205 514.667 OFFCURVE",
"174 516 OFFCURVE",
"160 516 CURVE SMOOTH",
"109.374 516 OFFCURVE",
"57 474.086 OFFCURVE",
"57 431 CURVE SMOOTH",
"57 396.333 OFFCURVE",
"86.667 353.333 OFFCURVE",
"136 312 CURVE",
"88 282.667 OFFCURVE",
"57 242.333 OFFCURVE",
"57 209 CURVE SMOOTH",
"57 183 OFFCURVE",
"67.667 154.833 OFFCURVE",
"89 124.5 CURVE SMOOTH",
"131.667 63.833 OFFCURVE",
"207.333 6.333 OFFCURVE",
"290 -31 CURVE",
"251.333 -51 OFFCURVE",
"224 -82.667 OFFCURVE",
"224 -116 CURVE SMOOTH",
"224 -166.286 OFFCURVE",
"310.868 -220 OFFCURVE",
"375 -220 CURVE SMOOTH",
"399 -220 OFFCURVE",
"426.667 -202 OFFCURVE",
"448 -174 CURVE",
"395 -137 LINE",
"370.333 -168.333 OFFCURVE",
"352 -184 OFFCURVE",
"340 -184 CURVE SMOOTH",
"320 -184 OFFCURVE",
"302 -170.667 OFFCURVE",
"302 -152 CURVE SMOOTH",
"302 -115.013 OFFCURVE",
"357.163 -78 OFFCURVE",
"402 -78 CURVE SMOOTH",
"448.667 -78 OFFCURVE",
"489 -112.667 OFFCURVE",
"489 -158 CURVE SMOOTH",
"489 -218.502 OFFCURVE",
"379.282 -299 OFFCURVE",
"313 -299 CURVE SMOOTH",
"213 -299 OFFCURVE",
"102.667 -237.667 OFFCURVE",
"12 -143 CURVE",
"-17 -173 LINE",
"105.667 -293.667 OFFCURVE",
"235 -354 OFFCURVE",
"371 -354 CURVE SMOOTH",
"401 -354 OFFCURVE",
"431 -346.5 OFFCURVE",
"461 -331.5 CURVE SMOOTH",
"521 -301.5 OFFCURVE",
"563 -249.333 OFFCURVE",
"563 -196 CURVE SMOOTH",
"563 -152 OFFCURVE",
"531 -103.333 OFFCURVE",
"483 -66 CURVE"
);
},
{
closed = 1;
nodes = (
"411 609 LINE",
"542 609 LINE",
"542 689 LINE",
"333 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */\01283 46 2 10 9 110 93 92 3 11 10 113 111 39 3 2 11 29 28 9 8 4 3 2 4 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 53 values pushed */\0120 5 0 8 9 5 8 99 0 9 0 10 11 9 10 99 0 11 0 2 3 11 2 99 0 3 0 4 1 3 4 99 0 1 0 0 1 0 95 14 13 2 6 6 7 89 12 1 7 7 24 6 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 53 values pushed */\0120 5 0 8 9 5 8 99 0 9 0 10 11 9 10 99 0 11 0 2 3 11 2 99 0 3 0 4 1 3 4 99 0 1 0 0 1 0 95 14 13 2 6 6 7 89 12 1 7 7 25 6 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 30 values pushed */\012114 114 114 117 114 117 116 115 108 106 100 98 86 84 79 72 66 65 64 63 59 52 36 37 37 36 37 15 6 25 \012CALL[ ]	/* CallFunction */";
};
width = 528;
}
);
note = uni09390941;
},
{
glyphname = "ha_uuMatra-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"751 -267 LINE",
"733.667 -288.333 OFFCURVE",
"713.667 -299 OFFCURVE",
"691 -299 CURVE SMOOTH",
"667 -299 OFFCURVE",
"637 -279.667 OFFCURVE",
"613 -253 CURVE SMOOTH",
"476 -98 LINE",
"470 -90.667 OFFCURVE",
"460.333 -81 OFFCURVE",
"447 -69 CURVE",
"448 -69 LINE SMOOTH",
"488 -69 OFFCURVE",
"519.667 -59.333 OFFCURVE",
"543 -40 CURVE",
"466 14 LINE",
"451.333 -6 OFFCURVE",
"421.333 -17 OFFCURVE",
"388 -17 CURVE SMOOTH",
"356 -17 OFFCURVE",
"320.333 -7.333 OFFCURVE",
"281 12 CURVE SMOOTH",
"202.333 50.667 OFFCURVE",
"138 113.333 OFFCURVE",
"138 160 CURVE SMOOTH",
"138 181.333 OFFCURVE",
"149.667 202.667 OFFCURVE",
"173 224 CURVE SMOOTH",
"219.667 266.667 OFFCURVE",
"297.667 297 OFFCURVE",
"363 297 CURVE SMOOTH",
"391 297 OFFCURVE",
"412 276.667 OFFCURVE",
"412 254 CURVE SMOOTH",
"412 222 OFFCURVE",
"379 192.667 OFFCURVE",
"327 174 CURVE",
"401 110 LINE",
"451.667 128.667 OFFCURVE",
"484 168.667 OFFCURVE",
"484 214 CURVE SMOOTH",
"484 271.752 OFFCURVE",
"368.196 363 OFFCURVE",
"317 363 CURVE SMOOTH",
"264.333 363 OFFCURVE",
"214 352 OFFCURVE",
"166 330 CURVE",
"139.333 355.333 OFFCURVE",
"126 375 OFFCURVE",
"126 389 CURVE SMOOTH",
"126 415.667 OFFCURVE",
"153.333 436 OFFCURVE",
"188 436 CURVE SMOOTH",
"211.333 436 OFFCURVE",
"240.333 435 OFFCURVE",
"275 433 CURVE SMOOTH",
"305.667 431.667 OFFCURVE",
"339.333 430 OFFCURVE",
"362 430 CURVE SMOOTH",
"398 430 OFFCURVE",
"427 453 OFFCURVE",
"427 481 CURVE SMOOTH",
"427 518.333 OFFCURVE",
"405 569 OFFCURVE",
"365 609 CURVE SMOOTH",
"288 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"320 609 LINE",
"353.333 575.667 OFFCURVE",
"370 549 OFFCURVE",
"370 529 CURVE SMOOTH",
"370 517 OFFCURVE",
"357.333 509 OFFCURVE",
"344 509 CURVE SMOOTH",
"317.333 509 OFFCURVE",
"283.667 510.667 OFFCURVE",
"253 512 CURVE SMOOTH",
"205 514.667 OFFCURVE",
"174 516 OFFCURVE",
"160 516 CURVE SMOOTH",
"109.374 516 OFFCURVE",
"57 474.086 OFFCURVE",
"57 431 CURVE SMOOTH",
"57 396.333 OFFCURVE",
"86.667 353.333 OFFCURVE",
"136 312 CURVE",
"88 282.667 OFFCURVE",
"57 242.333 OFFCURVE",
"57 209 CURVE SMOOTH",
"57 138.333 OFFCURVE",
"143 46 OFFCURVE",
"255 -14 CURVE",
"188.333 -32.667 OFFCURVE",
"134 -86 OFFCURVE",
"134 -142 CURVE SMOOTH",
"134 -166 OFFCURVE",
"143.333 -189.5 OFFCURVE",
"162 -212.5 CURVE SMOOTH",
"199.333 -258.5 OFFCURVE",
"262 -291 OFFCURVE",
"314 -291 CURVE SMOOTH",
"362.006 -291 OFFCURVE",
"422 -242.057 OFFCURVE",
"422 -196 CURVE SMOOTH",
"422 -165.333 OFFCURVE",
"386.333 -121.333 OFFCURVE",
"333 -92 CURVE",
"312 -108 LINE",
"334.667 -125.333 OFFCURVE",
"349 -144.667 OFFCURVE",
"349 -158 CURVE SMOOTH",
"349 -191.024 OFFCURVE",
"299.431 -231 OFFCURVE",
"263 -231 CURVE SMOOTH",
"233.667 -231 OFFCURVE",
"207 -210 OFFCURVE",
"207 -182 CURVE SMOOTH",
"207 -127.685 OFFCURVE",
"284.33 -71 OFFCURVE",
"344 -71 CURVE SMOOTH",
"382.667 -71 OFFCURVE",
"426.667 -97 OFFCURVE",
"464 -137 CURVE SMOOTH",
"594 -284 LINE SMOOTH",
"638 -334.667 OFFCURVE",
"689.667 -363 OFFCURVE",
"735 -363 CURVE SMOOTH",
"764.333 -363 OFFCURVE",
"792 -351.667 OFFCURVE",
"812 -329 CURVE"
);
},
{
closed = 1;
nodes = (
"411 609 LINE",
"542 609 LINE",
"542 689 LINE",
"333 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */\01282 45 2 9 8 109 92 91 39 4 10 9 110 1 1 10 25 24 2 2 1 121 1 3 2 5 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 56 values pushed */\0120 4 0 7 8 4 7 99 0 8 0 9 10 8 9 99 0 10 11 1 1 2 10 1 99 0 12 0 0 12 0 95 15 14 2 5 5 6 89 13 1 6 6 24 75 0 2 2 3 91 0 3 3 27 3 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 56 values pushed */\0120 4 0 7 8 4 7 99 0 8 0 9 10 8 9 99 0 10 11 1 1 2 10 1 99 0 12 0 0 12 0 95 15 14 2 5 5 6 89 13 1 6 6 25 75 0 2 2 3 91 0 3 3 27 3 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 33 values pushed */\012122 122 122 125 122 125 124 123 120 118 112 111 107 105 99 97 85 83 78 71 65 64 63 62 58 51 45 37 37 34 16 6 24 \012CALL[ ]	/* CallFunction */";
};
width = 528;
}
);
note = uni09390942;
},
{
glyphname = "ha_rVocalicMatra-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-14 609 LINE",
"-14 689 LINE",
"325 689 LINE",
"403 599 LINE",
"440.333 552.333 OFFCURVE",
"459 510 OFFCURVE",
"459 472 CURVE SMOOTH",
"459 441.333 OFFCURVE",
"431.333 418 OFFCURVE",
"398 418 CURVE SMOOTH",
"386.667 418 OFFCURVE",
"374 418.333 OFFCURVE",
"360 419 CURVE SMOOTH",
"346 419.667 OFFCURVE",
"331.667 420.333 OFFCURVE",
"317 421 CURVE SMOOTH",
"270.333 423.667 OFFCURVE",
"238.667 425 OFFCURVE",
"222 425 CURVE SMOOTH",
"175.333 425 OFFCURVE",
"136 398 OFFCURVE",
"136 366 CURVE SMOOTH",
"136 340.667 OFFCURVE",
"160.667 311.333 OFFCURVE",
"198 294 CURVE",
"255.333 323.333 OFFCURVE",
"317.333 338 OFFCURVE",
"384 338 CURVE SMOOTH",
"442.198 338 OFFCURVE",
"548 262.359 OFFCURVE",
"548 205 CURVE SMOOTH",
"548 166.333 OFFCURVE",
"514 150.667 OFFCURVE",
"450 132 CURVE SMOOTH",
"394 116 OFFCURVE",
"365 104.667 OFFCURVE",
"365 74 CURVE SMOOTH",
"365 52.667 OFFCURVE",
"394.333 35 OFFCURVE",
"433 35 CURVE SMOOTH",
"477 35 OFFCURVE",
"520.667 53.667 OFFCURVE",
"546 83 CURVE",
"615 27 LINE",
"591.667 7 OFFCURVE",
"553.667 -3 OFFCURVE",
"501 -3 CURVE SMOOTH",
"423.806 -3 OFFCURVE",
"293 53.491 OFFCURVE",
"293 108 CURVE SMOOTH",
"293 160.148 OFFCURVE",
"348.785 176.301 OFFCURVE",
"408 195 CURVE SMOOTH",
"434 202.333 OFFCURVE",
"453.333 209 OFFCURVE",
"466 215 CURVE SMOOTH",
"478.667 221 OFFCURVE",
"485 229.333 OFFCURVE",
"485 240 CURVE SMOOTH",
"485 264 OFFCURVE",
"463.333 283 OFFCURVE",
"434 283 CURVE SMOOTH",
"387.333 283 OFFCURVE",
"339.833 272.833 OFFCURVE",
"291.5 252.5 CURVE SMOOTH",
"194.833 211.833 OFFCURVE",
"125 144.333 OFFCURVE",
"125 83 CURVE SMOOTH",
"125 53.667 OFFCURVE",
"139.667 23.333 OFFCURVE",
"169 -8 CURVE SMOOTH",
"227.667 -70.667 OFFCURVE",
"324 -117 OFFCURVE",
"404 -117 CURVE SMOOTH",
"440 -117 OFFCURVE",
"470.667 -106 OFFCURVE",
"496 -84 CURVE",
"565 -134 LINE",
"545.667 -151.333 OFFCURVE",
"510 -160 OFFCURVE",
"458 -160 CURVE SMOOTH",
"395.333 -160 OFFCURVE",
"333 -145.167 OFFCURVE",
"271 -115.5 CURVE SMOOTH",
"147 -56.167 OFFCURVE",
"60 45.333 OFFCURVE",
"60 140 CURVE SMOOTH",
"60 185.333 OFFCURVE",
"102 238.667 OFFCURVE",
"166 276 CURVE",
"103.333 313.333 OFFCURVE",
"65 363.333 OFFCURVE",
"65 406 CURVE SMOOTH",
"65 452.667 OFFCURVE",
"123.333 491 OFFCURVE",
"194 491 CURVE",
"275 488 LINE",
"356 484 LINE",
"380 484 OFFCURVE",
"399 500.667 OFFCURVE",
"399 522 CURVE SMOOTH",
"399 545.333 OFFCURVE",
"384.333 574.333 OFFCURVE",
"355 609 CURVE"
);
},
{
closed = 1;
nodes = (
"643 609 LINE",
"440 609 LINE",
"371 689 LINE",
"643 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */\01268 1 3 6 50 13 2 5 3 49 1 4 5 23 1 2 4 22 1 1 2 5 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 48 values pushed */\0120 0 0 7 6 0 7 99 0 6 0 3 5 6 3 99 0 2 0 1 2 1 95 13 11 12 3 9 9 8 89 10 1 8 8 24 75 0 5 5 4 91 0 4 4 26 4 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 48 values pushed */\0120 0 0 7 6 0 7 99 0 6 0 3 5 6 3 99 0 2 0 1 2 1 95 13 11 12 3 9 9 8 89 10 1 8 8 25 75 0 5 5 4 91 0 4 4 26 4 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 26 values pushed */\01288 88 0 0 88 91 88 91 90 89 0 87 0 87 21 118 43 36 44 38 35 43 68 14 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 627;
}
);
note = uni09390943;
},
{
glyphname = "h-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"328 609 LINE",
"362 575 OFFCURVE",
"379 548 OFFCURVE",
"379 528 CURVE SMOOTH",
"379 517.333 OFFCURVE",
"366.667 509 OFFCURVE",
"352 509 CURVE SMOOTH",
"333.333 509 OFFCURVE",
"307.333 510 OFFCURVE",
"274 512 CURVE SMOOTH",
"222 514.667 OFFCURVE",
"187 516 OFFCURVE",
"169 516 CURVE SMOOTH",
"118.58 516 OFFCURVE",
"65 474.178 OFFCURVE",
"65 431 CURVE SMOOTH",
"65 396.333 OFFCURVE",
"94.667 353.333 OFFCURVE",
"144 312 CURVE",
"96 282.667 OFFCURVE",
"65 242.333 OFFCURVE",
"65 209 CURVE SMOOTH",
"65 171 OFFCURVE",
"85.833 130 OFFCURVE",
"127.5 86 CURVE SMOOTH",
"210.833 -2 OFFCURVE",
"348 -72 OFFCURVE",
"456 -72 CURVE SMOOTH",
"492 -72 OFFCURVE",
"520.667 -62.333 OFFCURVE",
"542 -43 CURVE",
"471 15 LINE",
"456.333 -3.667 OFFCURVE",
"425.333 -15 OFFCURVE",
"392 -15 CURVE SMOOTH",
"359.333 -15 OFFCURVE",
"323 -5.5 OFFCURVE",
"283 13.5 CURVE SMOOTH",
"203 51.5 OFFCURVE",
"140 113.333 OFFCURVE",
"140 160 CURVE SMOOTH",
"140 222.084 OFFCURVE",
"287.104 292 OFFCURVE",
"365 292 CURVE SMOOTH",
"562 292 LINE",
"528 362 LINE",
"327 362 LINE SMOOTH",
"274.333 362 OFFCURVE",
"224 351 OFFCURVE",
"176 329 CURVE",
"148 355.667 OFFCURVE",
"134 373 OFFCURVE",
"134 389 CURVE SMOOTH",
"134 415.667 OFFCURVE",
"161 436 OFFCURVE",
"197 436 CURVE SMOOTH",
"219.667 436 OFFCURVE",
"248.333 435 OFFCURVE",
"283 433 CURVE SMOOTH",
"313.667 431.667 OFFCURVE",
"347 430 OFFCURVE",
"371 430 CURVE SMOOTH",
"408.333 430 OFFCURVE",
"436 453 OFFCURVE",
"436 481 CURVE SMOOTH",
"436 511.667 OFFCURVE",
"415.333 554.333 OFFCURVE",
"374 609 CURVE",
"296 689 LINE"
);
},
{
closed = 1;
nodes = (
"343 689 LINE",
"420 609 LINE",
"589 609 LINE",
"589 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */\01244 18 2 3 2 34 1 4 3 35 1 5 4 3 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 36 values pushed */\0120 6 0 1 2 6 1 99 0 2 0 3 4 2 3 99 0 4 0 5 4 5 95 9 1 7 7 0 89 8 1 0 0 24 7 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 36 values pushed */\0120 6 0 1 2 6 1 99 0 2 0 3 4 2 3 99 0 4 0 5 4 5 95 9 1 7 7 0 89 8 1 0 0 25 7 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\01265 64 17 20 108 36 38 33 38 117 16 10 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 575;
}
);
note = uni0939094D;
},
{
glyphname = "qa-deva";
layers = (
{
components = (
{
alignment = -1;
name = "ka-deva";
},
{
alignment = -1;
name = "nukta-deva";
transform = "{1, 0, 0, 1, 302, 49}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 720;
}
);
note = uni0958;
unicode = 0958;
},
{
glyphname = "q-deva";
layers = (
{
components = (
{
alignment = -1;
name = "k-deva";
},
{
alignment = -1;
name = "nukta-deva";
transform = "{1, 0, 0, 1, 294, 49}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 622;
}
);
note = uni0958094D;
},
{
glyphname = "khha-deva";
layers = (
{
components = (
{
alignment = -1;
name = "kha-deva";
},
{
alignment = -1;
name = "nukta-deva";
transform = "{1, 0, 0, 1, 316, 0}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 914;
}
);
note = uni0959;
unicode = 0959;
},
{
glyphname = "khh-deva";
layers = (
{
components = (
{
alignment = -1;
name = "kh-deva";
},
{
alignment = -1;
name = "nukta-deva";
transform = "{1, 0, 0, 1, 311, 0}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 720;
}
);
note = uni0959094D;
},
{
glyphname = "ghha-deva";
layers = (
{
components = (
{
alignment = -1;
name = "ga-deva";
},
{
alignment = -1;
name = "nukta-deva";
transform = "{1, 0, 0, 1, 365, 57}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 689;
}
);
note = uni095A;
unicode = 095A;
},
{
glyphname = "ghh-deva";
layers = (
{
components = (
{
alignment = -1;
name = "g-deva";
},
{
alignment = -1;
name = "nukta-deva";
transform = "{1, 0, 0, 1, 350, 56}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 393;
}
);
note = uni095A094D;
},
{
glyphname = "za-deva";
layers = (
{
components = (
{
alignment = -1;
name = "ja-deva";
},
{
alignment = -1;
name = "nukta-deva";
transform = "{1, 0, 0, 1, 305, 49}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 780;
}
);
note = uni095B;
unicode = 095B;
},
{
glyphname = "z-deva";
layers = (
{
components = (
{
alignment = -1;
name = "j-deva";
},
{
alignment = -1;
name = "nukta-deva";
transform = "{1, 0, 0, 1, 306, 49}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 560;
}
);
note = uni095B094D;
},
{
glyphname = "dddha-deva";
layers = (
{
components = (
{
alignment = -1;
name = "dda-deva";
},
{
alignment = -1;
name = "nukta-deva";
transform = "{1, 0, 0, 1, 537, -166}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 633;
}
);
note = uni095C;
unicode = 095C;
},
{
glyphname = "rha-deva";
layers = (
{
components = (
{
alignment = -1;
name = "ddha-deva";
},
{
alignment = -1;
name = "nukta-deva";
transform = "{1, 0, 0, 1, 510, -166}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 584;
}
);
note = uni095D;
unicode = 095D;
},
{
glyphname = "fa-deva";
layers = (
{
components = (
{
alignment = -1;
name = "pha-deva";
},
{
alignment = -1;
name = "nukta-deva";
transform = "{1, 0, 0, 1, 314, 48}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 747;
}
);
note = uni095E;
unicode = 095E;
},
{
glyphname = "f-deva";
layers = (
{
components = (
{
alignment = -1;
name = "ph-deva";
},
{
alignment = -1;
name = "nukta-deva";
transform = "{1, 0, 0, 1, 310, 47}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 643;
}
);
note = uni095E094D;
},
{
glyphname = "yya-deva";
layers = (
{
components = (
{
alignment = -1;
name = "ya-deva";
},
{
alignment = -1;
name = "nukta-deva";
transform = "{1, 0, 0, 1, 311, 40}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 611;
}
);
note = uni095F;
unicode = 095F;
},
{
glyphname = "zha-deva";
layers = (
{
components = (
{
alignment = -1;
name = "ja-deva";
},
{
alignment = -1;
name = "nukta-deva";
transform = "{1, 0, 0, 1, 337, -9}";
},
{
alignment = -1;
name = "nukta-deva";
transform = "{1, 0, 0, 1, 566, -9}";
},
{
alignment = -1;
name = "nukta-deva";
transform = "{1, 0, 0, 1, 451, -123}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 780;
}
);
note = uni0979;
unicode = 0979;
},
{
glyphname = "jjya-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"744 17 LINE",
"728 -3 OFFCURVE",
"710.333 -13 OFFCURVE",
"691 -13 CURVE SMOOTH",
"639.134 -13 OFFCURVE",
"509 59.656 OFFCURVE",
"509 111 CURVE SMOOTH",
"509 609 LINE",
"429 689 LINE",
"181 689 LINE",
"260 609 LINE",
"427 609 LINE",
"427 371 LINE",
"410 350 LINE",
"408 359 LINE",
"256 454 LINE",
"260 464 OFFCURVE",
"262 474.667 OFFCURVE",
"262 486 CURVE SMOOTH",
"262 528.667 OFFCURVE",
"248.333 574.333 OFFCURVE",
"215 609 CURVE SMOOTH",
"135 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"151 609 LINE SMOOTH",
"188.333 609 OFFCURVE",
"211 577.333 OFFCURVE",
"211 540 CURVE SMOOTH",
"211 486.667 OFFCURVE",
"155 451 OFFCURVE",
"91 451 CURVE SMOOTH",
"72.333 451 OFFCURVE",
"55.667 454.667 OFFCURVE",
"41 462 CURVE",
"29 453 LINE",
"37.667 406.333 OFFCURVE",
"54.5 363.667 OFFCURVE",
"79.5 325 CURVE SMOOTH",
"129.5 247.667 OFFCURVE",
"205 199 OFFCURVE",
"285 199 CURVE SMOOTH",
"335.667 199 OFFCURVE",
"387 220.333 OFFCURVE",
"427 259 CURVE",
"427 166 LINE SMOOTH",
"427 140 OFFCURVE",
"445.833 108.833 OFFCURVE",
"483.5 72.5 CURVE SMOOTH",
"558.833 -0.167 OFFCURVE",
"676.667 -61 OFFCURVE",
"754 -61 CURVE SMOOTH",
"776.667 -61 OFFCURVE",
"797.667 -50.667 OFFCURVE",
"817 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"555 609 LINE",
"625 609 LINE",
"625 689 LINE",
"476 689 LINE"
);
},
{
closed = 1;
nodes = (
"169.667 265 OFFCURVE",
"113.333 310.333 OFFCURVE",
"92 373 CURVE",
"158.667 373 OFFCURVE",
"211.333 392 OFFCURVE",
"238 424 CURVE",
"389 329 LINE",
"345 289 OFFCURVE",
"288.333 265 OFFCURVE",
"231 265 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */\01215 1 2 3 55 1 10 2 54 35 34 3 11 10 7 1 1 11 47 1 7 1 5 74 40 1 3 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 40 values pushed */\0120 2 0 10 11 2 10 99 13 1 11 0 1 7 11 1 99 0 7 0 0 7 0 95 12 9 5 3 3 3 4 89 8 6 2 4 4 24 3 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 40 values pushed */\0120 2 0 10 11 2 10 99 13 1 11 0 1 7 11 1 99 0 7 0 0 7 0 95 12 9 5 3 3 3 4 89 8 6 2 4 4 25 3 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 26 values pushed */\01252 52 48 48 52 61 52 60 58 57 48 51 48 51 19 37 17 26 17 36 37 38 33 14 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 611;
}
);
note = uni097A;
unicode = 097A;
},
{
glyphname = "gga-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"209 609 LINE",
"251.667 533.667 OFFCURVE",
"273 472.333 OFFCURVE",
"273 425 CURVE SMOOTH",
"273 358.503 OFFCURVE",
"203.359 256 OFFCURVE",
"144 256 CURVE SMOOTH",
"122.667 256 OFFCURVE",
"104 273.667 OFFCURVE",
"104 295 CURVE SMOOTH",
"104 329.467 OFFCURVE",
"145.028 377 OFFCURVE",
"177 377 CURVE SMOOTH",
"185 377 OFFCURVE",
"199 370 OFFCURVE",
"211 358 CURVE",
"226 374 LINE",
"202 407.333 OFFCURVE",
"162.333 428 OFFCURVE",
"125 428 CURVE SMOOTH",
"79.667 428 OFFCURVE",
"33 382.667 OFFCURVE",
"33 336 CURVE SMOOTH",
"33 278.113 OFFCURVE",
"139.793 207 OFFCURVE",
"209 207 CURVE SMOOTH",
"272.369 207 OFFCURVE",
"331 281.011 OFFCURVE",
"331 349 CURVE SMOOTH",
"331 427 OFFCURVE",
"303.333 513.667 OFFCURVE",
"248 609 CURVE",
"506 609 LINE",
"506 168 LINE SMOOTH",
"506 140.667 OFFCURVE",
"525 108.833 OFFCURVE",
"563 72.5 CURVE SMOOTH",
"639 -0.167 OFFCURVE",
"756 -61 OFFCURVE",
"832 -61 CURVE SMOOTH",
"855.333 -61 OFFCURVE",
"876.333 -50.667 OFFCURVE",
"895 -30 CURVE",
"822 17 LINE",
"803.333 -3 OFFCURVE",
"786 -13 OFFCURVE",
"770 -13 CURVE SMOOTH",
"718.134 -13 OFFCURVE",
"588 59.656 OFFCURVE",
"588 111 CURVE SMOOTH",
"588 609 LINE",
"508 689 LINE"
);
},
{
closed = 1;
nodes = (
"554 689 LINE",
"633 609 LINE",
"704 609 LINE",
"704 689 LINE"
);
},
{
closed = 1;
nodes = (
"41 -78 LINE",
"82 -139 LINE",
"588 -139 LINE",
"541 -78 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */\01235 34 2 7 6 9 1 1 4 10 1 2 1 3 74 2 1 3 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 52 values pushed */\0120 5 3 6 3 5 6 112 0 6 7 3 6 7 110 0 7 0 4 1 7 4 99 0 1 0 2 11 1 2 99 0 11 0 12 11 12 93 10 8 2 3 3 0 89 9 1 0 0 24 3 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 52 values pushed */\0120 5 3 6 3 5 6 112 0 6 7 3 6 7 110 0 7 0 4 1 7 4 99 0 1 0 2 11 1 2 99 0 11 0 12 11 12 93 10 8 2 3 3 0 89 9 1 0 0 25 3 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 20 values pushed */\01260 59 58 57 56 55 54 53 21 37 37 37 37 20 35 37 16 13 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 689;
}
);
note = uni097B;
unicode = 097B;
},
{
glyphname = "jja-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"673 609 LINE",
"593 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"591 609 LINE",
"591 495 LINE",
"343 495 LINE SMOOTH",
"304.333 495 OFFCURVE",
"270 470.333 OFFCURVE",
"270 441 CURVE SMOOTH",
"270 403.667 OFFCURVE",
"297.333 382 OFFCURVE",
"352 350 CURVE SMOOTH",
"398.667 320.667 OFFCURVE",
"419 306.333 OFFCURVE",
"419 281 CURVE SMOOTH",
"419 230.333 OFFCURVE",
"369.667 192 OFFCURVE",
"311 192 CURVE SMOOTH",
"276.333 192 OFFCURVE",
"243 204 OFFCURVE",
"211 228 CURVE SMOOTH",
"147 276 OFFCURVE",
"95 359.667 OFFCURVE",
"67 449 CURVE",
"27 435 LINE",
"49.667 373 OFFCURVE",
"79 318.167 OFFCURVE",
"115 270.5 CURVE SMOOTH",
"187 175.167 OFFCURVE",
"277 120 OFFCURVE",
"365 120 CURVE SMOOTH",
"437.279 120 OFFCURVE",
"500 169.226 OFFCURVE",
"500 233 CURVE SMOOTH",
"500 285 OFFCURVE",
"459.667 317.667 OFFCURVE",
"397 359 CURVE SMOOTH",
"382.333 369 OFFCURVE",
"371.5 376.833 OFFCURVE",
"364.5 382.5 CURVE SMOOTH",
"357.5 388.167 OFFCURVE",
"354 393.333 OFFCURVE",
"354 398 CURVE SMOOTH",
"354 411.333 OFFCURVE",
"369 424 OFFCURVE",
"385 424 CURVE SMOOTH",
"591 424 LINE",
"591 166 LINE SMOOTH",
"591 140 OFFCURVE",
"609.833 108.833 OFFCURVE",
"647.5 72.5 CURVE SMOOTH",
"722.833 -0.167 OFFCURVE",
"841 -61 OFFCURVE",
"917 -61 CURVE SMOOTH",
"939 -61 OFFCURVE",
"960.333 -50.667 OFFCURVE",
"981 -30 CURVE",
"907 17 LINE",
"889 -3 OFFCURVE",
"872 -13 OFFCURVE",
"856 -13 CURVE SMOOTH",
"803.32 -13 OFFCURVE",
"673 59.451 OFFCURVE",
"673 111 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"794 609 LINE",
"794 689 LINE",
"639 689 LINE",
"719 609 LINE"
);
},
{
closed = 1;
nodes = (
"41 -78 LINE",
"82 -139 LINE",
"673 -139 LINE",
"627 -78 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */\01233 1 2 5 19 1 4 2 7 1 0 3 8 1 1 0 4 74 0 1 6 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 44 values pushed */\0120 5 0 2 4 5 2 99 0 4 0 3 0 4 3 99 0 0 0 1 10 0 1 99 0 10 0 11 10 11 93 8 1 6 6 7 89 9 1 7 7 24 6 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 44 values pushed */\0120 5 0 2 4 5 2 99 0 4 0 3 0 4 3 99 0 0 0 1 10 0 1 99 0 10 0 11 10 11 93 8 1 6 6 7 89 9 1 7 7 25 6 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 18 values pushed */\01263 62 61 60 59 58 17 17 17 42 39 43 36 35 36 12 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 780;
}
);
note = uni097C;
unicode = 097C;
},
{
glyphname = "ddda-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"403 609 LINE",
"425.667 585 OFFCURVE",
"440 553.667 OFFCURVE",
"440 535 CURVE SMOOTH",
"440 517.667 OFFCURVE",
"419.667 503 OFFCURVE",
"397 503 CURVE SMOOTH",
"259 503 LINE SMOOTH",
"196.333 503 OFFCURVE",
"140 457 OFFCURVE",
"140 401 CURVE SMOOTH",
"140 375.667 OFFCURVE",
"151 349.167 OFFCURVE",
"173 321.5 CURVE SMOOTH",
"217 266.167 OFFCURVE",
"289.667 226 OFFCURVE",
"351 226 CURVE SMOOTH",
"376.333 226 OFFCURVE",
"396.667 235 OFFCURVE",
"426 251 CURVE SMOOTH",
"451.333 265.667 OFFCURVE",
"464.667 272 OFFCURVE",
"482 272 CURVE SMOOTH",
"516.667 272 OFFCURVE",
"542 240.667 OFFCURVE",
"542 206 CURVE SMOOTH",
"542 143.39 OFFCURVE",
"420.891 69 OFFCURVE",
"353 69 CURVE SMOOTH",
"313.667 69 OFFCURVE",
"274.5 80.333 OFFCURVE",
"235.5 103 CURVE SMOOTH",
"157.5 148.333 OFFCURVE",
"92.333 227.333 OFFCURVE",
"55 314 CURVE",
"23 300 LINE",
"108.333 117.333 OFFCURVE",
"247.667 5 OFFCURVE",
"409 5 CURVE SMOOTH",
"443 5 OFFCURVE",
"474.833 12 OFFCURVE",
"504.5 26 CURVE SMOOTH",
"563.833 54 OFFCURVE",
"602 105.667 OFFCURVE",
"602 163 CURVE SMOOTH",
"602 189 OFFCURVE",
"593.667 215.167 OFFCURVE",
"577 241.5 CURVE SMOOTH",
"543.667 294.167 OFFCURVE",
"485.667 333 OFFCURVE",
"435 333 CURVE SMOOTH",
"417.667 333 OFFCURVE",
"402 325.667 OFFCURVE",
"370 311 CURVE SMOOTH",
"338 295 OFFCURVE",
"319.333 287 OFFCURVE",
"298 287 CURVE SMOOTH",
"251.333 287 OFFCURVE",
"213 319 OFFCURVE",
"213 355 CURVE SMOOTH",
"213 397.667 OFFCURVE",
"250.667 433 OFFCURVE",
"300 433 CURVE SMOOTH",
"416 433 LINE SMOOTH",
"456 433 OFFCURVE",
"491 458.333 OFFCURVE",
"491 493 CURVE SMOOTH",
"491 519 OFFCURVE",
"475.333 557.667 OFFCURVE",
"444 609 CURVE",
"373 689 LINE"
);
},
{
closed = 1;
nodes = (
"418 689 LINE",
"489 609 LINE",
"646 609 LINE",
"646 689 LINE"
);
},
{
closed = 1;
nodes = (
"41 -78 LINE",
"82 -139 LINE",
"591 -139 LINE",
"546 -78 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\01231 1 2 3 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 54 values pushed */\0120 8 0 1 3 8 1 99 0 3 0 6 7 3 6 99 0 2 0 7 5 2 7 99 0 12 0 13 12 13 93 11 1 9 9 0 89 10 1 0 0 24 75 0 5 5 4 91 0 4 4 26 4 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 54 values pushed */\0120 8 0 1 3 8 1 99 0 3 0 6 7 3 6 99 0 2 0 7 5 2 7 99 0 12 0 13 12 13 93 11 1 9 9 0 89 10 1 0 0 25 75 0 5 5 4 91 0 4 4 26 4 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 22 values pushed */\01272 71 70 69 68 67 66 65 64 63 53 36 37 38 38 36 36 53 16 14 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 633;
}
);
note = uni097E;
unicode = 097E;
},
{
glyphname = "bba-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"709 17 LINE",
"695.667 -1.667 OFFCURVE",
"675.667 -13 OFFCURVE",
"657 -13 CURVE SMOOTH",
"605.134 -13 OFFCURVE",
"475 59.656 OFFCURVE",
"475 111 CURVE SMOOTH",
"475 609 LINE",
"395 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"393 609 LINE",
"393 434 LINE",
"349 494 OFFCURVE",
"281.333 529 OFFCURVE",
"212 529 CURVE SMOOTH",
"145.502 529 OFFCURVE",
"43 454.306 OFFCURVE",
"43 391 CURVE SMOOTH",
"43 360.333 OFFCURVE",
"54.167 328.667 OFFCURVE",
"76.5 296 CURVE SMOOTH",
"121.167 230.667 OFFCURVE",
"199.333 182 OFFCURVE",
"278 182 CURVE SMOOTH",
"320.667 182 OFFCURVE",
"363.333 201.333 OFFCURVE",
"394 236 CURVE",
"394 165 LINE SMOOTH",
"394 140.333 OFFCURVE",
"412.667 109.833 OFFCURVE",
"450 73.5 CURVE SMOOTH",
"524.667 0.833 OFFCURVE",
"641.333 -61 OFFCURVE",
"720 -61 CURVE SMOOTH",
"742.667 -61 OFFCURVE",
"763.333 -50.667 OFFCURVE",
"782 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"520 609 LINE",
"591 609 LINE",
"591 689 LINE",
"441 689 LINE"
);
},
{
closed = 1;
nodes = (
"393 345 LINE",
"379 323 OFFCURVE",
"362 304 OFFCURVE",
"342 288 CURVE",
"202 448 LINE",
"228 460 OFFCURVE",
"254.333 466 OFFCURVE",
"281 466 CURVE SMOOTH",
"319.667 466 OFFCURVE",
"363.667 435.667 OFFCURVE",
"393 389 CURVE"
);
},
{
closed = 1;
nodes = (
"164.667 244 OFFCURVE",
"113 286 OFFCURVE",
"113 330 CURVE SMOOTH",
"113 366 OFFCURVE",
"134.667 401.667 OFFCURVE",
"168 427 CURVE",
"309 268 LINE",
"277 252 OFFCURVE",
"245.333 244 OFFCURVE",
"214 244 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"429 -78 LINE",
"41 -78 LINE",
"82 -139 LINE",
"475 -139 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 25 values pushed */\01250 49 47 45 44 39 21 7 9 8 7 1 1 9 34 1 5 1 3 74 26 1 3 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 47 values pushed */\0120 2 0 8 9 2 8 99 13 1 9 0 1 5 9 1 99 0 5 0 0 11 5 0 99 14 1 11 0 10 11 10 93 12 7 2 3 3 4 89 6 1 4 4 24 3 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 47 values pushed */\0120 2 0 8 9 2 8 99 13 1 9 0 1 5 9 1 99 0 5 0 0 11 5 0 99 14 1 11 0 10 11 10 93 12 7 2 3 3 4 89 6 1 4 4 25 3 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 32 values pushed */\01257 57 48 48 35 35 57 60 57 60 59 58 48 56 48 55 43 41 35 38 35 38 20 37 17 19 38 38 33 15 6 27 \012CALL[ ]	/* CallFunction */";
};
width = 578;
}
);
note = uni097F;
unicode = 097F;
},
{
glyphname = "la-deva.loclMAR";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"486 609 LINE",
"486 499 LINE",
"438 496.333 OFFCURVE",
"390.333 452.667 OFFCURVE",
"361 390 CURVE",
"310.333 455.333 OFFCURVE",
"253.333 494 OFFCURVE",
"196 494 CURVE SMOOTH",
"171.333 494 OFFCURVE",
"147 485.833 OFFCURVE",
"123 469.5 CURVE SMOOTH",
"75 436.833 OFFCURVE",
"41 380.333 OFFCURVE",
"41 327 CURVE SMOOTH",
"41 282.333 OFFCURVE",
"58.5 233.167 OFFCURVE",
"93.5 179.5 CURVE SMOOTH",
"163.5 72.167 OFFCURVE",
"278.333 -13 OFFCURVE",
"373 -13 CURVE SMOOTH",
"397 -13 OFFCURVE",
"418 -3.667 OFFCURVE",
"436 15 CURVE",
"377 75 LINE",
"357.667 55.667 OFFCURVE",
"338.667 46 OFFCURVE",
"320 46 CURVE SMOOTH",
"294 46 OFFCURVE",
"264.167 58 OFFCURVE",
"230.5 82 CURVE SMOOTH",
"163.167 130 OFFCURVE",
"108 206.333 OFFCURVE",
"108 257 CURVE SMOOTH",
"108 322.186 OFFCURVE",
"183.083 428 OFFCURVE",
"247 428 CURVE SMOOTH",
"281.667 428 OFFCURVE",
"319 400.667 OFFCURVE",
"347 354 CURVE",
"341.667 330 OFFCURVE",
"339 306.333 OFFCURVE",
"339 283 CURVE",
"421 246 LINE",
"421 277 LINE SMOOTH",
"421 345.021 OFFCURVE",
"496.799 446 OFFCURVE",
"558 446 CURVE SMOOTH",
"622 446 OFFCURVE",
"672 387.333 OFFCURVE",
"672 318 CURVE SMOOTH",
"672 216.667 OFFCURVE",
"606.667 125 OFFCURVE",
"512 101 CURVE",
"570 34 LINE",
"601.333 42 OFFCURVE",
"629.667 57.667 OFFCURVE",
"655 81 CURVE SMOOTH",
"705.667 127.667 OFFCURVE",
"735 198 OFFCURVE",
"735 274 CURVE SMOOTH",
"735 366 OFFCURVE",
"667.667 454 OFFCURVE",
"569 490 CURVE",
"569 609 LINE",
"488 689 LINE"
);
},
{
closed = 1;
nodes = (
"534 689 LINE",
"614 609 LINE",
"795 609 LINE",
"795 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 25 values pushed */\0123 1 1 5 52 38 25 23 22 11 6 3 2 39 10 2 4 3 3 74 2 1 7 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01228 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 40 values pushed */\0120 1 5 2 5 1 2 112 8 1 0 9 1 7 5 0 7 97 0 2 2 5 91 6 1 5 5 45 75 0 3 3 4 91 0 4 4 43 4 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 38 values pushed */\0120 1 5 2 5 1 2 112 8 1 0 9 1 7 5 0 7 97 6 1 5 0 2 3 5 2 99 0 3 3 4 91 0 4 4 43 4 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\01261 60 17 17 20 38 35 38 41 47 16 10 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 782;
}
);
note = uni0932.loclMAR;
},
{
glyphname = "l-deva.loclMAR";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"721 609 LINE",
"721 689 LINE",
"-14 689 LINE",
"-14 609 LINE"
);
},
{
closed = 1;
nodes = (
"735 314 OFFCURVE",
"726.333 351.167 OFFCURVE",
"709 385.5 CURVE SMOOTH",
"674.333 454.167 OFFCURVE",
"606.333 499 OFFCURVE",
"517 499 CURVE SMOOTH",
"451.667 499 OFFCURVE",
"393 459.333 OFFCURVE",
"361 390 CURVE",
"310.333 455.333 OFFCURVE",
"253.333 494 OFFCURVE",
"196 494 CURVE SMOOTH",
"171.333 494 OFFCURVE",
"147 485.833 OFFCURVE",
"123 469.5 CURVE SMOOTH",
"75 436.833 OFFCURVE",
"41 380.333 OFFCURVE",
"41 327 CURVE SMOOTH",
"41 282.333 OFFCURVE",
"58.5 233.167 OFFCURVE",
"93.5 179.5 CURVE SMOOTH",
"163.5 72.167 OFFCURVE",
"278.333 -13 OFFCURVE",
"373 -13 CURVE SMOOTH",
"397 -13 OFFCURVE",
"418 -3.667 OFFCURVE",
"436 15 CURVE",
"377 75 LINE",
"357.667 55.667 OFFCURVE",
"338.667 46 OFFCURVE",
"320 46 CURVE SMOOTH",
"294 46 OFFCURVE",
"264.167 58 OFFCURVE",
"230.5 82 CURVE SMOOTH",
"163.167 130 OFFCURVE",
"108 206.333 OFFCURVE",
"108 257 CURVE SMOOTH",
"108 322.186 OFFCURVE",
"183.083 428 OFFCURVE",
"247 428 CURVE SMOOTH",
"281.667 428 OFFCURVE",
"319 400.667 OFFCURVE",
"347 354 CURVE",
"341.667 330 OFFCURVE",
"339 306.333 OFFCURVE",
"339 283 CURVE",
"421 246 LINE",
"421 372.667 OFFCURVE",
"476.667 446 OFFCURVE",
"558 446 CURVE SMOOTH",
"622 446 OFFCURVE",
"672 387.333 OFFCURVE",
"672 318 CURVE SMOOTH",
"672 216.667 OFFCURVE",
"606.667 125 OFFCURVE",
"512 101 CURVE",
"570 34 LINE",
"601.333 42 OFFCURVE",
"629.667 57.667 OFFCURVE",
"655 81 CURVE SMOOTH",
"705.667 127.667 OFFCURVE",
"735 198 OFFCURVE",
"735 274 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */\01247 33 20 18 17 8 6 4 3 34 7 2 5 4 2 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01228 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 41 values pushed */\0120 1 0 0 6 1 0 97 0 2 2 6 91 7 1 6 6 45 75 0 3 3 6 91 7 1 6 6 45 75 0 4 4 5 91 0 5 5 43 5 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01245 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 34 values pushed */\0120 1 0 0 6 1 0 97 0 2 3 6 2 87 7 1 6 0 3 4 6 3 99 0 4 4 5 91 0 5 5 43 5 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 35 values pushed */\0120 1 0 0 7 1 0 97 0 7 0 2 3 7 2 99 0 6 0 3 4 6 3 99 0 4 4 5 91 0 5 5 43 5 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 11 values pushed */\01236 38 35 38 39 42 17 16 8 7 28 \012CALL[ ]	/* CallFunction */";
};
width = 708;
}
);
note = uni0932094D.loclMAR;
},
{
glyphname = "sha-deva.loclMAR";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"885 17 LINE",
"870.333 -3 OFFCURVE",
"853 -13 OFFCURVE",
"833 -13 CURVE SMOOTH",
"780.32 -13 OFFCURVE",
"650 59.451 OFFCURVE",
"650 111 CURVE SMOOTH",
"650 609 LINE",
"570 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"189 609 LINE",
"189 489 LINE",
"150.333 485 OFFCURVE",
"110.667 465.333 OFFCURVE",
"70 430 CURVE",
"134 364 LINE",
"164.667 402.667 OFFCURVE",
"210 425 OFFCURVE",
"258 425 CURVE SMOOTH",
"314 425 OFFCURVE",
"360 378.667 OFFCURVE",
"360 320 CURVE SMOOTH",
"360 246.667 OFFCURVE",
"307 183.667 OFFCURVE",
"239 173 CURVE",
"205.667 221 OFFCURVE",
"160.333 245 OFFCURVE",
"127 245 CURVE SMOOTH",
"100.333 245 OFFCURVE",
"75 224 OFFCURVE",
"75 200 CURVE SMOOTH",
"75 152.805 OFFCURVE",
"167.94 103 OFFCURVE",
"233 103 CURVE",
"326.333 -2.333 OFFCURVE",
"429 -62 OFFCURVE",
"517 -62 CURVE SMOOTH",
"547.667 -62 OFFCURVE",
"572.333 -52.667 OFFCURVE",
"591 -34 CURVE",
"526 26 LINE",
"506.667 6 OFFCURVE",
"484.667 -4 OFFCURVE",
"460 -4 CURVE SMOOTH",
"401.333 -4 OFFCURVE",
"331.667 38 OFFCURVE",
"269 110 CURVE",
"358.333 116.667 OFFCURVE",
"426 182.333 OFFCURVE",
"426 269 CURVE SMOOTH",
"426 293.667 OFFCURVE",
"420 320.667 OFFCURVE",
"408 350 CURVE SMOOTH",
"384 408.667 OFFCURVE",
"334.667 461 OFFCURVE",
"268 481 CURVE",
"268 609 LINE",
"568 609 LINE",
"568 166 LINE SMOOTH",
"568 140 OFFCURVE",
"586.833 108.833 OFFCURVE",
"624.5 72.5 CURVE SMOOTH",
"699.833 -0.167 OFFCURVE",
"817.667 -61 OFFCURVE",
"895 -61 CURVE SMOOTH",
"917.667 -61 OFFCURVE",
"938.333 -50.667 OFFCURVE",
"957 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"696 609 LINE",
"767 609 LINE",
"767 689 LINE",
"616 689 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 31 values pushed */\01249 47 9 3 6 1 46 1 5 6 37 16 2 4 5 61 21 2 2 4 22 1 0 2 5 74 54 1 1 1 73 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 31 values pushed */\01249 47 9 3 6 1 46 1 5 6 37 16 2 4 5 61 21 2 2 4 22 1 0 9 5 74 54 1 1 1 73 \012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 53 values pushed */\0120 6 1 5 1 6 5 112 0 5 4 1 5 4 110 0 4 2 1 4 2 110 10 1 8 12 11 7 3 1 6 8 1 97 9 1 2 0 0 2 87 9 1 2 2 0 91 3 1 0 2 0 79 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 57 values pushed */\0120 6 1 5 1 6 5 112 0 5 4 1 5 4 110 0 4 2 1 4 2 110 10 1 8 12 11 7 3 1 6 8 1 97 0 2 9 0 2 87 0 9 0 0 9 87 0 9 9 0 91 3 1 0 9 0 79 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 22 values pushed */\01262 62 62 65 62 65 64 63 60 58 17 22 39 37 18 35 42 20 33 13 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 753;
}
);
note = uni0936.loclMAR;
},
{
glyphname = "sh-deva.loclMAR";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"533 26 LINE",
"513.667 6 OFFCURVE",
"491.333 -4 OFFCURVE",
"466 -4 CURVE SMOOTH",
"408.667 -4 OFFCURVE",
"338.667 38 OFFCURVE",
"276 110 CURVE",
"370.667 116.667 OFFCURVE",
"442.667 181 OFFCURVE",
"444 269 CURVE",
"443.333 297.667 OFFCURVE",
"436.667 326.667 OFFCURVE",
"424 356 CURVE SMOOTH",
"398.667 414.667 OFFCURVE",
"347 464.333 OFFCURVE",
"275 483 CURVE",
"275 609 LINE",
"194 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"196 609 LINE",
"196 489 LINE",
"158.667 485 OFFCURVE",
"115.667 463.333 OFFCURVE",
"77 430 CURVE",
"141 364 LINE",
"171.667 402.667 OFFCURVE",
"217 425 OFFCURVE",
"265 425 CURVE SMOOTH",
"326.333 425 OFFCURVE",
"377.667 378.667 OFFCURVE",
"379 320 CURVE",
"377.667 246.667 OFFCURVE",
"319.333 183.667 OFFCURVE",
"246 173 CURVE",
"212.667 221 OFFCURVE",
"167.333 245 OFFCURVE",
"134 245 CURVE SMOOTH",
"107.333 245 OFFCURVE",
"82 224 OFFCURVE",
"82 200 CURVE SMOOTH",
"82 152.805 OFFCURVE",
"174.94 103 OFFCURVE",
"240 103 CURVE",
"333.333 -2.333 OFFCURVE",
"436.333 -62 OFFCURVE",
"523 -62 CURVE SMOOTH",
"554.333 -62 OFFCURVE",
"579.333 -52.667 OFFCURVE",
"598 -34 CURVE"
);
},
{
closed = 1;
nodes = (
"321 609 LINE",
"478 609 LINE",
"478 689 LINE",
"240 689 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 25 values pushed */\01234 28 25 3 3 4 24 1 2 3 15 1 1 2 46 1 7 1 4 74 33 1 4 1 73 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 25 values pushed */\01234 28 25 3 3 4 24 1 2 3 15 1 6 2 46 1 7 1 4 74 33 1 4 1 73 \012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 50 values pushed */\0120 3 4 2 4 3 2 112 0 2 1 4 2 1 110 6 1 1 7 4 1 7 110 8 1 5 10 9 2 4 3 5 4 97 0 7 0 0 7 87 0 7 7 0 91 0 0 7 0 79 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 56 values pushed */\0120 3 4 2 4 3 2 112 0 2 6 4 2 6 110 0 6 1 4 6 1 110 0 1 7 4 1 7 110 8 1 5 10 9 2 4 3 5 4 97 0 7 0 0 7 87 0 7 7 0 91 0 0 7 0 79 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 18 values pushed */\01247 47 47 50 47 50 19 34 24 17 23 39 37 18 33 11 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 465;
}
);
note = uni0936094D.loclMAR;
},
{
glyphname = "jha-deva.loclNEP";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"689.32 -13 OFFCURVE",
"559 59.451 OFFCURVE",
"559 111 CURVE SMOOTH",
"559 327 LINE",
"615 400.333 OFFCURVE",
"677.667 445 OFFCURVE",
"727 445 CURVE SMOOTH",
"756.333 445 OFFCURVE",
"781 418.667 OFFCURVE",
"781 388 CURVE SMOOTH",
"781 326.667 OFFCURVE",
"716.667 267.667 OFFCURVE",
"626 249 CURVE",
"682 190 LINE",
"775.333 208.667 OFFCURVE",
"845 270.667 OFFCURVE",
"845 340 CURVE SMOOTH",
"845 364.667 OFFCURVE",
"836.333 389.5 OFFCURVE",
"819 414.5 CURVE SMOOTH",
"784.333 464.5 OFFCURVE",
"726 501 OFFCURVE",
"678 501 CURVE SMOOTH",
"638 501 OFFCURVE",
"593.667 477 OFFCURVE",
"559 437 CURVE",
"559 609 LINE",
"478 689 LINE",
"308 689 LINE",
"360 609 LINE",
"476 609 LINE",
"476 368 LINE",
"280 368 LINE",
"280 598 LINE SMOOTH",
"280 622.667 OFFCURVE",
"270.833 649.167 OFFCURVE",
"252.5 677.5 CURVE SMOOTH",
"215.833 734.167 OFFCURVE",
"155.333 779 OFFCURVE",
"110 779 CURVE SMOOTH",
"55.79 779 OFFCURVE",
"3 717.146 OFFCURVE",
"3 659 CURVE SMOOTH",
"3 599 OFFCURVE",
"59.333 532.333 OFFCURVE",
"146 495 CURVE",
"163 522 LINE",
"109.667 550 OFFCURVE",
"76 587.333 OFFCURVE",
"76 618 CURVE SMOOTH",
"76 660.882 OFFCURVE",
"117.467 716 OFFCURVE",
"154 716 CURVE SMOOTH",
"178 716 OFFCURVE",
"198 695.333 OFFCURVE",
"198 666 CURVE SMOOTH",
"198 368 LINE",
"117 368 LINE SMOOTH",
"103.667 368 OFFCURVE",
"95 359 OFFCURVE",
"95 347 CURVE SMOOTH",
"95 303.014 OFFCURVE",
"211.989 197 OFFCURVE",
"258 197 CURVE SMOOTH",
"271.333 197 OFFCURVE",
"280 204.667 OFFCURVE",
"280 218 CURVE SMOOTH",
"280 295 LINE",
"476 295 LINE",
"476 166 LINE SMOOTH",
"476 140 OFFCURVE",
"494.833 108.833 OFFCURVE",
"532.5 72.5 CURVE SMOOTH",
"607.833 -0.167 OFFCURVE",
"725.667 -61 OFFCURVE",
"803 -61 CURVE SMOOTH",
"825.667 -61 OFFCURVE",
"846.667 -50.667 OFFCURVE",
"866 -30 CURVE",
"794 17 LINE",
"778 -3 OFFCURVE",
"760.667 -13 OFFCURVE",
"742 -13 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"893 689 LINE",
"524 689 LINE",
"605 609 LINE",
"893 609 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */\01233 1 9 7 34 1 10 9 53 1 3 10 73 1 1 3 64 1 2 1 63 1 2 11 2 2 1 0 11 7 74 52 1 7 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01245 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 55 values pushed */\0120 2 1 11 1 2 11 112 0 5 0 4 8 5 4 99 15 13 2 8 12 1 7 9 8 7 97 6 1 3 0 1 2 3 1 97 14 1 11 0 0 11 0 95 0 10 10 9 91 0 9 9 45 10 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 62 values pushed */\0120 2 1 11 1 2 11 112 0 5 0 4 8 5 4 99 15 13 2 8 12 1 7 9 8 7 97 0 9 0 10 3 9 10 99 6 1 3 0 1 2 3 1 97 14 1 11 0 0 11 87 14 1 11 11 0 91 0 0 11 0 79 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 30 values pushed */\01279 79 0 0 79 82 79 82 81 80 0 78 0 77 71 69 57 55 17 17 20 45 35 37 35 20 35 16 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 880;
}
);
note = uni091D.loclNEP;
},
{
glyphname = "jh-deva.loclNEP";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"794 17 LINE",
"778 -3 OFFCURVE",
"760.667 -13 OFFCURVE",
"742 -13 CURVE SMOOTH",
"689.32 -13 OFFCURVE",
"559 59.451 OFFCURVE",
"559 111 CURVE SMOOTH",
"559 333 LINE",
"615 407.667 OFFCURVE",
"672.667 452 OFFCURVE",
"722 452 CURVE SMOOTH",
"736 452 OFFCURVE",
"748.667 445.667 OFFCURVE",
"760 433 CURVE",
"783 457 LINE",
"749.667 493 OFFCURVE",
"708 515 OFFCURVE",
"676 515 CURVE SMOOTH",
"640 515 OFFCURVE",
"601 491.667 OFFCURVE",
"559 445 CURVE",
"559 609 LINE",
"478 689 LINE",
"308 689 LINE",
"360 609 LINE",
"476 609 LINE",
"476 368 LINE",
"280 368 LINE",
"280 598 LINE SMOOTH",
"280 622.667 OFFCURVE",
"270.833 649.167 OFFCURVE",
"252.5 677.5 CURVE SMOOTH",
"215.833 734.167 OFFCURVE",
"155.333 779 OFFCURVE",
"110 779 CURVE SMOOTH",
"55.79 779 OFFCURVE",
"3 717.146 OFFCURVE",
"3 659 CURVE SMOOTH",
"3 599 OFFCURVE",
"59.333 532.333 OFFCURVE",
"146 495 CURVE",
"163 522 LINE",
"109.667 550 OFFCURVE",
"76 587.333 OFFCURVE",
"76 618 CURVE SMOOTH",
"76 660.882 OFFCURVE",
"117.467 716 OFFCURVE",
"154 716 CURVE SMOOTH",
"178 716 OFFCURVE",
"198 695.333 OFFCURVE",
"198 666 CURVE SMOOTH",
"198 368 LINE",
"117 368 LINE SMOOTH",
"103.667 368 OFFCURVE",
"95 359 OFFCURVE",
"95 347 CURVE SMOOTH",
"95 303.014 OFFCURVE",
"211.989 197 OFFCURVE",
"258 197 CURVE SMOOTH",
"271.333 197 OFFCURVE",
"280 204.667 OFFCURVE",
"280 218 CURVE SMOOTH",
"280 295 LINE",
"476 295 LINE",
"476 166 LINE SMOOTH",
"476 140 OFFCURVE",
"494.833 108.833 OFFCURVE",
"532.5 72.5 CURVE SMOOTH",
"607.833 -0.167 OFFCURVE",
"725.667 -61 OFFCURVE",
"803 -61 CURVE SMOOTH",
"825.667 -61 OFFCURVE",
"846.667 -50.667 OFFCURVE",
"866 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"605 609 LINE",
"769 609 LINE",
"769 689 LINE",
"524 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 109 values pushed */\01231 1 9 7 56 32 2 10 9 57 51 2 3 10 62 1 1 3 69 1 11 2 5 74 50 1 7 1 73 0 2 1 11 1 2 11 112 0 5 0 4 8 5 4 99 12 1 8 14 13 2 7 9 8 7 97 6 1 3 0 1 2 3 1 97 0 11 0 0 11 0 95 0 10 10 9 91 0 9 9 45 10 76 70 70 70 73 70 73 72 71 68 66 60 58 54 52 17 17 20 45 35 37 35 20 33 15 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 755;
}
);
note = uni091D094D.loclNEP;
},
{
glyphname = "zha-deva.loclNEP";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"835 27 LINE",
"817 8.333 OFFCURVE",
"795 -1 OFFCURVE",
"769 -1 CURVE SMOOTH",
"710.333 -1 OFFCURVE",
"639.333 40 OFFCURVE",
"578 112 CURVE",
"667.333 121.333 OFFCURVE",
"735 187.333 OFFCURVE",
"735 274 CURVE SMOOTH",
"735 306.667 OFFCURVE",
"727 340.667 OFFCURVE",
"711 376 CURVE SMOOTH",
"679 446.667 OFFCURVE",
"610.667 502 OFFCURVE",
"512 502 CURVE SMOOTH",
"449.333 502 OFFCURVE",
"395.333 478 OFFCURVE",
"338 430 CURVE",
"317.333 492.667 OFFCURVE",
"280.667 552.333 OFFCURVE",
"228 609 CURVE",
"147 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"186 609 LINE",
"250 537 OFFCURVE",
"289 449.667 OFFCURVE",
"289 379 CURVE SMOOTH",
"289 304.333 OFFCURVE",
"249.667 254 OFFCURVE",
"179 254 CURVE SMOOTH",
"148.333 254 OFFCURVE",
"96.667 275.333 OFFCURVE",
"74 306 CURVE",
"57 288 LINE",
"94.333 220 OFFCURVE",
"158 177 OFFCURVE",
"214 177 CURVE SMOOTH",
"308.667 177 OFFCURVE",
"353.667 237 OFFCURVE",
"355 329 CURVE",
"408.333 399.667 OFFCURVE",
"466 436 OFFCURVE",
"554 436 CURVE SMOOTH",
"618 436 OFFCURVE",
"670 382.667 OFFCURVE",
"670 320 CURVE SMOOTH",
"670 248 OFFCURVE",
"616.333 186.667 OFFCURVE",
"547 176 CURVE",
"513.667 224 OFFCURVE",
"469 246 OFFCURVE",
"437 246 CURVE SMOOTH",
"409 246 OFFCURVE",
"384 227 OFFCURVE",
"384 203 CURVE SMOOTH",
"384 154.867 OFFCURVE",
"478.356 106 OFFCURVE",
"542 106 CURVE",
"636.667 -0.667 OFFCURVE",
"737.667 -60 OFFCURVE",
"827 -60 CURVE SMOOTH",
"855 -60 OFFCURVE",
"881.333 -49.667 OFFCURVE",
"900 -31 CURVE"
);
},
{
closed = 1;
nodes = (
"273 609 LINE",
"795 609 LINE",
"795 689 LINE",
"193 689 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 18 values pushed */\01247 32 31 25 4 2 3 57 16 2 1 4 62 1 9 1 3 74 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 18 values pushed */\01247 32 31 25 4 5 3 57 16 2 1 4 62 1 9 1 3 74 \012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 46 values pushed */\0120 1 4 9 4 1 9 112 10 1 7 12 11 2 6 8 7 6 97 5 1 2 0 4 1 2 4 99 0 9 0 0 9 0 95 0 3 3 8 91 0 8 8 45 3 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 53 values pushed */\0120 2 5 4 5 2 4 112 0 1 4 9 4 1 9 112 10 1 7 12 11 2 6 8 7 6 97 0 5 0 4 1 5 4 99 0 9 0 0 9 0 95 0 3 3 8 91 0 8 8 45 3 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 59 values pushed */\0120 2 5 4 5 2 4 112 0 1 4 9 4 1 9 112 10 1 7 12 11 2 6 8 7 6 97 0 8 0 3 5 8 3 99 0 5 0 4 1 5 4 99 0 9 0 0 9 87 0 9 9 0 91 0 0 9 0 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 22 values pushed */\01263 63 63 66 63 66 65 64 61 59 37 17 21 37 36 39 37 18 34 13 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 782;
}
);
note = uni0979.loclNEP;
},
{
glyphname = "ra-deva.post";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-156 229 LINE",
"-156 321 LINE",
"-468 59 LINE SMOOTH",
"-480.667 49 OFFCURVE",
"-492.333 44 OFFCURVE",
"-503 44 CURVE SMOOTH",
"-516.333 44 OFFCURVE",
"-528 49.667 OFFCURVE",
"-538 61 CURVE",
"-554 39 LINE",
"-516.667 4.333 OFFCURVE",
"-481 -17 OFFCURVE",
"-457 -17 CURVE SMOOTH",
"-441.667 -17 OFFCURVE",
"-420 -4.667 OFFCURVE",
"-392 20 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */\0126 1 0 1 1 74 12 7 0 3 1 72 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 11 values pushed */\0120 1 0 1 114 0 0 0 26 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 9 values pushed */\0120 1 0 1 114 0 0 0 105 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 5 values pushed */\01236 34 2 6 22 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0930.post;
},
{
glyphname = "k_r-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"660 17 LINE",
"645.333 -3 OFFCURVE",
"628 -13 OFFCURVE",
"608 -13 CURVE SMOOTH",
"555.32 -13 OFFCURVE",
"425 59.451 OFFCURVE",
"425 111 CURVE SMOOTH",
"425 333 LINE",
"482.333 407.667 OFFCURVE",
"540 452 OFFCURVE",
"588 452 CURVE SMOOTH",
"602.667 452 OFFCURVE",
"615.333 445.667 OFFCURVE",
"626 433 CURVE",
"649 457 LINE",
"617 493 OFFCURVE",
"576.333 515 OFFCURVE",
"543 515 CURVE SMOOTH",
"507.667 515 OFFCURVE",
"468.333 491.667 OFFCURVE",
"425 445 CURVE",
"425 609 LINE",
"345 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"342 609 LINE",
"342 373 LINE",
"295.333 313 OFFCURVE",
"233.333 279 OFFCURVE",
"176 279 CURVE SMOOTH",
"136 279 OFFCURVE",
"103 307 OFFCURVE",
"103 339 CURVE SMOOTH",
"103 392.133 OFFCURVE",
"206.132 454 OFFCURVE",
"268 454 CURVE SMOOTH",
"276.667 454 OFFCURVE",
"290.667 450.667 OFFCURVE",
"310 444 CURVE",
"317 462 LINE",
"301 477.333 OFFCURVE",
"287.667 489 OFFCURVE",
"277 497 CURVE SMOOTH",
"266.333 505 OFFCURVE",
"257 509 OFFCURVE",
"249 509 CURVE SMOOTH",
"195 509 LINE SMOOTH",
"137.458 509 OFFCURVE",
"39 443.182 OFFCURVE",
"39 389 CURVE SMOOTH",
"39 365 OFFCURVE",
"47.667 340.333 OFFCURVE",
"65 315 CURVE SMOOTH",
"99.667 264.333 OFFCURVE",
"158.667 223.667 OFFCURVE",
"212 217 CURVE",
"117 123 LINE SMOOTH",
"91.667 97.667 OFFCURVE",
"66.333 85 OFFCURVE",
"41 85 CURVE SMOOTH",
"29 85 OFFCURVE",
"19 87 OFFCURVE",
"11 91 CURVE",
"2 66 LINE",
"34 47.333 OFFCURVE",
"63 38 OFFCURVE",
"89 38 CURVE SMOOTH",
"121.667 38 OFFCURVE",
"152.333 53.667 OFFCURVE",
"181 85 CURVE SMOOTH",
"342 258 LINE",
"342 166 LINE SMOOTH",
"342 137.333 OFFCURVE",
"361.5 105 OFFCURVE",
"400.5 69 CURVE SMOOTH",
"478.5 -3 OFFCURVE",
"599.333 -61 OFFCURVE",
"670 -61 CURVE SMOOTH",
"693.333 -61 OFFCURVE",
"714.667 -50.667 OFFCURVE",
"734 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"472 609 LINE",
"635 609 LINE",
"635 689 LINE",
"392 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */\01254 30 2 4 3 60 55 49 43 31 5 5 4 18 13 7 3 2 5 12 1 1 2 67 1 10 1 5 74 48 1 6 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 47 values pushed */\0120 5 4 2 4 5 2 112 8 1 3 9 1 4 5 3 4 99 0 2 0 1 10 2 1 99 0 10 0 0 10 0 95 13 12 2 6 6 7 89 11 1 7 7 24 6 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01239 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 47 values pushed */\0120 5 4 2 4 5 2 112 8 1 3 9 1 4 5 3 4 99 0 2 0 1 10 2 1 99 0 10 0 0 10 0 95 13 12 2 6 6 7 89 11 1 7 7 25 6 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 52 values pushed */\0120 5 4 2 4 5 2 112 0 8 3 4 8 87 0 3 9 1 4 5 3 4 99 0 2 0 1 10 2 1 99 0 10 0 0 10 0 95 13 12 2 6 6 7 89 11 1 7 7 25 6 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 24 values pushed */\01268 68 68 71 68 71 70 69 66 64 58 56 35 17 19 37 36 57 35 38 33 14 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 622;
}
);
note = uni0915094D0072;
},
{
glyphname = "ka_rakar-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"549.32 -13 OFFCURVE",
"419 59.451 OFFCURVE",
"419 111 CURVE SMOOTH",
"419 333 LINE",
"475 407.667 OFFCURVE",
"532.667 452 OFFCURVE",
"582 452 CURVE SMOOTH",
"610 452 OFFCURVE",
"634 424.333 OFFCURVE",
"634 395 CURVE SMOOTH",
"634 328.333 OFFCURVE",
"572.333 267.333 OFFCURVE",
"491 254 CURVE",
"538 189 LINE",
"599.239 195.281 OFFCURVE",
"698 278.943 OFFCURVE",
"698 340 CURVE SMOOTH",
"698 365.333 OFFCURVE",
"689.667 391.667 OFFCURVE",
"673 419 CURVE SMOOTH",
"639.667 473.667 OFFCURVE",
"583 515 OFFCURVE",
"535 515 CURVE SMOOTH",
"499.667 515 OFFCURVE",
"461 491.667 OFFCURVE",
"419 445 CURVE",
"419 609 LINE",
"344 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"336 609 LINE",
"336 373 LINE",
"289.333 313 OFFCURVE",
"227.667 279 OFFCURVE",
"169 279 CURVE SMOOTH",
"129 279 OFFCURVE",
"96 307 OFFCURVE",
"96 339 CURVE SMOOTH",
"96 394.404 OFFCURVE",
"195.458 460 OFFCURVE",
"257 460 CURVE SMOOTH",
"269 460 OFFCURVE",
"284.333 454.667 OFFCURVE",
"303 444 CURVE",
"311 462 LINE",
"279 500.667 OFFCURVE",
"255.667 520 OFFCURVE",
"241 520 CURVE SMOOTH",
"187 520 LINE SMOOTH",
"130.209 520 OFFCURVE",
"32 446.235 OFFCURVE",
"32 389 CURVE SMOOTH",
"32 363.667 OFFCURVE",
"40.667 338 OFFCURVE",
"58 312 CURVE SMOOTH",
"92.667 260 OFFCURVE",
"152.333 220 OFFCURVE",
"211 216 CURVE",
"117 123 LINE SMOOTH",
"91.667 97.667 OFFCURVE",
"66.333 85 OFFCURVE",
"41 85 CURVE SMOOTH",
"29 85 OFFCURVE",
"19 87 OFFCURVE",
"11 91 CURVE",
"2 66 LINE",
"34 47.333 OFFCURVE",
"63 38 OFFCURVE",
"89 38 CURVE SMOOTH",
"121.667 38 OFFCURVE",
"152.333 53.667 OFFCURVE",
"181 85 CURVE SMOOTH",
"336 252 LINE",
"336 166 LINE SMOOTH",
"336 140 OFFCURVE",
"355 108.833 OFFCURVE",
"393 72.5 CURVE SMOOTH",
"469 -0.167 OFFCURVE",
"586.667 -61 OFFCURVE",
"664 -61 CURVE SMOOTH",
"686.667 -61 OFFCURVE",
"707.667 -50.667 OFFCURVE",
"727 -30 CURVE",
"653 17 LINE",
"634.333 -3 OFFCURVE",
"617.333 -13 OFFCURVE",
"602 -13 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"747 689 LINE",
"390 689 LINE",
"466 609 LINE",
"747 609 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 40 values pushed */\01231 1 5 4 70 50 44 32 4 6 5 61 9 2 3 6 60 15 2 2 3 14 1 1 2 1 1 11 1 2 1 0 11 7 74 49 1 7 1 73 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01246 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 40 values pushed */\01231 1 5 4 70 50 44 32 4 6 10 61 9 2 3 6 60 15 2 2 3 14 1 1 2 1 1 11 1 2 1 0 11 7 74 49 1 7 1 73 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 40 values pushed */\01231 1 5 9 70 50 44 32 4 6 10 61 9 2 3 6 60 15 2 2 3 14 1 1 2 1 1 11 1 2 1 0 11 7 74 49 1 7 1 73 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 48 values pushed */\0129 1 4 10 1 5 6 4 5 99 0 6 0 3 2 6 3 99 0 2 0 1 11 2 1 99 14 1 11 0 0 11 0 95 12 1 7 7 8 89 15 13 2 8 8 24 7 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 48 values pushed */\0129 1 4 10 1 5 6 4 5 99 0 6 0 3 2 6 3 99 0 2 0 1 11 2 1 99 14 1 11 0 0 11 0 95 12 1 7 7 8 89 15 13 2 8 8 25 7 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01246 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 53 values pushed */\0120 5 10 4 5 87 9 1 4 0 10 6 4 10 99 0 6 0 3 2 6 3 99 0 2 0 1 11 2 1 99 14 1 11 0 0 11 0 95 12 1 7 7 8 89 15 13 2 8 8 25 7 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 54 values pushed */\0120 4 0 5 10 4 5 99 0 9 0 10 6 9 10 99 0 6 0 3 2 6 3 99 0 2 0 1 11 2 1 99 14 1 11 0 0 11 0 95 12 1 7 7 8 89 15 13 2 8 8 25 7 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 30 values pushed */\01276 76 0 0 76 79 76 79 78 77 0 75 0 74 68 66 53 51 17 19 37 35 54 18 35 38 35 16 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 734;
}
);
note = uni0915094D0930;
},
{
glyphname = "k_ka-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"1129.32 -13 OFFCURVE",
"999 59.451 OFFCURVE",
"999 111 CURVE SMOOTH",
"999 333 LINE",
"1055 407.667 OFFCURVE",
"1113.667 452 OFFCURVE",
"1163 452 CURVE SMOOTH",
"1191 452 OFFCURVE",
"1215 424.333 OFFCURVE",
"1215 395 CURVE SMOOTH",
"1215 328.333 OFFCURVE",
"1152.333 267.333 OFFCURVE",
"1071 254 CURVE",
"1119 189 LINE",
"1179.472 195.202 OFFCURVE",
"1278 279.047 OFFCURVE",
"1278 340 CURVE SMOOTH",
"1278 365.333 OFFCURVE",
"1269.667 391.667 OFFCURVE",
"1253 419 CURVE SMOOTH",
"1219.667 473.667 OFFCURVE",
"1163 515 OFFCURVE",
"1115 515 CURVE SMOOTH",
"1079.667 515 OFFCURVE",
"1041 491.667 OFFCURVE",
"999 445 CURVE",
"999 609 LINE",
"924 689 LINE",
"392 689 LINE",
"472 609 LINE",
"635 609 LINE",
"917 609 LINE",
"917 373 LINE",
"870.333 313 OFFCURVE",
"807.333 279 OFFCURVE",
"750 279 CURVE SMOOTH",
"710 279 OFFCURVE",
"676 307 OFFCURVE",
"676 339 CURVE SMOOTH",
"676 394.404 OFFCURVE",
"775.458 460 OFFCURVE",
"837 460 CURVE SMOOTH",
"849 460 OFFCURVE",
"864.333 454.667 OFFCURVE",
"883 444 CURVE",
"891 462 LINE",
"859 500.667 OFFCURVE",
"835.667 520 OFFCURVE",
"821 520 CURVE SMOOTH",
"768 520 LINE SMOOTH",
"722.667 520 OFFCURVE",
"674.667 497.667 OFFCURVE",
"644 463 CURVE",
"612 496.333 OFFCURVE",
"573.667 515 OFFCURVE",
"543 515 CURVE SMOOTH",
"507.667 515 OFFCURVE",
"468.333 491.667 OFFCURVE",
"425 445 CURVE",
"425 609 LINE",
"345 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"342 609 LINE",
"342 373 LINE",
"295.333 313 OFFCURVE",
"233.333 279 OFFCURVE",
"176 279 CURVE SMOOTH",
"136 279 OFFCURVE",
"103 307 OFFCURVE",
"103 339 CURVE SMOOTH",
"103 392.133 OFFCURVE",
"206.132 454 OFFCURVE",
"268 454 CURVE SMOOTH",
"276.667 454 OFFCURVE",
"290.667 450.667 OFFCURVE",
"310 444 CURVE",
"317 462 LINE",
"301 477.333 OFFCURVE",
"287.667 489 OFFCURVE",
"277 497 CURVE SMOOTH",
"266.333 505 OFFCURVE",
"257 509 OFFCURVE",
"249 509 CURVE SMOOTH",
"195 509 LINE SMOOTH",
"137.458 509 OFFCURVE",
"39 443.182 OFFCURVE",
"39 389 CURVE SMOOTH",
"39 363 OFFCURVE",
"48.833 336.5 OFFCURVE",
"68.5 309.5 CURVE SMOOTH",
"107.833 255.5 OFFCURVE",
"174.333 216 OFFCURVE",
"229 216 CURVE SMOOTH",
"269 216 OFFCURVE",
"308.667 235.333 OFFCURVE",
"342 270 CURVE",
"342 166 LINE SMOOTH",
"342 137.333 OFFCURVE",
"361.5 105 OFFCURVE",
"400.5 69 CURVE SMOOTH",
"478.5 -3 OFFCURVE",
"599.333 -61 OFFCURVE",
"670 -61 CURVE SMOOTH",
"693.333 -61 OFFCURVE",
"714.667 -50.667 OFFCURVE",
"734 -30 CURVE",
"660 17 LINE",
"645.333 -3 OFFCURVE",
"628 -13 OFFCURVE",
"608 -13 CURVE SMOOTH",
"555.32 -13 OFFCURVE",
"425 59.451 OFFCURVE",
"425 111 CURVE SMOOTH",
"425 333 LINE",
"482.333 407.667 OFFCURVE",
"540 452 OFFCURVE",
"588 452 CURVE SMOOTH",
"602 452 OFFCURVE",
"614 446.333 OFFCURVE",
"624 435 CURVE",
"616 420.333 OFFCURVE",
"612 405 OFFCURVE",
"612 389 CURVE SMOOTH",
"612 362.333 OFFCURVE",
"621.333 335.5 OFFCURVE",
"640 308.5 CURVE SMOOTH",
"677.333 254.5 OFFCURVE",
"740.667 216 OFFCURVE",
"802 216 CURVE SMOOTH",
"841.333 216 OFFCURVE",
"879.667 234 OFFCURVE",
"917 270 CURVE",
"917 166 LINE SMOOTH",
"917 140 OFFCURVE",
"935.833 108.833 OFFCURVE",
"973.5 72.5 CURVE SMOOTH",
"1048.833 -0.167 OFFCURVE",
"1166.667 -61 OFFCURVE",
"1244 -61 CURVE SMOOTH",
"1266.667 -61 OFFCURVE",
"1287.667 -50.667 OFFCURVE",
"1307 -30 CURVE",
"1233 17 LINE",
"1214.333 -3 OFFCURVE",
"1197.333 -13 OFFCURVE",
"1182 -13 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1327 689 LINE",
"970 689 LINE",
"1046 609 LINE",
"1327 609 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 43 values pushed */\01282 76 52 3 2 6 122 102 95 83 71 65 53 22 17 9 8 2 113 37 9 3 1 8 112 29 1 3 3 1 30 2 2 0 3 5 74 101 70 2 9 1 73 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 43 values pushed */\01282 76 52 3 13 6 122 102 95 83 71 65 53 22 17 9 8 2 113 37 9 3 1 8 112 29 1 3 3 1 30 2 2 0 3 5 74 101 70 2 9 1 73 \012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 55 values pushed */\0120 12 6 2 12 87 17 11 2 6 18 13 7 3 2 8 6 2 99 14 1 8 5 1 1 3 8 1 99 22 19 2 3 4 1 0 3 0 95 20 15 2 9 9 10 89 23 21 16 3 10 10 24 9 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 55 values pushed */\0120 12 6 2 12 87 17 11 2 6 18 13 7 3 2 8 6 2 99 14 1 8 5 1 1 3 8 1 99 22 19 2 3 4 1 0 3 0 95 20 15 2 9 9 10 89 23 21 16 3 10 10 25 9 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01239 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 56 values pushed */\0120 12 0 13 2 12 13 99 17 11 2 6 18 7 2 2 8 6 2 99 14 1 8 5 1 1 3 8 1 99 22 19 2 3 4 1 0 3 0 95 20 15 2 9 9 10 89 23 21 16 3 10 10 25 9 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01246 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 56 values pushed */\01217 12 2 11 0 13 2 11 13 99 0 6 18 7 2 2 8 6 2 99 14 1 8 5 1 1 3 8 1 99 22 19 2 3 4 1 0 3 0 95 20 15 2 9 9 10 89 23 21 16 3 10 10 25 9 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 61 values pushed */\01217 1 11 6 2 11 87 0 12 0 13 2 12 13 99 0 6 18 7 2 2 8 6 2 99 14 1 8 5 1 1 3 8 1 99 22 19 2 3 4 1 0 3 0 95 20 15 2 9 9 10 89 23 21 16 3 10 10 25 9 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 46 values pushed */\012128 128 0 0 128 131 128 131 130 129 0 127 0 126 120 118 105 103 100 99 98 96 93 91 86 84 81 78 74 72 69 68 67 66 37 36 54 38 35 38 38 37 35 24 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 1314;
}
);
note = uni0915094D0915;
},
{
glyphname = "k_ta-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"567 609 LINE",
"486 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"484 609 LINE",
"484 434 LINE",
"455.333 452 OFFCURVE",
"415 461 OFFCURVE",
"363 461 CURVE SMOOTH",
"9 461 LINE",
"90 381 LINE",
"119.333 391 OFFCURVE",
"163 396 OFFCURVE",
"221 396 CURVE",
"163.667 358.667 OFFCURVE",
"129 301.667 OFFCURVE",
"129 247 CURVE SMOOTH",
"129 139 OFFCURVE",
"217 50 OFFCURVE",
"377 6 CURVE",
"395 41 LINE",
"368.333 44.333 OFFCURVE",
"339.5 53.833 OFFCURVE",
"308.5 69.5 CURVE SMOOTH",
"246.5 100.833 OFFCURVE",
"199 150 OFFCURVE",
"199 202 CURVE SMOOTH",
"199 240.667 OFFCURVE",
"210.833 274.167 OFFCURVE",
"234.5 302.5 CURVE SMOOTH",
"281.833 359.167 OFFCURVE",
"360 390 OFFCURVE",
"432 390 CURVE SMOOTH",
"450.667 390 OFFCURVE",
"468 388 OFFCURVE",
"484 384 CURVE",
"484 166 LINE SMOOTH",
"484 140 OFFCURVE",
"503.167 108.833 OFFCURVE",
"541.5 72.5 CURVE SMOOTH",
"618.167 -0.167 OFFCURVE",
"736.333 -61 OFFCURVE",
"811 -61 CURVE SMOOTH",
"834.333 -61 OFFCURVE",
"855.333 -50.667 OFFCURVE",
"874 -30 CURVE",
"801 17 LINE",
"785 -3 OFFCURVE",
"767.667 -13 OFFCURVE",
"749 -13 CURVE SMOOTH",
"694.647 -13 OFFCURVE",
"567 61.12 OFFCURVE",
"567 111 CURVE SMOOTH",
"567 325 LINE",
"616.333 383.667 OFFCURVE",
"685.667 417 OFFCURVE",
"755 417 CURVE SMOOTH",
"805.667 417 OFFCURVE",
"848 373.667 OFFCURVE",
"848 323 CURVE SMOOTH",
"848 253.667 OFFCURVE",
"798.333 190.667 OFFCURVE",
"721 164 CURVE",
"795 106 LINE",
"869.667 131.333 OFFCURVE",
"919 199.333 OFFCURVE",
"919 274 CURVE SMOOTH",
"919 302.667 OFFCURVE",
"907.833 333.333 OFFCURVE",
"885.5 366 CURVE SMOOTH",
"840.833 431.333 OFFCURVE",
"767.667 482 OFFCURVE",
"709 482 CURVE SMOOTH",
"658.333 482 OFFCURVE",
"608.333 462.333 OFFCURVE",
"567 429 CURVE"
);
},
{
closed = 1;
nodes = (
"902 609 LINE",
"902 689 LINE",
"533 689 LINE",
"613 609 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */\01259 1 2 1 6 55 47 46 36 28 21 12 11 8 2 4 29 1 3 2 3 74 0 1 7 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 37 values pushed */\0120 0 0 1 4 0 1 99 0 6 5 1 4 2 6 4 99 0 2 0 3 2 3 95 9 1 7 7 8 89 10 1 8 8 24 7 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01239 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 37 values pushed */\0120 0 0 1 4 0 1 99 0 6 5 1 4 2 6 4 99 0 2 0 3 2 3 95 9 1 7 7 8 89 10 1 8 8 25 7 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 43 values pushed */\0120 4 5 2 5 4 104 0 0 0 1 5 0 1 99 0 6 0 5 4 6 5 99 0 2 0 3 2 3 95 9 1 7 7 8 89 10 1 8 8 25 7 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 16 values pushed */\01267 66 65 64 17 18 34 30 37 35 38 44 35 11 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 887;
}
);
note = uni0915094D0924;
},
{
glyphname = "k_la-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"1397 17 LINE",
"1383.667 -1.667 OFFCURVE",
"1362.667 -13 OFFCURVE",
"1344 -13 CURVE SMOOTH",
"1292.809 -13 OFFCURVE",
"1163 59.544 OFFCURVE",
"1163 111 CURVE SMOOTH",
"1163 609 LINE",
"1082 689 LINE",
"392 689 LINE",
"472 609 LINE",
"635 609 LINE",
"1080 609 LINE",
"1080 415 LINE",
"1036 457.667 OFFCURVE",
"991.333 482 OFFCURVE",
"962 482 CURVE SMOOTH",
"916.667 482 OFFCURVE",
"873.667 443.333 OFFCURVE",
"859 390 CURVE",
"817.667 451.333 OFFCURVE",
"759.667 489 OFFCURVE",
"713 489 CURVE SMOOTH",
"690.333 489 OFFCURVE",
"668.333 479.333 OFFCURVE",
"647 460 CURVE",
"613.667 494.667 OFFCURVE",
"575 515 OFFCURVE",
"543 515 CURVE SMOOTH",
"507.667 515 OFFCURVE",
"468.333 491.667 OFFCURVE",
"425 445 CURVE",
"425 609 LINE",
"345 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"342 609 LINE",
"342 373 LINE",
"295.333 313 OFFCURVE",
"233.333 279 OFFCURVE",
"176 279 CURVE SMOOTH",
"136 279 OFFCURVE",
"103 307 OFFCURVE",
"103 339 CURVE SMOOTH",
"103 392.133 OFFCURVE",
"206.132 454 OFFCURVE",
"268 454 CURVE SMOOTH",
"276.667 454 OFFCURVE",
"290.667 450.667 OFFCURVE",
"310 444 CURVE",
"317 462 LINE",
"301 477.333 OFFCURVE",
"287.667 489 OFFCURVE",
"277 497 CURVE SMOOTH",
"266.333 505 OFFCURVE",
"257 509 OFFCURVE",
"249 509 CURVE SMOOTH",
"195 509 LINE SMOOTH",
"137.458 509 OFFCURVE",
"39 443.182 OFFCURVE",
"39 389 CURVE SMOOTH",
"39 363 OFFCURVE",
"48.833 336.5 OFFCURVE",
"68.5 309.5 CURVE SMOOTH",
"107.833 255.5 OFFCURVE",
"174.333 216 OFFCURVE",
"229 216 CURVE SMOOTH",
"269 216 OFFCURVE",
"308.667 235.333 OFFCURVE",
"342 270 CURVE",
"342 166 LINE SMOOTH",
"342 137.333 OFFCURVE",
"361.5 105 OFFCURVE",
"400.5 69 CURVE SMOOTH",
"478.5 -3 OFFCURVE",
"599.333 -61 OFFCURVE",
"670 -61 CURVE SMOOTH",
"693.333 -61 OFFCURVE",
"714.667 -50.667 OFFCURVE",
"734 -30 CURVE",
"660 17 LINE",
"645.333 -3 OFFCURVE",
"628 -13 OFFCURVE",
"608 -13 CURVE SMOOTH",
"555.32 -13 OFFCURVE",
"425 59.451 OFFCURVE",
"425 111 CURVE SMOOTH",
"425 333 LINE",
"482.333 407.667 OFFCURVE",
"540 452 OFFCURVE",
"588 452 CURVE SMOOTH",
"602 452 OFFCURVE",
"614 446.333 OFFCURVE",
"624 435 CURVE",
"600 403 OFFCURVE",
"586 361.667 OFFCURVE",
"586 323 CURVE SMOOTH",
"586 274.333 OFFCURVE",
"604.667 221.333 OFFCURVE",
"642 164 CURVE SMOOTH",
"716.667 49.333 OFFCURVE",
"839.333 -40 OFFCURVE",
"938 -40 CURVE SMOOTH",
"968 -40 OFFCURVE",
"992.333 -30.333 OFFCURVE",
"1011 -11 CURVE",
"959 45 LINE",
"940.333 26.333 OFFCURVE",
"914.333 15 OFFCURVE",
"889 15 CURVE SMOOTH",
"859 15 OFFCURVE",
"825.833 28.667 OFFCURVE",
"789.5 56 CURVE SMOOTH",
"716.833 110.667 OFFCURVE",
"658 198.667 OFFCURVE",
"658 264 CURVE SMOOTH",
"658 336.526 OFFCURVE",
"704.015 416 OFFCURVE",
"763 416 CURVE SMOOTH",
"791 416 OFFCURVE",
"822.667 390.333 OFFCURVE",
"844 353 CURVE",
"843.333 347 OFFCURVE",
"842 336.167 OFFCURVE",
"840 320.5 CURVE SMOOTH",
"838 304.833 OFFCURVE",
"837 290.333 OFFCURVE",
"837 277 CURVE",
"918 239 LINE",
"918 357.667 OFFCURVE",
"956.333 420 OFFCURVE",
"1011 420 CURVE SMOOTH",
"1031 420 OFFCURVE",
"1056 402.333 OFFCURVE",
"1080 369 CURVE",
"1080 168 LINE SMOOTH",
"1080 140.667 OFFCURVE",
"1099 108.833 OFFCURVE",
"1137 72.5 CURVE SMOOTH",
"1213 -0.167 OFFCURVE",
"1332.333 -61 OFFCURVE",
"1407 -61 CURVE SMOOTH",
"1430.333 -61 OFFCURVE",
"1451.333 -50.667 OFFCURVE",
"1470 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"1209 609 LINE",
"1279 609 LINE",
"1279 689 LINE",
"1128 689 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 48 values pushed */\012100 76 2 5 15 95 77 41 3 1 5 111 105 89 46 17 7 6 11 1 61 14 13 3 8 11 125 53 31 3 3 8 32 1 6 3 54 1 4 6 7 74 117 94 2 12 1 73 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 48 values pushed */\012100 76 2 5 16 95 77 41 3 1 5 111 105 89 46 17 7 6 11 1 61 14 13 3 8 11 125 53 31 3 3 8 32 1 6 3 54 1 4 6 7 74 117 94 2 12 1 73 \012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 61 values pushed */\01214 1 9 10 1 5 1 9 5 99 16 1 15 2 1 1 11 15 1 99 0 11 0 8 3 11 8 99 0 3 0 4 0 3 4 99 19 1 6 7 1 0 6 0 95 22 21 17 3 12 12 13 89 20 18 2 13 13 24 12 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 61 values pushed */\01214 1 9 10 1 5 1 9 5 99 16 1 15 2 1 1 11 15 1 99 0 11 0 8 3 11 8 99 0 3 0 4 0 3 4 99 19 1 6 7 1 0 6 0 95 22 21 17 3 12 12 13 89 20 18 2 13 13 25 12 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01239 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 66 values pushed */\0120 15 16 1 15 87 14 1 9 10 1 5 1 9 5 99 0 16 2 1 1 11 16 1 99 0 11 0 8 3 11 8 99 0 3 0 4 0 3 4 99 19 1 6 7 1 0 6 0 95 22 21 17 3 12 12 13 89 20 18 2 13 13 25 12 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 71 values pushed */\0120 14 9 5 14 87 0 15 16 1 15 87 0 9 10 1 5 1 9 5 99 0 16 2 1 1 11 16 1 99 0 11 0 8 3 11 8 99 0 3 0 4 0 3 4 99 19 1 6 7 1 0 6 0 95 22 21 17 3 12 12 13 89 20 18 2 13 13 25 12 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 42 values pushed */\012126 126 126 129 126 129 128 127 123 121 116 115 114 112 109 107 103 101 98 96 93 92 91 90 87 85 80 78 74 71 38 35 38 39 36 38 40 38 33 23 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 1265;
}
);
note = uni0915094D0932;
},
{
glyphname = "k_va-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"1282 17 LINE",
"1268.667 -1.667 OFFCURVE",
"1247.333 -13 OFFCURVE",
"1230 -13 CURVE SMOOTH",
"1178.134 -13 OFFCURVE",
"1048 59.656 OFFCURVE",
"1048 111 CURVE SMOOTH",
"1048 609 LINE",
"968 689 LINE",
"392 689 LINE",
"472 609 LINE",
"635 609 LINE",
"966 609 LINE",
"966 434 LINE",
"922 494 OFFCURVE",
"854.333 529 OFFCURVE",
"785 529 CURVE SMOOTH",
"727.667 529 OFFCURVE",
"674 504 OFFCURVE",
"642 464 CURVE",
"611.333 496 OFFCURVE",
"573.667 515 OFFCURVE",
"543 515 CURVE SMOOTH",
"507.667 515 OFFCURVE",
"468.333 491.667 OFFCURVE",
"425 445 CURVE",
"425 609 LINE",
"345 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"342 609 LINE",
"342 373 LINE",
"295.333 313 OFFCURVE",
"233.333 279 OFFCURVE",
"176 279 CURVE SMOOTH",
"136 279 OFFCURVE",
"103 307 OFFCURVE",
"103 339 CURVE SMOOTH",
"103 392.133 OFFCURVE",
"206.132 454 OFFCURVE",
"268 454 CURVE SMOOTH",
"276.667 454 OFFCURVE",
"290.667 450.667 OFFCURVE",
"310 444 CURVE",
"317 462 LINE",
"301 477.333 OFFCURVE",
"287.667 489 OFFCURVE",
"277 497 CURVE SMOOTH",
"266.333 505 OFFCURVE",
"257 509 OFFCURVE",
"249 509 CURVE SMOOTH",
"195 509 LINE SMOOTH",
"137.458 509 OFFCURVE",
"39 443.182 OFFCURVE",
"39 389 CURVE SMOOTH",
"39 363 OFFCURVE",
"48.833 336.5 OFFCURVE",
"68.5 309.5 CURVE SMOOTH",
"107.833 255.5 OFFCURVE",
"174.333 216 OFFCURVE",
"229 216 CURVE SMOOTH",
"269 216 OFFCURVE",
"308.667 235.333 OFFCURVE",
"342 270 CURVE",
"342 166 LINE SMOOTH",
"342 137.333 OFFCURVE",
"361.5 105 OFFCURVE",
"400.5 69 CURVE SMOOTH",
"478.5 -3 OFFCURVE",
"599.333 -61 OFFCURVE",
"670 -61 CURVE SMOOTH",
"693.333 -61 OFFCURVE",
"714.667 -50.667 OFFCURVE",
"734 -30 CURVE",
"660 17 LINE",
"645.333 -3 OFFCURVE",
"628 -13 OFFCURVE",
"608 -13 CURVE SMOOTH",
"555.32 -13 OFFCURVE",
"425 59.451 OFFCURVE",
"425 111 CURVE SMOOTH",
"425 333 LINE",
"482.333 407.667 OFFCURVE",
"540 452 OFFCURVE",
"588 452 CURVE SMOOTH",
"600.667 452 OFFCURVE",
"613 446 OFFCURVE",
"625 434 CURVE",
"619 421.333 OFFCURVE",
"616 407 OFFCURVE",
"616 391 CURVE SMOOTH",
"616 360.333 OFFCURVE",
"627.167 328.667 OFFCURVE",
"649.5 296 CURVE SMOOTH",
"694.167 230.667 OFFCURVE",
"772.333 182 OFFCURVE",
"851 182 CURVE SMOOTH",
"893.667 182 OFFCURVE",
"936.333 201.333 OFFCURVE",
"967 236 CURVE",
"967 165 LINE SMOOTH",
"967 140.333 OFFCURVE",
"985.667 109.833 OFFCURVE",
"1023 73.5 CURVE SMOOTH",
"1097.667 0.833 OFFCURVE",
"1214.333 -61 OFFCURVE",
"1293 -61 CURVE SMOOTH",
"1315.667 -61 OFFCURVE",
"1336.333 -50.667 OFFCURVE",
"1355 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"1093 609 LINE",
"1163 609 LINE",
"1163 689 LINE",
"1014 689 LINE"
);
},
{
closed = 1;
nodes = (
"966 345 LINE",
"927.333 282.333 OFFCURVE",
"856.333 244 OFFCURVE",
"787 244 CURVE SMOOTH",
"737.667 244 OFFCURVE",
"686 286 OFFCURVE",
"686 330 CURVE SMOOTH",
"686 391.243 OFFCURVE",
"789.739 466 OFFCURVE",
"854 466 CURVE SMOOTH",
"892.667 466 OFFCURVE",
"935.333 435.667 OFFCURVE",
"966 389 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */\01275 51 2 2 18 113 100 81 70 64 52 21 16 8 8 2 36 1 19 8 7 1 5 19 95 28 2 3 1 29 1 0 3 6 74 87 69 2 9 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 59 values pushed */\0120 12 0 18 2 12 18 99 11 1 6 7 1 2 8 6 2 99 0 8 0 5 1 8 5 99 0 19 0 1 3 19 1 99 15 1 3 4 1 0 3 0 95 20 17 13 3 9 9 10 89 16 14 2 10 10 24 9 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01239 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 59 values pushed */\0120 12 0 18 2 12 18 99 11 1 6 7 1 2 8 6 2 99 0 8 0 5 1 8 5 99 0 19 0 1 3 19 1 99 15 1 3 4 1 0 3 0 95 20 17 13 3 9 9 10 89 16 14 2 10 10 25 9 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 64 values pushed */\0120 11 6 2 11 87 0 12 0 18 2 12 18 99 0 6 7 1 2 8 6 2 99 0 8 0 5 1 8 5 99 0 19 0 1 3 19 1 99 15 1 3 4 1 0 3 0 95 20 17 13 3 9 9 10 89 16 14 2 10 10 25 9 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 38 values pushed */\01296 96 111 109 104 102 96 99 96 99 98 97 93 91 86 85 84 82 79 77 73 71 68 67 66 65 37 36 54 38 35 38 38 38 33 21 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 1150;
}
);
note = uni0915094D0935;
},
{
glyphname = "k_ssa-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"144.162 702 OFFCURVE",
"81 644.025 OFFCURVE",
"81 575 CURVE SMOOTH",
"81 521.667 OFFCURVE",
"138 465.333 OFFCURVE",
"222 440 CURVE",
"120.667 384 OFFCURVE",
"58 314.333 OFFCURVE",
"58 257 CURVE SMOOTH",
"58 229 OFFCURVE",
"68.167 200.833 OFFCURVE",
"88.5 172.5 CURVE SMOOTH",
"129.167 115.833 OFFCURVE",
"198.667 75 OFFCURVE",
"260 75 CURVE SMOOTH",
"296 75 OFFCURVE",
"328.667 84.333 OFFCURVE",
"358 103 CURVE",
"419.333 -1 OFFCURVE",
"499 -64 OFFCURVE",
"567 -64 CURVE SMOOTH",
"587.667 -64 OFFCURVE",
"607.667 -54.667 OFFCURVE",
"627 -36 CURVE",
"559 17 LINE",
"545 1.667 OFFCURVE",
"532 -6 OFFCURVE",
"520 -6 CURVE SMOOTH",
"481.333 -6 OFFCURVE",
"432 40 OFFCURVE",
"388 116 CURVE",
"430.667 144 OFFCURVE",
"456 175 OFFCURVE",
"456 199 CURVE SMOOTH",
"456 236.28 OFFCURVE",
"397.165 281 OFFCURVE",
"354 281 CURVE SMOOTH",
"330 281 OFFCURVE",
"310 258.667 OFFCURVE",
"310 232 CURVE SMOOTH",
"310 212 OFFCURVE",
"315 193 OFFCURVE",
"325 175 CURVE",
"289 146.333 OFFCURVE",
"250.667 132 OFFCURVE",
"210 132 CURVE SMOOTH",
"163.333 132 OFFCURVE",
"125 165.667 OFFCURVE",
"125 207 CURVE SMOOTH",
"125 265.667 OFFCURVE",
"199 338.667 OFFCURVE",
"319 404 CURVE",
"375 382 OFFCURVE",
"421 371 OFFCURVE",
"457 371 CURVE SMOOTH",
"509 371 OFFCURVE",
"554.333 381 OFFCURVE",
"593 401 CURVE",
"593 166 LINE SMOOTH",
"593 140 OFFCURVE",
"612.167 108.833 OFFCURVE",
"650.5 72.5 CURVE SMOOTH",
"727.167 -0.167 OFFCURVE",
"845.333 -61 OFFCURVE",
"920 -61 CURVE SMOOTH",
"944 -61 OFFCURVE",
"965 -50.667 OFFCURVE",
"983 -30 CURVE",
"911 17 LINE",
"894.333 -3 OFFCURVE",
"876.667 -13 OFFCURVE",
"858 -13 CURVE SMOOTH",
"803.647 -13 OFFCURVE",
"676 61.12 OFFCURVE",
"676 111 CURVE SMOOTH",
"676 609 LINE",
"591 689 LINE",
"412 689 LINE",
"486 609 LINE",
"593 609 LINE",
"593 480 LINE",
"529 440.667 OFFCURVE",
"464 421 OFFCURVE",
"398 421 CURVE SMOOTH",
"377.333 421 OFFCURVE",
"359 424 OFFCURVE",
"343 430 CURVE",
"384.333 458 OFFCURVE",
"408 496 OFFCURVE",
"408 536 CURVE SMOOTH",
"408 560 OFFCURVE",
"398.167 585 OFFCURVE",
"378.5 611 CURVE SMOOTH",
"339.167 663 OFFCURVE",
"274.333 702 OFFCURVE",
"217 702 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"792 609 LINE",
"792 689 LINE",
"636 689 LINE",
"722 609 LINE"
);
},
{
closed = 1;
nodes = (
"303 651 OFFCURVE",
"342 619 OFFCURVE",
"342 587 CURVE SMOOTH",
"342 541.667 OFFCURVE",
"308.667 494.667 OFFCURVE",
"254 464 CURVE",
"199.333 476 OFFCURVE",
"161 510 OFFCURVE",
"161 546 CURVE SMOOTH",
"161 599.136 OFFCURVE",
"214.17 651 OFFCURVE",
"267 651 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 38 values pushed */\01292 74 10 6 4 0 1 34 30 2 5 0 42 1 6 7 65 54 2 10 6 59 22 2 3 10 60 23 2 4 3 6 74 15 1 1 1 73 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 38 values pushed */\01292 74 10 6 4 0 1 34 30 2 5 0 42 1 6 7 65 54 2 10 6 59 22 2 8 10 60 23 2 4 3 6 74 15 1 1 1 73 \012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 58 values pushed */\0120 7 5 6 5 7 6 112 0 0 0 5 7 0 5 99 0 6 0 10 3 6 10 99 8 1 3 9 1 4 3 4 95 16 1 14 14 11 91 15 1 11 11 24 75 12 1 1 1 2 89 13 1 2 2 24 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 58 values pushed */\0120 7 5 6 5 7 6 112 0 0 0 5 7 0 5 99 0 6 0 10 3 6 10 99 8 1 3 9 1 4 3 4 95 16 1 14 14 11 91 15 1 11 11 25 75 12 1 1 1 2 89 13 1 2 2 25 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01239 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 63 values pushed */\0120 7 5 6 5 7 6 112 0 0 0 5 7 0 5 99 0 6 0 10 8 6 10 99 0 8 3 4 8 87 0 3 9 1 4 3 4 95 16 1 14 14 11 91 15 1 11 11 25 75 12 1 1 1 2 89 13 1 2 2 25 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 61 values pushed */\0120 7 5 6 5 7 6 112 15 1 11 16 1 14 1 11 14 99 0 0 0 5 7 0 5 99 0 6 0 10 8 6 10 99 0 8 3 4 8 87 0 3 9 1 4 3 4 95 12 1 1 1 2 89 13 1 2 2 25 1 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 32 values pushed */\01286 86 0 0 86 98 86 97 85 84 83 82 0 81 0 80 68 66 63 61 40 37 38 37 35 37 17 18 39 17 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni0915094D0937;
},
{
glyphname = "k_ssa_rakar-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"990 17 LINE",
"974 -3 OFFCURVE",
"956.667 -13 OFFCURVE",
"938 -13 CURVE SMOOTH",
"883.647 -13 OFFCURVE",
"756 61.12 OFFCURVE",
"756 111 CURVE SMOOTH",
"756 609 LINE",
"671 689 LINE",
"412 689 LINE",
"486 609 LINE",
"673 609 LINE",
"673 480 LINE",
"595.667 441.333 OFFCURVE",
"522 421 OFFCURVE",
"438 421 CURVE SMOOTH",
"400.667 421 OFFCURVE",
"369 424 OFFCURVE",
"343 430 CURVE",
"384.333 458 OFFCURVE",
"408 496 OFFCURVE",
"408 536 CURVE SMOOTH",
"408 560 OFFCURVE",
"398.167 585 OFFCURVE",
"378.5 611 CURVE SMOOTH",
"339.167 663 OFFCURVE",
"274.333 702 OFFCURVE",
"217 702 CURVE SMOOTH",
"144.162 702 OFFCURVE",
"81 644.025 OFFCURVE",
"81 575 CURVE SMOOTH",
"81 521.667 OFFCURVE",
"138 465.333 OFFCURVE",
"222 440 CURVE",
"120.667 384 OFFCURVE",
"58 314.333 OFFCURVE",
"58 257 CURVE SMOOTH",
"58 229 OFFCURVE",
"68.167 200.833 OFFCURVE",
"88.5 172.5 CURVE SMOOTH",
"129.167 115.833 OFFCURVE",
"198.667 75 OFFCURVE",
"260 75 CURVE SMOOTH",
"296 75 OFFCURVE",
"328.667 84.333 OFFCURVE",
"358 103 CURVE",
"419.333 -1 OFFCURVE",
"499 -64 OFFCURVE",
"567 -64 CURVE SMOOTH",
"581.667 -64 OFFCURVE",
"596.333 -59 OFFCURVE",
"611 -49 CURVE",
"547 5 LINE",
"536.333 -2.333 OFFCURVE",
"527.333 -6 OFFCURVE",
"520 -6 CURVE SMOOTH",
"481.333 -6 OFFCURVE",
"432 40 OFFCURVE",
"388 116 CURVE",
"430.667 144 OFFCURVE",
"456 175 OFFCURVE",
"456 199 CURVE SMOOTH",
"456 236.28 OFFCURVE",
"397.165 281 OFFCURVE",
"354 281 CURVE SMOOTH",
"330 281 OFFCURVE",
"310 258.667 OFFCURVE",
"310 232 CURVE SMOOTH",
"310 212 OFFCURVE",
"315 193 OFFCURVE",
"325 175 CURVE",
"289 146.333 OFFCURVE",
"250.667 132 OFFCURVE",
"210 132 CURVE SMOOTH",
"163.333 132 OFFCURVE",
"125 165.667 OFFCURVE",
"125 207 CURVE SMOOTH",
"125 265.667 OFFCURVE",
"199 338.667 OFFCURVE",
"319 404 CURVE",
"389 382 OFFCURVE",
"448.333 371 OFFCURVE",
"497 371 CURVE SMOOTH",
"561.667 371 OFFCURVE",
"620.333 381 OFFCURVE",
"673 401 CURVE",
"673 231 LINE",
"531 112 LINE",
"520.333 102 OFFCURVE",
"509 97 OFFCURVE",
"497 97 CURVE SMOOTH",
"485.667 97 OFFCURVE",
"473.667 102.667 OFFCURVE",
"461 114 CURVE",
"445 91 LINE",
"485.667 53.667 OFFCURVE",
"518.333 35 OFFCURVE",
"543 35 CURVE SMOOTH",
"557 35 OFFCURVE",
"578.333 47.667 OFFCURVE",
"607 73 CURVE SMOOTH",
"680 138 LINE",
"692 111.333 OFFCURVE",
"717.167 82.333 OFFCURVE",
"755.5 51 CURVE SMOOTH",
"832.167 -11.667 OFFCURVE",
"934.333 -61 OFFCURVE",
"1001 -61 CURVE SMOOTH",
"1023 -61 OFFCURVE",
"1044 -50.667 OFFCURVE",
"1064 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"802 609 LINE",
"872 609 LINE",
"872 689 LINE",
"716 689 LINE"
);
},
{
closed = 1;
nodes = (
"199.333 476 OFFCURVE",
"161 510 OFFCURVE",
"161 546 CURVE SMOOTH",
"161 599.136 OFFCURVE",
"214.17 651 OFFCURVE",
"267 651 CURVE SMOOTH",
"303 651 OFFCURVE",
"342 619 OFFCURVE",
"342 587 CURVE SMOOTH",
"342 541.667 OFFCURVE",
"308.667 494.667 OFFCURVE",
"254 464 CURVE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 44 values pushed */\012110 81 76 62 4 10 11 22 18 2 3 10 30 17 6 3 4 5 53 42 12 3 2 4 11 1 8 2 93 47 2 6 1 48 1 0 6 7 74 86 1 11 1 73 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 44 values pushed */\012110 81 76 62 4 10 11 22 18 2 3 10 30 17 6 3 4 5 53 42 12 3 2 4 11 1 8 2 93 47 2 6 1 48 1 0 13 7 74 86 1 11 1 73 \012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 65 values pushed */\0120 5 3 4 3 5 4 112 0 10 0 3 5 10 3 99 0 4 0 8 1 4 8 99 0 2 0 1 6 2 1 99 13 1 6 7 1 0 6 0 95 0 16 16 9 91 0 9 9 24 75 17 15 2 11 11 12 89 14 1 12 12 24 11 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 65 values pushed */\0120 5 3 4 3 5 4 112 0 10 0 3 5 10 3 99 0 4 0 8 1 4 8 99 0 2 0 1 6 2 1 99 13 1 6 7 1 0 6 0 95 0 16 16 9 91 0 9 9 25 75 17 15 2 11 11 12 89 14 1 12 12 25 11 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01239 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 70 values pushed */\0120 5 3 4 3 5 4 112 0 10 0 3 5 10 3 99 0 4 0 8 1 4 8 99 0 2 0 1 6 2 1 99 0 6 13 0 6 87 0 13 7 1 0 13 0 95 0 16 16 9 91 0 9 9 25 75 17 15 2 11 11 12 89 14 1 12 12 25 11 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 68 values pushed */\0120 5 3 4 3 5 4 112 0 9 0 16 11 9 16 99 0 10 0 3 5 10 3 99 0 4 0 8 1 4 8 99 0 2 0 1 6 2 1 99 0 6 13 0 6 87 0 13 7 1 0 13 0 95 17 15 2 11 11 12 89 14 1 12 12 25 11 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 32 values pushed */\01294 94 104 102 94 97 94 97 96 95 92 90 85 84 83 82 79 77 70 68 35 35 40 37 38 36 35 37 33 18 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 858;
}
);
note = uni0915094D0937094D0930;
},
{
glyphname = "k_ss-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"144.162 702 OFFCURVE",
"81 644.025 OFFCURVE",
"81 575 CURVE SMOOTH",
"81 521.667 OFFCURVE",
"138 465.333 OFFCURVE",
"222 440 CURVE",
"120.667 384 OFFCURVE",
"58 314.333 OFFCURVE",
"58 257 CURVE SMOOTH",
"58 229 OFFCURVE",
"68.167 200.833 OFFCURVE",
"88.5 172.5 CURVE SMOOTH",
"129.167 115.833 OFFCURVE",
"198.667 75 OFFCURVE",
"260 75 CURVE SMOOTH",
"296 75 OFFCURVE",
"328.667 84.333 OFFCURVE",
"358 103 CURVE",
"419.333 -1 OFFCURVE",
"499 -64 OFFCURVE",
"567 -64 CURVE SMOOTH",
"587.667 -64 OFFCURVE",
"607.667 -54.667 OFFCURVE",
"627 -36 CURVE",
"559 17 LINE",
"545 1.667 OFFCURVE",
"532 -6 OFFCURVE",
"520 -6 CURVE SMOOTH",
"481.333 -6 OFFCURVE",
"432 40 OFFCURVE",
"388 116 CURVE",
"430.667 144 OFFCURVE",
"456 175 OFFCURVE",
"456 199 CURVE SMOOTH",
"456 236.28 OFFCURVE",
"397.165 281 OFFCURVE",
"354 281 CURVE SMOOTH",
"330 281 OFFCURVE",
"310 258.667 OFFCURVE",
"310 232 CURVE SMOOTH",
"310 212 OFFCURVE",
"315 193 OFFCURVE",
"325 175 CURVE",
"289 146.333 OFFCURVE",
"250.667 132 OFFCURVE",
"210 132 CURVE SMOOTH",
"163.333 132 OFFCURVE",
"125 165.667 OFFCURVE",
"125 207 CURVE SMOOTH",
"125 265.667 OFFCURVE",
"199 338.667 OFFCURVE",
"319 404 CURVE",
"375 382 OFFCURVE",
"421 371 OFFCURVE",
"457 371 CURVE SMOOTH",
"509 371 OFFCURVE",
"554.333 381 OFFCURVE",
"593 401 CURVE",
"593 480 LINE",
"529 440.667 OFFCURVE",
"464 421 OFFCURVE",
"398 421 CURVE SMOOTH",
"377.333 421 OFFCURVE",
"359 424 OFFCURVE",
"343 430 CURVE",
"384.333 458 OFFCURVE",
"408 496 OFFCURVE",
"408 536 CURVE SMOOTH",
"408 560 OFFCURVE",
"398.167 585 OFFCURVE",
"378.5 611 CURVE SMOOTH",
"339.167 663 OFFCURVE",
"274.333 702 OFFCURVE",
"217 702 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"580 609 LINE",
"580 689 LINE",
"412 689 LINE",
"486 609 LINE"
);
},
{
closed = 1;
nodes = (
"303 651 OFFCURVE",
"342 619 OFFCURVE",
"342 587 CURVE SMOOTH",
"342 541.667 OFFCURVE",
"308.667 494.667 OFFCURVE",
"254 464 CURVE",
"199.333 476 OFFCURVE",
"161 510 OFFCURVE",
"161 546 CURVE SMOOTH",
"161 599.136 OFFCURVE",
"214.17 651 OFFCURVE",
"267 651 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */\01273 55 10 6 4 0 8 15 11 2 1 0 23 1 2 3 46 35 2 6 2 40 1 4 6 41 1 5 4 6 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 54 values pushed */\0120 3 1 2 1 3 2 112 0 0 0 1 3 0 1 99 0 2 0 6 4 2 6 99 0 4 0 5 4 5 95 12 1 10 10 7 91 11 1 7 7 24 75 0 8 8 9 89 0 9 9 24 8 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01239 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 54 values pushed */\0120 3 1 2 1 3 2 112 0 0 0 1 3 0 1 99 0 2 0 6 4 2 6 99 0 4 0 5 4 5 95 12 1 10 10 7 91 11 1 7 7 25 75 0 8 8 9 89 0 9 9 25 8 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 52 values pushed */\0120 3 1 2 1 3 2 112 11 1 7 12 1 10 8 7 10 99 0 0 0 1 3 0 1 99 0 2 0 6 4 2 6 99 0 4 0 5 4 5 95 0 8 8 9 89 0 9 9 25 8 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 26 values pushed */\01267 67 0 0 67 79 67 78 66 65 64 63 0 62 0 61 35 35 40 37 38 35 39 13 6 27 \012CALL[ ]	/* CallFunction */";
};
width = 566;
}
);
note = uni0915094D0937094D;
},
{
glyphname = "kh_r-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"423.333 71 OFFCURVE",
"291.667 129 OFFCURVE",
"181 241 CURVE",
"275.667 274.333 OFFCURVE",
"342 343.667 OFFCURVE",
"342 417 CURVE SMOOTH",
"342 486.333 OFFCURVE",
"325.333 555.667 OFFCURVE",
"284 609 CURVE",
"215 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"252 609 LINE",
"278 564.333 OFFCURVE",
"291 522.333 OFFCURVE",
"291 483 CURVE SMOOTH",
"291 440.333 OFFCURVE",
"272 403 OFFCURVE",
"240 379 CURVE",
"201.333 440.333 OFFCURVE",
"157 480 OFFCURVE",
"121 480 CURVE SMOOTH",
"74.333 480 OFFCURVE",
"36 447 OFFCURVE",
"36 407 CURVE SMOOTH",
"36 344.333 OFFCURVE",
"103.667 258.333 OFFCURVE",
"233 153 CURVE SMOOTH",
"319.667 81 OFFCURVE",
"410 39 OFFCURVE",
"490 23 CURVE",
"306 -85 LINE",
"296.667 -91 OFFCURVE",
"286.667 -94 OFFCURVE",
"276 -94 CURVE SMOOTH",
"264.667 -94 OFFCURVE",
"251.667 -86.667 OFFCURVE",
"237 -72 CURVE",
"218 -90 LINE",
"256 -137.333 OFFCURVE",
"284.667 -161 OFFCURVE",
"304 -161 CURVE SMOOTH",
"328 -161 OFFCURVE",
"343 -158 OFFCURVE",
"375 -138 CURVE SMOOTH",
"747 93 LINE",
"747 173 LINE",
"589 81 LINE",
"565.667 74.333 OFFCURVE",
"540.667 71 OFFCURVE",
"514 71 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"331 609 LINE",
"733 609 LINE",
"733 689 LINE",
"250 689 LINE"
);
},
{
closed = 1;
nodes = (
"504.104 479 OFFCURVE",
"412 413.2 OFFCURVE",
"412 358 CURVE SMOOTH",
"412 336 OFFCURVE",
"421.667 312.667 OFFCURVE",
"441 288 CURVE SMOOTH",
"479.667 238.667 OFFCURVE",
"541.667 201 OFFCURVE",
"591 201 CURVE SMOOTH",
"653.667 201 OFFCURVE",
"712.333 239 OFFCURVE",
"747 299 CURVE",
"747 375 LINE",
"709.667 437.667 OFFCURVE",
"639.333 479 OFFCURVE",
"566 479 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"507.333 263 OFFCURVE",
"476 284 OFFCURVE",
"476 312 CURVE SMOOTH",
"476 369.325 OFFCURVE",
"553.972 424 OFFCURVE",
"623 424 CURVE SMOOTH",
"655 424 OFFCURVE",
"692.667 401.667 OFFCURVE",
"718 367 CURVE",
"676.667 304.333 OFFCURVE",
"608.667 263 OFFCURVE",
"542 263 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"108 324 OFFCURVE",
"98 342.333 OFFCURVE",
"98 361 CURVE SMOOTH",
"98 390.333 OFFCURVE",
"129.333 416 OFFCURVE",
"160 416 CURVE SMOOTH",
"177.333 416 OFFCURVE",
"198.333 397 OFFCURVE",
"217 361 CURVE",
"193 335 OFFCURVE",
"163.333 316.667 OFFCURVE",
"128 306 CURVE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 26 values pushed */\01287 79 67 53 52 27 6 11 10 42 1 8 11 3 2 2 5 8 15 10 9 3 1 5 4 74 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 26 values pushed */\01287 79 67 53 52 27 6 11 12 42 1 8 11 3 2 2 5 8 15 10 9 3 1 5 4 74 \012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 50 values pushed */\01213 1 5 8 1 8 5 1 112 15 9 2 2 12 1 10 11 2 10 99 16 1 11 0 8 5 11 8 99 0 1 0 0 1 0 95 14 7 2 3 3 4 89 6 1 4 4 24 3 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 50 values pushed */\01213 1 5 8 1 8 5 1 112 15 9 2 2 12 1 10 11 2 10 99 16 1 11 0 8 5 11 8 99 0 1 0 0 1 0 95 14 7 2 3 3 4 89 6 1 4 4 25 3 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 55 values pushed */\01213 1 5 8 1 8 5 1 112 0 10 12 2 10 87 15 9 2 2 0 12 11 2 12 99 16 1 11 0 8 5 11 8 99 0 1 0 0 1 0 95 14 7 2 3 3 4 89 6 1 4 4 25 3 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 40 values pushed */\01265 65 50 50 46 46 0 0 83 81 65 77 65 76 71 69 50 64 50 63 57 55 46 49 46 49 48 47 0 45 0 44 17 23 42 35 38 17 6 25 \012CALL[ ]	/* CallFunction */";
};
width = 720;
}
);
note = uni0916094D0072;
},
{
glyphname = "kha_rakar-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"1057 17 LINE",
"1038.333 -3 OFFCURVE",
"1017 -13 OFFCURVE",
"993 -13 CURVE SMOOTH",
"941.164 -13 OFFCURVE",
"811 57.428 OFFCURVE",
"811 111 CURVE SMOOTH",
"811 609 LINE",
"731 689 LINE",
"261 689 LINE",
"331 609 LINE",
"729 609 LINE",
"729 405 LINE",
"686.333 453 OFFCURVE",
"627 482 OFFCURVE",
"571 482 CURVE SMOOTH",
"507.556 482 OFFCURVE",
"415 414.794 OFFCURVE",
"415 358 CURVE SMOOTH",
"415 336 OFFCURVE",
"424.5 312.667 OFFCURVE",
"443.5 288 CURVE SMOOTH",
"481.5 238.667 OFFCURVE",
"545.333 201 OFFCURVE",
"596 201 CURVE SMOOTH",
"645.333 201 OFFCURVE",
"694.333 224.333 OFFCURVE",
"729 267 CURVE",
"729 168 LINE",
"729 163 LINE",
"589 81 LINE",
"568.333 74.333 OFFCURVE",
"543.333 71 OFFCURVE",
"514 71 CURVE SMOOTH",
"423.333 71 OFFCURVE",
"291.667 129 OFFCURVE",
"181 241 CURVE",
"275.667 274.333 OFFCURVE",
"342 343.667 OFFCURVE",
"342 417 CURVE SMOOTH",
"342 486.333 OFFCURVE",
"325.333 555.667 OFFCURVE",
"284 609 CURVE",
"215 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"252 609 LINE",
"278 564.333 OFFCURVE",
"291 522.333 OFFCURVE",
"291 483 CURVE SMOOTH",
"291 440.333 OFFCURVE",
"272 403 OFFCURVE",
"240 379 CURVE",
"201.333 440.333 OFFCURVE",
"157 480 OFFCURVE",
"121 480 CURVE SMOOTH",
"74.333 480 OFFCURVE",
"36 447 OFFCURVE",
"36 407 CURVE SMOOTH",
"36 344.333 OFFCURVE",
"103.667 258.333 OFFCURVE",
"233 153 CURVE SMOOTH",
"319.667 81 OFFCURVE",
"410 39 OFFCURVE",
"490 23 CURVE",
"306 -85 LINE",
"296.667 -91 OFFCURVE",
"286.667 -94 OFFCURVE",
"276 -94 CURVE SMOOTH",
"264.667 -94 OFFCURVE",
"251.667 -86.667 OFFCURVE",
"237 -72 CURVE",
"218 -90 LINE",
"256 -137.333 OFFCURVE",
"284.667 -161 OFFCURVE",
"304 -161 CURVE SMOOTH",
"328 -161 OFFCURVE",
"343 -158 OFFCURVE",
"375 -138 CURVE SMOOTH",
"760 101 LINE",
"780.667 75 OFFCURVE",
"809.167 49.5 OFFCURVE",
"845.5 24.5 CURVE SMOOTH",
"918.167 -25.5 OFFCURVE",
"1002.667 -61 OFFCURVE",
"1056 -61 CURVE SMOOTH",
"1078.667 -61 OFFCURVE",
"1099.667 -50.667 OFFCURVE",
"1119 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"858 609 LINE",
"927 609 LINE",
"927 689 LINE",
"778 689 LINE"
);
},
{
closed = 1;
nodes = (
"512.333 263 OFFCURVE",
"481 284 OFFCURVE",
"481 312 CURVE SMOOTH",
"481 369.337 OFFCURVE",
"558.927 424 OFFCURVE",
"627 424 CURVE SMOOTH",
"664.333 424 OFFCURVE",
"701.667 403 OFFCURVE",
"727 367 CURVE",
"684.333 303 OFFCURVE",
"616.333 263 OFFCURVE",
"547 263 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"108 324 OFFCURVE",
"98 342.333 OFFCURVE",
"98 361 CURVE SMOOTH",
"98 390.333 OFFCURVE",
"129.333 416 OFFCURVE",
"160 416 CURVE SMOOTH",
"177.333 416 OFFCURVE",
"198.333 397 OFFCURVE",
"217 361 CURVE",
"193 335 OFFCURVE",
"163.333 316.667 OFFCURVE",
"128 306 CURVE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 35 values pushed */\012106 98 86 67 53 30 6 15 14 45 1 7 15 51 6 2 6 7 79 18 2 11 6 13 12 2 2 0 5 74 72 1 4 1 73 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 35 values pushed */\012106 98 86 67 53 30 6 15 16 45 1 7 15 51 6 2 6 7 79 18 2 11 6 13 12 2 2 0 5 74 72 1 4 1 73 \012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 58 values pushed */\0120 6 7 11 7 6 11 112 8 1 3 16 1 14 15 3 14 99 18 1 15 0 7 6 15 7 99 0 11 0 0 2 11 0 99 0 2 0 1 2 1 95 17 13 9 3 4 4 5 89 12 10 2 5 5 24 4 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 58 values pushed */\0120 6 7 11 7 6 11 112 8 1 3 16 1 14 15 3 14 99 18 1 15 0 7 6 15 7 99 0 11 0 0 2 11 0 99 0 2 0 1 2 1 95 17 13 9 3 4 4 5 89 12 10 2 5 5 25 4 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 63 values pushed */\0120 6 7 11 7 6 11 112 0 14 16 3 14 87 8 1 3 0 16 15 3 16 99 18 1 15 0 7 6 15 7 99 0 11 0 0 2 11 0 99 0 2 0 1 2 1 95 17 13 9 3 4 4 5 89 12 10 2 5 5 25 4 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 36 values pushed */\01284 84 80 80 102 100 84 96 84 95 90 88 80 83 80 83 82 81 78 76 71 70 69 68 38 38 41 17 23 42 35 38 33 19 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 914;
}
);
note = uni0916094D0930;
},
{
glyphname = "g_r-deva";
layers = (
{
components = (
{
alignment = -1;
name = "g-deva";
},
{
alignment = -1;
name = "ra-deva.post";
transform = "{1, 0, 0, 1, 705, 0}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 393;
}
);
note = uni0917094D0072;
},
{
glyphname = "ga_rakar-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"822 17 LINE",
"803.333 -3 OFFCURVE",
"786 -13 OFFCURVE",
"770 -13 CURVE SMOOTH",
"718.134 -13 OFFCURVE",
"588 59.656 OFFCURVE",
"588 111 CURVE SMOOTH",
"588 609 LINE",
"508 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"209 609 LINE",
"251.667 533.667 OFFCURVE",
"273 472.333 OFFCURVE",
"273 425 CURVE SMOOTH",
"273 358.503 OFFCURVE",
"203.359 256 OFFCURVE",
"144 256 CURVE SMOOTH",
"122.667 256 OFFCURVE",
"104 273.667 OFFCURVE",
"104 295 CURVE SMOOTH",
"104 329.467 OFFCURVE",
"145.028 377 OFFCURVE",
"177 377 CURVE SMOOTH",
"185 377 OFFCURVE",
"199 370 OFFCURVE",
"211 358 CURVE",
"226 374 LINE",
"202 407.333 OFFCURVE",
"162.333 428 OFFCURVE",
"125 428 CURVE SMOOTH",
"79.667 428 OFFCURVE",
"33 382.667 OFFCURVE",
"33 336 CURVE SMOOTH",
"33 278.113 OFFCURVE",
"139.793 207 OFFCURVE",
"209 207 CURVE SMOOTH",
"272.369 207 OFFCURVE",
"331 281.011 OFFCURVE",
"331 349 CURVE SMOOTH",
"331 427 OFFCURVE",
"303.333 513.667 OFFCURVE",
"248 609 CURVE",
"506 609 LINE",
"506 297 LINE",
"221 59 LINE SMOOTH",
"209 49 OFFCURVE",
"197.667 44 OFFCURVE",
"187 44 CURVE SMOOTH",
"174.333 44 OFFCURVE",
"162.333 49.667 OFFCURVE",
"151 61 CURVE",
"135 39 LINE",
"173.667 4.333 OFFCURVE",
"209 -17 OFFCURVE",
"233 -17 CURVE SMOOTH",
"248.333 -17 OFFCURVE",
"269.667 -4.667 OFFCURVE",
"297 20 CURVE SMOOTH",
"506 204 LINE",
"506 168 LINE SMOOTH",
"506 140.667 OFFCURVE",
"525 108.833 OFFCURVE",
"563 72.5 CURVE SMOOTH",
"639 -0.167 OFFCURVE",
"756 -61 OFFCURVE",
"832 -61 CURVE SMOOTH",
"855.333 -61 OFFCURVE",
"876.333 -50.667 OFFCURVE",
"895 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"633 609 LINE",
"704 609 LINE",
"704 689 LINE",
"554 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */\01238 37 19 3 7 6 14 7 2 2 4 65 13 2 10 2 3 74 58 1 3 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 58 values pushed */\0120 5 3 6 3 5 6 112 0 6 7 3 6 7 110 0 2 4 10 4 2 10 112 0 7 0 4 2 7 4 99 0 10 0 0 10 0 95 13 12 8 3 3 3 9 89 11 1 9 9 24 75 0 1 1 26 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 58 values pushed */\0120 5 3 6 3 5 6 112 0 6 7 3 6 7 110 0 2 4 10 4 2 10 112 0 7 0 4 2 7 4 99 0 10 0 0 10 0 95 13 12 8 3 3 3 9 89 11 1 9 9 25 75 0 1 1 26 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 61 values pushed */\0120 5 3 6 3 5 6 112 0 6 7 3 6 7 110 0 2 4 10 4 2 10 112 0 1 10 0 10 1 0 112 0 7 0 4 2 7 4 99 0 10 0 0 10 0 95 13 12 8 3 3 3 9 89 11 1 9 9 25 3 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 24 values pushed */\01266 66 66 69 66 69 68 67 64 62 57 56 21 37 37 37 37 19 36 38 33 14 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = uni0917094D0930;
},
{
glyphname = "g_na-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"205 609 LINE",
"247 545.667 OFFCURVE",
"268 493.333 OFFCURVE",
"268 452 CURVE SMOOTH",
"268 388.937 OFFCURVE",
"199.593 291 OFFCURVE",
"142 291 CURVE SMOOTH",
"120.667 291 OFFCURVE",
"102 309.333 OFFCURVE",
"102 328 CURVE SMOOTH",
"102 362.667 OFFCURVE",
"142.333 407 OFFCURVE",
"173 407 CURVE SMOOTH",
"181 407 OFFCURVE",
"195 400 OFFCURVE",
"207 388 CURVE",
"221 403 LINE",
"198.333 435 OFFCURVE",
"159.667 455 OFFCURVE",
"121 455 CURVE SMOOTH",
"75.667 455 OFFCURVE",
"32 411.333 OFFCURVE",
"32 366 CURVE SMOOTH",
"32 311.132 OFFCURVE",
"136.908 245 OFFCURVE",
"206 245 CURVE SMOOTH",
"269.146 245 OFFCURVE",
"328 315.362 OFFCURVE",
"328 382 CURVE SMOOTH",
"328 449.333 OFFCURVE",
"300.333 525 OFFCURVE",
"245 609 CURVE",
"505 609 LINE",
"505 310 LINE",
"269 216 LINE SMOOTH",
"194.333 186.667 OFFCURVE",
"144 145.667 OFFCURVE",
"144 115 CURVE SMOOTH",
"144 91 OFFCURVE",
"154.667 66.5 OFFCURVE",
"176 41.5 CURVE SMOOTH",
"218.667 -8.5 OFFCURVE",
"288 -45 OFFCURVE",
"348 -45 CURVE SMOOTH",
"398.667 -45 OFFCURVE",
"442 -10.667 OFFCURVE",
"442 32 CURVE SMOOTH",
"442 62.667 OFFCURVE",
"391.333 99 OFFCURVE",
"322 119 CURVE",
"305 97 LINE",
"341 89 OFFCURVE",
"369 71.667 OFFCURVE",
"369 57 CURVE SMOOTH",
"369 33 OFFCURVE",
"336.333 3 OFFCURVE",
"307 3 CURVE SMOOTH",
"259 3 OFFCURVE",
"219 34.667 OFFCURVE",
"219 72 CURVE SMOOTH",
"219 101.333 OFFCURVE",
"261.667 135.667 OFFCURVE",
"327 161 CURVE SMOOTH",
"505 229 LINE",
"505 166 LINE SMOOTH",
"505 140 OFFCURVE",
"523.833 108.833 OFFCURVE",
"561.5 72.5 CURVE SMOOTH",
"636.833 -0.167 OFFCURVE",
"753.667 -61 OFFCURVE",
"831 -61 CURVE SMOOTH",
"854.333 -61 OFFCURVE",
"875.333 -50.667 OFFCURVE",
"894 -30 CURVE",
"821 17 LINE",
"803 -3 OFFCURVE",
"786 -13 OFFCURVE",
"770 -13 CURVE SMOOTH",
"718.134 -13 OFFCURVE",
"588 59.656 OFFCURVE",
"588 111 CURVE SMOOTH",
"588 609 LINE",
"507 689 LINE"
);
},
{
closed = 1;
nodes = (
"553 689 LINE",
"632 609 LINE",
"703 609 LINE",
"703 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */\01264 63 45 3 9 8 31 30 17 9 4 3 6 10 1 4 1 3 74 2 1 5 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 52 values pushed */\0120 7 5 8 5 7 8 112 0 8 9 5 8 9 110 0 9 0 6 3 9 6 99 0 3 0 4 2 3 4 99 0 1 0 2 1 2 95 12 10 2 5 5 0 89 11 1 0 0 24 5 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 52 values pushed */\0120 7 5 8 5 7 8 112 0 8 9 5 8 9 110 0 9 0 6 3 9 6 99 0 3 0 4 2 3 4 99 0 1 0 2 1 2 95 12 10 2 5 5 0 89 11 1 0 0 25 5 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 20 values pushed */\01284 83 82 81 80 79 74 72 37 37 37 24 43 42 35 37 16 13 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 688;
}
);
note = uni0917094D0928;
},
{
glyphname = "gh_r-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"483 260 LINE",
"483 388 LINE",
"435 293.333 OFFCURVE",
"333.333 231 OFFCURVE",
"228 231 CURVE SMOOTH",
"177.333 231 OFFCURVE",
"132 259.667 OFFCURVE",
"132 297 CURVE SMOOTH",
"132 351.9 OFFCURVE",
"233.434 413 OFFCURVE",
"303 413 CURVE",
"260 486 LINE",
"240 486 OFFCURVE",
"212.667 479.333 OFFCURVE",
"178 466 CURVE",
"143.333 486 OFFCURVE",
"123 523.667 OFFCURVE",
"123 561 CURVE SMOOTH",
"123 570.333 OFFCURVE",
"125.333 582 OFFCURVE",
"130 596 CURVE",
"160 564.667 OFFCURVE",
"195.333 549 OFFCURVE",
"236 549 CURVE SMOOTH",
"285.333 549 OFFCURVE",
"326 580 OFFCURVE",
"326 620 CURVE SMOOTH",
"326 682.522 OFFCURVE",
"249.782 742 OFFCURVE",
"183 742 CURVE SMOOTH",
"111.139 742 OFFCURVE",
"52 681.552 OFFCURVE",
"52 609 CURVE SMOOTH",
"52 554.333 OFFCURVE",
"87.333 493 OFFCURVE",
"146 453 CURVE",
"96.667 429 OFFCURVE",
"67 385.667 OFFCURVE",
"67 343 CURVE SMOOTH",
"67 317.667 OFFCURVE",
"76.167 292.333 OFFCURVE",
"94.5 267 CURVE SMOOTH",
"131.167 216.333 OFFCURVE",
"196.333 177.667 OFFCURVE",
"267 171 CURVE",
"171 90 LINE SMOOTH",
"158.333 80 OFFCURVE",
"146.667 75 OFFCURVE",
"136 75 CURVE SMOOTH",
"123.333 75 OFFCURVE",
"111.333 80.667 OFFCURVE",
"100 92 CURVE",
"84 70 LINE",
"122.667 35.333 OFFCURVE",
"158 14 OFFCURVE",
"182 14 CURVE SMOOTH",
"197.333 14 OFFCURVE",
"219 26.333 OFFCURVE",
"247 51 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"393 609 LINE",
"469 609 LINE",
"469 689 LINE",
"324 689 LINE"
);
},
{
closed = 1;
nodes = (
"208.333 680.333 OFFCURVE",
"212.333 681 OFFCURVE",
"215 681 CURVE SMOOTH",
"231 681 OFFCURVE",
"245.333 670 OFFCURVE",
"248 654 CURVE",
"249.333 631.333 OFFCURVE",
"226.667 605.667 OFFCURVE",
"204 603 CURVE",
"198.667 601.667 OFFCURVE",
"194.333 601 OFFCURVE",
"191 601 CURVE SMOOTH",
"172.333 601 OFFCURVE",
"156.667 608.333 OFFCURVE",
"144 623 CURVE",
"153.333 653.667 OFFCURVE",
"177.667 677.667 OFFCURVE",
"203 679 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */\01267 60 2 8 10 34 1 3 9 39 18 2 5 4 53 52 2 6 5 11 6 2 1 6 5 1 0 1 6 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 58 values pushed */\0120 1 6 0 6 1 0 112 0 9 0 3 4 9 3 99 0 4 0 5 6 4 5 99 13 11 2 10 10 2 91 0 2 2 31 75 12 1 8 8 7 89 0 7 7 24 75 0 6 6 0 91 0 0 0 26 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 58 values pushed */\0120 1 6 0 6 1 0 112 0 9 0 3 4 9 3 99 0 4 0 5 6 4 5 99 0 2 2 10 91 13 11 2 10 10 25 75 12 1 8 8 7 89 0 7 7 25 75 0 6 6 0 91 0 0 0 26 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 55 values pushed */\0120 1 6 0 6 1 0 112 0 9 0 3 4 9 3 99 0 4 0 5 6 4 5 99 0 6 0 0 6 0 95 0 2 2 10 91 13 11 2 10 10 25 75 12 1 8 8 7 89 0 7 7 25 8 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 27 values pushed */\01258 58 54 54 58 72 58 72 70 69 62 61 54 57 54 57 21 37 17 23 37 47 36 33 14 6 28 \012CALL[ ]	/* CallFunction */";
};
width = 455;
}
);
note = uni0918094D0072;
},
{
glyphname = "gha_rakar-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"779 17 LINE",
"759 -3 OFFCURVE",
"741.667 -13 OFFCURVE",
"727 -13 CURVE SMOOTH",
"674.32 -13 OFFCURVE",
"544 59.451 OFFCURVE",
"544 111 CURVE SMOOTH",
"544 609 LINE",
"464 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"69 609 LINE",
"55.667 589.667 OFFCURVE",
"49 571 OFFCURVE",
"49 553 CURVE SMOOTH",
"49 518.333 OFFCURVE",
"79.667 485.667 OFFCURVE",
"145 443 CURVE",
"103.667 421.667 OFFCURVE",
"77 385.667 OFFCURVE",
"77 351 CURVE SMOOTH",
"77 325 OFFCURVE",
"85.333 299.5 OFFCURVE",
"102 274.5 CURVE SMOOTH",
"135.333 224.5 OFFCURVE",
"195 186.667 OFFCURVE",
"263 176 CURVE",
"121 57 LINE SMOOTH",
"109 47 OFFCURVE",
"97.667 42 OFFCURVE",
"87 42 CURVE SMOOTH",
"73 42 OFFCURVE",
"61 47.667 OFFCURVE",
"51 59 CURVE",
"35 37 LINE",
"75.667 -0.333 OFFCURVE",
"108 -19 OFFCURVE",
"132 -19 CURVE SMOOTH",
"146 -19 OFFCURVE",
"167.667 -6.667 OFFCURVE",
"197 18 CURVE SMOOTH",
"421 217 LINE",
"437.667 230.333 OFFCURVE",
"451 244.667 OFFCURVE",
"461 260 CURVE",
"461 166 LINE SMOOTH",
"461 140 OFFCURVE",
"479.833 108.833 OFFCURVE",
"517.5 72.5 CURVE SMOOTH",
"592.833 -0.167 OFFCURVE",
"710.667 -61 OFFCURVE",
"788 -61 CURVE SMOOTH",
"811.333 -61 OFFCURVE",
"832.667 -50.667 OFFCURVE",
"852 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"591 609 LINE",
"660 609 LINE",
"660 689 LINE",
"510 689 LINE"
);
},
{
closed = 1;
nodes = (
"461 609 LINE",
"461 382 LINE",
"401 283.333 OFFCURVE",
"315.667 222 OFFCURVE",
"237 222 CURVE SMOOTH",
"186.333 222 OFFCURVE",
"140 254.333 OFFCURVE",
"140 297 CURVE SMOOTH",
"140 349.902 OFFCURVE",
"233.803 412 OFFCURVE",
"295 412 CURVE",
"242 476 LINE",
"225.333 476 OFFCURVE",
"202.667 469.667 OFFCURVE",
"174 457 CURVE",
"137.333 481 OFFCURVE",
"119 505.667 OFFCURVE",
"119 531 CURVE SMOOTH",
"119 558.333 OFFCURVE",
"136.333 584.333 OFFCURVE",
"171 609 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */\01253 27 2 10 9 66 7 2 11 10 20 15 2 2 11 43 14 2 5 2 4 74 36 1 3 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 54 values pushed */\0120 9 3 10 3 9 10 112 0 10 11 3 10 11 110 0 11 2 3 11 2 110 0 5 0 0 5 0 95 8 12 7 3 3 3 4 89 6 1 4 4 24 75 0 2 2 1 91 0 1 1 26 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01227 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 54 values pushed */\0120 9 3 10 3 9 10 112 0 10 11 3 10 11 110 0 11 2 3 11 2 110 0 5 0 0 5 0 95 8 12 7 3 3 3 4 89 6 1 4 4 25 75 0 2 2 1 91 0 1 1 26 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 52 values pushed */\0120 9 3 10 3 9 10 112 0 10 11 3 10 11 110 0 11 2 3 11 2 110 0 2 0 1 0 2 1 99 0 5 0 0 5 0 95 8 12 7 3 3 3 4 89 6 1 4 4 25 3 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 24 values pushed */\01244 44 64 62 57 56 55 54 49 48 44 47 44 47 19 37 17 30 35 40 33 13 6 27 \012CALL[ ]	/* CallFunction */";
};
width = 647;
}
);
note = uni0918094D0930;
},
{
glyphname = "nga_rakar-deva";
layers = (
{
components = (
{
alignment = -1;
name = "nga-deva";
},
{
alignment = -1;
name = "rakar-deva";
transform = "{1, 0, 0, 1, 609, 0}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 698;
}
);
note = uni0919094D0930;
},
{
glyphname = "ng_ka-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-14 609 LINE",
"-14 689 LINE",
"352 689 LINE",
"427 609 LINE SMOOTH",
"459 577 OFFCURVE",
"476 545.333 OFFCURVE",
"476 520 CURVE SMOOTH",
"476 489.333 OFFCURVE",
"443 467 OFFCURVE",
"399 467 CURVE",
"332 471 LINE",
"264 474 LINE",
"232 474 OFFCURVE",
"191 448.667 OFFCURVE",
"191 430 CURVE SMOOTH",
"191 400.667 OFFCURVE",
"215.667 379 OFFCURVE",
"249 379 CURVE SMOOTH",
"275.667 379 OFFCURVE",
"292.667 386.333 OFFCURVE",
"326 401 CURVE SMOOTH",
"362 417 OFFCURVE",
"380 424 OFFCURVE",
"408 424 CURVE SMOOTH",
"472.438 424 OFFCURVE",
"548 366.542 OFFCURVE",
"548 310 CURVE SMOOTH",
"548 262.35 OFFCURVE",
"459.728 212 OFFCURVE",
"399 212 CURVE",
"399 111 LINE",
"421.667 133.667 OFFCURVE",
"446 145 OFFCURVE",
"472 145 CURVE SMOOTH",
"521.947 145 OFFCURVE",
"593 80.987 OFFCURVE",
"593 33 CURVE SMOOTH",
"593 -9.667 OFFCURVE",
"559.333 -48.667 OFFCURVE",
"506 -62 CURVE",
"451 -11 LINE",
"503 1 OFFCURVE",
"541 34.667 OFFCURVE",
"541 72 CURVE SMOOTH",
"541 81.333 OFFCURVE",
"526 90 OFFCURVE",
"510 90 CURVE SMOOTH",
"472.667 90 OFFCURVE",
"432.333 68 OFFCURVE",
"399 28 CURVE",
"399 -81 LINE SMOOTH",
"399 -101 OFFCURVE",
"439.333 -126 OFFCURVE",
"470 -126 CURVE SMOOTH",
"487.333 -126 OFFCURVE",
"506 -115.333 OFFCURVE",
"518 -98 CURVE",
"572 -137 LINE",
"558.667 -154.333 OFFCURVE",
"536 -164 OFFCURVE",
"512 -164 CURVE SMOOTH",
"462.401 -164 OFFCURVE",
"321 -97.29 OFFCURVE",
"321 -51 CURVE SMOOTH",
"321 9 LINE",
"297 -11 OFFCURVE",
"268 -23 OFFCURVE",
"240 -23 CURVE SMOOTH",
"186.216 -23 OFFCURVE",
"88 48.038 OFFCURVE",
"88 93 CURVE SMOOTH",
"88 134.005 OFFCURVE",
"147.598 171 OFFCURVE",
"201 171 CURVE SMOOTH",
"213.667 171 OFFCURVE",
"229.667 166.667 OFFCURVE",
"249 158 CURVE",
"295 135 LINE",
"282 114 LINE",
"268 118.667 OFFCURVE",
"257.333 121 OFFCURVE",
"250 121 CURVE SMOOTH",
"203.553 121 OFFCURVE",
"152 90.868 OFFCURVE",
"152 61 CURVE SMOOTH",
"152 43.667 OFFCURVE",
"171.333 28 OFFCURVE",
"190 28 CURVE",
"230 25.333 OFFCURVE",
"278.333 46 OFFCURVE",
"321 86 CURVE",
"321 212 LINE",
"201 222.667 OFFCURVE",
"89 289.667 OFFCURVE",
"17 395 CURVE",
"40 410 LINE",
"105.333 319.333 OFFCURVE",
"216.667 265 OFFCURVE",
"342 265 CURVE SMOOTH",
"408.233 265 OFFCURVE",
"497 302.661 OFFCURVE",
"497 344 CURVE SMOOTH",
"497 362.667 OFFCURVE",
"478.667 379 OFFCURVE",
"460 379 CURVE SMOOTH",
"441.333 379 OFFCURVE",
"421.667 371.333 OFFCURVE",
"391 358 CURVE SMOOTH",
"357.667 343.333 OFFCURVE",
"335 336 OFFCURVE",
"315 336 CURVE SMOOTH",
"248.826 336 OFFCURVE",
"121 408.133 OFFCURVE",
"121 465 CURVE SMOOTH",
"121 499.667 OFFCURVE",
"170.667 528 OFFCURVE",
"228 528 CURVE",
"307 524 LINE",
"383 521 LINE",
"407 521 OFFCURVE",
"429 533.333 OFFCURVE",
"429 548 CURVE SMOOTH",
"429 567.333 OFFCURVE",
"416.333 587.667 OFFCURVE",
"391 609 CURVE"
);
},
{
closed = 1;
nodes = (
"698 609 LINE",
"473 609 LINE",
"397 689 LINE",
"698 689 LINE"
);
},
{
closed = 1;
nodes = (
"666 440 LINE",
"599 382 LINE",
"533 440 LINE",
"599 499 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */\012135 1 15 0 136 1 13 15 137 31 30 3 2 13 48 1 5 11 97 47 2 10 5 78 35 2 4 10 87 62 2 7 4 88 71 2 9 7 70 1 8 9 9 74 34 1 12 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0129 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 97 values pushed */\0120 2 13 14 13 2 14 112 0 14 1 3 14 102 0 1 3 15 1 102 0 6 12 11 12 6 11 112 0 9 7 8 7 9 8 112 0 8 8 113 0 0 0 15 13 0 15 99 0 13 0 12 6 13 12 99 0 3 0 5 10 3 5 100 0 11 0 10 4 11 10 99 21 19 20 3 17 17 16 89 18 1 16 16 24 75 0 4 4 7 92 0 7 7 26 7 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01211 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 98 values pushed */\0120 2 13 14 13 2 14 112 0 14 1 3 14 102 0 1 3 13 1 3 110 0 6 12 11 12 6 11 112 0 9 7 8 7 9 8 112 0 8 8 113 0 0 0 15 13 0 15 99 0 13 0 12 6 13 12 99 0 3 0 5 10 3 5 100 0 11 0 10 4 11 10 99 21 19 20 3 17 17 16 89 18 1 16 16 24 75 0 4 4 7 92 0 7 7 26 7 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 99 values pushed */\0120 2 13 14 13 2 14 112 0 14 1 13 14 1 110 0 1 3 13 1 3 110 0 6 12 11 12 6 11 112 0 9 7 8 7 9 8 112 0 8 8 113 0 0 0 15 13 0 15 99 0 13 0 12 6 13 12 99 0 3 0 5 10 3 5 100 0 11 0 10 4 11 10 99 21 19 20 3 17 17 16 89 18 1 16 16 24 75 0 4 4 7 92 0 7 7 26 7 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01223 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 99 values pushed */\0120 2 13 14 13 2 14 112 0 14 1 13 14 1 110 0 1 3 13 1 3 110 0 6 12 11 12 6 11 112 0 9 7 8 7 9 8 112 0 8 8 113 0 0 0 15 13 0 15 99 0 13 0 12 6 13 12 99 0 3 0 5 10 3 5 100 0 11 0 10 4 11 10 99 21 19 20 3 17 17 16 89 18 1 16 16 25 75 0 4 4 7 92 0 7 7 26 7 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 97 values pushed */\0120 2 13 14 13 2 14 112 0 14 1 13 14 1 110 0 1 3 13 1 3 110 0 6 12 11 12 6 11 112 0 9 7 8 7 9 8 112 0 8 8 113 0 0 0 15 13 0 15 99 0 13 0 12 6 13 12 99 0 3 0 5 10 3 5 100 0 11 0 10 4 11 10 99 0 4 0 7 9 4 7 100 21 19 20 3 17 17 16 89 18 1 16 16 25 17 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 42 values pushed */\012130 130 0 0 130 133 130 133 132 131 0 129 0 129 128 127 121 117 113 111 107 105 99 98 96 94 82 80 75 73 38 38 36 37 41 37 36 37 68 22 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 685;
}
);
note = uni0919094D0915;
},
{
glyphname = "ng_k-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"540 79 LINE",
"531.333 86.333 OFFCURVE",
"520.667 90 OFFCURVE",
"508 90 CURVE SMOOTH",
"470.667 90 OFFCURVE",
"431 68 OFFCURVE",
"399 28 CURVE",
"399 -81 LINE SMOOTH",
"399 -101 OFFCURVE",
"439.333 -126 OFFCURVE",
"470 -126 CURVE SMOOTH",
"487.333 -126 OFFCURVE",
"506 -115.333 OFFCURVE",
"518 -98 CURVE",
"572 -137 LINE",
"558.667 -154.333 OFFCURVE",
"536 -164 OFFCURVE",
"512 -164 CURVE SMOOTH",
"462.401 -164 OFFCURVE",
"321 -97.29 OFFCURVE",
"321 -51 CURVE SMOOTH",
"321 9 LINE",
"297 -11 OFFCURVE",
"268 -23 OFFCURVE",
"240 -23 CURVE SMOOTH",
"186.216 -23 OFFCURVE",
"88 48.038 OFFCURVE",
"88 93 CURVE SMOOTH",
"88 134.005 OFFCURVE",
"147.598 171 OFFCURVE",
"201 171 CURVE SMOOTH",
"213.667 171 OFFCURVE",
"229.667 166.667 OFFCURVE",
"249 158 CURVE",
"295 135 LINE",
"282 114 LINE",
"266.667 118.667 OFFCURVE",
"256 121 OFFCURVE",
"250 121 CURVE SMOOTH",
"203.553 121 OFFCURVE",
"152 90.868 OFFCURVE",
"152 61 CURVE SMOOTH",
"152 43.667 OFFCURVE",
"171.333 28 OFFCURVE",
"190 28 CURVE",
"230 25.333 OFFCURVE",
"278.333 46 OFFCURVE",
"321 86 CURVE",
"321 212 LINE",
"201 222.667 OFFCURVE",
"89 289.667 OFFCURVE",
"17 395 CURVE",
"40 410 LINE",
"105.333 319.333 OFFCURVE",
"216.667 265 OFFCURVE",
"342 265 CURVE SMOOTH",
"408.233 265 OFFCURVE",
"497 302.661 OFFCURVE",
"497 344 CURVE SMOOTH",
"497 362.667 OFFCURVE",
"478.667 379 OFFCURVE",
"460 379 CURVE SMOOTH",
"441.333 379 OFFCURVE",
"421.667 371.333 OFFCURVE",
"391 358 CURVE SMOOTH",
"357.667 343.333 OFFCURVE",
"335 336 OFFCURVE",
"315 336 CURVE SMOOTH",
"248.826 336 OFFCURVE",
"121 408.133 OFFCURVE",
"121 465 CURVE SMOOTH",
"121 499.667 OFFCURVE",
"170.667 528 OFFCURVE",
"228 528 CURVE",
"307 524 LINE",
"383 521 LINE",
"407 521 OFFCURVE",
"429 533.333 OFFCURVE",
"429 548 CURVE SMOOTH",
"429 567.333 OFFCURVE",
"416.333 587.667 OFFCURVE",
"391 609 CURVE",
"-14 609 LINE",
"-14 689 LINE",
"352 689 LINE",
"427 609 LINE SMOOTH",
"459 577 OFFCURVE",
"476 545.333 OFFCURVE",
"476 520 CURVE SMOOTH",
"476 489.333 OFFCURVE",
"443 467 OFFCURVE",
"399 467 CURVE",
"332 471 LINE",
"264 474 LINE",
"232 474 OFFCURVE",
"191 448.667 OFFCURVE",
"191 430 CURVE SMOOTH",
"191 400.667 OFFCURVE",
"215.667 379 OFFCURVE",
"249 379 CURVE SMOOTH",
"275.667 379 OFFCURVE",
"292.667 386.333 OFFCURVE",
"326 401 CURVE SMOOTH",
"362 417 OFFCURVE",
"380 424 OFFCURVE",
"408 424 CURVE SMOOTH",
"472.438 424 OFFCURVE",
"548 366.542 OFFCURVE",
"548 310 CURVE SMOOTH",
"548 262.35 OFFCURVE",
"459.728 212 OFFCURVE",
"399 212 CURVE",
"399 111 LINE",
"421.667 133.667 OFFCURVE",
"446 145 OFFCURVE",
"472 145 CURVE SMOOTH",
"497.333 145 OFFCURVE",
"532.667 126.333 OFFCURVE",
"558 101 CURVE"
);
},
{
closed = 1;
nodes = (
"698 609 LINE",
"473 609 LINE",
"397 689 LINE",
"698 689 LINE"
);
},
{
closed = 1;
nodes = (
"666 440 LINE",
"599 382 LINE",
"533 440 LINE",
"599 499 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */\012127 1 4 7 128 1 2 4 129 68 67 3 9 2 85 1 12 0 121 84 4 3 17 12 120 115 72 3 11 17 99 1 14 11 108 1 16 14 107 1 15 16 9 74 71 1 1 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0129 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 96 values pushed */\0120 9 2 3 2 9 3 112 0 3 8 10 3 102 0 8 10 4 8 102 0 13 1 0 1 13 0 112 0 16 14 15 14 16 15 112 0 15 15 113 0 7 0 4 2 7 4 99 0 2 0 1 13 2 1 99 0 10 0 12 17 10 12 100 0 0 0 17 11 0 17 99 20 19 2 6 6 5 89 18 1 5 5 24 75 0 11 11 14 92 0 14 14 26 14 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01211 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 97 values pushed */\0120 9 2 3 2 9 3 112 0 3 8 10 3 102 0 8 10 2 8 10 110 0 13 1 0 1 13 0 112 0 16 14 15 14 16 15 112 0 15 15 113 0 7 0 4 2 7 4 99 0 2 0 1 13 2 1 99 0 10 0 12 17 10 12 100 0 0 0 17 11 0 17 99 20 19 2 6 6 5 89 18 1 5 5 24 75 0 11 11 14 92 0 14 14 26 14 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 98 values pushed */\0120 9 2 3 2 9 3 112 0 3 8 2 3 8 110 0 8 10 2 8 10 110 0 13 1 0 1 13 0 112 0 16 14 15 14 16 15 112 0 15 15 113 0 7 0 4 2 7 4 99 0 2 0 1 13 2 1 99 0 10 0 12 17 10 12 100 0 0 0 17 11 0 17 99 20 19 2 6 6 5 89 18 1 5 5 24 75 0 11 11 14 92 0 14 14 26 14 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01223 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 98 values pushed */\0120 9 2 3 2 9 3 112 0 3 8 2 3 8 110 0 8 10 2 8 10 110 0 13 1 0 1 13 0 112 0 16 14 15 14 16 15 112 0 15 15 113 0 7 0 4 2 7 4 99 0 2 0 1 13 2 1 99 0 10 0 12 17 10 12 100 0 0 0 17 11 0 17 99 20 19 2 6 6 5 89 18 1 5 5 25 75 0 11 11 14 92 0 14 14 26 14 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 96 values pushed */\0120 9 2 3 2 9 3 112 0 3 8 2 3 8 110 0 8 10 2 8 10 110 0 13 1 0 1 13 0 112 0 16 14 15 14 16 15 112 0 15 15 113 0 7 0 4 2 7 4 99 0 2 0 1 13 2 1 99 0 10 0 12 17 10 12 100 0 0 0 17 11 0 17 99 0 11 0 14 16 11 14 100 20 19 2 6 6 5 89 18 1 5 5 25 6 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 38 values pushed */\012122 122 122 125 122 125 124 123 119 117 112 110 105 103 97 95 89 87 83 81 76 74 65 63 58 56 37 68 17 22 68 36 38 18 33 21 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 685;
}
);
note = uni0919094D0915094D;
},
{
glyphname = "ng_k_ssa-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"519.667 -117 OFFCURVE",
"498 -97 OFFCURVE",
"498 -73 CURVE SMOOTH",
"498 231 LINE",
"530 251 OFFCURVE",
"549 275.333 OFFCURVE",
"549 302 CURVE SMOOTH",
"549 357.431 OFFCURVE",
"471.52 415 OFFCURVE",
"409 415 CURVE SMOOTH",
"391.667 415 OFFCURVE",
"363.667 407 OFFCURVE",
"325 391 CURVE SMOOTH",
"289 375.667 OFFCURVE",
"263.667 368 OFFCURVE",
"249 368 CURVE SMOOTH",
"217 368 OFFCURVE",
"193 395 OFFCURVE",
"193 431 CURVE SMOOTH",
"193 449.667 OFFCURVE",
"228.667 473 OFFCURVE",
"258 473 CURVE SMOOTH",
"262 473 OFFCURVE",
"288 470.667 OFFCURVE",
"336 466 CURVE SMOOTH",
"372 462 OFFCURVE",
"391.333 460 OFFCURVE",
"394 460 CURVE SMOOTH",
"438 460 OFFCURVE",
"471 482.333 OFFCURVE",
"471 513 CURVE SMOOTH",
"471 538.333 OFFCURVE",
"450 575.667 OFFCURVE",
"418 609 CURVE SMOOTH",
"341 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"374 609 LINE",
"400.667 589 OFFCURVE",
"418 563.333 OFFCURVE",
"418 542 CURVE SMOOTH",
"418 527.333 OFFCURVE",
"400.667 516 OFFCURVE",
"378 516 CURVE SMOOTH",
"373.333 516 OFFCURVE",
"342.333 518.333 OFFCURVE",
"285 523 CURVE SMOOTH",
"251.667 526.333 OFFCURVE",
"230 528 OFFCURVE",
"220 528 CURVE SMOOTH",
"166.667 528 OFFCURVE",
"123 497.333 OFFCURVE",
"123 460 CURVE SMOOTH",
"123 401.323 OFFCURVE",
"241.126 322 OFFCURVE",
"305 322 CURVE SMOOTH",
"327.667 322 OFFCURVE",
"347 329.667 OFFCURVE",
"387 347 CURVE SMOOTH",
"412.333 357.667 OFFCURVE",
"440 369 OFFCURVE",
"456 369 CURVE SMOOTH",
"473.333 369 OFFCURVE",
"493 352 OFFCURVE",
"493 336 CURVE SMOOTH",
"493 290.554 OFFCURVE",
"407.535 253 OFFCURVE",
"339 253 CURVE SMOOTH",
"217.667 253 OFFCURVE",
"109 307.333 OFFCURVE",
"41 402 CURVE",
"20 386 LINE",
"49.333 340 OFFCURVE",
"90 300.667 OFFCURVE",
"142 268 CURVE",
"107.333 260 OFFCURVE",
"77 226.667 OFFCURVE",
"77 196 CURVE SMOOTH",
"77 169.333 OFFCURVE",
"109 140.667 OFFCURVE",
"161 118 CURVE",
"89 76.667 OFFCURVE",
"52 52.667 OFFCURVE",
"52 14 CURVE SMOOTH",
"52 -38.643 OFFCURVE",
"132.606 -90 OFFCURVE",
"199 -90 CURVE SMOOTH",
"217.667 -90 OFFCURVE",
"238.333 -84.667 OFFCURVE",
"261 -74 CURVE",
"286.333 -119.333 OFFCURVE",
"328.667 -150 OFFCURVE",
"366 -154 CURVE",
"399 -124 LINE",
"356.333 -121.333 OFFCURVE",
"312.667 -99.333 OFFCURVE",
"286 -66 CURVE",
"302 -56 OFFCURVE",
"314.5 -46.333 OFFCURVE",
"323.5 -37 CURVE SMOOTH",
"332.5 -27.667 OFFCURVE",
"337 -20 OFFCURVE",
"337 -14 CURVE SMOOTH",
"337 11.333 OFFCURVE",
"292 40 OFFCURVE",
"256 40 CURVE SMOOTH",
"234.667 40 OFFCURVE",
"224 24 OFFCURVE",
"224 4 CURVE SMOOTH",
"224 -8.667 OFFCURVE",
"227.333 -19.667 OFFCURVE",
"234 -29 CURVE",
"209.333 -44.333 OFFCURVE",
"186 -52 OFFCURVE",
"164 -52 CURVE SMOOTH",
"134.667 -52 OFFCURVE",
"110 -36 OFFCURVE",
"110 -16 CURVE SMOOTH",
"110 -2 OFFCURVE",
"117.833 11.667 OFFCURVE",
"133.5 25 CURVE SMOOTH",
"149.167 38.333 OFFCURVE",
"172.333 54.333 OFFCURVE",
"203 73 CURVE SMOOTH",
"233 92 LINE",
"274.333 81.333 OFFCURVE",
"312.333 76 OFFCURVE",
"347 76 CURVE SMOOTH",
"380.333 76 OFFCURVE",
"405.333 81 OFFCURVE",
"422 91 CURVE",
"422 -52 LINE SMOOTH",
"422 -87.905 OFFCURVE",
"533.233 -159 OFFCURVE",
"582 -159 CURVE SMOOTH",
"608.667 -159 OFFCURVE",
"630.667 -148.667 OFFCURVE",
"640 -134 CURVE",
"595 -90 LINE",
"579 -107.333 OFFCURVE",
"561 -117 OFFCURVE",
"545 -117 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"694 689 LINE",
"386 689 LINE",
"464 609 LINE",
"694 609 LINE"
);
},
{
closed = 1;
nodes = (
"602 499 LINE",
"536 440 LINE",
"602 382 LINE",
"669 440 LINE"
);
},
{
closed = 1;
nodes = (
"140 200.333 OFFCURVE",
"170.333 226 OFFCURVE",
"201 226 CURVE SMOOTH",
"225 226 OFFCURVE",
"249 213.667 OFFCURVE",
"249 199 CURVE SMOOTH",
"249 176.333 OFFCURVE",
"227.333 157.667 OFFCURVE",
"190 135 CURVE",
"159.333 145.667 OFFCURVE",
"140 161.667 OFFCURVE",
"140 175 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"290 135.667 OFFCURVE",
"302 154.667 OFFCURVE",
"302 174 CURVE SMOOTH",
"302 185.333 OFFCURVE",
"298.333 197.333 OFFCURVE",
"291 210 CURVE",
"319 204 OFFCURVE",
"346.667 201 OFFCURVE",
"374 201 CURVE SMOOTH",
"392.667 201 OFFCURVE",
"408.667 202.333 OFFCURVE",
"422 205 CURVE",
"422 150 LINE",
"394.667 126.667 OFFCURVE",
"355.667 115 OFFCURVE",
"305 115 CURVE SMOOTH",
"287.667 115 OFFCURVE",
"274.667 115.667 OFFCURVE",
"266 117 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */\012136 134 2 16 13 135 60 59 3 7 16 57 1 6 8 124 1 20 6 157 153 2 22 20 152 139 51 3 21 22 15 11 2 1 21 24 1 2 3 42 35 2 5 2 39 3 2 0 4 10 74 2 1 5 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0129 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 111 values pushed */\0120 10 9 14 9 10 14 112 0 14 13 11 14 102 0 13 16 9 13 16 110 0 16 7 9 16 7 110 0 7 15 9 7 15 110 0 3 1 2 1 3 2 112 23 17 2 4 5 0 5 4 0 112 0 0 0 113 0 15 0 8 6 15 8 99 0 9 0 20 22 9 20 99 0 6 0 22 21 6 22 100 0 21 0 1 3 21 1 99 0 2 0 5 4 2 5 99 18 1 11 11 12 89 24 19 2 12 12 24 11 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 112 values pushed */\0120 10 9 14 9 10 14 112 0 14 13 9 14 13 110 0 13 16 9 13 16 110 0 16 7 9 16 7 110 0 7 15 9 7 15 110 0 3 1 2 1 3 2 112 23 17 2 4 5 0 5 4 0 112 0 0 0 113 0 15 0 8 6 15 8 99 0 9 0 20 22 9 20 99 0 6 0 22 21 6 22 100 0 21 0 1 3 21 1 99 0 2 0 5 4 2 5 99 18 1 11 11 12 89 24 19 2 12 12 24 11 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01239 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 112 values pushed */\0120 10 9 14 9 10 14 112 0 14 13 9 14 13 110 0 13 16 9 13 16 110 0 16 7 9 16 7 110 0 7 15 9 7 15 110 0 3 1 2 1 3 2 112 23 17 2 4 5 0 5 4 0 112 0 0 0 113 0 15 0 8 6 15 8 99 0 9 0 20 22 9 20 99 0 6 0 22 21 6 22 100 0 21 0 1 3 21 1 99 0 2 0 5 4 2 5 99 18 1 11 11 12 89 24 19 2 12 12 25 11 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 118 values pushed */\0120 10 9 14 9 10 14 112 0 14 13 9 14 13 110 0 13 16 9 13 16 110 0 16 7 9 16 7 110 0 7 15 9 7 15 110 0 3 1 2 1 3 2 112 23 1 17 5 4 5 17 4 112 0 4 0 5 4 0 110 0 0 0 113 0 15 0 8 6 15 8 99 0 9 0 20 22 9 20 99 0 6 0 22 21 6 22 100 0 21 0 1 3 21 1 99 0 2 0 5 17 2 5 99 18 1 11 11 12 89 24 19 2 12 12 25 11 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 51 values pushed */\012129 129 0 0 156 154 151 149 146 144 129 132 129 132 131 130 0 128 0 127 118 116 114 112 108 106 103 102 96 95 94 93 88 86 84 82 77 75 71 69 64 62 37 23 37 39 37 37 25 6 26 \012CALL[ ]	/* CallFunction */";
};
width = 681;
}
);
note = uni0919094D0915094D0937;
},
{
glyphname = "ng_kha-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"363 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"399 609 LINE",
"427 586.333 OFFCURVE",
"441 564 OFFCURVE",
"441 542 CURVE SMOOTH",
"441 527.333 OFFCURVE",
"425 516 OFFCURVE",
"401 516 CURVE SMOOTH",
"393.667 516 OFFCURVE",
"383.833 516.667 OFFCURVE",
"371.5 518 CURVE SMOOTH",
"359.167 519.333 OFFCURVE",
"345.667 520.333 OFFCURVE",
"331 521 CURVE",
"289 525.667 OFFCURVE",
"259 528 OFFCURVE",
"241 528 CURVE SMOOTH",
"187.667 528 OFFCURVE",
"144 498.333 OFFCURVE",
"144 461 CURVE SMOOTH",
"144 403.017 OFFCURVE",
"265.12 323 OFFCURVE",
"327 323 CURVE SMOOTH",
"348.333 323 OFFCURVE",
"370.667 331 OFFCURVE",
"404 347 CURVE",
"440 361.667 OFFCURVE",
"457 369 OFFCURVE",
"477 369 CURVE SMOOTH",
"495.667 369 OFFCURVE",
"515 352.667 OFFCURVE",
"515 338 CURVE SMOOTH",
"515 293.552 OFFCURVE",
"426.56 256 OFFCURVE",
"359 256 CURVE SMOOTH",
"237.667 256 OFFCURVE",
"128 310.667 OFFCURVE",
"64 404 CURVE",
"41 389 LINE",
"71 345.667 OFFCURVE",
"119 302.333 OFFCURVE",
"185 259 CURVE",
"205.667 231 OFFCURVE",
"216 204.667 OFFCURVE",
"216 180 CURVE SMOOTH",
"216 158.667 OFFCURVE",
"202.333 136 OFFCURVE",
"185 120 CURVE",
"155.667 158.667 OFFCURVE",
"123.333 184 OFFCURVE",
"102 184 CURVE SMOOTH",
"63.333 184 OFFCURVE",
"34 159.333 OFFCURVE",
"34 126 CURVE SMOOTH",
"34 97.333 OFFCURVE",
"54.167 62.5 OFFCURVE",
"94.5 21.5 CURVE SMOOTH",
"175.167 -60.5 OFFCURVE",
"315.333 -141.667 OFFCURVE",
"454 -175 CURVE",
"468 -130 LINE",
"360 -122 OFFCURVE",
"250.333 -71.667 OFFCURVE",
"161 15 CURVE",
"222.333 40.333 OFFCURVE",
"261 84.667 OFFCURVE",
"261 130 CURVE SMOOTH",
"261 168 OFFCURVE",
"251.333 203.333 OFFCURVE",
"232 236 CURVE",
"288.667 212 OFFCURVE",
"343.333 200 OFFCURVE",
"396 200 CURVE SMOOTH",
"437.333 200 OFFCURVE",
"469 206 OFFCURVE",
"491 218 CURVE",
"491 86 LINE",
"460.333 47.333 OFFCURVE",
"420.667 25 OFFCURVE",
"382 25 CURVE SMOOTH",
"359.333 25 OFFCURVE",
"343 37.667 OFFCURVE",
"343 55 CURVE SMOOTH",
"343 89.667 OFFCURVE",
"390.333 115 OFFCURVE",
"433 115 CURVE SMOOTH",
"443.667 115 OFFCURVE",
"452 113.667 OFFCURVE",
"458 111 CURVE",
"466 132 LINE",
"442 156 OFFCURVE",
"415 168 OFFCURVE",
"395 168 CURVE SMOOTH",
"333.667 168 OFFCURVE",
"283 130.333 OFFCURVE",
"283 85 CURVE SMOOTH",
"283 37.029 OFFCURVE",
"359.539 -22 OFFCURVE",
"414 -22 CURVE SMOOTH",
"440.667 -22 OFFCURVE",
"468.333 -9.333 OFFCURVE",
"491 12 CURVE",
"491 -23 LINE SMOOTH",
"491 -82.152 OFFCURVE",
"645.804 -162 OFFCURVE",
"701 -162 CURVE SMOOTH",
"726.333 -162 OFFCURVE",
"747.667 -155.667 OFFCURVE",
"757 -145 CURVE",
"713 -96 LINE",
"699.667 -109.333 OFFCURVE",
"684.333 -116 OFFCURVE",
"667 -116 CURVE SMOOTH",
"632.931 -116 OFFCURVE",
"564 -71.304 OFFCURVE",
"564 -45 CURVE SMOOTH",
"564 269 LINE",
"570.667 281 OFFCURVE",
"574 292.333 OFFCURVE",
"574 303 CURVE SMOOTH",
"574 358.226 OFFCURVE",
"494.098 418 OFFCURVE",
"430 418 CURVE SMOOTH",
"407.333 418 OFFCURVE",
"388.667 410.333 OFFCURVE",
"346 393 CURVE SMOOTH",
"310 377 OFFCURVE",
"290 369 OFFCURVE",
"270 369 CURVE SMOOTH",
"239.333 369 OFFCURVE",
"214 395.333 OFFCURVE",
"214 430 CURVE SMOOTH",
"214 448.667 OFFCURVE",
"245.667 474 OFFCURVE",
"279 474 CURVE SMOOTH",
"287.667 474 OFFCURVE",
"309.333 472 OFFCURVE",
"344 468 CURVE SMOOTH",
"378 463.333 OFFCURVE",
"403 461 OFFCURVE",
"419 461 CURVE SMOOTH",
"461.667 461 OFFCURVE",
"495 484.333 OFFCURVE",
"495 515 CURVE SMOOTH",
"495 539.667 OFFCURVE",
"477 571 OFFCURVE",
"441 609 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"725 609 LINE",
"725 689 LINE",
"409 689 LINE",
"486 609 LINE"
);
},
{
closed = 1;
nodes = (
"697 440 LINE",
"629 499 LINE",
"564 440 LINE",
"629 382 LINE"
);
},
{
closed = 1;
nodes = (
"141.333 129 OFFCURVE",
"153.333 119.667 OFFCURVE",
"164 101 CURVE",
"149.333 85 OFFCURVE",
"129.667 73.333 OFFCURVE",
"105 66 CURVE",
"94.333 73.333 OFFCURVE",
"89 81.667 OFFCURVE",
"89 91 CURVE SMOOTH",
"89 109.667 OFFCURVE",
"108 129 OFFCURVE",
"128 129 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 57 values pushed */\012144 1 1 17 143 1 3 0 142 100 99 3 13 3 27 1 12 14 73 69 2 10 12 56 1 22 7 92 1 8 22 151 149 68 57 4 9 8 78 43 2 6 9 34 1 4 6 35 1 5 4 11 74 82 1 5 71 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 57 values pushed */\012144 1 1 16 143 1 3 0 142 100 99 3 13 3 27 1 12 14 73 69 2 10 12 56 1 22 7 92 1 8 22 151 149 68 57 4 9 8 78 43 2 6 9 34 1 4 6 35 1 5 4 11 74 82 1 5 71 \012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 100 values pushed */\0120 3 0 13 0 3 13 112 0 13 2 0 13 2 110 0 2 14 0 2 14 110 0 1 0 15 1 87 0 17 0 0 3 17 0 99 16 1 15 0 14 12 15 14 99 0 12 0 10 11 12 10 100 0 11 23 1 22 8 11 22 99 0 7 0 8 9 7 8 99 0 4 0 5 4 5 95 20 1 18 18 19 89 21 1 19 19 24 75 0 9 9 6 91 0 6 6 26 6 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01224 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 100 values pushed */\0120 3 0 13 0 3 13 112 0 13 2 0 13 2 110 0 2 14 0 2 14 110 0 1 0 15 1 87 0 17 0 0 3 17 0 99 16 1 15 0 14 12 15 14 99 0 12 0 10 11 12 10 100 0 11 23 1 22 8 11 22 99 0 7 0 8 9 7 8 99 0 4 0 5 4 5 95 20 1 18 18 19 89 21 1 19 19 25 75 0 9 9 6 91 0 6 6 26 6 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 98 values pushed */\0120 3 0 13 0 3 13 112 0 13 2 0 13 2 110 0 2 14 0 2 14 110 0 1 0 15 1 87 0 17 0 0 3 17 0 99 16 1 15 0 14 12 15 14 99 0 12 0 10 11 12 10 100 0 11 23 1 22 8 11 22 99 0 7 0 8 9 7 8 99 0 9 0 6 4 9 6 99 0 4 0 5 4 5 95 20 1 18 18 19 89 21 1 19 19 25 18 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 98 values pushed */\0120 3 0 13 0 3 13 112 0 13 2 0 13 2 110 0 2 14 0 2 14 110 0 15 0 1 0 15 1 99 0 0 3 16 0 87 17 1 16 0 14 12 16 14 99 0 12 0 10 11 12 10 100 0 11 23 1 22 8 11 22 99 0 7 0 8 9 7 8 99 0 9 0 6 4 9 6 99 0 4 0 5 4 5 95 20 1 18 18 19 89 21 1 19 19 25 18 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 44 values pushed */\012145 145 145 153 145 152 140 139 138 137 136 135 134 133 129 127 126 125 124 122 117 115 111 109 104 102 90 88 72 70 66 64 36 37 38 36 41 36 36 34 36 24 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 710;
}
);
note = uni0919094D0916;
},
{
glyphname = "ng_ga-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"517.667 -115 OFFCURVE",
"470 -85 OFFCURVE",
"470 -61 CURVE SMOOTH",
"470 218 LINE",
"519.333 236.667 OFFCURVE",
"549 268.667 OFFCURVE",
"549 302 CURVE SMOOTH",
"549 357.431 OFFCURVE",
"471.52 415 OFFCURVE",
"409 415 CURVE SMOOTH",
"391.667 415 OFFCURVE",
"363.667 407 OFFCURVE",
"325 391 CURVE SMOOTH",
"289 375.667 OFFCURVE",
"263.667 368 OFFCURVE",
"249 368 CURVE SMOOTH",
"217 368 OFFCURVE",
"193 395 OFFCURVE",
"193 431 CURVE SMOOTH",
"193 449.667 OFFCURVE",
"228.667 473 OFFCURVE",
"258 473 CURVE SMOOTH",
"262 473 OFFCURVE",
"288 470.667 OFFCURVE",
"336 466 CURVE SMOOTH",
"372 462 OFFCURVE",
"391.333 460 OFFCURVE",
"394 460 CURVE SMOOTH",
"438 460 OFFCURVE",
"471 482.333 OFFCURVE",
"471 513 CURVE SMOOTH",
"471 538.333 OFFCURVE",
"450 575.667 OFFCURVE",
"418 609 CURVE SMOOTH",
"341 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"374 609 LINE",
"400.667 589 OFFCURVE",
"418 563.333 OFFCURVE",
"418 542 CURVE SMOOTH",
"418 527.333 OFFCURVE",
"400.667 516 OFFCURVE",
"378 516 CURVE SMOOTH",
"373.333 516 OFFCURVE",
"342.333 518.333 OFFCURVE",
"285 523 CURVE SMOOTH",
"251.667 526.333 OFFCURVE",
"230 528 OFFCURVE",
"220 528 CURVE SMOOTH",
"166.667 528 OFFCURVE",
"123 497.333 OFFCURVE",
"123 460 CURVE SMOOTH",
"123 401.323 OFFCURVE",
"241.126 322 OFFCURVE",
"305 322 CURVE SMOOTH",
"327.667 322 OFFCURVE",
"347 329.667 OFFCURVE",
"387 347 CURVE SMOOTH",
"412.333 357.667 OFFCURVE",
"440 369 OFFCURVE",
"456 369 CURVE SMOOTH",
"473.333 369 OFFCURVE",
"493 352 OFFCURVE",
"493 336 CURVE SMOOTH",
"493 290.554 OFFCURVE",
"407.535 253 OFFCURVE",
"339 253 CURVE SMOOTH",
"217.667 253 OFFCURVE",
"109 307.333 OFFCURVE",
"41 402 CURVE",
"20 386 LINE",
"56 328.667 OFFCURVE",
"107.333 283.333 OFFCURVE",
"174 250 CURVE",
"192.667 212.667 OFFCURVE",
"202 175.333 OFFCURVE",
"202 138 CURVE SMOOTH",
"202 108.667 OFFCURVE",
"192.667 88.667 OFFCURVE",
"174 78 CURVE",
"156.667 107.333 OFFCURVE",
"135 125 OFFCURVE",
"119 125 CURVE SMOOTH",
"97.667 125 OFFCURVE",
"81 112 OFFCURVE",
"81 96 CURVE SMOOTH",
"81 48 OFFCURVE",
"145.587 -12 OFFCURVE",
"196 -12 CURVE SMOOTH",
"225.333 -12 OFFCURVE",
"262 30.333 OFFCURVE",
"262 65 CURVE SMOOTH",
"262 118.333 OFFCURVE",
"245.667 174.333 OFFCURVE",
"213 233 CURVE",
"267.667 211.667 OFFCURVE",
"321.333 201 OFFCURVE",
"374 201 CURVE SMOOTH",
"389 201 LINE",
"389 -18 LINE SMOOTH",
"389 -74.623 OFFCURVE",
"536.552 -159 OFFCURVE",
"595 -159 CURVE SMOOTH",
"609 -159 OFFCURVE",
"626.667 -151 OFFCURVE",
"648 -135 CURVE",
"612 -89 LINE",
"594.667 -106.333 OFFCURVE",
"575.667 -115 OFFCURVE",
"555 -115 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"694 689 LINE",
"386 689 LINE",
"464 609 LINE",
"694 609 LINE"
);
},
{
closed = 1;
nodes = (
"602 499 LINE",
"536 440 LINE",
"602 382 LINE",
"669 440 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */\012110 108 2 14 11 109 34 33 3 5 14 98 12 2 1 4 27 1 2 3 1 1 15 2 2 1 0 15 6 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0129 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 93 values pushed */\0120 7 9 8 9 7 8 112 0 8 12 9 8 12 110 0 12 11 9 12 102 0 11 14 9 11 14 110 0 14 5 9 14 5 110 0 5 13 9 5 13 110 0 3 1 2 1 3 2 112 0 13 0 6 4 13 6 99 0 4 0 1 3 4 1 100 18 1 15 0 0 15 0 95 16 1 9 9 10 89 19 17 2 10 10 24 75 0 2 2 26 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 94 values pushed */\0120 7 9 8 9 7 8 112 0 8 12 9 8 12 110 0 12 11 9 12 11 110 0 11 14 9 11 14 110 0 14 5 9 14 5 110 0 5 13 9 5 13 110 0 3 1 2 1 3 2 112 0 13 0 6 4 13 6 99 0 4 0 1 3 4 1 100 18 1 15 0 0 15 0 95 16 1 9 9 10 89 19 17 2 10 10 24 75 0 2 2 26 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01245 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 94 values pushed */\0120 7 9 8 9 7 8 112 0 8 12 9 8 12 110 0 12 11 9 12 11 110 0 11 14 9 11 14 110 0 14 5 9 14 5 110 0 5 13 9 5 13 110 0 3 1 2 1 3 2 112 0 13 0 6 4 13 6 99 0 4 0 1 3 4 1 100 18 1 15 0 0 15 0 95 16 1 9 9 10 89 19 17 2 10 10 25 75 0 2 2 26 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 96 values pushed */\0120 7 9 8 9 7 8 112 0 8 12 9 8 12 110 0 12 11 9 12 11 110 0 11 14 9 11 14 110 0 14 5 9 14 5 110 0 5 13 9 5 13 110 0 3 1 2 1 3 2 112 0 2 15 1 2 15 110 0 13 0 6 4 13 6 99 0 4 0 1 3 4 1 100 18 1 15 0 0 15 0 95 16 1 9 9 10 89 19 17 2 10 10 25 9 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 38 values pushed */\012103 103 0 0 103 106 103 106 105 104 0 102 0 101 92 90 88 86 82 80 77 76 70 69 68 67 34 37 36 37 43 37 37 36 35 20 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 681;
}
);
note = uni0919094D0917;
},
{
glyphname = "ng_gha-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-14 609 LINE",
"-14 689 LINE",
"341 689 LINE",
"418 609 LINE SMOOTH",
"450 575.667 OFFCURVE",
"471 538.333 OFFCURVE",
"471 513 CURVE SMOOTH",
"471 482.333 OFFCURVE",
"438 460 OFFCURVE",
"394 460 CURVE SMOOTH",
"391.333 460 OFFCURVE",
"372 462 OFFCURVE",
"336 466 CURVE SMOOTH",
"288 470.667 OFFCURVE",
"262 473 OFFCURVE",
"258 473 CURVE SMOOTH",
"228.667 473 OFFCURVE",
"193 449.667 OFFCURVE",
"193 431 CURVE SMOOTH",
"193 396.333 OFFCURVE",
"218.333 370 OFFCURVE",
"249 370 CURVE SMOOTH",
"263.667 370 OFFCURVE",
"289 377.667 OFFCURVE",
"325 393 CURVE SMOOTH",
"365 409 OFFCURVE",
"387.667 418 OFFCURVE",
"409 418 CURVE SMOOTH",
"471.167 418 OFFCURVE",
"549 358.281 OFFCURVE",
"549 304 CURVE SMOOTH",
"549 276 OFFCURVE",
"526.333 245.667 OFFCURVE",
"489 227 CURVE",
"489 -72 LINE SMOOTH",
"489 -98.667 OFFCURVE",
"518.333 -121 OFFCURVE",
"557 -121 CURVE SMOOTH",
"575.667 -121 OFFCURVE",
"595.333 -110.333 OFFCURVE",
"610 -93 CURVE",
"653 -133 LINE",
"633.667 -151 OFFCURVE",
"612.667 -160 OFFCURVE",
"590 -160 CURVE SMOOTH",
"538.461 -160 OFFCURVE",
"405 -105.036 OFFCURVE",
"405 -61 CURVE SMOOTH",
"405 1 LINE",
"370.333 -31 OFFCURVE",
"334 -50 OFFCURVE",
"302 -50 CURVE SMOOTH",
"238.898 -50 OFFCURVE",
"121 10.841 OFFCURVE",
"121 62 CURVE SMOOTH",
"121 79.333 OFFCURVE",
"141.333 101 OFFCURVE",
"176 121 CURVE",
"117.333 142.333 OFFCURVE",
"81 173 OFFCURVE",
"81 201 CURVE SMOOTH",
"81 229 OFFCURVE",
"100 258.667 OFFCURVE",
"132 280 CURVE",
"89.333 308 OFFCURVE",
"52 344.333 OFFCURVE",
"20 389 CURVE",
"41 404 LINE",
"109 309.333 OFFCURVE",
"217.667 255 OFFCURVE",
"339 255 CURVE SMOOTH",
"404.96 255 OFFCURVE",
"493 294.241 OFFCURVE",
"493 338 CURVE SMOOTH",
"493 354 OFFCURVE",
"474.667 370 OFFCURVE",
"456 370 CURVE SMOOTH",
"444 370 OFFCURVE",
"421.333 363 OFFCURVE",
"388 349 CURVE SMOOTH",
"346.667 331.667 OFFCURVE",
"326.333 324 OFFCURVE",
"305 324 CURVE SMOOTH",
"243.952 324 OFFCURVE",
"123 402.371 OFFCURVE",
"123 460 CURVE SMOOTH",
"123 497.333 OFFCURVE",
"166.667 528 OFFCURVE",
"220 528 CURVE SMOOTH",
"230 528 OFFCURVE",
"251.667 526.333 OFFCURVE",
"285 523 CURVE SMOOTH",
"342.333 518.333 OFFCURVE",
"373.333 516 OFFCURVE",
"378 516 CURVE SMOOTH",
"400.667 516 OFFCURVE",
"418 527.333 OFFCURVE",
"418 542 CURVE SMOOTH",
"418 563.333 OFFCURVE",
"400.667 589 OFFCURVE",
"374 609 CURVE"
);
},
{
closed = 1;
nodes = (
"697 609 LINE",
"464 609 LINE",
"386 689 LINE",
"697 689 LINE"
);
},
{
closed = 1;
nodes = (
"669 440 LINE",
"602 382 LINE",
"536 440 LINE",
"602 499 LINE"
);
},
{
closed = 1;
nodes = (
"300 -7 OFFCURVE",
"357 30.667 OFFCURVE",
"405 92 CURVE",
"405 204 LINE",
"397.667 203.333 OFFCURVE",
"386 203 OFFCURVE",
"370 203 CURVE SMOOTH",
"310 203 OFFCURVE",
"253 216 OFFCURVE",
"199 242 CURVE",
"169.667 223.333 OFFCURVE",
"151 198.667 OFFCURVE",
"151 176 CURVE SMOOTH",
"151 162.667 OFFCURVE",
"169.333 147.667 OFFCURVE",
"200 137 CURVE",
"223.333 149 OFFCURVE",
"244.333 157.667 OFFCURVE",
"263 163 CURVE",
"322 116 LINE",
"247.333 97.333 OFFCURVE",
"192 61 OFFCURVE",
"192 29 CURVE SMOOTH",
"192 7.667 OFFCURVE",
"216 -7 OFFCURVE",
"248 -7 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */\012103 1 10 0 104 1 8 11 105 33 32 3 3 8 35 1 4 2 124 120 66 3 16 4 125 114 112 111 51 41 6 17 16 59 1 7 5 58 1 6 7 8 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0129 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 78 values pushed */\0120 1 13 0 13 1 0 112 0 10 0 11 13 10 104 0 0 0 11 8 0 11 99 0 8 0 3 9 8 3 99 0 9 0 2 4 9 2 99 0 4 0 16 17 4 16 99 20 1 17 0 5 7 17 5 99 0 7 0 6 7 6 95 19 15 18 3 13 13 12 89 14 1 12 12 24 13 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 79 values pushed */\0120 1 13 0 13 1 0 112 0 10 0 11 0 10 11 112 0 0 0 11 8 0 11 99 0 8 0 3 9 8 3 99 0 9 0 2 4 9 2 99 0 4 0 16 17 4 16 99 20 1 17 0 5 7 17 5 99 0 7 0 6 7 6 95 19 15 18 3 13 13 12 89 14 1 12 12 24 13 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 79 values pushed */\0120 1 13 0 13 1 0 112 0 10 0 11 0 10 11 112 0 0 0 11 8 0 11 99 0 8 0 3 9 8 3 99 0 9 0 2 4 9 2 99 0 4 0 16 17 4 16 99 20 1 17 0 5 7 17 5 99 0 7 0 6 7 6 95 19 15 18 3 13 13 12 89 14 1 12 12 25 13 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 46 values pushed */\012106 106 98 98 0 0 106 128 106 127 123 121 98 101 98 101 100 99 0 97 0 97 96 95 89 87 84 83 79 77 74 72 63 61 57 55 49 47 37 35 37 35 21 21 6 25 \012CALL[ ]	/* CallFunction */";
};
width = 683;
}
);
note = uni0919094D0918;
},
{
glyphname = "ng_ma-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"505.667 -117 OFFCURVE",
"485 -97 OFFCURVE",
"485 -73 CURVE SMOOTH",
"485 225 LINE",
"525 245 OFFCURVE",
"549 272.667 OFFCURVE",
"549 302 CURVE SMOOTH",
"549 357.431 OFFCURVE",
"471.52 415 OFFCURVE",
"409 415 CURVE SMOOTH",
"391.667 415 OFFCURVE",
"363.667 407 OFFCURVE",
"325 391 CURVE SMOOTH",
"289 375.667 OFFCURVE",
"263.667 368 OFFCURVE",
"249 368 CURVE SMOOTH",
"217 368 OFFCURVE",
"193 395 OFFCURVE",
"193 431 CURVE SMOOTH",
"193 449.667 OFFCURVE",
"228.667 473 OFFCURVE",
"258 473 CURVE SMOOTH",
"262 473 OFFCURVE",
"288 470.667 OFFCURVE",
"336 466 CURVE SMOOTH",
"372 462 OFFCURVE",
"391.333 460 OFFCURVE",
"394 460 CURVE SMOOTH",
"438 460 OFFCURVE",
"471 482.333 OFFCURVE",
"471 513 CURVE SMOOTH",
"471 538.333 OFFCURVE",
"450 575.667 OFFCURVE",
"418 609 CURVE SMOOTH",
"341 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"374 609 LINE",
"400.667 589 OFFCURVE",
"418 563.333 OFFCURVE",
"418 542 CURVE SMOOTH",
"418 527.333 OFFCURVE",
"400.667 516 OFFCURVE",
"378 516 CURVE SMOOTH",
"373.333 516 OFFCURVE",
"342.333 518.333 OFFCURVE",
"285 523 CURVE SMOOTH",
"251.667 526.333 OFFCURVE",
"230 528 OFFCURVE",
"220 528 CURVE SMOOTH",
"166.667 528 OFFCURVE",
"123 497.333 OFFCURVE",
"123 460 CURVE SMOOTH",
"123 401.323 OFFCURVE",
"241.126 322 OFFCURVE",
"305 322 CURVE SMOOTH",
"327.667 322 OFFCURVE",
"347 329.667 OFFCURVE",
"387 347 CURVE SMOOTH",
"412.333 357.667 OFFCURVE",
"440 369 OFFCURVE",
"456 369 CURVE SMOOTH",
"473.333 369 OFFCURVE",
"493 352 OFFCURVE",
"493 336 CURVE SMOOTH",
"493 290.554 OFFCURVE",
"407.535 253 OFFCURVE",
"339 253 CURVE SMOOTH",
"217.667 253 OFFCURVE",
"109 307.333 OFFCURVE",
"41 402 CURVE",
"20 386 LINE",
"50.667 336 OFFCURVE",
"96 294 OFFCURVE",
"156 260 CURVE",
"156 80 LINE",
"103 80 LINE SMOOTH",
"91 80 OFFCURVE",
"80 72 OFFCURVE",
"80 64 CURVE SMOOTH",
"80 33.047 OFFCURVE",
"175.06 -50 OFFCURVE",
"208 -50 CURVE SMOOTH",
"218.667 -50 OFFCURVE",
"228 -41.667 OFFCURVE",
"228 -31 CURVE SMOOTH",
"228 19 LINE",
"410 19 LINE",
"410 -52 LINE SMOOTH",
"410 -87.928 OFFCURVE",
"520.541 -159 OFFCURVE",
"568 -159 CURVE SMOOTH",
"594.667 -159 OFFCURVE",
"617.667 -148.667 OFFCURVE",
"627 -134 CURVE",
"583 -90 LINE",
"566.333 -108 OFFCURVE",
"549 -117 OFFCURVE",
"531 -117 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"694 689 LINE",
"386 689 LINE",
"464 609 LINE",
"694 609 LINE"
);
},
{
closed = 1;
nodes = (
"602 499 LINE",
"536 440 LINE",
"602 382 LINE",
"669 440 LINE"
);
},
{
closed = 1;
nodes = (
"410 80 LINE",
"228 80 LINE",
"228 227 LINE",
"278 209.667 OFFCURVE",
"326.667 201 OFFCURVE",
"374 201 CURVE SMOOTH",
"382 201 OFFCURVE",
"394 201.667 OFFCURVE",
"410 203 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */\012103 101 2 14 11 102 27 26 3 5 14 24 1 4 6 109 105 91 3 18 4 19 1 1 3 12 1 2 1 1 1 15 2 2 1 0 15 8 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0129 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 100 values pushed */\0120 7 9 8 9 7 8 112 0 8 12 9 8 12 110 0 12 11 9 12 102 0 11 14 9 11 14 110 0 14 5 9 14 5 110 0 5 13 9 5 13 110 0 2 1 15 1 2 15 112 0 13 0 6 4 13 6 99 0 4 0 18 3 4 18 100 20 1 15 0 0 15 0 95 16 1 9 9 10 89 21 17 2 10 10 24 75 22 19 2 3 3 1 89 0 1 1 26 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 101 values pushed */\0120 7 9 8 9 7 8 112 0 8 12 9 8 12 110 0 12 11 9 12 11 110 0 11 14 9 11 14 110 0 14 5 9 14 5 110 0 5 13 9 5 13 110 0 2 1 15 1 2 15 112 0 13 0 6 4 13 6 99 0 4 0 18 3 4 18 100 20 1 15 0 0 15 0 95 16 1 9 9 10 89 21 17 2 10 10 24 75 22 19 2 3 3 1 89 0 1 1 26 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01224 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 101 values pushed */\0120 7 9 8 9 7 8 112 0 8 12 9 8 12 110 0 12 11 9 12 11 110 0 11 14 9 11 14 110 0 14 5 9 14 5 110 0 5 13 9 5 13 110 0 2 1 15 1 2 15 112 0 13 0 6 4 13 6 99 0 4 0 18 3 4 18 100 20 1 15 0 0 15 0 95 16 1 9 9 10 89 21 17 2 10 10 25 75 22 19 2 3 3 1 89 0 1 1 26 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 99 values pushed */\0120 7 9 8 9 7 8 112 0 8 12 9 8 12 110 0 12 11 9 12 11 110 0 11 14 9 11 14 110 0 14 5 9 14 5 110 0 5 13 9 5 13 110 0 2 1 15 1 2 15 112 0 13 0 6 4 13 6 99 0 4 0 18 3 4 18 100 22 19 2 3 0 1 2 3 1 97 20 1 15 0 0 15 0 95 16 1 9 9 10 89 21 17 2 10 10 25 9 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 46 values pushed */\012104 104 96 96 0 0 104 110 104 110 108 106 96 99 96 99 98 97 0 95 0 94 85 83 81 79 75 73 70 69 63 62 61 60 34 37 36 37 38 37 35 20 36 23 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 681;
}
);
note = uni0919094D092E;
},
{
glyphname = "ca_rakar-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"824 17 LINE",
"806 -3 OFFCURVE",
"789 -13 OFFCURVE",
"773 -13 CURVE SMOOTH",
"720.32 -13 OFFCURVE",
"590 59.451 OFFCURVE",
"590 111 CURVE SMOOTH",
"590 609 LINE",
"510 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"507 609 LINE",
"507 348 LINE",
"445.667 274.667 OFFCURVE",
"368.667 233 OFFCURVE",
"298 233 CURVE SMOOTH",
"263.333 233 OFFCURVE",
"231 260.333 OFFCURVE",
"231 295 CURVE SMOOTH",
"231 364.333 OFFCURVE",
"306.667 421.333 OFFCURVE",
"404 432 CURVE",
"352 501 LINE",
"12 501 LINE",
"65 431 LINE",
"224 431 LINE",
"180 407 OFFCURVE",
"154 364.667 OFFCURVE",
"154 326 CURVE SMOOTH",
"154 274.06 OFFCURVE",
"259.568 193.695 OFFCURVE",
"325 180 CURVE",
"203 78 LINE SMOOTH",
"190.333 68 OFFCURVE",
"178.667 63 OFFCURVE",
"168 63 CURVE SMOOTH",
"155.333 63 OFFCURVE",
"143.333 68.667 OFFCURVE",
"132 80 CURVE",
"116 58 LINE",
"154.667 23.333 OFFCURVE",
"190 2 OFFCURVE",
"214 2 CURVE SMOOTH",
"229.333 2 OFFCURVE",
"251 14.333 OFFCURVE",
"279 39 CURVE SMOOTH",
"509 242 LINE",
"509 162 LINE SMOOTH",
"509 136.667 OFFCURVE",
"527.833 106.167 OFFCURVE",
"565.5 70.5 CURVE SMOOTH",
"640.833 -0.833 OFFCURVE",
"756.667 -61 OFFCURVE",
"834 -61 CURVE SMOOTH",
"857.333 -61 OFFCURVE",
"878.333 -50.667 OFFCURVE",
"897 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"635 609 LINE",
"706 609 LINE",
"706 689 LINE",
"556 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */\01230 1 3 4 39 7 2 5 3 19 14 2 2 5 51 13 2 1 2 4 74 44 1 6 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 49 values pushed */\0120 5 3 2 3 5 2 112 0 2 1 3 2 1 110 0 4 0 3 5 4 3 97 0 8 0 0 8 0 95 11 10 2 6 6 7 89 9 1 7 7 24 75 0 1 1 26 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 49 values pushed */\0120 5 3 2 3 5 2 112 0 2 1 3 2 1 110 0 4 0 3 5 4 3 97 0 8 0 0 8 0 95 11 10 2 6 6 7 89 9 1 7 7 25 75 0 1 1 26 1 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 20 values pushed */\01252 52 52 55 52 55 54 53 37 17 19 38 17 25 36 38 33 12 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 691;
}
);
note = uni091A094D0930;
},
{
glyphname = "c_ca-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"751 609 LINE",
"-14 609 LINE",
"-14 689 LINE",
"753 689 LINE",
"833 609 LINE",
"833 111 LINE SMOOTH",
"833 61.319 OFFCURVE",
"960.47 -13 OFFCURVE",
"1014 -13 CURVE SMOOTH",
"1033.333 -13 OFFCURVE",
"1051.333 -3 OFFCURVE",
"1068 17 CURVE",
"1141 -30 LINE",
"1121.667 -50.667 OFFCURVE",
"1100.667 -61 OFFCURVE",
"1078 -61 CURVE SMOOTH",
"1040.667 -61 OFFCURVE",
"996 -47.667 OFFCURVE",
"944 -21 CURVE SMOOTH",
"840 32.333 OFFCURVE",
"751 116 OFFCURVE",
"751 168 CURVE SMOOTH",
"751 447 LINE",
"534 447 LINE",
"599.333 404.333 OFFCURVE",
"638 339 OFFCURVE",
"638 275 CURVE SMOOTH",
"638 216.333 OFFCURVE",
"594.333 168 OFFCURVE",
"541 168 CURVE SMOOTH",
"491.667 168 OFFCURVE",
"447.333 186.333 OFFCURVE",
"414 221 CURVE",
"392.667 181 OFFCURVE",
"346.333 155 OFFCURVE",
"297 155 CURVE SMOOTH",
"201 155 OFFCURVE",
"93.667 254 OFFCURVE",
"23 410 CURVE",
"52 425 LINE",
"94.667 306.333 OFFCURVE",
"177.667 228 OFFCURVE",
"259 228 CURVE SMOOTH",
"313.667 228 OFFCURVE",
"358 267.333 OFFCURVE",
"358 314 CURVE SMOOTH",
"358 368.667 OFFCURVE",
"321.667 399 OFFCURVE",
"275 399 CURVE SMOOTH",
"261.667 399 OFFCURVE",
"249 396.667 OFFCURVE",
"237 392 CURVE",
"208 439 LINE",
"286.667 488.333 OFFCURVE",
"384.667 516 OFFCURVE",
"482 516 CURVE SMOOTH",
"751 516 LINE"
);
},
{
closed = 1;
nodes = (
"949 609 LINE",
"880 609 LINE",
"799 689 LINE",
"949 689 LINE"
);
},
{
closed = 1;
nodes = (
"530 232 OFFCURVE",
"568 273 OFFCURVE",
"568 325 CURVE SMOOTH",
"568 388.746 OFFCURVE",
"511.731 443 OFFCURVE",
"443 443 CURVE SMOOTH",
"401 443 OFFCURVE",
"361.333 433.333 OFFCURVE",
"324 414 CURVE",
"381.333 388.667 OFFCURVE",
"420 333 OFFCURVE",
"420 273 CURVE SMOOTH",
"420 265 OFFCURVE",
"419.667 259 OFFCURVE",
"419 255 CURVE",
"439 239.667 OFFCURVE",
"460 232 OFFCURVE",
"482 232 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */\01263 18 17 5 4 1 5 58 6 2 2 1 24 1 4 2 42 1 7 3 41 1 6 7 5 74 49 1 9 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 55 values pushed */\0120 1 5 2 5 1 2 112 0 0 12 1 5 1 0 5 99 0 4 3 2 4 87 16 13 2 2 0 3 7 2 3 99 0 7 0 6 7 6 95 15 11 14 3 9 9 8 89 10 1 8 8 24 9 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 55 values pushed */\0120 1 5 2 5 1 2 112 0 0 12 1 5 1 0 5 99 0 4 3 2 4 87 16 13 2 2 0 3 7 2 3 99 0 7 0 6 7 6 95 15 11 14 3 9 9 8 89 10 1 8 8 25 9 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 34 values pushed */\01257 57 53 53 0 0 57 72 57 71 66 64 53 56 53 56 55 54 0 52 0 52 21 35 36 21 36 37 36 36 33 17 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 936;
}
);
note = uni091A094D091A;
},
{
glyphname = "cha_rakar-deva";
layers = (
{
components = (
{
alignment = -1;
name = "rakar-deva";
transform = "{1, 0, 0, 1, 695, 0}";
},
{
alignment = -1;
name = "cha-deva";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 760;
}
);
note = uni091B094D0930;
},
{
glyphname = "ch_va-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"657.667 330.333 OFFCURVE",
"672 369 OFFCURVE",
"672 409 CURVE SMOOTH",
"672 462.333 OFFCURVE",
"628.667 516.667 OFFCURVE",
"558 550 CURVE",
"558 609 LINE",
"478 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"476 609 LINE",
"476 559 LINE",
"422.667 544.333 OFFCURVE",
"385 497.667 OFFCURVE",
"385 447 CURVE SMOOTH",
"385 393.667 OFFCURVE",
"444 335.667 OFFCURVE",
"524 305 CURVE",
"462.667 246.333 OFFCURVE",
"375 213 OFFCURVE",
"279 213 CURVE SMOOTH",
"224.333 213 OFFCURVE",
"181 237.667 OFFCURVE",
"181 271 CURVE SMOOTH",
"181 310.197 OFFCURVE",
"264.053 355 OFFCURVE",
"319 355 CURVE SMOOTH",
"325.667 355 OFFCURVE",
"340.333 348.667 OFFCURVE",
"355 338 CURVE",
"370 352 LINE",
"332.667 394.667 OFFCURVE",
"293.667 419 OFFCURVE",
"263 419 CURVE SMOOTH",
"244.333 419 OFFCURVE",
"223.667 414.333 OFFCURVE",
"201 405 CURVE",
"175.667 410.333 OFFCURVE",
"153.667 417.333 OFFCURVE",
"135 426 CURVE SMOOTH",
"116.333 434.667 OFFCURVE",
"107 444 OFFCURVE",
"107 454 CURVE SMOOTH",
"107 491.127 OFFCURVE",
"192.019 520 OFFCURVE",
"256 520 CURVE SMOOTH",
"278 520 OFFCURVE",
"296.667 514.667 OFFCURVE",
"312 504 CURVE",
"326 523 LINE",
"228 581 LINE",
"106.667 581 OFFCURVE",
"26 541 OFFCURVE",
"26 485 CURVE SMOOTH",
"26 449 OFFCURVE",
"85 408.333 OFFCURVE",
"169 387 CURVE",
"123.667 365.667 OFFCURVE",
"94 334.667 OFFCURVE",
"94 308 CURVE SMOOTH",
"94 284.667 OFFCURVE",
"106.833 261.333 OFFCURVE",
"132.5 238 CURVE SMOOTH",
"183.833 191.333 OFFCURVE",
"271.667 158 OFFCURVE",
"357 158 CURVE SMOOTH",
"372.333 158 OFFCURVE",
"392.333 160.333 OFFCURVE",
"417 165 CURVE",
"417 56 LINE",
"383.667 -1.333 OFFCURVE",
"325.333 -30 OFFCURVE",
"260 -30 CURVE SMOOTH",
"237.333 -30 OFFCURVE",
"205 -13.333 OFFCURVE",
"205 8 CURVE SMOOTH",
"205 52.086 OFFCURVE",
"270.956 93 OFFCURVE",
"325 93 CURVE SMOOTH",
"347.667 93 OFFCURVE",
"369 86.667 OFFCURVE",
"389 74 CURVE",
"397 87 LINE",
"359.667 123 OFFCURVE",
"316.667 139 OFFCURVE",
"262 139 CURVE SMOOTH",
"203.143 139 OFFCURVE",
"128 96.401 OFFCURVE",
"128 42 CURVE SMOOTH",
"128 -16.627 OFFCURVE",
"255.085 -82 OFFCURVE",
"319 -82 CURVE SMOOTH",
"360.333 -82 OFFCURVE",
"393 -69.333 OFFCURVE",
"417 -32 CURVE",
"417 -40 LINE SMOOTH",
"417 -96.384 OFFCURVE",
"571.731 -159 OFFCURVE",
"630 -159 CURVE SMOOTH",
"656.667 -159 OFFCURVE",
"676.333 -151.667 OFFCURVE",
"689 -137 CURVE",
"644 -88 LINE",
"626.667 -108 OFFCURVE",
"609.333 -116 OFFCURVE",
"580 -116 CURVE SMOOTH",
"540 -116 OFFCURVE",
"495 -92.667 OFFCURVE",
"495 -62 CURVE SMOOTH",
"495 192 LINE",
"540.333 214 OFFCURVE",
"578 241 OFFCURVE",
"608 273 CURVE",
"642.667 257 OFFCURVE",
"665 234.667 OFFCURVE",
"665 216 CURVE SMOOTH",
"665 181.333 OFFCURVE",
"639 165 OFFCURVE",
"607 165 CURVE SMOOTH",
"597 165 OFFCURVE",
"587 166.667 OFFCURVE",
"577 170 CURVE",
"564 149 LINE",
"595.333 122.333 OFFCURVE",
"628 109 OFFCURVE",
"662 109 CURVE SMOOTH",
"703.333 109 OFFCURVE",
"736 141.333 OFFCURVE",
"736 180 CURVE SMOOTH",
"736 217.333 OFFCURVE",
"696.333 262.333 OFFCURVE",
"631 301 CURVE"
);
},
{
closed = 1;
nodes = (
"782 689 LINE",
"524 689 LINE",
"604 609 LINE",
"782 609 LINE"
);
},
{
closed = 1;
nodes = (
"500 346.667 OFFCURVE",
"464 380.667 OFFCURVE",
"464 418 CURVE SMOOTH",
"464 458.342 OFFCURVE",
"512.459 505 OFFCURVE",
"554 505 CURVE SMOOTH",
"584.667 505 OFFCURVE",
"610 477.667 OFFCURVE",
"610 447 CURVE SMOOTH",
"610 404.333 OFFCURVE",
"589.333 361.333 OFFCURVE",
"552 332 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */\012118 112 77 3 10 9 78 1 11 18 87 70 2 12 11 141 124 106 93 92 16 6 13 12 18 8 2 1 13 7 1 5 8 60 48 47 3 7 6 32 1 4 7 25 1 2 4 26 1 3 2 10 74 117 1 14 61 1 1 2 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01212 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 82 values pushed */\0120 18 10 11 14 18 104 0 11 12 10 11 12 110 0 12 13 10 12 13 110 0 9 0 10 18 9 10 99 0 13 0 8 5 13 8 99 0 1 0 0 6 1 0 99 0 5 0 6 7 5 6 99 0 7 0 4 2 7 4 99 0 2 0 3 2 3 95 16 1 14 14 15 89 19 17 2 15 15 24 14 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 83 values pushed */\0120 18 10 11 10 18 11 112 0 11 12 10 11 12 110 0 12 13 10 12 13 110 0 9 0 10 18 9 10 99 0 13 0 8 5 13 8 99 0 1 0 0 6 1 0 99 0 5 0 6 7 5 6 99 0 7 0 4 2 7 4 99 0 2 0 3 2 3 95 16 1 14 14 15 89 19 17 2 15 15 24 14 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 83 values pushed */\0120 18 10 11 10 18 11 112 0 11 12 10 11 12 110 0 12 13 10 12 13 110 0 9 0 10 18 9 10 99 0 13 0 8 5 13 8 99 0 1 0 0 6 1 0 99 0 5 0 6 7 5 6 99 0 7 0 4 2 7 4 99 0 2 0 3 2 3 95 16 1 14 14 15 89 19 17 2 15 15 25 14 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 36 values pushed */\012125 125 135 133 125 128 125 128 127 126 116 115 114 113 104 102 97 95 90 88 81 79 76 75 36 37 36 38 38 36 42 35 36 20 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 768;
}
);
note = uni091B094D0935;
},
{
glyphname = "ja_rakar-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"907 17 LINE",
"889 -3 OFFCURVE",
"872 -13 OFFCURVE",
"856 -13 CURVE SMOOTH",
"803.32 -13 OFFCURVE",
"673 59.451 OFFCURVE",
"673 111 CURVE SMOOTH",
"673 609 LINE",
"593 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"591 609 LINE",
"591 495 LINE",
"343 495 LINE SMOOTH",
"304.333 495 OFFCURVE",
"270 470.333 OFFCURVE",
"270 441 CURVE SMOOTH",
"270 403.667 OFFCURVE",
"297.333 382 OFFCURVE",
"352 350 CURVE SMOOTH",
"398.667 320.667 OFFCURVE",
"419 306.333 OFFCURVE",
"419 281 CURVE SMOOTH",
"419 230.333 OFFCURVE",
"369.667 192 OFFCURVE",
"311 192 CURVE SMOOTH",
"276.333 192 OFFCURVE",
"243 204 OFFCURVE",
"211 228 CURVE SMOOTH",
"147 276 OFFCURVE",
"95 359.667 OFFCURVE",
"67 449 CURVE",
"27 435 LINE",
"49.667 373 OFFCURVE",
"79 318.167 OFFCURVE",
"115 270.5 CURVE SMOOTH",
"187 175.167 OFFCURVE",
"277 120 OFFCURVE",
"365 120 CURVE SMOOTH",
"437.279 120 OFFCURVE",
"500 169.226 OFFCURVE",
"500 233 CURVE SMOOTH",
"500 285 OFFCURVE",
"459.667 317.667 OFFCURVE",
"397 359 CURVE SMOOTH",
"382.333 369 OFFCURVE",
"371.5 376.833 OFFCURVE",
"364.5 382.5 CURVE SMOOTH",
"357.5 388.167 OFFCURVE",
"354 393.333 OFFCURVE",
"354 398 CURVE SMOOTH",
"354 411.333 OFFCURVE",
"369 424 OFFCURVE",
"385 424 CURVE SMOOTH",
"591 424 LINE",
"591 185 LINE",
"312 -49 LINE SMOOTH",
"299.333 -59 OFFCURVE",
"287.667 -64 OFFCURVE",
"277 -64 CURVE SMOOTH",
"264.333 -64 OFFCURVE",
"252.333 -58.333 OFFCURVE",
"241 -47 CURVE",
"226 -69 LINE",
"263.333 -103.667 OFFCURVE",
"299 -125 OFFCURVE",
"323 -125 CURVE SMOOTH",
"337 -125 OFFCURVE",
"358.667 -112.667 OFFCURVE",
"388 -88 CURVE SMOOTH",
"613 112 LINE",
"631.667 86 OFFCURVE",
"659.167 59.5 OFFCURVE",
"695.5 32.5 CURVE SMOOTH",
"768.167 -21.5 OFFCURVE",
"855.667 -61 OFFCURVE",
"917 -61 CURVE SMOOTH",
"939 -61 OFFCURVE",
"960.333 -50.667 OFFCURVE",
"981 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"719 609 LINE",
"794 609 LINE",
"794 689 LINE",
"639 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */\01237 1 3 6 23 1 5 3 18 1 4 5 67 6 2 9 4 13 1 0 9 12 1 1 2 6 74 60 1 7 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 50 values pushed */\0120 2 0 1 0 2 1 112 0 1 1 113 0 6 0 3 5 6 3 99 0 5 0 4 9 5 4 99 0 9 0 0 2 9 0 99 12 11 2 7 7 8 89 10 1 8 8 24 7 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 50 values pushed */\0120 2 0 1 0 2 1 112 0 1 1 113 0 6 0 3 5 6 3 99 0 5 0 4 9 5 4 99 0 9 0 0 2 9 0 99 12 11 2 7 7 8 89 10 1 8 8 25 7 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 22 values pushed */\01268 68 68 71 68 71 70 69 66 64 17 17 42 39 43 35 36 37 33 13 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 780;
}
);
note = uni091C094D0930;
},
{
glyphname = "j_ja-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"751 609 LINE",
"-14 609 LINE",
"-14 689 LINE",
"753 689 LINE",
"833 609 LINE",
"833 111 LINE SMOOTH",
"833 61.319 OFFCURVE",
"960.47 -13 OFFCURVE",
"1014 -13 CURVE SMOOTH",
"1033.333 -13 OFFCURVE",
"1051.333 -3 OFFCURVE",
"1068 17 CURVE",
"1141 -30 LINE",
"1121.667 -50.667 OFFCURVE",
"1100.667 -61 OFFCURVE",
"1078 -61 CURVE SMOOTH",
"1040.667 -61 OFFCURVE",
"996 -47.667 OFFCURVE",
"944 -21 CURVE SMOOTH",
"840 32.333 OFFCURVE",
"751 116 OFFCURVE",
"751 168 CURVE SMOOTH",
"751 447 LINE",
"534 447 LINE",
"599.333 404.333 OFFCURVE",
"638 339 OFFCURVE",
"638 275 CURVE SMOOTH",
"638 216.333 OFFCURVE",
"594.333 168 OFFCURVE",
"541 168 CURVE SMOOTH",
"491.667 168 OFFCURVE",
"447.333 186.333 OFFCURVE",
"414 221 CURVE",
"392.667 181 OFFCURVE",
"346.333 155 OFFCURVE",
"297 155 CURVE SMOOTH",
"201 155 OFFCURVE",
"93.667 254 OFFCURVE",
"23 410 CURVE",
"52 425 LINE",
"94.667 306.333 OFFCURVE",
"177.667 228 OFFCURVE",
"259 228 CURVE SMOOTH",
"313.667 228 OFFCURVE",
"358 267.333 OFFCURVE",
"358 314 CURVE SMOOTH",
"358 368.667 OFFCURVE",
"321.667 399 OFFCURVE",
"275 399 CURVE SMOOTH",
"261.667 399 OFFCURVE",
"249 396.667 OFFCURVE",
"237 392 CURVE",
"208 439 LINE",
"286.667 488.333 OFFCURVE",
"384.667 516 OFFCURVE",
"482 516 CURVE SMOOTH",
"751 516 LINE"
);
},
{
closed = 1;
nodes = (
"949 609 LINE",
"880 609 LINE",
"799 689 LINE",
"949 689 LINE"
);
},
{
closed = 1;
nodes = (
"530 232 OFFCURVE",
"568 273 OFFCURVE",
"568 325 CURVE SMOOTH",
"568 388.746 OFFCURVE",
"511.731 443 OFFCURVE",
"443 443 CURVE SMOOTH",
"401 443 OFFCURVE",
"361.333 433.333 OFFCURVE",
"324 414 CURVE",
"381.333 388.667 OFFCURVE",
"420 333 OFFCURVE",
"420 273 CURVE SMOOTH",
"420 265 OFFCURVE",
"419.667 259 OFFCURVE",
"419 255 CURVE",
"439 239.667 OFFCURVE",
"460 232 OFFCURVE",
"482 232 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */\01263 18 17 5 4 1 5 58 6 2 2 1 24 1 4 2 42 1 7 3 41 1 6 7 5 74 49 1 9 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 55 values pushed */\0120 1 5 2 5 1 2 112 0 0 12 1 5 1 0 5 99 0 4 3 2 4 87 16 13 2 2 0 3 7 2 3 99 0 7 0 6 7 6 95 15 11 14 3 9 9 8 89 10 1 8 8 24 9 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 55 values pushed */\0120 1 5 2 5 1 2 112 0 0 12 1 5 1 0 5 99 0 4 3 2 4 87 16 13 2 2 0 3 7 2 3 99 0 7 0 6 7 6 95 15 11 14 3 9 9 8 89 10 1 8 8 25 9 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 34 values pushed */\01257 57 53 53 0 0 57 72 57 71 66 64 53 56 53 56 55 54 0 52 0 52 21 35 36 21 36 37 36 36 33 17 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 936;
}
);
note = uni091C094D091C;
},
{
glyphname = "j_j-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"677 609 LINE",
"677 689 LINE",
"-14 689 LINE",
"-14 609 LINE"
);
},
{
closed = 1;
nodes = (
"779 447 LINE",
"779 516 LINE",
"482 516 LINE SMOOTH",
"384.667 516 OFFCURVE",
"286.667 488.333 OFFCURVE",
"208 439 CURVE",
"237 392 LINE",
"249 396.667 OFFCURVE",
"261.667 399 OFFCURVE",
"275 399 CURVE SMOOTH",
"321.667 399 OFFCURVE",
"358 368.667 OFFCURVE",
"358 314 CURVE SMOOTH",
"358 267.333 OFFCURVE",
"313.667 228 OFFCURVE",
"259 228 CURVE SMOOTH",
"177.667 228 OFFCURVE",
"94.667 306.333 OFFCURVE",
"52 425 CURVE",
"23 410 LINE",
"93.667 254 OFFCURVE",
"201 155 OFFCURVE",
"297 155 CURVE SMOOTH",
"346.333 155 OFFCURVE",
"392.667 181 OFFCURVE",
"414 221 CURVE",
"447.333 186.333 OFFCURVE",
"491.667 168 OFFCURVE",
"541 168 CURVE SMOOTH",
"594.333 168 OFFCURVE",
"638 216.333 OFFCURVE",
"638 275 CURVE SMOOTH",
"638 339 OFFCURVE",
"599.333 404.333 OFFCURVE",
"534 447 CURVE"
);
},
{
closed = 1;
nodes = (
"511.731 443 OFFCURVE",
"568 388.746 OFFCURVE",
"568 325 CURVE SMOOTH",
"568 273 OFFCURVE",
"530 232 OFFCURVE",
"482 232 CURVE SMOOTH",
"460 232 OFFCURVE",
"439 239.667 OFFCURVE",
"419 255 CURVE",
"419.667 259 OFFCURVE",
"420 265 OFFCURVE",
"420 273 CURVE SMOOTH",
"420 333 OFFCURVE",
"381.333 388.667 OFFCURVE",
"324 414 CURVE",
"361.333 433.333 OFFCURVE",
"401 443 OFFCURVE",
"443 443 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */\01239 33 21 20 4 6 2 32 1 5 6 14 1 3 5 3 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 43 values pushed */\0120 6 2 5 2 6 5 112 0 7 10 9 2 2 6 7 2 99 0 3 4 5 3 87 8 1 5 0 4 5 4 95 0 0 0 1 89 0 1 1 24 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 43 values pushed */\0120 6 2 5 2 6 5 112 0 7 10 9 2 2 6 7 2 99 0 3 4 5 3 87 8 1 5 0 4 5 4 95 0 0 0 1 89 0 1 1 25 0 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 18 values pushed */\01238 38 38 53 38 52 40 36 36 37 36 37 17 17 16 11 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 663;
}
);
note = uni091C094D091C094D;
},
{
glyphname = "j_nya-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"813 17 LINE",
"794.333 -3 OFFCURVE",
"777 -13 OFFCURVE",
"761 -13 CURVE SMOOTH",
"707.825 -13 OFFCURVE",
"579 59.832 OFFCURVE",
"579 111 CURVE SMOOTH",
"579 609 LINE",
"498 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"496 609 LINE",
"496 495 LINE",
"225 495 LINE SMOOTH",
"187.667 495 OFFCURVE",
"152 470.333 OFFCURVE",
"152 441 CURVE SMOOTH",
"152 403.667 OFFCURVE",
"177.333 383.667 OFFCURVE",
"228 353 CURVE SMOOTH",
"277.333 321 OFFCURVE",
"301 304 OFFCURVE",
"301 268 CURVE SMOOTH",
"301 221.333 OFFCURVE",
"257 184.333 OFFCURVE",
"197 179 CURVE",
"166.333 236.333 OFFCURVE",
"117.667 266 OFFCURVE",
"83 266 CURVE SMOOTH",
"53.667 266 OFFCURVE",
"28 249.333 OFFCURVE",
"28 224 CURVE SMOOTH",
"28 176.965 OFFCURVE",
"118.829 122.492 OFFCURVE",
"183 121 CURVE",
"269.667 13 OFFCURVE",
"371.667 -50.333 OFFCURVE",
"461 -57 CURVE SMOOTH",
"485 -58.333 OFFCURVE",
"514.333 -48.667 OFFCURVE",
"533 -30 CURVE",
"471 32 LINE",
"455 14 OFFCURVE",
"434 5 OFFCURVE",
"408 5 CURVE SMOOTH",
"350.667 5 OFFCURVE",
"281.667 48 OFFCURVE",
"223 120 CURVE",
"290.419 121.498 OFFCURVE",
"382 181.71 OFFCURVE",
"382 233 CURVE SMOOTH",
"382 285 OFFCURVE",
"342.667 319 OFFCURVE",
"280 359 CURVE SMOOTH",
"265.333 369 OFFCURVE",
"254.5 376.833 OFFCURVE",
"247.5 382.5 CURVE SMOOTH",
"240.5 388.167 OFFCURVE",
"237 393.333 OFFCURVE",
"237 398 CURVE SMOOTH",
"237 411.333 OFFCURVE",
"251 424 OFFCURVE",
"267 424 CURVE SMOOTH",
"496 424 LINE",
"496 166 LINE SMOOTH",
"496 140 OFFCURVE",
"514.833 108.833 OFFCURVE",
"552.5 72.5 CURVE SMOOTH",
"627.833 -0.167 OFFCURVE",
"745.667 -61 OFFCURVE",
"823 -61 CURVE SMOOTH",
"845.667 -61 OFFCURVE",
"866.667 -50.667 OFFCURVE",
"886 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"624 609 LINE",
"698 609 LINE",
"698 689 LINE",
"544 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */\01211 1 6 1 43 1 2 6 68 26 2 3 2 27 1 0 10 4 74 61 1 8 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 53 values pushed */\0120 6 1 2 1 6 2 112 5 1 2 3 1 2 3 110 0 3 10 1 3 10 110 0 7 0 1 6 7 1 99 0 10 4 1 0 10 0 95 13 12 2 8 8 9 89 11 1 9 9 24 8 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 53 values pushed */\0120 6 1 2 1 6 2 112 5 1 2 3 1 2 3 110 0 3 10 1 3 10 110 0 7 0 1 6 7 1 99 0 10 4 1 0 10 0 95 13 12 2 8 8 9 89 11 1 9 9 25 8 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 24 values pushed */\01269 69 69 72 69 72 71 70 67 65 60 59 17 45 37 19 20 34 27 36 33 14 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 685;
}
);
note = uni091C094D091E;
},
{
glyphname = "j_nya_rakar-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"909 17 LINE",
"895.667 -1.667 OFFCURVE",
"875.333 -13 OFFCURVE",
"858 -13 CURVE SMOOTH",
"805.32 -13 OFFCURVE",
"675 59.451 OFFCURVE",
"675 111 CURVE SMOOTH",
"675 609 LINE",
"594 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"592 609 LINE",
"592 461 LINE",
"488 499.667 OFFCURVE",
"390 517 OFFCURVE",
"250 517 CURVE SMOOTH",
"157.38 517 OFFCURVE",
"49 452.751 OFFCURVE",
"49 397 CURVE SMOOTH",
"49 341.155 OFFCURVE",
"142.751 257 OFFCURVE",
"202 257 CURVE SMOOTH",
"235.333 257 OFFCURVE",
"259 269.667 OFFCURVE",
"291 291 CURVE",
"307 300.333 OFFCURVE",
"323.333 310 OFFCURVE",
"334 310 CURVE SMOOTH",
"358 310 OFFCURVE",
"377 290 OFFCURVE",
"377 266 CURVE SMOOTH",
"377 214.799 OFFCURVE",
"264.333 147.861 OFFCURVE",
"206 143 CURVE",
"178 179 OFFCURVE",
"137.667 202 OFFCURVE",
"103 202 CURVE SMOOTH",
"76.333 202 OFFCURVE",
"56 185.667 OFFCURVE",
"56 163 CURVE SMOOTH",
"56 106.787 OFFCURVE",
"125.097 67 OFFCURVE",
"200 67 CURVE",
"278.667 -46.333 OFFCURVE",
"381 -117 OFFCURVE",
"465 -117 CURVE SMOOTH",
"486.333 -117 OFFCURVE",
"512 -105 OFFCURVE",
"532 -85 CURVE",
"469 -33 LINE",
"456.333 -49 OFFCURVE",
"438.667 -57 OFFCURVE",
"416 -57 CURVE SMOOTH",
"360 -57 OFFCURVE",
"293.333 -10.667 OFFCURVE",
"236 68 CURVE",
"320.339 82.796 OFFCURVE",
"436 160.66 OFFCURVE",
"436 221 CURVE SMOOTH",
"436 292.429 OFFCURVE",
"359.71 370 OFFCURVE",
"290 370 CURVE SMOOTH",
"267.333 370 OFFCURVE",
"247.333 359.333 OFFCURVE",
"222 342 CURVE",
"192.667 324.667 OFFCURVE",
"178.667 317 OFFCURVE",
"160 317 CURVE SMOOTH",
"136 317 OFFCURVE",
"116 333.667 OFFCURVE",
"116 355 CURVE SMOOTH",
"116 381.667 OFFCURVE",
"131.5 404.167 OFFCURVE",
"162.5 422.5 CURVE SMOOTH",
"193.5 440.833 OFFCURVE",
"240.333 450 OFFCURVE",
"303 450 CURVE SMOOTH",
"459 450 OFFCURVE",
"537.333 439 OFFCURVE",
"592 415 CURVE",
"592 197 LINE",
"446 74 LINE SMOOTH",
"435.333 64.667 OFFCURVE",
"423.667 60 OFFCURVE",
"411 60 CURVE SMOOTH",
"399.667 60 OFFCURVE",
"387.667 65.667 OFFCURVE",
"375 77 CURVE",
"360 54 LINE",
"396 19.333 OFFCURVE",
"433.333 -2 OFFCURVE",
"456 -2 CURVE SMOOTH",
"472 -2 OFFCURVE",
"490 8 OFFCURVE",
"522 36 CURVE SMOOTH",
"611 115 LINE",
"628.333 87.667 OFFCURVE",
"655.833 60.333 OFFCURVE",
"693.5 33 CURVE SMOOTH",
"768.833 -21.667 OFFCURVE",
"860.333 -61 OFFCURVE",
"919 -61 CURVE SMOOTH",
"942.333 -61 OFFCURVE",
"963.333 -50.667 OFFCURVE",
"982 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"721 609 LINE",
"791 609 LINE",
"791 689 LINE",
"640 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */\01289 1 3 12 20 1 5 3 65 43 19 14 6 5 8 9 102 13 2 1 2 48 1 6 15 49 1 7 0 6 74 94 1 13 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0129 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 94 values pushed */\0120 5 3 4 3 5 4 112 0 10 4 11 3 10 104 0 11 9 4 11 9 110 0 9 8 4 9 8 110 0 2 8 1 6 2 104 0 15 1 6 1 15 6 112 0 0 6 7 6 0 7 112 0 12 0 3 5 12 3 99 0 4 0 8 2 4 8 99 0 6 0 7 6 7 96 18 17 2 13 13 14 89 16 1 14 14 24 75 0 1 1 26 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01211 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 95 values pushed */\0120 5 3 4 3 5 4 112 0 10 4 11 4 10 11 112 0 11 9 4 11 9 110 0 9 8 4 9 8 110 0 2 8 1 6 2 104 0 15 1 6 1 15 6 112 0 0 6 7 6 0 7 112 0 12 0 3 5 12 3 99 0 4 0 8 2 4 8 99 0 6 0 7 6 7 96 18 17 2 13 13 14 89 16 1 14 14 24 75 0 1 1 26 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 96 values pushed */\0120 5 3 4 3 5 4 112 0 10 4 11 4 10 11 112 0 11 9 4 11 9 110 0 9 8 4 9 8 110 0 2 8 1 8 2 1 112 0 15 1 6 1 15 6 112 0 0 6 7 6 0 7 112 0 12 0 3 5 12 3 99 0 4 0 8 2 4 8 99 0 6 0 7 6 7 96 18 17 2 13 13 14 89 16 1 14 14 24 75 0 1 1 26 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 96 values pushed */\0120 5 3 4 3 5 4 112 0 10 4 11 4 10 11 112 0 11 9 4 11 9 110 0 9 8 4 9 8 110 0 2 8 1 8 2 1 112 0 15 1 6 1 15 6 112 0 0 6 7 6 0 7 112 0 12 0 3 5 12 3 99 0 4 0 8 2 4 8 99 0 6 0 7 6 7 96 18 17 2 13 13 14 89 16 1 14 14 25 75 0 1 1 26 1 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 34 values pushed */\012103 103 103 106 103 106 105 104 100 98 93 92 91 90 87 85 79 77 72 71 63 61 18 36 41 36 36 37 36 38 33 19 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni091C094D091E094D0930;
},
{
glyphname = "j_ny-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"512 609 LINE",
"512 689 LINE",
"-14 689 LINE",
"-14 609 LINE"
);
},
{
closed = 1;
nodes = (
"614 443 LINE",
"614 514 LINE",
"165 514 LINE SMOOTH",
"108.607 514 OFFCURVE",
"43 461.208 OFFCURVE",
"43 408 CURVE SMOOTH",
"43 348.196 OFFCURVE",
"158.963 256 OFFCURVE",
"222 256 CURVE SMOOTH",
"252.667 256 OFFCURVE",
"278.667 270.333 OFFCURVE",
"312 293 CURVE SMOOTH",
"318.282 297.188 OFFCURVE",
"344.062 314 OFFCURVE",
"356 314 CURVE SMOOTH",
"380 314 OFFCURVE",
"402 290.333 OFFCURVE",
"402 261 CURVE SMOOTH",
"402 200.994 OFFCURVE",
"273.115 124 OFFCURVE",
"209 124 CURVE",
"169.667 165.333 OFFCURVE",
"134.667 186 OFFCURVE",
"104 186 CURVE SMOOTH",
"77.333 186 OFFCURVE",
"52 166 OFFCURVE",
"52 142 CURVE SMOOTH",
"52 95.04 OFFCURVE",
"146.376 45 OFFCURVE",
"210 45 CURVE",
"303.333 -60.333 OFFCURVE",
"405.667 -120 OFFCURVE",
"495 -120 CURVE SMOOTH",
"527 -120 OFFCURVE",
"551 -110.667 OFFCURVE",
"567 -92 CURVE",
"503 -33 LINE",
"485.667 -51.667 OFFCURVE",
"461 -62 OFFCURVE",
"437 -62 CURVE SMOOTH",
"378.333 -62 OFFCURVE",
"306.333 -21 OFFCURVE",
"245 51 CURVE",
"285 57.667 OFFCURVE",
"321.167 69.5 OFFCURVE",
"353.5 86.5 CURVE SMOOTH",
"418.167 120.5 OFFCURVE",
"457 169.667 OFFCURVE",
"457 219 CURVE SMOOTH",
"457 287.725 OFFCURVE",
"387.774 369 OFFCURVE",
"319 369 CURVE SMOOTH",
"300.333 369 OFFCURVE",
"283.333 359.667 OFFCURVE",
"254 341 CURVE SMOOTH",
"220.667 319.667 OFFCURVE",
"201.667 310 OFFCURVE",
"179 310 CURVE SMOOTH",
"141.667 310 OFFCURVE",
"109 336.667 OFFCURVE",
"109 366 CURVE SMOOTH",
"109 404.795 OFFCURVE",
"162.135 443 OFFCURVE",
"210 443 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */\01226 1 7 9 32 1 5 7 33 1 6 5 3 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0129 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 70 values pushed */\0120 4 2 10 2 4 10 112 0 10 3 2 10 102 0 8 11 9 11 8 9 112 0 9 7 11 9 7 110 0 7 5 11 7 5 110 0 12 0 2 4 12 2 99 0 3 0 11 8 3 11 99 0 5 0 6 5 6 95 0 0 0 1 89 0 1 1 24 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 71 values pushed */\0120 4 2 10 2 4 10 112 0 10 3 2 10 3 110 0 8 11 9 11 8 9 112 0 9 7 11 9 7 110 0 7 5 11 7 5 110 0 12 0 2 4 12 2 99 0 3 0 11 8 3 11 99 0 5 0 6 5 6 95 0 0 0 1 89 0 1 1 24 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 71 values pushed */\0120 4 2 10 2 4 10 112 0 10 3 2 10 3 110 0 8 11 9 11 8 9 112 0 9 7 11 9 7 110 0 7 5 11 7 5 110 0 12 0 2 4 12 2 99 0 3 0 11 8 3 11 99 0 5 0 6 5 6 95 0 0 0 1 89 0 1 1 25 0 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 20 values pushed */\01270 68 62 60 54 53 48 47 37 18 36 41 36 37 33 17 16 13 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 498;
}
);
note = uni091C094D091E094D;
},
{
glyphname = "jha_rakar-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"916 17 LINE",
"902.667 -1.667 OFFCURVE",
"882.667 -13 OFFCURVE",
"864 -13 CURVE SMOOTH",
"813.977 -13 OFFCURVE",
"683 54.778 OFFCURVE",
"683 111 CURVE SMOOTH",
"683 609 LINE",
"602 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"300 609 LINE",
"321.333 586.333 OFFCURVE",
"332 565.333 OFFCURVE",
"332 546 CURVE SMOOTH",
"332 527.333 OFFCURVE",
"314.667 514 OFFCURVE",
"292 514 CURVE SMOOTH",
"164 514 LINE SMOOTH",
"107.206 514 OFFCURVE",
"45 461.411 OFFCURVE",
"45 408 CURVE SMOOTH",
"45 348.359 OFFCURVE",
"158.892 256 OFFCURVE",
"221 256 CURVE SMOOTH",
"250.333 256 OFFCURVE",
"271 268 OFFCURVE",
"307 292 CURVE",
"328.333 308 OFFCURVE",
"339.333 314 OFFCURVE",
"350 314 CURVE SMOOTH",
"375.333 314 OFFCURVE",
"396 291.667 OFFCURVE",
"396 261 CURVE SMOOTH",
"396 201.416 OFFCURVE",
"271.029 124 OFFCURVE",
"208 124 CURVE",
"173.333 162.667 OFFCURVE",
"135.333 186 OFFCURVE",
"106 186 CURVE SMOOTH",
"79.333 186 OFFCURVE",
"55 166.333 OFFCURVE",
"55 141 CURVE SMOOTH",
"55 95.545 OFFCURVE",
"147.092 47 OFFCURVE",
"209 47 CURVE",
"298.333 -58.333 OFFCURVE",
"396.667 -118 OFFCURVE",
"486 -118 CURVE SMOOTH",
"512 -118 OFFCURVE",
"534.333 -110 OFFCURVE",
"553 -94 CURVE",
"489 -35 LINE",
"470.333 -55.667 OFFCURVE",
"451 -66 OFFCURVE",
"431 -66 CURVE SMOOTH",
"376.333 -66 OFFCURVE",
"304.333 -20.667 OFFCURVE",
"243 54 CURVE",
"280.333 60 OFFCURVE",
"314.333 71.167 OFFCURVE",
"345 87.5 CURVE SMOOTH",
"406.333 120.167 OFFCURVE",
"445 169.333 OFFCURVE",
"445 220 CURVE SMOOTH",
"445 238.667 OFFCURVE",
"439 259 OFFCURVE",
"427 281 CURVE",
"464.333 257 OFFCURVE",
"499.333 245 OFFCURVE",
"532 245 CURVE SMOOTH",
"556 245 OFFCURVE",
"578.333 253.667 OFFCURVE",
"599 271 CURVE",
"599 201 LINE",
"414 47 LINE",
"403.333 35.667 OFFCURVE",
"391.667 30 OFFCURVE",
"379 30 CURVE SMOOTH",
"367 30 OFFCURVE",
"355.333 35.667 OFFCURVE",
"344 47 CURVE",
"328 25 LINE",
"365.333 -9.667 OFFCURVE",
"402 -30 OFFCURVE",
"426 -30 CURVE SMOOTH",
"441.333 -30 OFFCURVE",
"463 -17.667 OFFCURVE",
"491 7 CURVE SMOOTH",
"615 117 LINE",
"632.333 89 OFFCURVE",
"660.5 61.167 OFFCURVE",
"699.5 33.5 CURVE SMOOTH",
"777.5 -21.833 OFFCURVE",
"872.667 -61 OFFCURVE",
"926 -61 CURVE SMOOTH",
"950 -61 OFFCURVE",
"971 -50.667 OFFCURVE",
"989 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"728 609 LINE",
"799 609 LINE",
"799 689 LINE",
"648 689 LINE"
);
},
{
closed = 1;
nodes = (
"444.667 302 OFFCURVE",
"423 314.333 OFFCURVE",
"391 337 CURVE",
"357.667 358.333 OFFCURVE",
"340.333 369 OFFCURVE",
"315 369 CURVE SMOOTH",
"300.333 369 OFFCURVE",
"283.333 359.333 OFFCURVE",
"254 342 CURVE SMOOTH",
"220.667 322 OFFCURVE",
"199 310 OFFCURVE",
"179 310 CURVE SMOOTH",
"141.667 310 OFFCURVE",
"111 334 OFFCURVE",
"111 366 CURVE SMOOTH",
"111 407.333 OFFCURVE",
"160 449 OFFCURVE",
"208 449 CURVE SMOOTH",
"332 450 LINE SMOOTH",
"366.667 451.333 OFFCURVE",
"391 472.667 OFFCURVE",
"391 498 CURVE SMOOTH",
"391 524 OFFCURVE",
"373.667 561 OFFCURVE",
"339 609 CURVE",
"599 609 LINE",
"599 352 LINE",
"571 321.333 OFFCURVE",
"519.333 302 OFFCURVE",
"474 302 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 41 values pushed */\01296 1 9 20 23 19 2 10 19 18 1 7 3 29 6 2 6 8 89 12 2 14 2 34 1 0 1 35 1 5 4 7 74 81 1 12 13 1 6 2 73 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 41 values pushed */\01296 1 9 20 23 19 2 10 21 18 1 7 3 29 6 2 6 8 89 12 2 14 2 34 1 0 1 35 1 5 4 7 74 81 1 12 13 1 6 2 73 \012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 111 values pushed */\0120 20 18 9 18 20 9 112 0 9 19 18 9 19 110 0 7 3 8 3 7 8 112 0 8 6 3 8 6 110 0 6 2 3 6 2 110 0 2 14 3 2 14 110 0 14 1 3 14 1 110 0 1 0 3 1 0 110 0 0 4 3 0 4 110 0 11 0 18 20 11 18 99 0 10 3 19 10 87 23 21 2 19 0 3 7 19 3 99 0 4 0 5 4 5 95 17 22 16 3 12 12 13 89 15 1 13 13 24 12 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 111 values pushed */\0120 20 18 9 18 20 9 112 0 9 19 18 9 19 110 0 7 3 8 3 7 8 112 0 8 6 3 8 6 110 0 6 2 3 6 2 110 0 2 14 3 2 14 110 0 14 1 3 14 1 110 0 1 0 3 1 0 110 0 0 4 3 0 4 110 0 11 0 18 20 11 18 99 0 10 3 19 10 87 23 21 2 19 0 3 7 19 3 99 0 4 0 5 4 5 95 17 22 16 3 12 12 13 89 15 1 13 13 25 12 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 112 values pushed */\0120 20 18 9 18 20 9 112 0 9 19 18 9 19 110 0 7 3 8 3 7 8 112 0 8 6 3 8 6 110 0 6 2 3 6 2 110 0 2 14 3 2 14 110 0 14 1 3 14 1 110 0 1 0 3 1 0 110 0 0 4 3 0 4 110 0 11 0 18 20 11 18 99 0 19 0 10 3 19 10 99 23 1 21 0 3 7 21 3 99 0 4 0 5 4 5 95 17 22 16 3 12 12 13 89 15 1 13 13 25 12 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 46 values pushed */\01294 94 90 90 94 122 94 121 117 115 111 109 105 102 98 97 90 93 90 93 92 91 87 85 80 79 78 77 73 70 64 62 57 56 18 37 18 35 41 36 36 37 33 24 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 784;
}
);
note = uni091D094D0930;
},
{
glyphname = "nya_rakar-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"885 17 LINE",
"870.333 -3 OFFCURVE",
"853 -13 OFFCURVE",
"833 -13 CURVE SMOOTH",
"780.32 -13 OFFCURVE",
"650 59.451 OFFCURVE",
"650 111 CURVE SMOOTH",
"650 609 LINE",
"570 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"568 609 LINE",
"568 398 LINE",
"541.333 356.667 OFFCURVE",
"499 330 OFFCURVE",
"467 330 CURVE SMOOTH",
"439 330 OFFCURVE",
"416.667 350.667 OFFCURVE",
"378 396 CURVE SMOOTH",
"356.667 419.333 OFFCURVE",
"338.167 438.167 OFFCURVE",
"322.5 452.5 CURVE SMOOTH",
"291.167 481.167 OFFCURVE",
"246.667 506 OFFCURVE",
"192 506 CURVE SMOOTH",
"150.667 506 OFFCURVE",
"106.333 486.667 OFFCURVE",
"59 448 CURVE",
"122 381 LINE",
"154 419.667 OFFCURVE",
"202.667 443 OFFCURVE",
"248 443 CURVE SMOOTH",
"304 443 OFFCURVE",
"349 397 OFFCURVE",
"349 341 CURVE SMOOTH",
"349 281.717 OFFCURVE",
"272.107 192 OFFCURVE",
"210 192 CURVE SMOOTH",
"150 192 OFFCURVE",
"91.333 235 OFFCURVE",
"58 307 CURVE",
"27 291 LINE",
"87 189.667 OFFCURVE",
"177.333 125 OFFCURVE",
"268 125 CURVE SMOOTH",
"294 125 OFFCURVE",
"318.167 131.5 OFFCURVE",
"340.5 144.5 CURVE SMOOTH",
"385.167 170.5 OFFCURVE",
"414 218.333 OFFCURVE",
"414 269 CURVE SMOOTH",
"414 287.667 OFFCURVE",
"408 310 OFFCURVE",
"396 336 CURVE",
"440 288 OFFCURVE",
"475 262 OFFCURVE",
"511 262 CURVE SMOOTH",
"529 262 OFFCURVE",
"548 272 OFFCURVE",
"568 292 CURVE",
"568 212 LINE",
"285 -24 LINE SMOOTH",
"273 -34 OFFCURVE",
"261.667 -39 OFFCURVE",
"251 -39 CURVE SMOOTH",
"237.667 -39 OFFCURVE",
"225.667 -33.667 OFFCURVE",
"215 -23 CURVE",
"199 -45 LINE",
"237.667 -79.667 OFFCURVE",
"272 -100 OFFCURVE",
"296 -100 CURVE SMOOTH",
"312 -100 OFFCURVE",
"330.333 -89.667 OFFCURVE",
"361 -63 CURVE SMOOTH",
"579 128 LINE",
"593.667 101.333 OFFCURVE",
"619.833 73.167 OFFCURVE",
"657.5 43.5 CURVE SMOOTH",
"732.833 -15.833 OFFCURVE",
"829.667 -61 OFFCURVE",
"895 -61 CURVE SMOOTH",
"917.667 -61 OFFCURVE",
"938.333 -50.667 OFFCURVE",
"957 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"696 609 LINE",
"767 609 LINE",
"767 689 LINE",
"616 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */\01249 1 6 7 61 48 25 3 8 6 35 34 20 3 3 8 19 1 5 3 6 1 4 5 73 1 11 4 14 1 2 11 13 1 0 2 8 74 66 1 9 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 59 values pushed */\0120 2 11 0 11 2 0 112 0 1 0 1 115 0 7 0 6 8 7 6 99 0 8 0 3 5 8 3 99 0 5 0 4 11 5 4 99 0 11 0 0 1 11 0 99 14 13 2 9 9 10 89 12 1 10 10 24 9 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 59 values pushed */\0120 2 11 0 11 2 0 112 0 1 0 1 115 0 7 0 6 8 7 6 99 0 8 0 3 5 8 3 99 0 5 0 4 11 5 4 99 0 11 0 0 1 11 0 99 14 13 2 9 9 10 89 12 1 10 10 25 9 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 26 values pushed */\01274 74 74 77 74 77 76 75 72 70 65 64 63 62 37 36 37 37 39 36 36 38 33 15 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 753;
}
);
note = uni091E094D0930;
},
{
glyphname = "ny_ca-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"50 521 LINE",
"84.667 461 OFFCURVE",
"143.333 424 OFFCURVE",
"202 424 CURVE SMOOTH",
"267.694 424 OFFCURVE",
"343 479.229 OFFCURVE",
"343 536 CURVE SMOOTH",
"343 557.333 OFFCURVE",
"326.667 576 OFFCURVE",
"308 576 CURVE SMOOTH",
"301.333 576 OFFCURVE",
"290 569 OFFCURVE",
"278 561 CURVE SMOOTH",
"255.333 546.333 OFFCURVE",
"237.333 537 OFFCURVE",
"220 537 CURVE SMOOTH",
"188 537 OFFCURVE",
"148 561 OFFCURVE",
"112 601 CURVE",
"134 622 LINE",
"144.667 608 OFFCURVE",
"159.667 601 OFFCURVE",
"179 601 CURVE SMOOTH",
"188.333 601 OFFCURVE",
"197.833 603.667 OFFCURVE",
"207.5 609 CURVE SMOOTH",
"217.167 614.333 OFFCURVE",
"222.667 617.333 OFFCURVE",
"224 618 CURVE",
"238.667 626 OFFCURVE",
"254 634 OFFCURVE",
"266 634 CURVE SMOOTH",
"319.333 634 OFFCURVE",
"375.667 584 OFFCURVE",
"397 520 CURVE",
"403.667 519.333 OFFCURVE",
"413.667 519 OFFCURVE",
"427 519 CURVE SMOOTH",
"479 519 OFFCURVE",
"524 530.333 OFFCURVE",
"562 553 CURVE",
"562 609 LINE",
"447 609 LINE",
"447 689 LINE",
"564 689 LINE",
"646 609 LINE",
"646 111 LINE SMOOTH",
"646 61.206 OFFCURVE",
"773.162 -13 OFFCURVE",
"826 -13 CURVE SMOOTH",
"844 -13 OFFCURVE",
"862 -3 OFFCURVE",
"880 17 CURVE",
"952 -30 LINE",
"933.333 -50.667 OFFCURVE",
"912.333 -61 OFFCURVE",
"889 -61 CURVE SMOOTH",
"850.333 -61 OFFCURVE",
"807.5 -50.167 OFFCURVE",
"760.5 -28.5 CURVE SMOOTH",
"666.5 14.833 OFFCURVE",
"587 86.667 OFFCURVE",
"571 148 CURVE",
"531 105.333 OFFCURVE",
"485.667 81 OFFCURVE",
"443 81 CURVE SMOOTH",
"378.236 81 OFFCURVE",
"278 127.604 OFFCURVE",
"278 173 CURVE SMOOTH",
"278 191 OFFCURVE",
"284.667 209 OFFCURVE",
"298 227 CURVE",
"223.333 192.333 OFFCURVE",
"186 177.667 OFFCURVE",
"126 159 CURVE",
"60 221 LINE",
"173.333 245 OFFCURVE",
"324.333 301.667 OFFCURVE",
"427 363 CURVE",
"496 329 LINE",
"390.667 270.333 OFFCURVE",
"350 230 OFFCURVE",
"350 154 CURVE SMOOTH",
"350 139.333 OFFCURVE",
"363.667 128 OFFCURVE",
"381 128 CURVE SMOOTH",
"447.667 128 OFFCURVE",
"518 171.667 OFFCURVE",
"562 245 CURVE",
"562 492 LINE",
"538.667 478.667 OFFCURVE",
"510.667 472 OFFCURVE",
"478 472 CURVE SMOOTH",
"440 472 OFFCURVE",
"413 479 OFFCURVE",
"397 493 CURVE",
"397 431.865 OFFCURVE",
"302.792 357 OFFCURVE",
"240 357 CURVE SMOOTH",
"166.667 357 OFFCURVE",
"86.333 409.667 OFFCURVE",
"21 499 CURVE"
);
},
{
closed = 1;
nodes = (
"761 609 LINE",
"691 609 LINE",
"611 689 LINE",
"761 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */\01271 1 7 9 56 1 11 12 91 1 8 11 92 10 6 3 1 8 21 1 0 13 37 28 25 24 20 11 6 2 0 44 1 5 3 43 1 4 5 8 74 51 1 7 72 1 10 2 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 69 values pushed */\0120 10 7 12 7 10 12 112 0 11 12 8 12 11 8 112 0 9 0 12 11 9 12 99 0 8 0 1 13 8 1 99 0 13 0 0 2 13 0 100 0 2 0 3 5 2 3 99 0 5 0 4 5 4 95 16 15 2 7 7 6 89 14 1 6 6 24 7 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 69 values pushed */\0120 10 7 12 7 10 12 112 0 11 12 8 12 11 8 112 0 9 0 12 11 9 12 99 0 8 0 1 13 8 1 99 0 13 0 0 2 13 0 100 0 2 0 3 5 2 3 99 0 5 0 4 5 4 95 16 15 2 7 7 6 89 14 1 6 6 25 7 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 36 values pushed */\01293 93 93 96 93 96 95 94 89 87 82 80 76 74 70 68 64 62 59 57 55 54 53 52 47 45 42 40 35 33 36 36 33 17 6 23 \012CALL[ ]	/* CallFunction */";
};
width = 748;
}
);
note = uni091E094D091A;
},
{
glyphname = "ny_ja-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"646 609 LINE",
"564 689 LINE",
"447 689 LINE",
"447 609 LINE",
"562 609 LINE",
"562 529 LINE",
"522 507 OFFCURVE",
"475.667 496 OFFCURVE",
"423 496 CURVE SMOOTH",
"411.667 496 OFFCURVE",
"403 496.333 OFFCURVE",
"397 497 CURVE",
"375.667 562.333 OFFCURVE",
"319.333 612 OFFCURVE",
"266 612 CURVE SMOOTH",
"256.667 612 OFFCURVE",
"242.667 606.333 OFFCURVE",
"224 595 CURVE",
"222.667 594.333 OFFCURVE",
"217 591.333 OFFCURVE",
"207 586 CURVE SMOOTH",
"197 580.667 OFFCURVE",
"187.667 578 OFFCURVE",
"179 578 CURVE SMOOTH",
"160.333 578 OFFCURVE",
"145.333 585 OFFCURVE",
"134 599 CURVE",
"112 578 LINE",
"148 538 OFFCURVE",
"188 514 OFFCURVE",
"220 514 CURVE SMOOTH",
"237.333 514 OFFCURVE",
"255.333 523.333 OFFCURVE",
"278 538 CURVE SMOOTH",
"282 540.667 OFFCURVE",
"298.667 552 OFFCURVE",
"308 552 CURVE SMOOTH",
"326.667 552 OFFCURVE",
"343 534.333 OFFCURVE",
"343 513 CURVE SMOOTH",
"343 456.229 OFFCURVE",
"267.694 401 OFFCURVE",
"202 401 CURVE SMOOTH",
"142 401 OFFCURVE",
"84.667 438 OFFCURVE",
"50 498 CURVE",
"21 476 LINE",
"86.333 386.667 OFFCURVE",
"166.667 335 OFFCURVE",
"240 335 CURVE SMOOTH",
"302.812 335 OFFCURVE",
"397 408.877 OFFCURVE",
"397 470 CURVE",
"414.333 456 OFFCURVE",
"441.333 449 OFFCURVE",
"478 449 CURVE SMOOTH",
"510.667 449 OFFCURVE",
"538.667 455.667 OFFCURVE",
"562 469 CURVE",
"562 329 LINE",
"251 237 LINE",
"288 200 LINE",
"345.333 204 OFFCURVE",
"401 184 OFFCURVE",
"401 144 CURVE SMOOTH",
"401 105.333 OFFCURVE",
"353 77 OFFCURVE",
"301 77 CURVE SMOOTH",
"235.667 77 OFFCURVE",
"169.667 116.333 OFFCURVE",
"103 195 CURVE",
"79 178 LINE",
"160.333 82 OFFCURVE",
"265 21 OFFCURVE",
"369 21 CURVE SMOOTH",
"430.333 21 OFFCURVE",
"483 57.667 OFFCURVE",
"483 111 CURVE SMOOTH",
"483 152.333 OFFCURVE",
"440.667 190 OFFCURVE",
"386 210 CURVE",
"562 263 LINE",
"562 166 LINE SMOOTH",
"562 138 OFFCURVE",
"581.5 106.167 OFFCURVE",
"620.5 70.5 CURVE SMOOTH",
"698.5 -0.833 OFFCURVE",
"818.333 -61 OFFCURVE",
"889 -61 CURVE SMOOTH",
"911.667 -61 OFFCURVE",
"932.667 -50.667 OFFCURVE",
"952 -30 CURVE",
"880 17 LINE",
"865.333 -3 OFFCURVE",
"847.667 -13 OFFCURVE",
"827 -13 CURVE SMOOTH",
"775.97 -13 OFFCURVE",
"646 57.631 OFFCURVE",
"646 111 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"761 609 LINE",
"761 689 LINE",
"611 689 LINE",
"691 609 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */\01269 1 10 13 83 1 9 8 49 1 12 9 48 41 37 3 5 12 36 35 16 15 4 4 6 26 25 2 3 4 7 1 0 2 8 1 1 0 8 74 0 1 13 68 1 10 2 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0129 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 83 values pushed */\0120 11 14 13 14 11 13 112 0 10 13 8 13 10 8 112 0 8 9 13 8 9 110 0 9 12 13 9 12 110 0 4 6 3 6 4 104 0 12 0 5 7 12 5 99 0 7 0 6 4 7 6 100 0 0 0 1 0 1 95 15 1 13 13 14 89 16 1 14 14 24 75 0 3 3 2 91 0 2 2 26 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 84 values pushed */\0120 11 14 13 14 11 13 112 0 10 13 8 13 10 8 112 0 8 9 13 8 9 110 0 9 12 13 9 12 110 0 4 6 3 6 4 3 112 0 12 0 5 7 12 5 99 0 7 0 6 4 7 6 100 0 0 0 1 0 1 95 15 1 13 13 14 89 16 1 14 14 24 75 0 3 3 2 91 0 2 2 26 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01223 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 84 values pushed */\0120 11 14 13 14 11 13 112 0 10 13 8 13 10 8 112 0 8 9 13 8 9 110 0 9 12 13 9 12 110 0 4 6 3 6 4 3 112 0 12 0 5 7 12 5 99 0 7 0 6 4 7 6 100 0 0 0 1 0 1 95 15 1 13 13 14 89 16 1 14 14 25 75 0 3 3 2 91 0 2 2 26 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 82 values pushed */\0120 11 14 13 14 11 13 112 0 10 13 8 13 10 8 112 0 8 9 13 8 9 110 0 9 12 13 9 12 110 0 4 6 3 6 4 3 112 0 12 0 5 7 12 5 99 0 7 0 6 4 7 6 100 0 3 0 2 0 3 2 99 0 0 0 1 0 1 95 15 1 13 13 14 89 16 1 14 14 25 13 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 28 values pushed */\01291 90 89 88 87 86 85 84 82 80 77 75 72 70 66 64 21 37 36 36 20 36 42 35 36 17 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 748;
}
);
note = uni091E094D091C;
},
{
glyphname = "tta_rakar-deva";
layers = (
{
components = (
{
alignment = -1;
name = "rakar-deva";
transform = "{1, 0, 0, 1, 590, 0}";
},
{
alignment = -1;
name = "tta-deva";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 561;
}
);
note = uni091F094D0930;
},
{
glyphname = "tt_tta-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"486 330 LINE",
"432.667 286 OFFCURVE",
"359.667 259 OFFCURVE",
"281 259 CURVE SMOOTH",
"216.159 259 OFFCURVE",
"105 308.833 OFFCURVE",
"105 351 CURVE SMOOTH",
"105 405.094 OFFCURVE",
"225.916 425.862 OFFCURVE",
"301 427 CURVE SMOOTH",
"367.946 427 OFFCURVE",
"469 441.524 OFFCURVE",
"469 483 CURVE SMOOTH",
"469 511 OFFCURVE",
"445.667 553 OFFCURVE",
"399 609 CURVE",
"326 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"353 609 LINE",
"391 585.667 OFFCURVE",
"410 560.667 OFFCURVE",
"410 534 CURVE SMOOTH",
"410 519.333 OFFCURVE",
"399.5 510.167 OFFCURVE",
"378.5 506.5 CURVE SMOOTH",
"357.5 502.833 OFFCURVE",
"324.667 501 OFFCURVE",
"280 501 CURVE SMOOTH",
"232 500.333 OFFCURVE",
"192.667 498.167 OFFCURVE",
"162 494.5 CURVE SMOOTH",
"100.667 487.167 OFFCURVE",
"48 459 OFFCURVE",
"48 395 CURVE SMOOTH",
"48 359 OFFCURVE",
"62.167 326.5 OFFCURVE",
"90.5 297.5 CURVE SMOOTH",
"147.167 239.5 OFFCURVE",
"243 204 OFFCURVE",
"339 204 CURVE SMOOTH",
"353 204 OFFCURVE",
"372 205.333 OFFCURVE",
"396 208 CURVE",
"405.333 195.333 OFFCURVE",
"410 182.667 OFFCURVE",
"410 170 CURVE SMOOTH",
"410 156 OFFCURVE",
"400 147.167 OFFCURVE",
"380 143.5 CURVE SMOOTH",
"360 139.833 OFFCURVE",
"327 137.667 OFFCURVE",
"281 137 CURVE SMOOTH",
"233 136.333 OFFCURVE",
"193.5 134.167 OFFCURVE",
"162.5 130.5 CURVE SMOOTH",
"100.5 123.167 OFFCURVE",
"48 95 OFFCURVE",
"48 31 CURVE SMOOTH",
"48 -5 OFFCURVE",
"62.167 -37.5 OFFCURVE",
"90.5 -66.5 CURVE SMOOTH",
"147.167 -124.5 OFFCURVE",
"243 -159 OFFCURVE",
"339 -159 CURVE SMOOTH",
"420.333 -159 OFFCURVE",
"498 -135.333 OFFCURVE",
"550 -94 CURVE",
"486 -34 LINE",
"432.667 -78 OFFCURVE",
"358.333 -106 OFFCURVE",
"281 -106 CURVE SMOOTH",
"216.226 -106 OFFCURVE",
"105 -54.183 OFFCURVE",
"105 -12 CURVE SMOOTH",
"105 42.343 OFFCURVE",
"225.556 62.855 OFFCURVE",
"300 64 CURVE SMOOTH",
"368.99 64 OFFCURVE",
"469 78.648 OFFCURVE",
"469 121 CURVE SMOOTH",
"469 144.333 OFFCURVE",
"455 175.333 OFFCURVE",
"427 214 CURVE",
"475.667 224.667 OFFCURVE",
"516.667 243 OFFCURVE",
"550 269 CURVE"
);
},
{
closed = 1;
nodes = (
"575 689 LINE",
"371 689 LINE",
"443 609 LINE",
"575 609 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */\01272 1 9 8 36 2 2 4 9 20 19 2 1 0 3 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 45 values pushed */\0120 5 0 8 9 5 8 99 0 9 0 4 3 9 4 99 0 3 0 0 1 3 0 99 0 1 0 2 1 2 95 10 1 6 6 7 89 12 11 2 7 7 24 6 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 45 values pushed */\0120 5 0 8 9 5 8 99 0 9 0 4 3 9 4 99 0 3 0 0 1 3 0 99 0 1 0 2 1 2 95 10 1 6 6 7 89 12 11 2 7 7 25 6 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 22 values pushed */\01273 73 73 76 73 76 75 74 70 68 38 17 20 38 37 38 37 38 39 13 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 561;
}
);
note = uni091F094D091F;
},
{
glyphname = "tt_ttha-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"486 330 LINE",
"432.667 286 OFFCURVE",
"359.667 259 OFFCURVE",
"281 259 CURVE SMOOTH",
"216.159 259 OFFCURVE",
"105 308.833 OFFCURVE",
"105 351 CURVE SMOOTH",
"105 405.094 OFFCURVE",
"225.916 425.862 OFFCURVE",
"301 427 CURVE SMOOTH",
"367.946 427 OFFCURVE",
"469 441.524 OFFCURVE",
"469 483 CURVE SMOOTH",
"469 511 OFFCURVE",
"445.667 553 OFFCURVE",
"399 609 CURVE",
"326 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"353 609 LINE",
"391 585.667 OFFCURVE",
"410 560.667 OFFCURVE",
"410 534 CURVE SMOOTH",
"410 519.333 OFFCURVE",
"399.5 510.167 OFFCURVE",
"378.5 506.5 CURVE SMOOTH",
"357.5 502.833 OFFCURVE",
"324.667 501 OFFCURVE",
"280 501 CURVE SMOOTH",
"232 500.333 OFFCURVE",
"192.667 498.167 OFFCURVE",
"162 494.5 CURVE SMOOTH",
"100.667 487.167 OFFCURVE",
"48 459 OFFCURVE",
"48 395 CURVE SMOOTH",
"48 359 OFFCURVE",
"62.167 326.5 OFFCURVE",
"90.5 297.5 CURVE SMOOTH",
"147.167 239.5 OFFCURVE",
"243 204 OFFCURVE",
"339 204 CURVE SMOOTH",
"347 204 OFFCURVE",
"359.667 204.667 OFFCURVE",
"377 206 CURVE",
"385 193.333 OFFCURVE",
"389 181.333 OFFCURVE",
"389 170 CURVE SMOOTH",
"389 155.333 OFFCURVE",
"378.5 146.167 OFFCURVE",
"357.5 142.5 CURVE SMOOTH",
"336.5 138.833 OFFCURVE",
"304.333 137 OFFCURVE",
"261 137 CURVE SMOOTH",
"212.333 136.333 OFFCURVE",
"172.5 134.167 OFFCURVE",
"141.5 130.5 CURVE SMOOTH",
"79.5 123.167 OFFCURVE",
"27 94.333 OFFCURVE",
"27 29 CURVE SMOOTH",
"27 -6.333 OFFCURVE",
"41.167 -38.333 OFFCURVE",
"69.5 -67 CURVE SMOOTH",
"126.167 -124.333 OFFCURVE",
"223 -159 OFFCURVE",
"319 -159 CURVE SMOOTH",
"357 -159 OFFCURVE",
"393.5 -154.333 OFFCURVE",
"428.5 -145 CURVE SMOOTH",
"498.5 -126.333 OFFCURVE",
"549 -88 OFFCURVE",
"549 -32 CURVE SMOOTH",
"549 14.667 OFFCURVE",
"517 65 OFFCURVE",
"433 89 CURVE",
"443 97 OFFCURVE",
"448 108.333 OFFCURVE",
"448 123 CURVE SMOOTH",
"448 145.667 OFFCURVE",
"434.333 174.667 OFFCURVE",
"407 210 CURVE",
"465.667 219.333 OFFCURVE",
"513.333 239 OFFCURVE",
"550 269 CURVE"
);
},
{
closed = 1;
nodes = (
"575 689 LINE",
"371 689 LINE",
"443 609 LINE",
"575 609 LINE"
);
},
{
closed = 1;
nodes = (
"489 -45.774 OFFCURVE",
"372.473 -106 OFFCURVE",
"269 -106 CURVE SMOOTH",
"192.637 -106 OFFCURVE",
"86 -52.419 OFFCURVE",
"86 -10 CURVE SMOOTH",
"86 44.343 OFFCURVE",
"206.295 65.851 OFFCURVE",
"281 67 CURVE SMOOTH",
"318.333 67 OFFCURVE",
"345 67.667 OFFCURVE",
"361 69 CURVE",
"406.333 67 OFFCURVE",
"439 60.167 OFFCURVE",
"459 48.5 CURVE SMOOTH",
"479 36.833 OFFCURVE",
"489 22.667 OFFCURVE",
"489 6 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */\01262 1 7 6 26 2 2 2 7 6 1 10 1 3 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 46 values pushed */\0120 3 0 6 7 3 6 99 0 7 0 2 1 7 2 99 0 1 11 1 10 12 1 10 99 0 12 0 0 12 0 95 8 1 4 4 5 89 13 9 2 5 5 24 4 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 46 values pushed */\0120 3 0 6 7 3 6 99 0 7 0 2 1 7 2 99 0 1 11 1 10 12 1 10 99 0 12 0 0 12 0 95 8 1 4 4 5 89 13 9 2 5 5 25 4 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 24 values pushed */\01263 63 80 78 72 70 69 68 63 66 63 66 20 38 38 17 20 38 37 38 44 14 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 561;
}
);
note = uni091F094D0920;
},
{
glyphname = "tt_ya-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"264.333 58 OFFCURVE",
"234.333 65.833 OFFCURVE",
"205 81.5 CURVE SMOOTH",
"146.333 112.833 OFFCURVE",
"105 167 OFFCURVE",
"105 219 CURVE SMOOTH",
"105 249.667 OFFCURVE",
"114 273.5 OFFCURVE",
"132 290.5 CURVE SMOOTH",
"168 324.5 OFFCURVE",
"215.333 334.333 OFFCURVE",
"302 349 CURVE SMOOTH",
"369.67 359.685 OFFCURVE",
"469 394.944 OFFCURVE",
"469 446 CURVE SMOOTH",
"469 495.333 OFFCURVE",
"443 558.333 OFFCURVE",
"399 609 CURVE SMOOTH",
"326 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"353 609 LINE",
"389 577 OFFCURVE",
"410 537.333 OFFCURVE",
"410 500 CURVE SMOOTH",
"410 449.865 OFFCURVE",
"343.74 439.274 OFFCURVE",
"268 430 CURVE SMOOTH",
"221.333 423.333 OFFCURVE",
"183.5 416 OFFCURVE",
"154.5 408 CURVE SMOOTH",
"96.5 392 OFFCURVE",
"48 353 OFFCURVE",
"48 277 CURVE SMOOTH",
"48 229.667 OFFCURVE",
"62.833 184.667 OFFCURVE",
"92.5 142 CURVE SMOOTH",
"151.833 56.667 OFFCURVE",
"253.667 0 OFFCURVE",
"351 0 CURVE SMOOTH",
"428.333 0 OFFCURVE",
"502 33 OFFCURVE",
"550 89 CURVE",
"484 150 LINE",
"438.667 92.667 OFFCURVE",
"365.667 58 OFFCURVE",
"295 58 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1412 17 LINE",
"1396 -3 OFFCURVE",
"1378.333 -13 OFFCURVE",
"1359 -13 CURVE SMOOTH",
"1306.514 -13 OFFCURVE",
"1178 59.72 OFFCURVE",
"1178 111 CURVE SMOOTH",
"1178 609 LINE",
"1098 689 LINE",
"371 689 LINE",
"443 609 LINE",
"575 609 LINE",
"1095 609 LINE",
"1095 336 LINE",
"1051 244 OFFCURVE",
"967.667 181 OFFCURVE",
"889 181 CURVE SMOOTH",
"846.333 181 OFFCURVE",
"803.667 210.667 OFFCURVE",
"777 256 CURVE",
"847.813 256 OFFCURVE",
"955 323.3 OFFCURVE",
"955 382 CURVE SMOOTH",
"955 405.333 OFFCURVE",
"946.833 429.333 OFFCURVE",
"930.5 454 CURVE SMOOTH",
"897.833 503.333 OFFCURVE",
"843.667 540 OFFCURVE",
"797 540 CURVE SMOOTH",
"775 540 OFFCURVE",
"738.667 535.333 OFFCURVE",
"688 526 CURVE SMOOTH",
"642.667 518 OFFCURVE",
"614.333 514 OFFCURVE",
"603 514 CURVE SMOOTH",
"576.333 514 OFFCURVE",
"560.667 517.333 OFFCURVE",
"538 528 CURVE",
"538 471 LINE",
"553.333 452.333 OFFCURVE",
"575 443 OFFCURVE",
"603 443 CURVE SMOOTH",
"615 443 OFFCURVE",
"635.5 445.5 OFFCURVE",
"664.5 450.5 CURVE SMOOTH",
"693.5 455.5 OFFCURVE",
"712.333 458.667 OFFCURVE",
"721 460 CURVE SMOOTH",
"786.333 472 OFFCURVE",
"827.333 478 OFFCURVE",
"844 478 CURVE SMOOTH",
"872 478 OFFCURVE",
"898 456 OFFCURVE",
"898 428 CURVE SMOOTH",
"898 379.617 OFFCURVE",
"826.383 335 OFFCURVE",
"769 335 CURVE SMOOTH",
"749 335 OFFCURVE",
"733 339 OFFCURVE",
"721 347 CURVE",
"700 332 LINE",
"748 202.667 OFFCURVE",
"843 118 OFFCURVE",
"943 118 CURVE SMOOTH",
"1000.333 118 OFFCURVE",
"1060.667 153 OFFCURVE",
"1098 209 CURVE",
"1098 162 LINE SMOOTH",
"1098 138.667 OFFCURVE",
"1117.5 109.167 OFFCURVE",
"1156.5 73.5 CURVE SMOOTH",
"1234.5 2.167 OFFCURVE",
"1354 -61 OFFCURVE",
"1422 -61 CURVE SMOOTH",
"1445.333 -61 OFFCURVE",
"1466.667 -50.667 OFFCURVE",
"1486 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"1224 609 LINE",
"1294 609 LINE",
"1294 689 LINE",
"1144 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */\01272 1 9 10 71 1 8 7 93 55 2 6 8 54 1 11 6 48 1 12 11 2 1 5 12 3 1 3 5 106 1 0 3 8 74 99 1 1 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 66 values pushed */\0120 10 0 7 8 10 7 99 0 9 0 8 6 9 8 99 0 6 0 11 12 6 11 99 0 12 0 5 3 12 5 99 0 15 0 4 15 4 95 19 17 13 3 1 1 2 89 16 14 2 2 2 24 75 18 1 3 3 0 91 0 0 0 26 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 66 values pushed */\0120 10 0 7 8 10 7 99 0 9 0 8 6 9 8 99 0 6 0 11 12 6 11 99 0 12 0 5 3 12 5 99 0 15 0 4 15 4 95 19 17 13 3 1 1 2 89 16 14 2 2 2 25 75 18 1 3 3 0 91 0 0 0 26 0 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 44 values pushed */\012107 107 0 0 107 110 107 110 109 108 105 103 98 97 96 94 91 89 87 86 80 78 76 74 70 68 65 63 58 56 52 50 44 42 0 40 0 39 17 30 37 20 6 23 \012CALL[ ]	/* CallFunction */";
};
width = 1280;
}
);
note = uni091F094D092F;
},
{
glyphname = "tt_va-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"589 -88 LINE",
"573 -108 OFFCURVE",
"555.333 -116 OFFCURVE",
"526 -116 CURVE SMOOTH",
"486 -116 OFFCURVE",
"440 -92.667 OFFCURVE",
"440 -62 CURVE SMOOTH",
"440 217 LINE",
"484.667 229 OFFCURVE",
"521.333 246.333 OFFCURVE",
"550 269 CURVE",
"486 330 LINE",
"432.667 286 OFFCURVE",
"359.667 259 OFFCURVE",
"281 259 CURVE SMOOTH",
"216.159 259 OFFCURVE",
"105 308.833 OFFCURVE",
"105 351 CURVE SMOOTH",
"105 405.094 OFFCURVE",
"225.916 425.862 OFFCURVE",
"301 427 CURVE SMOOTH",
"367.946 427 OFFCURVE",
"469 441.524 OFFCURVE",
"469 483 CURVE SMOOTH",
"469 511 OFFCURVE",
"445.667 553 OFFCURVE",
"399 609 CURVE",
"326 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"353 609 LINE",
"391 585.667 OFFCURVE",
"410 560.667 OFFCURVE",
"410 534 CURVE SMOOTH",
"410 519.333 OFFCURVE",
"399.5 510.167 OFFCURVE",
"378.5 506.5 CURVE SMOOTH",
"357.5 502.833 OFFCURVE",
"324.667 501 OFFCURVE",
"280 501 CURVE SMOOTH",
"232 500.333 OFFCURVE",
"192.667 498.167 OFFCURVE",
"162 494.5 CURVE SMOOTH",
"100.667 487.167 OFFCURVE",
"48 459 OFFCURVE",
"48 395 CURVE SMOOTH",
"48 359 OFFCURVE",
"62.167 326.5 OFFCURVE",
"90.5 297.5 CURVE SMOOTH",
"147.167 239.5 OFFCURVE",
"243 204 OFFCURVE",
"339 204 CURVE",
"361 205 LINE",
"361 65 LINE",
"327.667 15.667 OFFCURVE",
"270.333 -8.333 OFFCURVE",
"205 -7 CURVE SMOOTH",
"182.333 -7 OFFCURVE",
"149 11 OFFCURVE",
"149 31 CURVE SMOOTH",
"149 75.041 OFFCURVE",
"216.632 115 OFFCURVE",
"269 115 CURVE SMOOTH",
"293 115 OFFCURVE",
"314.667 109 OFFCURVE",
"334 97 CURVE",
"342 110 LINE",
"306.667 144.667 OFFCURVE",
"262 162 OFFCURVE",
"208 162 CURVE SMOOTH",
"148.174 162 OFFCURVE",
"74 119.729 OFFCURVE",
"74 64 CURVE SMOOTH",
"74 7.569 OFFCURVE",
"199.501 -60 OFFCURVE",
"264 -60 CURVE SMOOTH",
"306.667 -60 OFFCURVE",
"339 -48 OFFCURVE",
"361 -24 CURVE",
"361 -40 LINE SMOOTH",
"361 -94.364 OFFCURVE",
"517.373 -159 OFFCURVE",
"575 -159 CURVE SMOOTH",
"601.667 -159 OFFCURVE",
"621.333 -151.667 OFFCURVE",
"634 -137 CURVE"
);
},
{
closed = 1;
nodes = (
"443 609 LINE",
"575 609 LINE",
"575 689 LINE",
"371 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 25 values pushed */\01269 68 2 10 9 71 1 5 10 32 20 19 3 4 3 7 1 1 4 78 1 11 1 5 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 53 values pushed */\0120 6 0 9 10 6 9 99 0 10 0 5 2 10 5 99 0 2 0 3 4 2 3 99 0 4 0 1 11 4 1 99 0 11 0 0 11 0 95 14 13 2 7 7 8 89 12 1 8 8 24 7 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 53 values pushed */\0120 6 0 9 10 6 9 99 0 10 0 5 2 10 5 99 0 2 0 3 4 2 3 99 0 4 0 1 11 4 1 99 0 11 0 0 11 0 95 14 13 2 7 7 8 89 12 1 8 8 25 7 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 26 values pushed */\01279 79 79 82 79 82 81 80 76 74 66 64 58 56 17 20 38 35 37 35 38 37 33 15 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 579;
}
);
note = uni091F094D0935;
},
{
glyphname = "tth_r-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"368 609 LINE",
"401.333 574.333 OFFCURVE",
"418 538.333 OFFCURVE",
"418 501 CURVE SMOOTH",
"418 452.961 OFFCURVE",
"355.08 442.583 OFFCURVE",
"281 432 CURVE SMOOTH",
"232.333 425.333 OFFCURVE",
"192.333 417.333 OFFCURVE",
"161 408 CURVE SMOOTH",
"98.333 389.333 OFFCURVE",
"46 343 OFFCURVE",
"46 255 CURVE SMOOTH",
"46 216.333 OFFCURVE",
"60.167 177 OFFCURVE",
"88.5 137 CURVE SMOOTH",
"145.167 57 OFFCURVE",
"244 -1 OFFCURVE",
"340 -1 CURVE SMOOTH",
"384 -1 OFFCURVE",
"425 9.333 OFFCURVE",
"463 30 CURVE SMOOTH",
"539 71.333 OFFCURVE",
"587 146.667 OFFCURVE",
"587 228 CURVE SMOOTH",
"587 286.711 OFFCURVE",
"513.126 389 OFFCURVE",
"455 389 CURVE SMOOTH",
"438.333 389 OFFCURVE",
"425 386 OFFCURVE",
"415 380 CURVE",
"412 382 LINE",
"449.333 402 OFFCURVE",
"475 433.667 OFFCURVE",
"475 467 CURVE",
"473.667 508.333 OFFCURVE",
"450.333 561 OFFCURVE",
"409 609 CURVE SMOOTH",
"338 689 LINE"
);
},
{
closed = 1;
nodes = (
"385 689 LINE",
"456 609 LINE",
"646 609 LINE",
"646 689 LINE"
);
},
{
closed = 1;
nodes = (
"253.667 61 OFFCURVE",
"226.333 67.167 OFFCURVE",
"201 79.5 CURVE SMOOTH",
"150.333 104.167 OFFCURVE",
"118 149 OFFCURVE",
"118 201 CURVE SMOOTH",
"118 241 OFFCURVE",
"126.167 271.333 OFFCURVE",
"142.5 292 CURVE SMOOTH",
"175.167 333.333 OFFCURVE",
"218.333 343.333 OFFCURVE",
"297 354 CURVE SMOOTH",
"335.667 359.333 OFFCURVE",
"364 365 OFFCURVE",
"382 371 CURVE",
"385 368 LINE",
"355.667 349.333 OFFCURVE",
"333 316.667 OFFCURVE",
"321 278 CURVE",
"394 239 LINE",
"404.667 299 OFFCURVE",
"437 343 OFFCURVE",
"473 343 CURVE SMOOTH",
"502.333 343 OFFCURVE",
"527 315 OFFCURVE",
"527 283 CURVE SMOOTH",
"527 244.333 OFFCURVE",
"515.667 207.833 OFFCURVE",
"493 173.5 CURVE SMOOTH",
"447.667 104.833 OFFCURVE",
"367 61 OFFCURVE",
"283 61 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"519 -247 LINE",
"346 -28 LINE",
"308 -28 LINE",
"196 -171 LINE SMOOTH",
"186.667 -183 OFFCURVE",
"178.833 -191.667 OFFCURVE",
"172.5 -197 CURVE SMOOTH",
"166.167 -202.333 OFFCURVE",
"160 -205 OFFCURVE",
"154 -205 CURVE SMOOTH",
"150.667 -205 OFFCURVE",
"144 -202 OFFCURVE",
"134 -196 CURVE",
"108 -177 LINE",
"93 -200 LINE",
"131 -229 LINE",
"152.333 -243.667 OFFCURVE",
"168.333 -253.667 OFFCURVE",
"179 -259 CURVE SMOOTH",
"189.667 -264.333 OFFCURVE",
"199 -266.667 OFFCURVE",
"207 -266 CURVE",
"221.667 -266 OFFCURVE",
"235.333 -252.667 OFFCURVE",
"258 -226 CURVE",
"354 -103 LINE",
"485 -271 LINE"
);
},
{
closed = 1;
nodes = (
"675 -514 LINE",
"501 -363 LINE SMOOTH",
"451.667 -321.667 OFFCURVE",
"395.667 -296 OFFCURVE",
"345 -296 CURVE SMOOTH",
"315.667 -296 OFFCURVE",
"277 -298.667 OFFCURVE",
"229 -304 CURVE",
"281 -377 LINE",
"331.667 -366.333 OFFCURVE",
"374 -361 OFFCURVE",
"408 -361 CURVE SMOOTH",
"455.333 -361 OFFCURVE",
"534.667 -419.333 OFFCURVE",
"646 -536 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */\01252 8 2 6 1 49 48 2 7 6 75 74 66 3 9 10 65 1 12 8 88 1 11 12 5 74 95 94 87 3 11 71 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 61 values pushed */\0120 10 2 9 2 10 9 112 0 9 8 2 9 8 110 0 8 12 2 8 12 110 0 1 0 6 7 1 6 99 0 12 0 11 12 11 95 5 1 3 3 0 89 4 1 0 0 24 75 13 1 7 7 2 91 0 2 2 26 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 61 values pushed */\0120 10 2 9 2 10 9 112 0 9 8 2 9 8 110 0 8 12 2 8 12 110 0 1 0 6 7 1 6 99 0 12 0 11 12 11 95 5 1 3 3 0 89 4 1 0 0 25 75 13 1 7 7 2 91 0 2 2 26 2 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 26 values pushed */\01239 39 91 89 86 84 83 82 79 77 70 69 39 63 39 62 38 17 17 29 38 41 16 14 6 27 \012CALL[ ]	/* CallFunction */";
};
width = 632;
}
);
note = uni0920094D0072;
},
{
glyphname = "ttha_rakar-deva";
layers = (
{
components = (
{
alignment = -1;
name = "rakar-deva";
transform = "{1, 0, 0, 1, 607, 0}";
},
{
alignment = -1;
name = "ttha-deva";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 632;
}
);
note = uni0920094D0930;
},
{
glyphname = "tth_ttha-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"574 376.333 OFFCURVE",
"543 426.667 OFFCURVE",
"459 452 CURVE",
"469 460 OFFCURVE",
"474 471 OFFCURVE",
"474 485 CURVE SMOOTH",
"474 515.667 OFFCURVE",
"449.333 555.667 OFFCURVE",
"404 609 CURVE",
"331 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"358 609 LINE",
"396.667 585.667 OFFCURVE",
"416 560.667 OFFCURVE",
"416 534 CURVE SMOOTH",
"416 519.333 OFFCURVE",
"405.833 510.167 OFFCURVE",
"385.5 506.5 CURVE SMOOTH",
"365.167 502.833 OFFCURVE",
"332 500.667 OFFCURVE",
"286 500 CURVE SMOOTH",
"238 499.333 OFFCURVE",
"198.5 497.167 OFFCURVE",
"167.5 493.5 CURVE SMOOTH",
"105.5 486.167 OFFCURVE",
"53 458.333 OFFCURVE",
"53 393 CURVE SMOOTH",
"53 357.667 OFFCURVE",
"67.167 325.5 OFFCURVE",
"95.5 296.5 CURVE SMOOTH",
"152.167 238.5 OFFCURVE",
"249.333 204 OFFCURVE",
"344 204 CURVE SMOOTH",
"356.667 204 OFFCURVE",
"375.667 205.333 OFFCURVE",
"401 208 CURVE",
"409.667 195.333 OFFCURVE",
"414 182.667 OFFCURVE",
"414 170 CURVE SMOOTH",
"414 155.333 OFFCURVE",
"403.667 146.167 OFFCURVE",
"383 142.5 CURVE SMOOTH",
"362.333 138.833 OFFCURVE",
"330 137 OFFCURVE",
"286 137 CURVE SMOOTH",
"238 136.333 OFFCURVE",
"198.5 134.167 OFFCURVE",
"167.5 130.5 CURVE SMOOTH",
"105.5 123.167 OFFCURVE",
"53 94.333 OFFCURVE",
"53 29 CURVE SMOOTH",
"53 -6.333 OFFCURVE",
"67.167 -38.333 OFFCURVE",
"95.5 -67 CURVE SMOOTH",
"152.167 -124.333 OFFCURVE",
"248 -159 OFFCURVE",
"344 -159 CURVE SMOOTH",
"465.333 -159 OFFCURVE",
"574 -114.667 OFFCURVE",
"574 -32 CURVE SMOOTH",
"574 14.667 OFFCURVE",
"543.333 65 OFFCURVE",
"458 89 CURVE",
"468.667 97.667 OFFCURVE",
"474 109 OFFCURVE",
"474 123 CURVE SMOOTH",
"474 145 OFFCURVE",
"459.333 175 OFFCURVE",
"430 213 CURVE",
"514 230.333 OFFCURVE",
"574 271 OFFCURVE",
"574 331 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"641 689 LINE",
"377 689 LINE",
"449 609 LINE",
"641 609 LINE"
);
},
{
closed = 1;
nodes = (
"218.46 259 OFFCURVE",
"112 311.451 OFFCURVE",
"112 354 CURVE SMOOTH",
"112 408.213 OFFCURVE",
"222.255 429 OFFCURVE",
"295 429 CURVE SMOOTH",
"301.667 429 OFFCURVE",
"315.333 429 OFFCURVE",
"336 429 CURVE SMOOTH",
"356.667 429 OFFCURVE",
"374.333 429.667 OFFCURVE",
"389 431 CURVE",
"433 429 OFFCURVE",
"464.833 422.167 OFFCURVE",
"484.5 410.5 CURVE SMOOTH",
"504.167 398.833 OFFCURVE",
"514 385 OFFCURVE",
"514 369 CURVE SMOOTH",
"514 318.415 OFFCURVE",
"397.477 259 OFFCURVE",
"294 259 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"514 -45.774 OFFCURVE",
"397.473 -106 OFFCURVE",
"294 -106 CURVE SMOOTH",
"218.491 -106 OFFCURVE",
"112 -52.559 OFFCURVE",
"112 -10 CURVE SMOOTH",
"112 44.343 OFFCURVE",
"232.295 65.851 OFFCURVE",
"307 67 CURVE SMOOTH",
"344.333 67 OFFCURVE",
"371 67.667 OFFCURVE",
"387 69 CURVE",
"431.667 67 OFFCURVE",
"464 60.167 OFFCURVE",
"484 48.5 CURVE SMOOTH",
"504 36.833 OFFCURVE",
"514 22.667 OFFCURVE",
"514 6 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */\01249 1 8 3 25 2 2 2 10 6 1 11 1 3 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 48 values pushed */\0120 3 9 1 8 10 3 8 99 15 1 10 0 2 1 10 2 99 0 1 12 1 11 13 1 11 99 0 13 0 0 13 0 95 6 1 4 4 5 89 14 7 2 5 5 24 4 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 48 values pushed */\0120 3 9 1 8 10 3 8 99 15 1 10 0 2 1 10 2 99 0 1 12 1 11 13 1 11 99 0 13 0 0 13 0 95 6 1 4 4 5 89 14 7 2 5 5 25 4 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 32 values pushed */\01257 57 53 53 88 86 80 78 77 76 57 74 57 73 67 64 63 62 53 56 53 56 27 17 20 38 37 38 43 16 6 27 \012CALL[ ]	/* CallFunction */";
};
width = 627;
}
);
note = uni0920094D0920;
},
{
glyphname = "tth_ya-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"438.333 389 OFFCURVE",
"425 386 OFFCURVE",
"415 380 CURVE",
"412 382 LINE",
"449.333 402 OFFCURVE",
"475 433.667 OFFCURVE",
"475 467 CURVE",
"473.667 508.333 OFFCURVE",
"450.333 561 OFFCURVE",
"409 609 CURVE SMOOTH",
"338 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"368 609 LINE",
"401.333 574.333 OFFCURVE",
"418 538.333 OFFCURVE",
"418 501 CURVE SMOOTH",
"418 452.961 OFFCURVE",
"355.08 442.583 OFFCURVE",
"281 432 CURVE SMOOTH",
"232.333 425.333 OFFCURVE",
"192.333 417.333 OFFCURVE",
"161 408 CURVE SMOOTH",
"98.333 389.333 OFFCURVE",
"46 343 OFFCURVE",
"46 255 CURVE SMOOTH",
"46 216.333 OFFCURVE",
"60.167 177 OFFCURVE",
"88.5 137 CURVE SMOOTH",
"145.167 57 OFFCURVE",
"244 -1 OFFCURVE",
"340 -1 CURVE SMOOTH",
"384 -1 OFFCURVE",
"425 9.333 OFFCURVE",
"463 30 CURVE SMOOTH",
"539 71.333 OFFCURVE",
"587 146.667 OFFCURVE",
"587 228 CURVE SMOOTH",
"587 286.711 OFFCURVE",
"513.126 389 OFFCURVE",
"455 389 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1371 17 LINE",
"1355 -3 OFFCURVE",
"1337 -13 OFFCURVE",
"1317 -13 CURVE SMOOTH",
"1265.203 -13 OFFCURVE",
"1137 59.606 OFFCURVE",
"1137 111 CURVE SMOOTH",
"1137 609 LINE",
"1056 689 LINE",
"385 689 LINE",
"456 609 LINE",
"646 609 LINE",
"1054 609 LINE",
"1054 336 LINE",
"1010 244 OFFCURVE",
"926.667 181 OFFCURVE",
"848 181 CURVE SMOOTH",
"805.333 181 OFFCURVE",
"761.333 210.667 OFFCURVE",
"736 256 CURVE",
"805.341 256 OFFCURVE",
"914 323.112 OFFCURVE",
"914 382 CURVE SMOOTH",
"914 405.333 OFFCURVE",
"905.833 429.333 OFFCURVE",
"889.5 454 CURVE SMOOTH",
"856.833 503.333 OFFCURVE",
"802.667 540 OFFCURVE",
"756 540 CURVE SMOOTH",
"734 540 OFFCURVE",
"697.667 535.333 OFFCURVE",
"647 526 CURVE SMOOTH",
"601.667 518 OFFCURVE",
"573.333 514 OFFCURVE",
"562 514 CURVE SMOOTH",
"534 514 OFFCURVE",
"518.333 517.333 OFFCURVE",
"497 528 CURVE",
"497 471 LINE",
"512.333 452.333 OFFCURVE",
"534 443 OFFCURVE",
"562 443 CURVE SMOOTH",
"574 443 OFFCURVE",
"594.333 445.5 OFFCURVE",
"623 450.5 CURVE SMOOTH",
"651.667 455.5 OFFCURVE",
"671 458.667 OFFCURVE",
"681 460 CURVE",
"746.333 472 OFFCURVE",
"786.667 478 OFFCURVE",
"802 478 CURVE SMOOTH",
"831.333 478 OFFCURVE",
"856 456 OFFCURVE",
"856 428 CURVE SMOOTH",
"856 379.661 OFFCURVE",
"784.977 335 OFFCURVE",
"728 335 CURVE SMOOTH",
"708 335 OFFCURVE",
"692 339 OFFCURVE",
"680 347 CURVE",
"659 332 LINE",
"707 202.667 OFFCURVE",
"802 118 OFFCURVE",
"902 118 CURVE SMOOTH",
"959.333 118 OFFCURVE",
"1020 153 OFFCURVE",
"1056 209 CURVE",
"1056 162 LINE SMOOTH",
"1056 138.667 OFFCURVE",
"1075.667 109.167 OFFCURVE",
"1115 73.5 CURVE SMOOTH",
"1193.667 2.167 OFFCURVE",
"1313 -61 OFFCURVE",
"1381 -61 CURVE SMOOTH",
"1404.333 -61 OFFCURVE",
"1425.333 -50.667 OFFCURVE",
"1444 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"1182 609 LINE",
"1252 609 LINE",
"1252 689 LINE",
"1103 689 LINE"
);
},
{
closed = 1;
nodes = (
"253.667 61 OFFCURVE",
"226.333 67.167 OFFCURVE",
"201 79.5 CURVE SMOOTH",
"150.333 104.167 OFFCURVE",
"118 149 OFFCURVE",
"118 201 CURVE SMOOTH",
"118 241 OFFCURVE",
"126.167 271.333 OFFCURVE",
"142.5 292 CURVE SMOOTH",
"175.167 333.333 OFFCURVE",
"218.333 343.333 OFFCURVE",
"297 354 CURVE SMOOTH",
"335.667 359.333 OFFCURVE",
"364 365 OFFCURVE",
"382 371 CURVE",
"385 368 LINE",
"355.667 349.333 OFFCURVE",
"333 316.667 OFFCURVE",
"321 278 CURVE",
"394 239 LINE",
"404.667 299 OFFCURVE",
"437 343 OFFCURVE",
"473 343 CURVE SMOOTH",
"502.333 343 OFFCURVE",
"527 315 OFFCURVE",
"527 283 CURVE SMOOTH",
"527 244.333 OFFCURVE",
"515.667 207.833 OFFCURVE",
"493 173.5 CURVE SMOOTH",
"447.667 104.833 OFFCURVE",
"367 61 OFFCURVE",
"283 61 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */\01266 1 9 10 65 1 8 7 118 49 31 3 18 3 87 1 6 18 115 48 2 11 6 114 42 2 12 11 100 1 0 19 7 74 93 1 1 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 75 values pushed */\0120 10 0 7 8 10 7 99 0 9 0 8 3 9 8 99 20 1 3 0 18 6 3 18 99 0 6 0 11 12 6 11 99 0 12 0 5 19 12 5 99 0 15 0 4 15 4 95 21 17 13 3 1 1 2 89 16 14 2 2 2 24 75 22 1 19 19 0 91 0 0 0 26 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 75 values pushed */\0120 10 0 7 8 10 7 99 0 9 0 8 3 9 8 99 20 1 3 0 18 6 3 18 99 0 6 0 11 12 6 11 99 0 12 0 5 19 12 5 99 0 15 0 4 15 4 95 21 17 13 3 1 1 2 89 16 14 2 2 2 25 75 22 1 19 19 0 91 0 0 0 26 0 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 52 values pushed */\012105 105 101 101 0 0 105 129 105 128 112 110 101 104 101 104 103 102 99 97 92 91 90 88 85 83 81 80 74 72 70 68 64 62 59 57 52 50 46 44 38 36 0 34 0 33 17 29 38 23 6 23 \012CALL[ ]	/* CallFunction */";
};
width = 1239;
}
);
note = uni0920094D092F;
},
{
glyphname = "dd_r-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"403 609 LINE",
"425.667 585 OFFCURVE",
"440 553.667 OFFCURVE",
"440 535 CURVE SMOOTH",
"440 517.667 OFFCURVE",
"419.667 503 OFFCURVE",
"397 503 CURVE SMOOTH",
"259 503 LINE SMOOTH",
"196.333 503 OFFCURVE",
"140 457 OFFCURVE",
"140 401 CURVE SMOOTH",
"140 375.667 OFFCURVE",
"151 349.167 OFFCURVE",
"173 321.5 CURVE SMOOTH",
"217 266.167 OFFCURVE",
"289.667 226 OFFCURVE",
"351 226 CURVE SMOOTH",
"376.333 226 OFFCURVE",
"396.667 235 OFFCURVE",
"426 251 CURVE SMOOTH",
"451.333 265.667 OFFCURVE",
"464.667 272 OFFCURVE",
"482 272 CURVE SMOOTH",
"516.667 272 OFFCURVE",
"542 240.667 OFFCURVE",
"542 206 CURVE SMOOTH",
"542 143.39 OFFCURVE",
"420.891 69 OFFCURVE",
"353 69 CURVE SMOOTH",
"313.667 69 OFFCURVE",
"274.5 80.333 OFFCURVE",
"235.5 103 CURVE SMOOTH",
"157.5 148.333 OFFCURVE",
"92.333 227.333 OFFCURVE",
"55 314 CURVE",
"23 300 LINE",
"108.333 117.333 OFFCURVE",
"247.667 5 OFFCURVE",
"409 5 CURVE SMOOTH",
"443 5 OFFCURVE",
"474.833 12 OFFCURVE",
"504.5 26 CURVE SMOOTH",
"563.833 54 OFFCURVE",
"602 105.667 OFFCURVE",
"602 163 CURVE SMOOTH",
"602 189 OFFCURVE",
"593.667 215.167 OFFCURVE",
"577 241.5 CURVE SMOOTH",
"543.667 294.167 OFFCURVE",
"485.667 333 OFFCURVE",
"435 333 CURVE SMOOTH",
"417.667 333 OFFCURVE",
"402 325.667 OFFCURVE",
"370 311 CURVE SMOOTH",
"338 295 OFFCURVE",
"319.333 287 OFFCURVE",
"298 287 CURVE SMOOTH",
"251.333 287 OFFCURVE",
"213 319 OFFCURVE",
"213 355 CURVE SMOOTH",
"213 397.667 OFFCURVE",
"250.667 433 OFFCURVE",
"300 433 CURVE SMOOTH",
"416 433 LINE SMOOTH",
"456 433 OFFCURVE",
"491 458.333 OFFCURVE",
"491 493 CURVE SMOOTH",
"491 519 OFFCURVE",
"475.333 557.667 OFFCURVE",
"444 609 CURVE",
"373 689 LINE"
);
},
{
closed = 1;
nodes = (
"418 689 LINE",
"489 609 LINE",
"646 609 LINE",
"646 689 LINE"
);
},
{
closed = 1;
nodes = (
"512 -247 LINE",
"339 -28 LINE",
"301 -28 LINE",
"189 -171 LINE SMOOTH",
"179.667 -183 OFFCURVE",
"171.833 -191.667 OFFCURVE",
"165.5 -197 CURVE SMOOTH",
"159.167 -202.333 OFFCURVE",
"153 -205 OFFCURVE",
"147 -205 CURVE SMOOTH",
"143.667 -205 OFFCURVE",
"137 -202 OFFCURVE",
"127 -196 CURVE",
"101 -177 LINE",
"86 -200 LINE",
"124 -229 LINE",
"145.333 -243.667 OFFCURVE",
"161.333 -253.667 OFFCURVE",
"172 -259 CURVE SMOOTH",
"182.667 -264.333 OFFCURVE",
"192 -266.667 OFFCURVE",
"200 -266 CURVE",
"214.667 -266 OFFCURVE",
"228.333 -252.667 OFFCURVE",
"251 -226 CURVE",
"347 -103 LINE",
"478 -271 LINE"
);
},
{
closed = 1;
nodes = (
"684 -517 LINE",
"510 -366 LINE SMOOTH",
"455.333 -321.333 OFFCURVE",
"403 -299 OFFCURVE",
"353 -299 CURVE SMOOTH",
"325.667 -299 OFFCURVE",
"287 -301.667 OFFCURVE",
"237 -307 CURVE",
"290 -379 LINE",
"342 -369 OFFCURVE",
"384 -364 OFFCURVE",
"416 -364 CURVE SMOOTH",
"462.667 -364 OFFCURVE",
"542.333 -422.333 OFFCURVE",
"655 -539 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */\01231 1 2 3 80 79 71 3 13 14 70 1 16 12 93 1 15 16 4 74 99 98 92 3 15 71 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 76 values pushed */\0120 14 4 13 4 14 13 112 0 13 12 4 13 12 110 0 12 16 4 12 16 110 0 8 0 1 3 8 1 99 0 3 0 6 7 3 6 99 0 2 0 7 5 2 7 99 0 16 0 15 16 15 95 11 1 9 9 0 89 10 1 0 0 24 75 0 5 5 4 91 0 4 4 26 4 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 76 values pushed */\0120 14 4 13 4 14 13 112 0 13 12 4 13 12 110 0 12 16 4 12 16 110 0 8 0 1 3 8 1 99 0 3 0 6 7 3 6 99 0 2 0 7 5 2 7 99 0 16 0 15 16 15 95 11 1 9 9 0 89 10 1 0 0 25 75 0 5 5 4 91 0 4 4 26 4 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 28 values pushed */\01296 94 91 89 88 87 84 82 75 74 68 67 66 65 64 63 53 36 37 38 38 36 36 53 16 17 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 633;
}
);
note = uni0921094D0072;
},
{
glyphname = "dda_rakar-deva";
layers = (
{
components = (
{
alignment = -1;
name = "rakar-deva";
transform = "{1, 0, 0, 1, 600, 0}";
},
{
alignment = -1;
name = "dda-deva";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 633;
}
);
note = uni0921094D0930;
},
{
glyphname = "dd_dda-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"602 362.367 OFFCURVE",
"495.583 425 OFFCURVE",
"435 425 CURVE SMOOTH",
"421 425 OFFCURVE",
"399.333 418.667 OFFCURVE",
"370 406 CURVE SMOOTH",
"339.333 392.667 OFFCURVE",
"318 386 OFFCURVE",
"298 386 CURVE SMOOTH",
"251.333 386 OFFCURVE",
"213 403.667 OFFCURVE",
"213 425 CURVE SMOOTH",
"213 450.333 OFFCURVE",
"246.333 473 OFFCURVE",
"293 473 CURVE SMOOTH",
"416 473 LINE SMOOTH",
"458.667 473 OFFCURVE",
"491 491.667 OFFCURVE",
"491 525 CURVE SMOOTH",
"491 547.667 OFFCURVE",
"477.333 567 OFFCURVE",
"444 611 CURVE",
"373 689 LINE",
"-14 689 LINE",
"-14 611 LINE",
"403 611 LINE",
"425.667 595 OFFCURVE",
"440 577.667 OFFCURVE",
"440 567 CURVE SMOOTH",
"440 547 OFFCURVE",
"422.333 537 OFFCURVE",
"397 537 CURVE SMOOTH",
"259 537 LINE SMOOTH",
"196.333 537 OFFCURVE",
"140 505.333 OFFCURVE",
"140 468 CURVE SMOOTH",
"140 410.299 OFFCURVE",
"278.545 334 OFFCURVE",
"351 334 CURVE SMOOTH",
"376.333 334 OFFCURVE",
"395.333 341.667 OFFCURVE",
"426 355 CURVE",
"450 367 OFFCURVE",
"464.667 372 OFFCURVE",
"482 372 CURVE SMOOTH",
"516.667 372 OFFCURVE",
"542 357 OFFCURVE",
"542 337 CURVE SMOOTH",
"542 286.333 OFFCURVE",
"457 260 OFFCURVE",
"361 260 CURVE SMOOTH",
"237 260 OFFCURVE",
"112.333 331.667 OFFCURVE",
"55 425 CURVE",
"23 409 LINE",
"109.667 283.667 OFFCURVE",
"249 206 OFFCURVE",
"409 206 CURVE SMOOTH",
"422.333 206 OFFCURVE",
"432.333 206.333 OFFCURVE",
"439 207 CURVE",
"439.667 205.667 OFFCURVE",
"440 204 OFFCURVE",
"440 202 CURVE SMOOTH",
"440 180.667 OFFCURVE",
"422.333 171 OFFCURVE",
"397 171 CURVE SMOOTH",
"259 171 LINE SMOOTH",
"196.333 171 OFFCURVE",
"140 139 OFFCURVE",
"140 103 CURVE SMOOTH",
"140 45.123 OFFCURVE",
"278.487 -32 OFFCURVE",
"351 -32 CURVE SMOOTH",
"376.333 -32 OFFCURVE",
"395.333 -24.333 OFFCURVE",
"426 -11 CURVE",
"448.667 1 OFFCURVE",
"463.333 7 OFFCURVE",
"482 7 CURVE SMOOTH",
"516.667 7 OFFCURVE",
"542 -9.333 OFFCURVE",
"542 -28 CURVE SMOOTH",
"542 -78.667 OFFCURVE",
"458.333 -105 OFFCURVE",
"361 -105 CURVE SMOOTH",
"237 -105 OFFCURVE",
"112.333 -34.333 OFFCURVE",
"55 59 CURVE",
"23 45 LINE",
"109.667 -80.333 OFFCURVE",
"249 -159 OFFCURVE",
"409 -159 CURVE SMOOTH",
"485.938 -159 OFFCURVE",
"602 -106.193 OFFCURVE",
"602 -50 CURVE SMOOTH",
"602 -2.788 OFFCURVE",
"495.558 60 OFFCURVE",
"435 60 CURVE SMOOTH",
"417.667 60 OFFCURVE",
"392.667 51.333 OFFCURVE",
"370 42 CURVE SMOOTH",
"339.333 28.667 OFFCURVE",
"318 22 OFFCURVE",
"298 22 CURVE SMOOTH",
"251.333 22 OFFCURVE",
"213 39 OFFCURVE",
"213 59 CURVE SMOOTH",
"213 85.667 OFFCURVE",
"246.333 108 OFFCURVE",
"293 108 CURVE SMOOTH",
"416 108 LINE SMOOTH",
"457.333 108 OFFCURVE",
"491 126.667 OFFCURVE",
"491 160 CURVE SMOOTH",
"491 173.333 OFFCURVE",
"484.333 190.667 OFFCURVE",
"471 212 CURVE",
"547 225.333 OFFCURVE",
"602 264.667 OFFCURVE",
"602 314 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"646 689 LINE",
"418 689 LINE",
"489 611 LINE",
"646 611 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */\01292 1 12 13 65 1 16 17 2 1 8 9 58 1 7 8 32 31 2 1 2 5 74 66 1 17 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 79 values pushed */\0120 12 0 15 17 12 15 99 0 17 0 10 11 17 10 99 0 16 0 11 9 16 11 99 0 9 0 8 7 9 8 99 0 7 0 0 2 7 0 99 0 1 0 6 4 1 6 99 0 4 0 3 4 3 95 18 1 13 13 14 89 20 19 2 14 14 24 75 0 2 2 5 91 0 5 5 26 5 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 79 values pushed */\0120 12 0 15 17 12 15 99 0 17 0 10 11 17 10 99 0 16 0 11 9 16 11 99 0 9 0 8 7 9 8 99 0 7 0 0 2 7 0 99 0 1 0 6 4 1 6 99 0 4 0 3 4 3 95 18 1 13 13 14 89 20 19 2 14 14 25 75 0 2 2 5 91 0 5 5 26 5 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 38 values pushed */\012122 122 122 125 122 125 124 123 118 116 113 111 107 104 98 97 96 95 90 87 82 80 76 74 70 68 37 53 36 36 37 38 36 36 54 21 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 629;
}
);
note = uni0921094D0921;
},
{
glyphname = "dd_ddha-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"421 425 OFFCURVE",
"399.333 418.667 OFFCURVE",
"370 406 CURVE SMOOTH",
"339.333 392.667 OFFCURVE",
"318 386 OFFCURVE",
"298 386 CURVE SMOOTH",
"251.333 386 OFFCURVE",
"213 403.667 OFFCURVE",
"213 425 CURVE SMOOTH",
"213 450.333 OFFCURVE",
"246.333 473 OFFCURVE",
"293 473 CURVE SMOOTH",
"416 473 LINE SMOOTH",
"458.667 473 OFFCURVE",
"491 491.667 OFFCURVE",
"491 525 CURVE SMOOTH",
"491 547.667 OFFCURVE",
"477.333 567 OFFCURVE",
"444 611 CURVE",
"373 689 LINE",
"-14 689 LINE",
"-14 611 LINE",
"403 611 LINE",
"425.667 595 OFFCURVE",
"440 577.667 OFFCURVE",
"440 567 CURVE SMOOTH",
"440 547 OFFCURVE",
"422.333 537 OFFCURVE",
"397 537 CURVE SMOOTH",
"259 537 LINE SMOOTH",
"196.333 537 OFFCURVE",
"140 505.333 OFFCURVE",
"140 468 CURVE SMOOTH",
"140 410.299 OFFCURVE",
"278.545 334 OFFCURVE",
"351 334 CURVE SMOOTH",
"376.333 334 OFFCURVE",
"395.333 341.667 OFFCURVE",
"426 355 CURVE",
"450 367 OFFCURVE",
"464.667 372 OFFCURVE",
"482 372 CURVE SMOOTH",
"516.667 372 OFFCURVE",
"542 357 OFFCURVE",
"542 337 CURVE SMOOTH",
"542 286.333 OFFCURVE",
"457 260 OFFCURVE",
"361 260 CURVE SMOOTH",
"237 260 OFFCURVE",
"112.333 331.667 OFFCURVE",
"55 425 CURVE",
"23 409 LINE",
"109.667 283.667 OFFCURVE",
"249 206 OFFCURVE",
"409 206 CURVE SMOOTH",
"417 206 LINE",
"418 196 LINE",
"418 179.333 OFFCURVE",
"408.333 168.833 OFFCURVE",
"389 164.5 CURVE SMOOTH",
"369.667 160.167 OFFCURVE",
"339 157.667 OFFCURVE",
"297 157 CURVE SMOOTH",
"249.667 155.667 OFFCURVE",
"211.167 152.5 OFFCURVE",
"181.5 147.5 CURVE SMOOTH",
"122.167 137.5 OFFCURVE",
"72 103.333 OFFCURVE",
"72 26 CURVE SMOOTH",
"72 -8 OFFCURVE",
"86 -39.167 OFFCURVE",
"114 -67.5 CURVE SMOOTH",
"170 -124.167 OFFCURVE",
"266.667 -159 OFFCURVE",
"360 -159 CURVE SMOOTH",
"432.79 -159 OFFCURVE",
"557 -103.653 OFFCURVE",
"557 -49 CURVE SMOOTH",
"557 8.055 OFFCURVE",
"489.783 68 OFFCURVE",
"427 68 CURVE SMOOTH",
"364.535 68 OFFCURVE",
"290 21.908 OFFCURVE",
"290 -29 CURVE SMOOTH",
"290 -57 OFFCURVE",
"316.333 -86 OFFCURVE",
"359 -106 CURVE",
"344.333 -111.333 OFFCURVE",
"327.667 -114 OFFCURVE",
"309 -114 CURVE SMOOTH",
"241.829 -114 OFFCURVE",
"130 -59.296 OFFCURVE",
"130 -9 CURVE SMOOTH",
"130 19.667 OFFCURVE",
"139.333 41.167 OFFCURVE",
"158 55.5 CURVE SMOOTH",
"195.333 84.167 OFFCURVE",
"244.667 88.333 OFFCURVE",
"330 91 CURVE SMOOTH",
"393.325 93.436 OFFCURVE",
"483 111.17 OFFCURVE",
"483 151 CURVE SMOOTH",
"483 166.333 OFFCURVE",
"474.667 186 OFFCURVE",
"458 210 CURVE",
"540.667 220.667 OFFCURVE",
"602 262 OFFCURVE",
"602 314 CURVE SMOOTH",
"602 362.367 OFFCURVE",
"495.583 425 OFFCURVE",
"435 425 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"646 689 LINE",
"418 689 LINE",
"489 611 LINE",
"646 611 LINE"
);
},
{
closed = 1;
nodes = (
"356 -24.483 OFFCURVE",
"418.142 19 OFFCURVE",
"462 19 CURVE SMOOTH",
"486 19 OFFCURVE",
"506 2.667 OFFCURVE",
"506 -16 CURVE SMOOTH",
"506 -28.667 OFFCURVE",
"495.333 -42.167 OFFCURVE",
"474 -56.5 CURVE SMOOTH",
"452.667 -70.833 OFFCURVE",
"424.333 -83.667 OFFCURVE",
"389 -95 CURVE",
"369 -89.667 OFFCURVE",
"356 -76 OFFCURVE",
"356 -64 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */\01280 1 9 10 53 1 13 14 6 1 5 6 48 1 4 5 112 22 2 1 17 5 74 54 1 14 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 72 values pushed */\0120 9 0 12 14 9 12 99 18 1 14 0 7 8 14 7 99 0 13 0 8 6 13 8 99 0 6 0 5 4 6 5 99 0 4 0 0 2 4 0 99 0 1 0 3 1 3 95 15 1 10 10 11 89 19 16 2 11 11 24 75 0 2 2 17 91 0 17 17 26 17 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01224 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 72 values pushed */\0120 9 0 12 14 9 12 99 18 1 14 0 7 8 14 7 99 0 13 0 8 6 13 8 99 0 6 0 5 4 6 5 99 0 4 0 0 2 4 0 99 0 1 0 3 1 3 95 15 1 10 10 11 89 19 16 2 11 11 25 75 0 2 2 17 91 0 17 17 26 17 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 70 values pushed */\0120 9 0 12 14 9 12 99 18 1 14 0 7 8 14 7 99 0 13 0 8 6 13 8 99 0 6 0 5 4 6 5 99 0 4 0 0 2 4 0 99 0 2 0 17 1 2 17 99 0 1 0 3 1 3 95 15 1 10 10 11 89 19 16 2 11 11 25 10 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 38 values pushed */\012106 106 0 0 119 117 106 109 106 109 108 107 0 105 0 104 101 99 95 92 86 85 84 83 78 75 36 36 37 35 38 38 39 38 43 20 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 633;
}
);
note = uni0921094D0922;
},
{
glyphname = "dd_ya-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"417.667 333 OFFCURVE",
"402 325.667 OFFCURVE",
"370 311 CURVE SMOOTH",
"338 295 OFFCURVE",
"319.333 287 OFFCURVE",
"298 287 CURVE SMOOTH",
"251.333 287 OFFCURVE",
"213 319 OFFCURVE",
"213 355 CURVE SMOOTH",
"213 397.667 OFFCURVE",
"250.667 433 OFFCURVE",
"300 433 CURVE SMOOTH",
"416 433 LINE SMOOTH",
"456 433 OFFCURVE",
"491 458.333 OFFCURVE",
"491 493 CURVE SMOOTH",
"491 519 OFFCURVE",
"475.333 557.667 OFFCURVE",
"444 609 CURVE",
"373 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"403 609 LINE",
"425.667 585 OFFCURVE",
"440 553.667 OFFCURVE",
"440 535 CURVE SMOOTH",
"440 517.667 OFFCURVE",
"419.667 503 OFFCURVE",
"397 503 CURVE SMOOTH",
"259 503 LINE SMOOTH",
"196.333 503 OFFCURVE",
"140 457 OFFCURVE",
"140 401 CURVE SMOOTH",
"140 375.667 OFFCURVE",
"151 349.167 OFFCURVE",
"173 321.5 CURVE SMOOTH",
"217 266.167 OFFCURVE",
"289.667 226 OFFCURVE",
"351 226 CURVE SMOOTH",
"376.333 226 OFFCURVE",
"396.667 235 OFFCURVE",
"426 251 CURVE SMOOTH",
"451.333 265.667 OFFCURVE",
"464.667 272 OFFCURVE",
"482 272 CURVE SMOOTH",
"516.667 272 OFFCURVE",
"542 240.667 OFFCURVE",
"542 206 CURVE SMOOTH",
"542 143.39 OFFCURVE",
"420.891 69 OFFCURVE",
"353 69 CURVE SMOOTH",
"313.667 69 OFFCURVE",
"274.5 80.333 OFFCURVE",
"235.5 103 CURVE SMOOTH",
"157.5 148.333 OFFCURVE",
"92.333 227.333 OFFCURVE",
"55 314 CURVE",
"23 300 LINE",
"108.333 117.333 OFFCURVE",
"247.667 5 OFFCURVE",
"409 5 CURVE SMOOTH",
"443 5 OFFCURVE",
"474.833 12 OFFCURVE",
"504.5 26 CURVE SMOOTH",
"563.833 54 OFFCURVE",
"602 105.667 OFFCURVE",
"602 163 CURVE SMOOTH",
"602 189 OFFCURVE",
"593.667 215.167 OFFCURVE",
"577 241.5 CURVE SMOOTH",
"543.667 294.167 OFFCURVE",
"485.667 333 OFFCURVE",
"435 333 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1421 17 LINE",
"1406.333 -1.667 OFFCURVE",
"1385.667 -13 OFFCURVE",
"1367 -13 CURVE SMOOTH",
"1314.514 -13 OFFCURVE",
"1186 59.72 OFFCURVE",
"1186 111 CURVE SMOOTH",
"1186 609 LINE",
"1106 689 LINE",
"418 689 LINE",
"489 609 LINE",
"646 609 LINE",
"1104 609 LINE",
"1104 336 LINE",
"1060 244 OFFCURVE",
"976.667 181 OFFCURVE",
"898 181 CURVE SMOOTH",
"855.333 181 OFFCURVE",
"811.667 210.667 OFFCURVE",
"785 256 CURVE",
"855.813 256 OFFCURVE",
"963 323.3 OFFCURVE",
"963 382 CURVE SMOOTH",
"963 405.333 OFFCURVE",
"954.833 429.333 OFFCURVE",
"938.5 454 CURVE SMOOTH",
"905.833 503.333 OFFCURVE",
"851.667 540 OFFCURVE",
"805 540 CURVE SMOOTH",
"785 540 OFFCURVE",
"749 535.333 OFFCURVE",
"697 526 CURVE SMOOTH",
"651.667 518 OFFCURVE",
"623.333 514 OFFCURVE",
"612 514 CURVE SMOOTH",
"584 514 OFFCURVE",
"568.333 517.333 OFFCURVE",
"547 528 CURVE",
"547 471 LINE",
"562.333 452.333 OFFCURVE",
"584 443 OFFCURVE",
"612 443 CURVE SMOOTH",
"630 443 OFFCURVE",
"668.667 448.667 OFFCURVE",
"728 460 CURVE SMOOTH",
"794.667 472 OFFCURVE",
"836 478 OFFCURVE",
"852 478 CURVE SMOOTH",
"881.333 478 OFFCURVE",
"906 456 OFFCURVE",
"906 428 CURVE SMOOTH",
"906 379.617 OFFCURVE",
"834.383 335 OFFCURVE",
"777 335 CURVE SMOOTH",
"758.333 335 OFFCURVE",
"742.333 339 OFFCURVE",
"729 347 CURVE",
"709 332 LINE",
"755.667 202.667 OFFCURVE",
"852 118 OFFCURVE",
"952 118 CURVE SMOOTH",
"1008 118 OFFCURVE",
"1070 153 OFFCURVE",
"1106 209 CURVE",
"1106 162 LINE SMOOTH",
"1106 138.667 OFFCURVE",
"1125.667 109.167 OFFCURVE",
"1165 73.5 CURVE SMOOTH",
"1243.667 2.167 OFFCURVE",
"1363 -61 OFFCURVE",
"1431 -61 CURVE SMOOTH",
"1453.667 -61 OFFCURVE",
"1474.667 -50.667 OFFCURVE",
"1494 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"1232 609 LINE",
"1302 609 LINE",
"1302 689 LINE",
"1152 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */\01295 1 15 16 94 1 14 13 116 79 2 9 7 78 10 2 8 9 72 1 18 3 130 1 0 1 6 74 122 1 5 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 94 values pushed */\0120 21 0 10 0 21 10 112 0 10 10 113 0 16 0 13 14 16 13 99 0 15 0 14 7 15 14 99 0 4 0 7 9 4 7 99 0 2 17 9 2 87 12 24 2 9 0 17 3 9 17 99 0 8 0 3 18 8 3 99 0 18 0 11 1 18 11 99 25 23 19 3 5 5 6 89 22 20 2 6 6 24 75 0 1 1 0 91 0 0 0 26 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 94 values pushed */\0120 21 0 10 0 21 10 112 0 10 10 113 0 16 0 13 14 16 13 99 0 15 0 14 7 15 14 99 0 4 0 7 9 4 7 99 0 2 17 9 2 87 12 24 2 9 0 17 3 9 17 99 0 8 0 3 18 8 3 99 0 18 0 11 1 18 11 99 25 23 19 3 5 5 6 89 22 20 2 6 6 25 75 0 1 1 0 91 0 0 0 26 0 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 50 values pushed */\012131 131 0 0 131 134 131 134 133 132 128 126 121 120 119 117 114 112 110 109 103 101 99 97 93 91 89 87 82 80 76 74 68 66 0 64 0 63 36 53 17 21 53 36 37 38 38 26 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 1288;
}
);
note = uni0921094D092F;
},
{
glyphname = "ddh_r-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"385 609 LINE",
"415 570.333 OFFCURVE",
"430 539 OFFCURVE",
"430 515 CURVE SMOOTH",
"430 491 OFFCURVE",
"409 470 OFFCURVE",
"381 470 CURVE SMOOTH",
"221 469 LINE SMOOTH",
"191.667 469 OFFCURVE",
"164.167 462.333 OFFCURVE",
"138.5 449 CURVE SMOOTH",
"87.167 422.333 OFFCURVE",
"54 375 OFFCURVE",
"54 323 CURVE SMOOTH",
"54 266.333 OFFCURVE",
"67.5 212.667 OFFCURVE",
"94.5 162 CURVE SMOOTH",
"148.5 60.667 OFFCURVE",
"246.333 -7 OFFCURVE",
"357 -7 CURVE SMOOTH",
"387.667 -7 OFFCURVE",
"418.167 1 OFFCURVE",
"448.5 17 CURVE SMOOTH",
"509.167 49 OFFCURVE",
"551 104 OFFCURVE",
"551 156 CURVE SMOOTH",
"551 221.966 OFFCURVE",
"480.883 294 OFFCURVE",
"415 294 CURVE SMOOTH",
"351.271 294 OFFCURVE",
"285 232.355 OFFCURVE",
"285 172 CURVE SMOOTH",
"285 133.333 OFFCURVE",
"316 93.333 OFFCURVE",
"368 64 CURVE",
"356.667 55.333 OFFCURVE",
"334 51 OFFCURVE",
"300 51 CURVE SMOOTH",
"270 51 OFFCURVE",
"240.667 60.667 OFFCURVE",
"212 80 CURVE SMOOTH",
"154.667 118.667 OFFCURVE",
"115 186.333 OFFCURVE",
"115 253 CURVE SMOOTH",
"115 316.301 OFFCURVE",
"200.709 397 OFFCURVE",
"259 397 CURVE SMOOTH",
"401 398 LINE SMOOTH",
"442.333 399.333 OFFCURVE",
"478 430.333 OFFCURVE",
"478 469 CURVE SMOOTH",
"478 519.667 OFFCURVE",
"455 569 OFFCURVE",
"423 609 CURVE",
"350 689 LINE"
);
},
{
closed = 1;
nodes = (
"396 689 LINE",
"469 609 LINE",
"598 609 LINE",
"598 689 LINE"
);
},
{
closed = 1;
nodes = (
"370.333 91.333 OFFCURVE",
"356 111 OFFCURVE",
"356 131 CURVE SMOOTH",
"356 179.273 OFFCURVE",
"411.898 239 OFFCURVE",
"457 239 CURVE SMOOTH",
"478.333 239 OFFCURVE",
"496 222 OFFCURVE",
"496 202 CURVE SMOOTH",
"496 159.333 OFFCURVE",
"458.333 115.333 OFFCURVE",
"397 78 CURVE"
);
},
{
closed = 1;
nodes = (
"505 -247 LINE",
"332 -28 LINE",
"294 -28 LINE",
"182 -171 LINE SMOOTH",
"172.667 -183 OFFCURVE",
"164.833 -191.667 OFFCURVE",
"158.5 -197 CURVE SMOOTH",
"152.167 -202.333 OFFCURVE",
"146 -205 OFFCURVE",
"140 -205 CURVE SMOOTH",
"136.667 -205 OFFCURVE",
"130 -202 OFFCURVE",
"120 -196 CURVE",
"94 -177 LINE",
"79 -200 LINE",
"117 -229 LINE",
"138.333 -243.667 OFFCURVE",
"154.333 -253.667 OFFCURVE",
"165 -259 CURVE SMOOTH",
"175.667 -264.333 OFFCURVE",
"185 -266.667 OFFCURVE",
"193 -266 CURVE",
"207.667 -266 OFFCURVE",
"221.333 -252.667 OFFCURVE",
"244 -226 CURVE",
"340 -103 LINE",
"471 -271 LINE"
);
},
{
closed = 1;
nodes = (
"673 -514 LINE",
"499 -363 LINE SMOOTH",
"444.333 -318.333 OFFCURVE",
"392.333 -296 OFFCURVE",
"343 -296 CURVE SMOOTH",
"315 -296 OFFCURVE",
"276 -298.667 OFFCURVE",
"226 -304 CURVE",
"279 -377 LINE",
"329.667 -366.333 OFFCURVE",
"372 -361 OFFCURVE",
"406 -361 CURVE SMOOTH",
"452 -361 OFFCURVE",
"531.333 -419.333 OFFCURVE",
"644 -536 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */\01266 19 2 2 9 78 77 69 3 11 12 68 1 14 10 91 1 13 14 4 74 97 96 90 3 13 71 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 68 values pushed */\0120 12 4 11 4 12 11 112 0 11 10 4 11 10 110 0 10 14 4 10 14 110 0 5 0 1 3 5 1 99 0 3 0 9 2 3 9 99 0 14 0 13 14 13 95 8 1 6 6 0 89 7 1 0 0 24 75 0 2 2 4 91 0 4 4 26 4 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 68 values pushed */\0120 12 4 11 4 12 11 112 0 11 10 4 11 10 110 0 10 14 4 10 14 110 0 5 0 1 3 5 1 99 0 3 0 9 2 3 9 99 0 14 0 13 14 13 95 8 1 6 6 0 89 7 1 0 0 25 75 0 2 2 4 91 0 4 4 26 4 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 24 values pushed */\01294 92 89 87 86 85 82 80 73 72 60 58 17 17 20 54 38 39 38 54 16 15 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 584;
}
);
note = uni0922094D0072;
},
{
glyphname = "ddha_rakar-deva";
layers = (
{
components = (
{
alignment = -1;
name = "rakar-deva";
transform = "{1, 0, 0, 1, 593, 0}";
},
{
alignment = -1;
name = "ddha-deva";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 584;
}
);
note = uni0922094D0930;
},
{
glyphname = "ddh_ddha-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"557 372.413 OFFCURVE",
"490.208 432 OFFCURVE",
"427 432 CURVE SMOOTH",
"363.727 432 OFFCURVE",
"290 386.073 OFFCURVE",
"290 333 CURVE SMOOTH",
"290 307.667 OFFCURVE",
"316.333 277.333 OFFCURVE",
"359 256 CURVE",
"345 252 OFFCURVE",
"328.333 250 OFFCURVE",
"309 250 CURVE SMOOTH",
"241.829 250 OFFCURVE",
"130 304.704 OFFCURVE",
"130 355 CURVE SMOOTH",
"130 383.667 OFFCURVE",
"139.5 405 OFFCURVE",
"158.5 419 CURVE SMOOTH",
"196.5 447 OFFCURVE",
"242.667 451 OFFCURVE",
"332 455 CURVE SMOOTH",
"382.667 456.333 OFFCURVE",
"420.5 460.333 OFFCURVE",
"445.5 467 CURVE SMOOTH",
"470.5 473.667 OFFCURVE",
"483 488.667 OFFCURVE",
"483 512 CURVE SMOOTH",
"483 536 OFFCURVE",
"463 568 OFFCURVE",
"423 608 CURVE",
"350 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"378 609 LINE",
"404.667 593 OFFCURVE",
"418 576.333 OFFCURVE",
"418 559 CURVE SMOOTH",
"418 542.333 OFFCURVE",
"408.5 531.833 OFFCURVE",
"389.5 527.5 CURVE SMOOTH",
"370.5 523.167 OFFCURVE",
"339.333 520.333 OFFCURVE",
"296 519 CURVE SMOOTH",
"250 518.333 OFFCURVE",
"212 515.5 OFFCURVE",
"182 510.5 CURVE SMOOTH",
"122 500.5 OFFCURVE",
"72 466.333 OFFCURVE",
"72 389 CURVE SMOOTH",
"72 355 OFFCURVE",
"86 323.833 OFFCURVE",
"114 295.5 CURVE SMOOTH",
"170 238.833 OFFCURVE",
"266.667 204 OFFCURVE",
"360 204 CURVE SMOOTH",
"380 204 OFFCURVE",
"399.333 206 OFFCURVE",
"418 210 CURVE",
"420 204 OFFCURVE",
"421 198 OFFCURVE",
"421 192 CURVE SMOOTH",
"421 176.667 OFFCURVE",
"411.667 167 OFFCURVE",
"393 163 CURVE SMOOTH",
"374.333 159 OFFCURVE",
"343.667 156.333 OFFCURVE",
"301 155 CURVE SMOOTH",
"254.333 154.333 OFFCURVE",
"215.667 151.5 OFFCURVE",
"185 146.5 CURVE SMOOTH",
"123.667 136.5 OFFCURVE",
"72 102 OFFCURVE",
"72 26 CURVE SMOOTH",
"72 -8 OFFCURVE",
"86 -39.167 OFFCURVE",
"114 -67.5 CURVE SMOOTH",
"170 -124.167 OFFCURVE",
"266.667 -159 OFFCURVE",
"360 -159 CURVE SMOOTH",
"432.79 -159 OFFCURVE",
"557 -103.653 OFFCURVE",
"557 -49 CURVE SMOOTH",
"557 8.055 OFFCURVE",
"489.783 68 OFFCURVE",
"427 68 CURVE SMOOTH",
"364.535 68 OFFCURVE",
"290 21.908 OFFCURVE",
"290 -29 CURVE SMOOTH",
"290 -57 OFFCURVE",
"316.333 -86 OFFCURVE",
"359 -106 CURVE",
"344.333 -111.333 OFFCURVE",
"327.667 -114 OFFCURVE",
"309 -114 CURVE SMOOTH",
"241.829 -114 OFFCURVE",
"130 -59.296 OFFCURVE",
"130 -9 CURVE SMOOTH",
"130 19.667 OFFCURVE",
"139.333 41.167 OFFCURVE",
"158 55.5 CURVE SMOOTH",
"195.333 84.167 OFFCURVE",
"244.667 88.333 OFFCURVE",
"330 91 CURVE SMOOTH",
"393.325 93.436 OFFCURVE",
"483 111.17 OFFCURVE",
"483 151 CURVE SMOOTH",
"483 170.333 OFFCURVE",
"472 193 OFFCURVE",
"450 219 CURVE",
"512.667 239 OFFCURVE",
"557 276.667 OFFCURVE",
"557 314 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"598 689 LINE",
"396 689 LINE",
"469 613 LINE",
"598 613 LINE"
);
},
{
closed = 1;
nodes = (
"369 273.667 OFFCURVE",
"356 287 OFFCURVE",
"356 299 CURVE SMOOTH",
"356 338.104 OFFCURVE",
"418.113 381 OFFCURVE",
"462 381 CURVE SMOOTH",
"486 381 OFFCURVE",
"506 365.667 OFFCURVE",
"506 347 CURVE SMOOTH",
"506 334.333 OFFCURVE",
"495.5 320.833 OFFCURVE",
"474.5 306.5 CURVE SMOOTH",
"453.5 292.167 OFFCURVE",
"425 279 OFFCURVE",
"389 267 CURVE"
);
},
{
closed = 1;
nodes = (
"356 -24.483 OFFCURVE",
"418.142 19 OFFCURVE",
"462 19 CURVE SMOOTH",
"486 19 OFFCURVE",
"506 2.667 OFFCURVE",
"506 -16 CURVE SMOOTH",
"506 -28.667 OFFCURVE",
"495.333 -42.167 OFFCURVE",
"474 -56.5 CURVE SMOOTH",
"452.667 -70.833 OFFCURVE",
"424.333 -83.667 OFFCURVE",
"389 -95 CURVE",
"369 -89.667 OFFCURVE",
"356 -76 OFFCURVE",
"356 -64 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */\012108 80 2 10 14 46 2 2 5 10 111 18 2 1 15 3 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 63 values pushed */\0120 6 0 9 11 6 9 99 0 11 0 14 10 11 14 99 0 10 0 5 4 10 5 99 0 4 0 0 2 4 0 99 0 1 0 3 1 3 95 12 1 7 7 8 89 16 13 2 8 8 24 75 0 2 2 15 91 0 15 15 26 15 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01224 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 63 values pushed */\0120 6 0 9 11 6 9 99 0 11 0 14 10 11 14 99 0 10 0 5 4 10 5 99 0 4 0 0 2 4 0 99 0 1 0 3 1 3 95 12 1 7 7 8 89 16 13 2 8 8 25 75 0 2 2 15 91 0 15 15 26 15 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 61 values pushed */\0120 6 0 9 11 6 9 99 0 11 0 14 10 11 14 99 0 10 0 5 4 10 5 99 0 4 0 0 2 4 0 99 0 2 0 15 1 2 15 99 0 1 0 3 1 3 95 12 1 7 7 8 89 16 13 2 8 8 25 7 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 30 values pushed */\01292 92 118 116 102 100 92 95 92 95 94 93 88 86 79 77 71 69 17 20 38 37 38 38 39 38 39 17 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 584;
}
);
note = uni0922094D0922;
},
{
glyphname = "ddh_ya-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"351.271 294 OFFCURVE",
"285 232.355 OFFCURVE",
"285 172 CURVE SMOOTH",
"285 133.333 OFFCURVE",
"316 93.333 OFFCURVE",
"368 64 CURVE",
"356.667 55.333 OFFCURVE",
"334 51 OFFCURVE",
"300 51 CURVE SMOOTH",
"270 51 OFFCURVE",
"240.667 60.667 OFFCURVE",
"212 80 CURVE SMOOTH",
"154.667 118.667 OFFCURVE",
"115 186.333 OFFCURVE",
"115 253 CURVE SMOOTH",
"115 316.301 OFFCURVE",
"200.709 397 OFFCURVE",
"259 397 CURVE SMOOTH",
"401 398 LINE SMOOTH",
"442.333 399.333 OFFCURVE",
"478 430.333 OFFCURVE",
"478 469 CURVE SMOOTH",
"478 519.667 OFFCURVE",
"455 569 OFFCURVE",
"423 609 CURVE",
"350 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"385 609 LINE",
"415 570.333 OFFCURVE",
"430 539 OFFCURVE",
"430 515 CURVE SMOOTH",
"430 491 OFFCURVE",
"409 470 OFFCURVE",
"381 470 CURVE SMOOTH",
"221 469 LINE SMOOTH",
"191.667 469 OFFCURVE",
"164.167 462.333 OFFCURVE",
"138.5 449 CURVE SMOOTH",
"87.167 422.333 OFFCURVE",
"54 375 OFFCURVE",
"54 323 CURVE SMOOTH",
"54 266.333 OFFCURVE",
"67.5 212.667 OFFCURVE",
"94.5 162 CURVE SMOOTH",
"148.5 60.667 OFFCURVE",
"246.333 -7 OFFCURVE",
"357 -7 CURVE SMOOTH",
"387.667 -7 OFFCURVE",
"418.167 1 OFFCURVE",
"448.5 17 CURVE SMOOTH",
"509.167 49 OFFCURVE",
"551 104 OFFCURVE",
"551 156 CURVE SMOOTH",
"551 221.966 OFFCURVE",
"480.883 294 OFFCURVE",
"415 294 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1396 17 LINE",
"1380 -3 OFFCURVE",
"1362.333 -13 OFFCURVE",
"1343 -13 CURVE SMOOTH",
"1290.514 -13 OFFCURVE",
"1162 59.72 OFFCURVE",
"1162 111 CURVE SMOOTH",
"1162 609 LINE",
"1082 689 LINE",
"396 689 LINE",
"469 609 LINE",
"598 609 LINE",
"1080 609 LINE",
"1080 336 LINE",
"1036 244 OFFCURVE",
"952.667 181 OFFCURVE",
"874 181 CURVE SMOOTH",
"831.333 181 OFFCURVE",
"787.667 210.667 OFFCURVE",
"761 256 CURVE",
"831.813 256 OFFCURVE",
"939 323.3 OFFCURVE",
"939 382 CURVE SMOOTH",
"939 405.333 OFFCURVE",
"930.833 429.333 OFFCURVE",
"914.5 454 CURVE SMOOTH",
"881.833 503.333 OFFCURVE",
"827.667 540 OFFCURVE",
"781 540 CURVE SMOOTH",
"761 540 OFFCURVE",
"725 535.333 OFFCURVE",
"673 526 CURVE SMOOTH",
"627.667 518 OFFCURVE",
"599.333 514 OFFCURVE",
"588 514 CURVE SMOOTH",
"560 514 OFFCURVE",
"544.333 517.333 OFFCURVE",
"523 528 CURVE",
"523 471 LINE",
"538.333 452.333 OFFCURVE",
"560 443 OFFCURVE",
"588 443 CURVE SMOOTH",
"606 443 OFFCURVE",
"644.667 448.667 OFFCURVE",
"704 460 CURVE SMOOTH",
"770.667 472 OFFCURVE",
"812 478 OFFCURVE",
"828 478 CURVE SMOOTH",
"857.333 478 OFFCURVE",
"882 456 OFFCURVE",
"882 428 CURVE SMOOTH",
"882 379.617 OFFCURVE",
"810.383 335 OFFCURVE",
"753 335 CURVE SMOOTH",
"733.667 335 OFFCURVE",
"717.667 339 OFFCURVE",
"705 347 CURVE",
"685 332 LINE",
"731.667 202.667 OFFCURVE",
"828 118 OFFCURVE",
"928 118 CURVE SMOOTH",
"984 118 OFFCURVE",
"1044.667 153 OFFCURVE",
"1082 209 CURVE",
"1082 162 LINE SMOOTH",
"1082 138.667 OFFCURVE",
"1101.667 109.167 OFFCURVE",
"1141 73.5 CURVE SMOOTH",
"1219.667 2.167 OFFCURVE",
"1339 -61 OFFCURVE",
"1407 -61 CURVE SMOOTH",
"1429.667 -61 OFFCURVE",
"1450.667 -50.667 OFFCURVE",
"1470 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"1208 609 LINE",
"1278 609 LINE",
"1278 689 LINE",
"1128 689 LINE"
);
},
{
closed = 1;
nodes = (
"370.333 91.333 OFFCURVE",
"356 111 OFFCURVE",
"356 131 CURVE SMOOTH",
"356 179.273 OFFCURVE",
"411.898 239 OFFCURVE",
"457 239 CURVE SMOOTH",
"478.333 239 OFFCURVE",
"496 222 OFFCURVE",
"496 202 CURVE SMOOTH",
"496 159.333 OFFCURVE",
"458.333 115.333 OFFCURVE",
"397 78 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */\01280 1 12 13 79 1 1 10 101 64 2 9 4 63 1 6 9 57 1 15 21 131 42 2 5 8 114 1 0 5 7 74 107 1 2 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 82 values pushed */\0120 13 0 10 1 13 10 99 0 12 0 11 4 12 11 99 0 1 0 4 9 1 4 99 0 9 0 14 21 9 14 99 22 1 6 0 21 15 6 21 99 0 15 0 8 5 15 8 99 0 18 0 7 18 7 95 23 20 16 3 2 2 3 89 19 17 2 3 3 24 75 0 5 5 0 91 0 0 0 26 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 82 values pushed */\0120 13 0 10 1 13 10 99 0 12 0 11 4 12 11 99 0 1 0 4 9 1 4 99 0 9 0 14 21 9 14 99 22 1 6 0 21 15 6 21 99 0 15 0 8 5 15 8 99 0 18 0 7 18 7 95 23 20 16 3 2 2 3 89 19 17 2 3 3 25 75 0 5 5 0 91 0 0 0 26 0 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 49 values pushed */\012115 115 0 0 125 123 115 118 115 118 117 116 113 111 106 105 104 102 99 97 95 94 88 86 84 82 78 76 74 72 67 65 61 59 53 51 0 49 0 48 38 54 17 20 54 38 24 6 26 \012CALL[ ]	/* CallFunction */";
};
width = 1264;
}
);
note = uni0922094D092F;
},
{
glyphname = "nna_rakar-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"893 17 LINE",
"881 -3 OFFCURVE",
"860.667 -13 OFFCURVE",
"842 -13 CURVE SMOOTH",
"789.32 -13 OFFCURVE",
"659 59.451 OFFCURVE",
"659 111 CURVE SMOOTH",
"659 609 LINE",
"580 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"87 609 LINE",
"67 557.667 OFFCURVE",
"57 499.333 OFFCURVE",
"57 434 CURVE SMOOTH",
"57 405.333 OFFCURVE",
"68.5 373.167 OFFCURVE",
"91.5 337.5 CURVE SMOOTH",
"137.5 266.167 OFFCURVE",
"213.333 209 OFFCURVE",
"276 209 CURVE SMOOTH",
"337.772 209 OFFCURVE",
"415 322.268 OFFCURVE",
"415 388 CURVE SMOOTH",
"415 460.667 OFFCURVE",
"389.667 534.333 OFFCURVE",
"339 609 CURVE",
"577 609 LINE",
"577 289 LINE",
"302 59 LINE SMOOTH",
"290 49 OFFCURVE",
"278.667 44 OFFCURVE",
"268 44 CURVE SMOOTH",
"254 44 OFFCURVE",
"242 49.667 OFFCURVE",
"232 61 CURVE",
"216 39 LINE",
"256.667 1.667 OFFCURVE",
"289 -17 OFFCURVE",
"313 -17 CURVE SMOOTH",
"329 -17 OFFCURVE",
"347.333 -6.667 OFFCURVE",
"378 20 CURVE SMOOTH",
"577 196 LINE",
"577 166 LINE SMOOTH",
"577 140 OFFCURVE",
"595.833 108.833 OFFCURVE",
"633.5 72.5 CURVE SMOOTH",
"708.833 -0.167 OFFCURVE",
"826.667 -61 OFFCURVE",
"904 -61 CURVE SMOOTH",
"926.667 -61 OFFCURVE",
"947.667 -50.667 OFFCURVE",
"967 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"705 609 LINE",
"776 609 LINE",
"776 689 LINE",
"625 689 LINE"
);
},
{
closed = 1;
nodes = (
"352 393.099 OFFCURVE",
"283.56 272 OFFCURVE",
"226 272 CURVE SMOOTH",
"184.581 272 OFFCURVE",
"135 328.009 OFFCURVE",
"135 371 CURVE SMOOTH",
"135 457 OFFCURVE",
"148.333 536.333 OFFCURVE",
"175 609 CURVE",
"295 609 LINE",
"332.333 555.667 OFFCURVE",
"352 503.667 OFFCURVE",
"352 461 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */\01219 1 11 3 14 7 2 2 4 45 13 2 7 2 3 74 37 1 3 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 41 values pushed */\0120 11 0 4 2 11 4 99 0 7 0 0 7 0 95 10 12 9 5 4 3 3 6 89 8 1 6 6 24 75 0 2 2 1 91 0 1 1 26 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 41 values pushed */\0120 11 0 4 2 11 4 99 0 7 0 0 7 0 95 10 12 9 5 4 3 3 6 89 8 1 6 6 25 75 0 2 2 1 91 0 1 1 26 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 39 values pushed */\0120 11 0 4 2 11 4 99 0 2 0 1 0 2 1 99 0 7 0 0 7 0 95 10 12 9 5 4 3 3 6 89 8 1 6 6 25 3 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 22 values pushed */\01246 46 60 58 53 52 46 49 46 49 20 37 17 21 37 19 35 39 33 13 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 756;
}
);
note = uni0923094D0930;
},
{
glyphname = "t_r-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"323 609 LINE",
"323 689 LINE"
);
},
{
closed = 1;
nodes = (
"424 382 LINE",
"338.667 466 OFFCURVE",
"249 512 OFFCURVE",
"173 512 CURVE SMOOTH",
"125.667 512 OFFCURVE",
"73.667 496.333 OFFCURVE",
"17 465 CURVE",
"69 390 LINE",
"124.333 431.333 OFFCURVE",
"179 452 OFFCURVE",
"233 452 CURVE SMOOTH",
"283.667 452 OFFCURVE",
"343.667 421.667 OFFCURVE",
"401 367 CURVE",
"313.667 289 OFFCURVE",
"214.667 229.667 OFFCURVE",
"104 189 CURVE",
"167 119 LINE",
"259.667 157.667 OFFCURVE",
"345.333 214.667 OFFCURVE",
"424 290 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */\01214 1 2 3 1 74 20 19 13 8 6 5 6 2 71 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 18 values pushed */\0120 3 0 2 3 2 95 0 1 1 0 89 0 0 0 24 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 18 values pushed */\0120 3 0 2 3 2 95 0 1 1 0 89 0 0 0 25 1 76 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 7 values pushed */\01235 39 17 16 4 6 24 \012CALL[ ]	/* CallFunction */";
};
width = 308;
}
);
note = uni0924094D0072;
},
{
glyphname = "ta_rakar-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"740 17 LINE",
"728 -3 OFFCURVE",
"711.333 -13 OFFCURVE",
"690 -13 CURVE SMOOTH",
"639.773 -13 OFFCURVE",
"507 55.776 OFFCURVE",
"507 111 CURVE SMOOTH",
"507 609 LINE",
"427 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"424 609 LINE",
"424 382 LINE",
"338.667 466 OFFCURVE",
"249 512 OFFCURVE",
"173 512 CURVE SMOOTH",
"125.667 512 OFFCURVE",
"73.667 496.333 OFFCURVE",
"17 465 CURVE",
"69 390 LINE",
"124.333 431.333 OFFCURVE",
"179 452 OFFCURVE",
"233 452 CURVE SMOOTH",
"283.667 452 OFFCURVE",
"343.667 421.667 OFFCURVE",
"401 367 CURVE",
"313.667 289 OFFCURVE",
"214.667 229.667 OFFCURVE",
"104 189 CURVE",
"167 119 LINE",
"259.667 157.667 OFFCURVE",
"345.333 214.667 OFFCURVE",
"424 290 CURVE",
"424 166 LINE SMOOTH",
"424 135.333 OFFCURVE",
"443.833 102.167 OFFCURVE",
"483.5 66.5 CURVE SMOOTH",
"562.833 -4.833 OFFCURVE",
"685.333 -61 OFFCURVE",
"752 -61 CURVE SMOOTH",
"773.333 -61 OFFCURVE",
"794.333 -50.667 OFFCURVE",
"815 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"553 609 LINE",
"623 609 LINE",
"623 689 LINE",
"472 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */\01218 1 1 2 35 23 17 12 10 9 7 7 5 1 2 74 28 1 3 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 29 values pushed */\0120 2 0 1 5 2 1 99 0 5 0 0 5 0 95 8 7 2 3 3 4 89 6 1 4 4 24 3 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 29 values pushed */\0120 2 0 1 5 2 1 99 0 5 0 0 5 0 95 8 7 2 3 3 4 89 6 1 4 4 25 3 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 16 values pushed */\01236 36 36 39 36 39 19 37 17 19 35 43 33 9 6 27 \012CALL[ ]	/* CallFunction */";
};
width = 610;
}
);
note = uni0924094D0930;
},
{
glyphname = "t_ta-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"569 609 LINE",
"569 410 LINE",
"510.333 462 OFFCURVE",
"439.333 489 OFFCURVE",
"366 489 CURVE SMOOTH",
"284.667 489 OFFCURVE",
"192.333 486 OFFCURVE",
"89 480 CURVE SMOOTH",
"13 476 LINE",
"67 395 LINE",
"194 413 LINE",
"159.333 374.333 OFFCURVE",
"142 334.667 OFFCURVE",
"142 294 CURVE SMOOTH",
"142 244.667 OFFCURVE",
"156.5 195 OFFCURVE",
"185.5 145 CURVE SMOOTH",
"243.5 45 OFFCURVE",
"338.333 -28 OFFCURVE",
"417 -28 CURVE SMOOTH",
"441 -28 OFFCURVE",
"460.333 -20.667 OFFCURVE",
"475 -6 CURVE",
"432 46 LINE",
"416 32.667 OFFCURVE",
"394.667 24 OFFCURVE",
"376 24 CURVE SMOOTH",
"353.333 24 OFFCURVE",
"328.667 35.667 OFFCURVE",
"302 59 CURVE SMOOTH",
"248.667 105.667 OFFCURVE",
"207 180.333 OFFCURVE",
"207 235 CURVE SMOOTH",
"207 269.667 OFFCURVE",
"217 301.333 OFFCURVE",
"237 330 CURVE SMOOTH",
"277 387.333 OFFCURVE",
"348.667 423 OFFCURVE",
"430 423 CURVE SMOOTH",
"482 423 OFFCURVE",
"534.333 400.667 OFFCURVE",
"569 366 CURVE",
"569 166 LINE SMOOTH",
"569 137.333 OFFCURVE",
"588.333 105 OFFCURVE",
"627 69 CURVE SMOOTH",
"704.333 -3 OFFCURVE",
"823.333 -61 OFFCURVE",
"894 -61 CURVE SMOOTH",
"918 -61 OFFCURVE",
"939.333 -50.667 OFFCURVE",
"958 -30 CURVE",
"886 17 LINE",
"871.333 -3 OFFCURVE",
"853.667 -13 OFFCURVE",
"833 -13 CURVE SMOOTH",
"781.134 -13 OFFCURVE",
"651 59.656 OFFCURVE",
"651 111 CURVE SMOOTH",
"651 609 LINE",
"571 689 LINE"
);
},
{
closed = 1;
nodes = (
"617 689 LINE",
"696 609 LINE",
"767 609 LINE",
"767 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */\01248 41 40 31 17 5 4 3 32 9 2 1 4 10 1 2 5 3 74 2 1 7 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 36 values pushed */\0120 6 0 3 4 6 3 99 0 4 0 5 2 4 5 99 0 1 0 2 1 2 95 9 1 7 7 0 89 8 1 0 0 24 7 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 36 values pushed */\0120 6 0 3 4 6 3 99 0 4 0 5 2 4 5 99 0 1 0 2 1 2 95 9 1 7 7 0 89 8 1 0 0 25 7 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\01254 53 17 19 71 36 38 38 35 37 16 10 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 753;
}
);
note = uni0924094D0924;
},
{
glyphname = "t_t-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"467 609 LINE",
"467 689 LINE",
"-14 689 LINE",
"-14 609 LINE"
);
},
{
closed = 1;
nodes = (
"272.333 489 OFFCURVE",
"78.333 483 OFFCURVE",
"13 479 CURVE",
"67 398 LINE",
"190 408 LINE",
"158 374 OFFCURVE",
"142 336 OFFCURVE",
"142 294 CURVE SMOOTH",
"142 248 OFFCURVE",
"155.667 199.667 OFFCURVE",
"183 149 CURVE SMOOTH",
"237.667 47.667 OFFCURVE",
"331.667 -28 OFFCURVE",
"417 -28 CURVE SMOOTH",
"442.333 -28 OFFCURVE",
"467.667 -20.667 OFFCURVE",
"481 -6 CURVE",
"426 46 LINE",
"408 31.333 OFFCURVE",
"391.333 24 OFFCURVE",
"376 24 CURVE SMOOTH",
"353.333 24 OFFCURVE",
"328.667 35.667 OFFCURVE",
"302 59 CURVE SMOOTH",
"248.667 105.667 OFFCURVE",
"207 180.333 OFFCURVE",
"207 235 CURVE SMOOTH",
"207 269.667 OFFCURVE",
"217 301.333 OFFCURVE",
"237 330 CURVE SMOOTH",
"277 387.333 OFFCURVE",
"348.667 423 OFFCURVE",
"430 423 CURVE SMOOTH",
"482 423 OFFCURVE",
"534.333 400.667 OFFCURVE",
"569 366 CURVE",
"569 410 LINE",
"505 466 OFFCURVE",
"447 489 OFFCURVE",
"327 489 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */\01231 30 20 7 6 5 3 2 21 1 4 3 2 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 27 values pushed */\0126 1 5 0 2 3 5 2 99 0 3 0 4 3 4 95 0 0 0 1 89 0 1 1 24 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 27 values pushed */\0126 1 5 0 2 3 5 2 99 0 3 0 4 3 4 95 0 0 0 1 89 0 1 1 25 0 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\0124 4 4 35 4 32 36 38 38 17 16 7 6 25 \012CALL[ ]	/* CallFunction */";
};
width = 453;
}
);
note = uni0924094D0924094D;
},
{
glyphname = "t_ya-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"1074 17 LINE",
"1059.333 -3 OFFCURVE",
"1042.333 -13 OFFCURVE",
"1023 -13 CURVE SMOOTH",
"970.94 -13 OFFCURVE",
"839 59.388 OFFCURVE",
"839 111 CURVE SMOOTH",
"839 609 LINE",
"760 689 LINE",
"511 689 LINE",
"591 609 LINE",
"758 609 LINE",
"758 371 LINE",
"708.667 305.667 OFFCURVE",
"637 265 OFFCURVE",
"561 265 CURVE SMOOTH",
"499.667 265 OFFCURVE",
"444.667 310.333 OFFCURVE",
"422 373 CURVE",
"526 373 OFFCURVE",
"593 418 OFFCURVE",
"593 486 CURVE SMOOTH",
"593 528.667 OFFCURVE",
"579.667 574.333 OFFCURVE",
"545 609 CURVE SMOOTH",
"466 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"481 609 LINE SMOOTH",
"518.333 609 OFFCURVE",
"541 577.333 OFFCURVE",
"541 540 CURVE SMOOTH",
"541 486.667 OFFCURVE",
"485.667 451 OFFCURVE",
"423 451 CURVE",
"352.333 480.333 OFFCURVE",
"321 488 OFFCURVE",
"261 488 CURVE SMOOTH",
"224.333 488 OFFCURVE",
"190.167 479.667 OFFCURVE",
"158.5 463 CURVE SMOOTH",
"95.167 429.667 OFFCURVE",
"55 369 OFFCURVE",
"55 301 CURVE SMOOTH",
"55 253.667 OFFCURVE",
"69 204.167 OFFCURVE",
"97 152.5 CURVE SMOOTH",
"153 49.167 OFFCURVE",
"246.333 -29 OFFCURVE",
"333 -29 CURVE SMOOTH",
"361 -29 OFFCURVE",
"386 -21.667 OFFCURVE",
"398 -7 CURVE",
"334 45 LINE",
"320.667 30.333 OFFCURVE",
"303.333 23 OFFCURVE",
"290 23 CURVE SMOOTH",
"266.667 23 OFFCURVE",
"241.667 34.667 OFFCURVE",
"215 58 CURVE SMOOTH",
"161.667 104.667 OFFCURVE",
"121 181 OFFCURVE",
"121 237 CURVE SMOOTH",
"121 273 OFFCURVE",
"130.667 305 OFFCURVE",
"150 333 CURVE SMOOTH",
"188.667 389 OFFCURVE",
"255.333 420 OFFCURVE",
"322 420 CURVE SMOOTH",
"340 420 OFFCURVE",
"355.333 418.333 OFFCURVE",
"368 415 CURVE",
"405.333 291 OFFCURVE",
"505.333 199 OFFCURVE",
"616 199 CURVE SMOOTH",
"666.667 199 OFFCURVE",
"718 220.333 OFFCURVE",
"758 259 CURVE",
"758 166 LINE SMOOTH",
"758 140 OFFCURVE",
"776.833 108.833 OFFCURVE",
"814.5 72.5 CURVE SMOOTH",
"889.833 -0.167 OFFCURVE",
"1006.667 -61 OFFCURVE",
"1084 -61 CURVE SMOOTH",
"1106.667 -61 OFFCURVE",
"1127.667 -50.667 OFFCURVE",
"1147 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"806 689 LINE",
"885 609 LINE",
"955 609 LINE",
"955 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */\01262 1 10 9 6 1 1 10 25 1 3 1 74 26 2 13 3 75 1 0 4 5 74 67 1 7 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 54 values pushed */\0120 5 0 2 9 5 2 99 0 6 0 9 10 6 9 99 0 10 0 1 3 10 1 99 0 3 0 4 0 3 4 99 0 13 0 0 13 0 95 15 11 2 7 7 8 89 14 12 2 8 8 24 7 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 54 values pushed */\0120 5 0 2 9 5 2 99 0 6 0 9 10 6 9 99 0 10 0 1 3 10 1 99 0 3 0 4 0 3 4 99 0 13 0 0 13 0 95 15 11 2 7 7 8 89 14 12 2 8 8 25 7 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 26 values pushed */\01279 78 77 76 73 71 66 65 64 63 60 58 56 55 17 36 18 38 37 38 35 38 32 16 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 942;
}
);
note = uni0924094D092F;
},
{
glyphname = "tha_rakar-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"822 17 LINE",
"808.667 -1.667 OFFCURVE",
"788.667 -13 OFFCURVE",
"770 -13 CURVE SMOOTH",
"718.134 -13 OFFCURVE",
"588 59.656 OFFCURVE",
"588 111 CURVE SMOOTH",
"588 609 LINE",
"508 689 LINE",
"347 689 LINE",
"411 609 LINE",
"505 609 LINE",
"505 400 LINE",
"447.667 298.667 OFFCURVE",
"353.333 234 OFFCURVE",
"264 234 CURVE SMOOTH",
"194.667 234 OFFCURVE",
"130.667 279 OFFCURVE",
"108 343 CURVE",
"127.333 335 OFFCURVE",
"147.667 331 OFFCURVE",
"169 331 CURVE SMOOTH",
"203.667 331 OFFCURVE",
"235.667 341.167 OFFCURVE",
"265 361.5 CURVE SMOOTH",
"323.667 402.167 OFFCURVE",
"360 474 OFFCURVE",
"360 554 CURVE SMOOTH",
"360 580.667 OFFCURVE",
"350.5 608 OFFCURVE",
"331.5 636 CURVE SMOOTH",
"293.5 692 OFFCURVE",
"229.667 732 OFFCURVE",
"171 732 CURVE SMOOTH",
"106.018 732 OFFCURVE",
"38 668.611 OFFCURVE",
"38 607 CURVE SMOOTH",
"38 547.776 OFFCURVE",
"145.071 460 OFFCURVE",
"202 460 CURVE SMOOTH",
"223.333 460 OFFCURVE",
"246 469 OFFCURVE",
"262 485 CURVE",
"266 485 LINE",
"258 435.667 OFFCURVE",
"202.333 399 OFFCURVE",
"133 399 CURVE SMOOTH",
"99 399 OFFCURVE",
"69.667 406 OFFCURVE",
"45 420 CURVE",
"79.667 286.667 OFFCURVE",
"175.333 188 OFFCURVE",
"286 172 CURVE",
"194 95 LINE SMOOTH",
"182 85 OFFCURVE",
"170.667 80 OFFCURVE",
"160 80 CURVE SMOOTH",
"146 80 OFFCURVE",
"134 85.667 OFFCURVE",
"124 97 CURVE",
"108 75 LINE",
"148.667 37.667 OFFCURVE",
"181 19 OFFCURVE",
"205 19 CURVE SMOOTH",
"220.333 19 OFFCURVE",
"242 31.333 OFFCURVE",
"270 56 CURVE SMOOTH",
"505 264 LINE",
"505 168 LINE SMOOTH",
"505 140.667 OFFCURVE",
"524 108.833 OFFCURVE",
"562 72.5 CURVE SMOOTH",
"638 -0.167 OFFCURVE",
"756.667 -61 OFFCURVE",
"834 -61 CURVE SMOOTH",
"856.667 -61 OFFCURVE",
"877.333 -50.667 OFFCURVE",
"896 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"634 609 LINE",
"704 609 LINE",
"704 689 LINE",
"554 689 LINE"
);
},
{
closed = 1;
nodes = (
"143.667 520 OFFCURVE",
"115 542.667 OFFCURVE",
"115 572 CURVE SMOOTH",
"115 621.181 OFFCURVE",
"169.569 677 OFFCURVE",
"220 677 CURVE SMOOTH",
"252 677 OFFCURVE",
"277 654 OFFCURVE",
"277 626 CURVE SMOOTH",
"277 575.672 OFFCURVE",
"223.834 520 OFFCURVE",
"177 520 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */\01226 1 4 14 54 21 2 3 4 48 1 6 3 7 1 7 6 18 13 2 2 7 12 1 1 2 67 1 10 1 7 74 59 1 8 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 66 values pushed */\0120 7 6 2 6 7 2 112 16 1 14 0 4 3 14 4 99 0 3 0 6 7 3 6 99 0 10 0 0 10 0 95 0 13 13 5 91 0 5 5 31 75 15 12 2 8 8 9 89 11 1 9 9 24 75 0 2 2 1 92 0 1 1 26 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01224 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 66 values pushed */\0120 7 6 2 6 7 2 112 16 1 14 0 4 3 14 4 99 0 3 0 6 7 3 6 99 0 10 0 0 10 0 95 0 5 5 13 91 0 13 13 25 75 15 12 2 8 8 9 89 11 1 9 9 25 75 0 2 2 1 92 0 1 1 26 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01242 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 64 values pushed */\0120 7 6 2 6 7 2 112 16 1 14 0 4 3 14 4 99 0 3 0 6 7 3 6 99 0 2 0 1 10 2 1 100 0 10 0 0 10 0 95 0 5 5 13 91 0 13 13 25 75 15 12 2 8 8 9 89 11 1 9 9 25 8 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 62 values pushed */\0120 7 6 2 6 7 2 112 0 5 0 13 8 5 13 99 16 1 14 0 4 3 14 4 99 0 3 0 6 7 3 6 99 0 2 0 1 10 2 1 100 0 10 0 0 10 0 95 15 12 2 8 8 9 89 11 1 9 9 25 8 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 32 values pushed */\01272 72 68 68 72 85 72 84 79 77 68 71 68 71 70 69 65 63 58 57 19 35 38 38 37 38 35 38 33 17 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 690;
}
);
note = uni0925094D0930;
},
{
glyphname = "da_rakar-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"596 11 LINE",
"576 -7 OFFCURVE",
"559.667 -16 OFFCURVE",
"547 -16 CURVE SMOOTH",
"512.333 -16 OFFCURVE",
"462.333 33 OFFCURVE",
"421 105 CURVE",
"465 127.667 OFFCURVE",
"494 162.333 OFFCURVE",
"494 197 CURVE SMOOTH",
"494 250.333 OFFCURVE",
"446.333 300 OFFCURVE",
"389 300 CURVE SMOOTH",
"359.667 300 OFFCURVE",
"338 276.333 OFFCURVE",
"338 247 CURVE SMOOTH",
"338 218.333 OFFCURVE",
"344.667 193 OFFCURVE",
"358 171 CURVE",
"325.333 152.333 OFFCURVE",
"289.333 143 OFFCURVE",
"250 143 CURVE SMOOTH",
"174.937 143 OFFCURVE",
"109 198.555 OFFCURVE",
"109 267 CURVE SMOOTH",
"109 313.667 OFFCURVE",
"153 355 OFFCURVE",
"213 367 CURVE SMOOTH",
"358 400 LINE SMOOTH",
"419.333 413.333 OFFCURVE",
"449 443.667 OFFCURVE",
"449 493 CURVE SMOOTH",
"449 536.333 OFFCURVE",
"433 575 OFFCURVE",
"401 609 CURVE SMOOTH",
"322 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"354 609 LINE",
"378 583.667 OFFCURVE",
"394 550.333 OFFCURVE",
"394 529 CURVE SMOOTH",
"394 501.667 OFFCURVE",
"375.333 483.667 OFFCURVE",
"338 475 CURVE SMOOTH",
"161 437 LINE SMOOTH",
"93 421 OFFCURVE",
"46 374.667 OFFCURVE",
"46 324 CURVE SMOOTH",
"46 286.667 OFFCURVE",
"55.833 250.667 OFFCURVE",
"75.5 216 CURVE SMOOTH",
"114.833 146.667 OFFCURVE",
"187 97.333 OFFCURVE",
"271 84 CURVE",
"108 -53 LINE SMOOTH",
"96.667 -62.333 OFFCURVE",
"85.333 -67 OFFCURVE",
"74 -67 CURVE SMOOTH",
"60.667 -67 OFFCURVE",
"48.667 -61.667 OFFCURVE",
"38 -51 CURVE",
"22 -73 LINE",
"62.667 -110.333 OFFCURVE",
"95 -129 OFFCURVE",
"119 -129 CURVE SMOOTH",
"133.667 -129 OFFCURVE",
"155.333 -116.333 OFFCURVE",
"184 -91 CURVE SMOOTH",
"390 91 LINE",
"448.667 -7.667 OFFCURVE",
"526.333 -70 OFFCURVE",
"589 -70 CURVE SMOOTH",
"619 -70 OFFCURVE",
"643 -60.667 OFFCURVE",
"661 -42 CURVE"
);
},
{
closed = 1;
nodes = (
"446 609 LINE",
"555 609 LINE",
"555 689 LINE",
"369 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */\01248 1 5 6 64 59 16 5 4 7 5 11 1 2 7 10 1 1 0 4 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 44 values pushed */\0120 6 3 5 3 6 5 112 0 5 7 3 5 7 110 0 7 0 0 1 7 0 99 0 2 0 1 2 1 95 10 9 2 3 3 4 89 8 1 4 4 24 3 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 44 values pushed */\0120 6 3 5 3 6 5 112 0 5 7 3 5 7 110 0 7 0 0 1 7 0 99 0 2 0 1 2 1 95 10 9 2 3 3 4 89 8 1 4 4 25 3 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 18 values pushed */\01265 65 65 68 65 68 19 39 37 45 17 31 35 36 33 11 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 541;
}
);
note = uni0926094D0930;
},
{
glyphname = "d_ga-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"596 11 LINE",
"576 -7 OFFCURVE",
"559.667 -16 OFFCURVE",
"547 -16 CURVE SMOOTH",
"512.333 -16 OFFCURVE",
"462.333 33 OFFCURVE",
"421 105 CURVE",
"465 127.667 OFFCURVE",
"494 162.333 OFFCURVE",
"494 197 CURVE SMOOTH",
"494 250.333 OFFCURVE",
"446.333 300 OFFCURVE",
"389 300 CURVE SMOOTH",
"359.667 300 OFFCURVE",
"338 276.333 OFFCURVE",
"338 247 CURVE SMOOTH",
"338 218.333 OFFCURVE",
"344.667 193 OFFCURVE",
"358 171 CURVE",
"325.333 152.333 OFFCURVE",
"289.333 143 OFFCURVE",
"250 143 CURVE SMOOTH",
"174.937 143 OFFCURVE",
"109 198.555 OFFCURVE",
"109 267 CURVE SMOOTH",
"109 313.667 OFFCURVE",
"153 355 OFFCURVE",
"213 367 CURVE SMOOTH",
"358 400 LINE SMOOTH",
"419.333 413.333 OFFCURVE",
"449 443.667 OFFCURVE",
"449 493 CURVE SMOOTH",
"449 536.333 OFFCURVE",
"433 575 OFFCURVE",
"401 609 CURVE SMOOTH",
"322 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"354 609 LINE",
"378 583.667 OFFCURVE",
"394 550.333 OFFCURVE",
"394 529 CURVE SMOOTH",
"394 501.667 OFFCURVE",
"375.333 483.667 OFFCURVE",
"338 475 CURVE SMOOTH",
"161 437 LINE SMOOTH",
"93 421 OFFCURVE",
"46 374.667 OFFCURVE",
"46 324 CURVE SMOOTH",
"46 288 OFFCURVE",
"55.333 253.167 OFFCURVE",
"74 219.5 CURVE SMOOTH",
"111.333 152.167 OFFCURVE",
"178.667 102 OFFCURVE",
"260 86 CURVE",
"262 73.333 OFFCURVE",
"263 61.667 OFFCURVE",
"263 51 CURVE SMOOTH",
"263 -24.243 OFFCURVE",
"215.692 -91 OFFCURVE",
"152 -91 CURVE SMOOTH",
"133.333 -91 OFFCURVE",
"117 -75.333 OFFCURVE",
"117 -58 CURVE SMOOTH",
"117 -27.333 OFFCURVE",
"151.667 10 OFFCURVE",
"181 10 CURVE SMOOTH",
"189.667 10 OFFCURVE",
"199.667 4.333 OFFCURVE",
"211 -7 CURVE",
"223 7 LINE",
"201.667 35 OFFCURVE",
"167.667 52 OFFCURVE",
"137 52 CURVE SMOOTH",
"94.333 52 OFFCURVE",
"54 14.333 OFFCURVE",
"54 -27 CURVE SMOOTH",
"54 -82.928 OFFCURVE",
"139.221 -132 OFFCURVE",
"209 -132 CURVE SMOOTH",
"262.805 -132 OFFCURVE",
"316 -69.783 OFFCURVE",
"316 -13 CURVE SMOOTH",
"316 13.667 OFFCURVE",
"310.667 44.667 OFFCURVE",
"300 80 CURVE",
"317 80 LINE SMOOTH",
"345 80 OFFCURVE",
"369.333 84 OFFCURVE",
"390 92 CURVE",
"448.667 -6.667 OFFCURVE",
"526.333 -70 OFFCURVE",
"589 -70 CURVE SMOOTH",
"619 -70 OFFCURVE",
"643 -60.667 OFFCURVE",
"661 -42 CURVE"
);
},
{
closed = 1;
nodes = (
"446 609 LINE",
"555 609 LINE",
"555 689 LINE",
"369 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */\01271 1 8 9 82 5 2 1 8 87 1 4 3 25 24 2 10 4 4 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 58 values pushed */\0120 9 6 8 6 9 8 112 0 3 1 4 1 3 4 112 0 8 0 1 3 8 1 99 0 10 0 0 5 10 0 99 0 5 0 2 5 2 95 13 12 2 6 6 7 89 11 1 7 7 24 75 0 4 4 26 4 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01245 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 58 values pushed */\0120 9 6 8 6 9 8 112 0 3 1 4 1 3 4 112 0 8 0 1 3 8 1 99 0 10 0 0 5 10 0 99 0 5 0 2 5 2 95 13 12 2 6 6 7 89 11 1 7 7 25 75 0 4 4 26 4 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 60 values pushed */\0120 9 6 8 6 9 8 112 0 3 1 4 1 3 4 112 0 4 10 1 4 10 110 0 8 0 1 3 8 1 99 0 10 0 0 5 10 0 99 0 5 0 2 5 2 95 13 12 2 6 6 7 89 11 1 7 7 25 6 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 27 values pushed */\01288 88 88 91 88 91 90 89 86 84 77 75 70 68 55 54 53 52 36 36 37 37 35 33 14 6 26 \012CALL[ ]	/* CallFunction */";
};
width = 544;
}
);
note = uni0926094D0917;
},
{
glyphname = "d_gha-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"699 11 LINE",
"680.333 -7 OFFCURVE",
"664.333 -16 OFFCURVE",
"651 -16 CURVE SMOOTH",
"616.333 -16 OFFCURVE",
"564.667 33 OFFCURVE",
"526 105 CURVE",
"570 127.667 OFFCURVE",
"597 162.333 OFFCURVE",
"597 197 CURVE SMOOTH",
"597 251.667 OFFCURVE",
"550.333 300 OFFCURVE",
"493 300 CURVE SMOOTH",
"465 300 OFFCURVE",
"442 275 OFFCURVE",
"442 247 CURVE SMOOTH",
"442 218.333 OFFCURVE",
"448.667 193 OFFCURVE",
"462 171 CURVE",
"429.333 152.333 OFFCURVE",
"393.333 143 OFFCURVE",
"354 143 CURVE SMOOTH",
"278.35 143 OFFCURVE",
"213 198.573 OFFCURVE",
"213 267 CURVE SMOOTH",
"213 313.667 OFFCURVE",
"258 356.333 OFFCURVE",
"318 367 CURVE SMOOTH",
"455 396 LINE SMOOTH",
"511 408 OFFCURVE",
"554 443.667 OFFCURVE",
"554 477 CURVE SMOOTH",
"554 516.333 OFFCURVE",
"537.333 560.333 OFFCURVE",
"504 609 CURVE",
"427 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"460 609 LINE",
"482.667 583.667 OFFCURVE",
"497 550.333 OFFCURVE",
"497 529 CURVE SMOOTH",
"497 503.667 OFFCURVE",
"475.333 483 OFFCURVE",
"442 475 CURVE SMOOTH",
"266 437 LINE SMOOTH",
"198 421 OFFCURVE",
"149 374.667 OFFCURVE",
"149 324 CURVE SMOOTH",
"149 296.667 OFFCURVE",
"154.667 269.667 OFFCURVE",
"166 243 CURVE",
"107.333 212.333 OFFCURVE",
"65 169.667 OFFCURVE",
"65 123 CURVE SMOOTH",
"65 72.333 OFFCURVE",
"115 31.667 OFFCURVE",
"179 21 CURVE",
"164.333 3 OFFCURVE",
"157 -13.333 OFFCURVE",
"157 -28 CURVE SMOOTH",
"157 -82.336 OFFCURVE",
"253.095 -122 OFFCURVE",
"321 -122 CURVE SMOOTH",
"402.333 -122 OFFCURVE",
"473.333 -44.667 OFFCURVE",
"512 62 CURVE",
"568 -19.333 OFFCURVE",
"638 -70 OFFCURVE",
"694 -70 CURVE SMOOTH",
"723.333 -70 OFFCURVE",
"747.333 -60.667 OFFCURVE",
"766 -42 CURVE"
);
},
{
closed = 1;
nodes = (
"550 609 LINE",
"659 609 LINE",
"659 689 LINE",
"473 689 LINE"
);
},
{
closed = 1;
nodes = (
"245 -83 OFFCURVE",
"228 -70.667 OFFCURVE",
"228 -52 CURVE SMOOTH",
"228 -21.333 OFFCURVE",
"265 16.667 OFFCURVE",
"309 42 CURVE",
"260 93 LINE",
"234.667 70.333 OFFCURVE",
"201.333 54 OFFCURVE",
"176 54 CURVE SMOOTH",
"153.333 54 OFFCURVE",
"134 72 OFFCURVE",
"134 92 CURVE SMOOTH",
"134 122.667 OFFCURVE",
"163.667 155 OFFCURVE",
"205 179 CURVE",
"255.667 119 OFFCURVE",
"334.667 80 OFFCURVE",
"420 80 CURVE SMOOTH",
"432 80 LINE",
"394.667 -13.333 OFFCURVE",
"331.667 -83 OFFCURVE",
"265 -83 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */\01278 51 20 3 4 5 87 62 2 9 4 5 1 10 9 88 67 14 3 6 10 4 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 54 values pushed */\0120 5 2 4 2 5 4 112 0 10 9 6 9 10 6 112 0 4 0 9 10 4 9 99 0 6 0 0 11 6 0 99 13 1 11 0 1 11 1 95 12 8 2 2 2 3 89 7 1 3 3 24 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 54 values pushed */\0120 5 2 4 2 5 4 112 0 10 9 6 9 10 6 112 0 4 0 9 10 4 9 99 0 6 0 0 11 6 0 99 13 1 11 0 1 11 1 95 12 8 2 2 2 3 89 7 1 3 3 25 2 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 33 values pushed */\01272 72 68 68 72 94 72 93 85 83 76 74 68 71 68 71 70 69 66 64 57 55 50 48 35 34 33 32 36 33 14 6 22 \012CALL[ ]	/* CallFunction */";
};
width = 645;
}
);
note = uni0926094D0918;
},
{
glyphname = "d_da-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-14 609 LINE",
"-14 689 LINE",
"263 689 LINE",
"334 609 LINE",
"368 561.667 OFFCURVE",
"385 530.333 OFFCURVE",
"385 515 CURVE SMOOTH",
"385 496.333 OFFCURVE",
"374.167 482.833 OFFCURVE",
"352.5 474.5 CURVE SMOOTH",
"330.833 466.167 OFFCURVE",
"297.667 458 OFFCURVE",
"253 450 CURVE SMOOTH",
"205 442 OFFCURVE",
"168.667 433 OFFCURVE",
"144 423 CURVE SMOOTH",
"119.333 413 OFFCURVE",
"107 396.333 OFFCURVE",
"107 373 CURVE SMOOTH",
"107 342.333 OFFCURVE",
"137.333 319 OFFCURVE",
"176 319 CURVE SMOOTH",
"204 319 OFFCURVE",
"252 334 OFFCURVE",
"320 364 CURVE",
"363 299 LINE",
"244.333 261.667 OFFCURVE",
"157 200 OFFCURVE",
"157 144 CURVE SMOOTH",
"157 110.667 OFFCURVE",
"191 85 OFFCURVE",
"231 85 CURVE SMOOTH",
"285.667 85 OFFCURVE",
"338 103 OFFCURVE",
"378 135 CURVE",
"370.667 147.667 OFFCURVE",
"367 164.333 OFFCURVE",
"367 185 CURVE SMOOTH",
"367 210.333 OFFCURVE",
"386 230 OFFCURVE",
"410 230 CURVE SMOOTH",
"463.333 230 OFFCURVE",
"507 194.333 OFFCURVE",
"507 149 CURVE SMOOTH",
"507 126.333 OFFCURVE",
"481.333 100 OFFCURVE",
"440 80 CURVE",
"466.667 21.333 OFFCURVE",
"509 -16 OFFCURVE",
"545 -16 CURVE SMOOTH",
"553 -16 OFFCURVE",
"563.667 -11.667 OFFCURVE",
"577 -3 CURVE",
"641 -62 LINE",
"623 -72 OFFCURVE",
"603.333 -77 OFFCURVE",
"582 -77 CURVE SMOOTH",
"527.333 -77 OFFCURVE",
"461 -23 OFFCURVE",
"409 65 CURVE",
"366.333 43 OFFCURVE",
"329.667 32 OFFCURVE",
"299 32 CURVE SMOOTH",
"268.333 32 OFFCURVE",
"236.167 39.833 OFFCURVE",
"202.5 55.5 CURVE SMOOTH",
"135.167 86.833 OFFCURVE",
"85 138.333 OFFCURVE",
"85 181 CURVE SMOOTH",
"85 214.333 OFFCURVE",
"120.333 256 OFFCURVE",
"175 284 CURVE",
"91 308 OFFCURVE",
"33 361 OFFCURVE",
"33 417 CURVE SMOOTH",
"33 473.614 OFFCURVE",
"162.397 510.41 OFFCURVE",
"233 521 CURVE SMOOTH",
"268.333 527 OFFCURVE",
"293 532 OFFCURVE",
"307 536 CURVE SMOOTH",
"321 540 OFFCURVE",
"328 545.667 OFFCURVE",
"328 553 CURVE SMOOTH",
"328 566.333 OFFCURVE",
"307 593 OFFCURVE",
"287 609 CURVE"
);
},
{
closed = 1;
nodes = (
"551 609 LINE",
"379 609 LINE",
"308 689 LINE",
"551 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */\01254 1 5 7 53 13 2 3 5 44 1 4 3 33 22 2 0 4 28 1 2 0 27 1 1 2 6 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 45 values pushed */\0120 5 7 3 7 5 3 112 0 3 4 7 3 4 110 0 4 0 0 2 4 0 99 0 2 0 1 2 1 95 11 9 10 3 7 7 6 89 8 1 6 6 24 7 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 45 values pushed */\0120 5 7 3 7 5 3 112 0 3 4 7 3 4 110 0 4 0 0 2 4 0 99 0 2 0 1 2 1 95 11 9 10 3 7 7 6 89 8 1 6 6 25 7 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 31 values pushed */\01271 71 0 0 71 74 71 74 73 72 0 70 0 70 69 68 57 55 48 46 40 38 31 29 26 24 21 19 12 6 20 \012CALL[ ]	/* CallFunction */";
};
width = 538;
}
);
note = uni0926094D0926;
},
{
glyphname = "d_dha_rakar-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"829 11 LINE",
"811 -7 OFFCURVE",
"795 -16 OFFCURVE",
"781 -16 CURVE SMOOTH",
"746.333 -16 OFFCURVE",
"696.333 33 OFFCURVE",
"655 105 CURVE",
"699 127.667 OFFCURVE",
"727 162.333 OFFCURVE",
"727 197 CURVE SMOOTH",
"727 251.667 OFFCURVE",
"680.667 300 OFFCURVE",
"622 300 CURVE SMOOTH",
"594 300 OFFCURVE",
"572 275 OFFCURVE",
"572 247 CURVE SMOOTH",
"572 219 OFFCURVE",
"578.333 193.667 OFFCURVE",
"591 171 CURVE",
"558.333 152.333 OFFCURVE",
"522.333 143 OFFCURVE",
"483 143 CURVE SMOOTH",
"407.937 143 OFFCURVE",
"342 198.555 OFFCURVE",
"342 267 CURVE SMOOTH",
"342 313.667 OFFCURVE",
"388 356.333 OFFCURVE",
"448 367 CURVE SMOOTH",
"584 396 LINE SMOOTH",
"640 408 OFFCURVE",
"684 443.667 OFFCURVE",
"684 477 CURVE SMOOTH",
"684 516.333 OFFCURVE",
"667.333 560.333 OFFCURVE",
"634 609 CURVE",
"557 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"589 609 LINE",
"611.667 583.667 OFFCURVE",
"627 550.333 OFFCURVE",
"627 529 CURVE SMOOTH",
"627 503.667 OFFCURVE",
"605 483 OFFCURVE",
"573 475 CURVE SMOOTH",
"395 437 LINE SMOOTH",
"325.667 421 OFFCURVE",
"279 374.667 OFFCURVE",
"279 324 CURVE SMOOTH",
"279 284 OFFCURVE",
"290.333 245.667 OFFCURVE",
"313 209 CURVE SMOOTH",
"358.333 135.667 OFFCURVE",
"441 85.333 OFFCURVE",
"533 80 CURVE",
"526 72 LINE",
"468 13 LINE SMOOTH",
"424 -29.667 OFFCURVE",
"385.667 -53 OFFCURVE",
"343 -53 CURVE SMOOTH",
"311 -53 OFFCURVE",
"281 -34.667 OFFCURVE",
"281 -8 CURVE SMOOTH",
"281 29.333 OFFCURVE",
"314 66.333 OFFCURVE",
"358 89 CURVE",
"301 148 LINE",
"274.333 124 OFFCURVE",
"243.333 107 OFFCURVE",
"218 107 CURVE SMOOTH",
"163.333 107 OFFCURVE",
"119 137.333 OFFCURVE",
"119 184 CURVE SMOOTH",
"119 214.667 OFFCURVE",
"158.667 254 OFFCURVE",
"188 254 CURVE SMOOTH",
"200 254 OFFCURVE",
"206 247 OFFCURVE",
"206 233 CURVE SMOOTH",
"206 230.333 OFFCURVE",
"204.167 226.5 OFFCURVE",
"200.5 221.5 CURVE SMOOTH",
"196.833 216.5 OFFCURVE",
"191.333 211 OFFCURVE",
"184 205 CURVE",
"215 176 LINE",
"236.333 185.333 OFFCURVE",
"253 201 OFFCURVE",
"253 221 CURVE SMOOTH",
"253 262.314 OFFCURVE",
"189.401 313 OFFCURVE",
"144 313 CURVE SMOOTH",
"101.408 313 OFFCURVE",
"50 263.507 OFFCURVE",
"50 221 CURVE SMOOTH",
"50 195.667 OFFCURVE",
"59 172 OFFCURVE",
"77 150 CURVE SMOOTH",
"113 106 OFFCURVE",
"174 77 OFFCURVE",
"230 77 CURVE",
"211.333 57 OFFCURVE",
"203 43.333 OFFCURVE",
"203 22 CURVE SMOOTH",
"203 -28.67 OFFCURVE",
"305.331 -89.368 OFFCURVE",
"364 -94 CURVE",
"265 -197 LINE SMOOTH",
"255.667 -207 OFFCURVE",
"244.333 -212 OFFCURVE",
"231 -212 CURVE SMOOTH",
"218.333 -212 OFFCURVE",
"206.333 -206.333 OFFCURVE",
"195 -195 CURVE",
"179 -217 LINE",
"217.667 -251.667 OFFCURVE",
"252 -272 OFFCURVE",
"276 -272 CURVE SMOOTH",
"296.667 -272 OFFCURVE",
"318.333 -260 OFFCURVE",
"341 -236 CURVE SMOOTH",
"631 78 LINE",
"688.333 -12.667 OFFCURVE",
"764.333 -70 OFFCURVE",
"823 -70 CURVE SMOOTH",
"853 -70 OFFCURVE",
"877 -60.667 OFFCURVE",
"895 -42 CURVE"
);
},
{
closed = 1;
nodes = (
"679 609 LINE",
"789 609 LINE",
"789 689 LINE",
"603 689 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01246 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 28 values pushed */\01299 54 40 39 4 11 5 110 55 5 3 3 6 115 1 13 3 17 12 2 2 0 11 1 1 2 5 74 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 31 values pushed */\01299 54 40 39 4 11 5 110 55 2 8 6 5 1 3 8 115 1 13 3 17 12 2 2 0 11 1 1 2 6 74 \012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 80 values pushed */\0120 4 9 12 9 4 12 112 0 12 5 9 12 5 110 0 5 11 9 5 11 110 0 7 13 0 13 7 0 112 0 2 0 1 0 2 1 112 0 11 6 3 11 87 0 6 8 1 3 13 6 3 99 0 13 0 0 2 13 0 99 16 15 2 9 9 10 89 14 1 10 10 24 75 0 1 1 27 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01224 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 80 values pushed */\0120 4 9 12 9 4 12 112 0 12 5 9 12 5 110 0 5 11 9 5 11 110 0 7 13 0 13 7 0 112 0 2 0 1 0 2 1 112 0 11 6 3 11 87 0 6 8 1 3 13 6 3 99 0 13 0 0 2 13 0 99 16 15 2 9 9 10 89 14 1 10 10 25 75 0 1 1 27 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01246 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 79 values pushed */\0120 4 9 12 9 4 12 112 0 12 5 9 12 5 110 0 5 11 9 5 11 110 0 7 13 0 13 7 0 112 0 2 0 1 0 2 1 112 0 1 1 113 0 11 6 3 11 87 0 6 8 1 3 13 6 3 99 0 13 0 0 2 13 0 99 16 15 2 9 9 10 89 14 1 10 10 25 9 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 80 values pushed */\0120 4 9 12 9 4 12 112 0 12 5 9 12 5 110 0 5 11 9 5 11 110 0 7 13 0 13 7 0 112 0 2 0 1 0 2 1 112 0 1 1 113 0 11 0 8 3 11 8 99 0 6 0 3 13 6 3 99 0 13 0 0 2 13 0 99 16 15 2 9 9 10 89 14 1 10 10 25 9 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 30 values pushed */\012116 116 116 119 116 119 118 117 114 112 105 103 98 96 83 82 81 80 20 40 36 43 38 25 36 36 33 17 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 776;
}
);
note = uni0926094D0927094D0930;
},
{
glyphname = "d_na-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"596 11 LINE",
"576 -7 OFFCURVE",
"559.667 -16 OFFCURVE",
"547 -16 CURVE SMOOTH",
"512.333 -16 OFFCURVE",
"462.333 33 OFFCURVE",
"421 105 CURVE",
"465 127.667 OFFCURVE",
"494 162.333 OFFCURVE",
"494 197 CURVE SMOOTH",
"494 250.333 OFFCURVE",
"446.333 300 OFFCURVE",
"389 300 CURVE SMOOTH",
"359.667 300 OFFCURVE",
"338 276.333 OFFCURVE",
"338 247 CURVE SMOOTH",
"338 218.333 OFFCURVE",
"344.667 193 OFFCURVE",
"358 171 CURVE",
"325.333 152.333 OFFCURVE",
"289.333 143 OFFCURVE",
"250 143 CURVE SMOOTH",
"174.937 143 OFFCURVE",
"109 198.555 OFFCURVE",
"109 267 CURVE SMOOTH",
"109 313.667 OFFCURVE",
"153 355 OFFCURVE",
"213 367 CURVE SMOOTH",
"358 400 LINE SMOOTH",
"419.333 413.333 OFFCURVE",
"449 443.667 OFFCURVE",
"449 493 CURVE SMOOTH",
"449 536.333 OFFCURVE",
"433 575 OFFCURVE",
"401 609 CURVE SMOOTH",
"322 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"354 609 LINE",
"378 583.667 OFFCURVE",
"394 550.333 OFFCURVE",
"394 529 CURVE SMOOTH",
"394 501.667 OFFCURVE",
"375.333 483.667 OFFCURVE",
"338 475 CURVE SMOOTH",
"161 437 LINE SMOOTH",
"93 421 OFFCURVE",
"46 374.667 OFFCURVE",
"46 324 CURVE SMOOTH",
"46 230.667 OFFCURVE",
"111 142 OFFCURVE",
"207 102 CURVE",
"64 52 LINE SMOOTH",
"35.333 42.667 OFFCURVE",
"21 27.333 OFFCURVE",
"21 6 CURVE SMOOTH",
"21 -40.884 OFFCURVE",
"102.629 -91 OFFCURVE",
"156 -91 CURVE SMOOTH",
"180 -91 OFFCURVE",
"192 -83.333 OFFCURVE",
"192 -62 CURVE SMOOTH",
"192 -46 OFFCURVE",
"179 -14.333 OFFCURVE",
"163 7 CURVE",
"390 90 LINE",
"450 -8.667 OFFCURVE",
"526.333 -70 OFFCURVE",
"589 -70 CURVE SMOOTH",
"619 -70 OFFCURVE",
"643 -60.667 OFFCURVE",
"661 -42 CURVE"
);
},
{
closed = 1;
nodes = (
"446 609 LINE",
"555 609 LINE",
"555 689 LINE",
"369 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */\01250 1 4 5 66 61 19 6 5 5 6 4 2 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 42 values pushed */\0120 5 2 4 2 5 4 112 0 4 6 2 4 6 110 0 1 0 1 115 0 6 0 0 1 6 0 99 9 8 2 2 2 3 89 7 1 3 3 24 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 42 values pushed */\0120 5 2 4 2 5 4 112 0 4 6 2 4 6 110 0 1 0 1 115 0 6 0 0 1 6 0 99 9 8 2 2 2 3 89 7 1 3 3 25 2 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 23 values pushed */\01267 67 67 70 67 70 69 68 65 63 56 54 49 47 34 33 32 31 40 33 10 6 22 \012CALL[ ]	/* CallFunction */";
};
width = 540;
}
);
note = uni0926094D0928;
},
{
glyphname = "d_ba-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"596 11 LINE",
"576 -7 OFFCURVE",
"559.667 -16 OFFCURVE",
"547 -16 CURVE SMOOTH",
"512.333 -16 OFFCURVE",
"462.333 33 OFFCURVE",
"421 105 CURVE",
"465 127.667 OFFCURVE",
"494 162.333 OFFCURVE",
"494 197 CURVE SMOOTH",
"494 250.333 OFFCURVE",
"446.333 300 OFFCURVE",
"389 300 CURVE SMOOTH",
"359.667 300 OFFCURVE",
"338 276.333 OFFCURVE",
"338 247 CURVE SMOOTH",
"338 218.333 OFFCURVE",
"344.667 193 OFFCURVE",
"358 171 CURVE",
"325.333 152.333 OFFCURVE",
"289.333 143 OFFCURVE",
"250 143 CURVE SMOOTH",
"174.937 143 OFFCURVE",
"109 198.555 OFFCURVE",
"109 267 CURVE SMOOTH",
"109 313.667 OFFCURVE",
"153 355 OFFCURVE",
"213 367 CURVE SMOOTH",
"358 400 LINE SMOOTH",
"419.333 413.333 OFFCURVE",
"449 443.667 OFFCURVE",
"449 493 CURVE SMOOTH",
"449 536.333 OFFCURVE",
"433 575 OFFCURVE",
"401 609 CURVE SMOOTH",
"322 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"354 609 LINE",
"378 583.667 OFFCURVE",
"394 550.333 OFFCURVE",
"394 529 CURVE SMOOTH",
"394 501.667 OFFCURVE",
"375.333 483.667 OFFCURVE",
"338 475 CURVE SMOOTH",
"161 437 LINE SMOOTH",
"93 421 OFFCURVE",
"46 374.667 OFFCURVE",
"46 324 CURVE SMOOTH",
"46 260 OFFCURVE",
"77 196.333 OFFCURVE",
"129 151 CURVE",
"67.667 125.667 OFFCURVE",
"14 72 OFFCURVE",
"14 24 CURVE SMOOTH",
"14 1.333 OFFCURVE",
"24.833 -20.333 OFFCURVE",
"46.5 -41 CURVE SMOOTH",
"89.833 -82.333 OFFCURVE",
"161 -111 OFFCURVE",
"217 -111 CURVE SMOOTH",
"291.667 -111 OFFCURVE",
"363 -41.667 OFFCURVE",
"407 65 CURVE",
"463 -19 OFFCURVE",
"533 -70 OFFCURVE",
"589 -70 CURVE SMOOTH",
"619 -70 OFFCURVE",
"643 -60.667 OFFCURVE",
"661 -42 CURVE"
);
},
{
closed = 1;
nodes = (
"446 609 LINE",
"555 609 LINE",
"555 689 LINE",
"369 689 LINE"
);
},
{
closed = 1;
nodes = (
"139 71 LINE",
"155 87 OFFCURVE",
"174.333 98.667 OFFCURVE",
"197 106 CURVE",
"233.667 88.667 OFFCURVE",
"273.667 80 OFFCURVE",
"317 80 CURVE SMOOTH",
"334 80 LINE",
"322.667 50.667 OFFCURVE",
"302.333 23.667 OFFCURVE",
"273 -1 CURVE"
);
},
{
closed = 1;
nodes = (
"119.333 -67 OFFCURVE",
"79 -45 OFFCURVE",
"79 -13 CURVE SMOOTH",
"79 5.667 OFFCURVE",
"89.667 25.667 OFFCURVE",
"111 47 CURVE",
"246 -28 LINE",
"224 -54 OFFCURVE",
"196 -67 OFFCURVE",
"162 -67 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */\01246 15 2 4 5 71 57 2 9 4 77 74 73 62 5 5 6 9 76 1 10 6 4 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 46 values pushed */\0120 5 2 4 2 5 4 112 0 4 0 9 6 4 9 99 0 6 0 0 1 6 0 99 12 1 10 0 1 10 1 95 11 8 2 2 2 3 89 7 1 3 3 24 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 46 values pushed */\0120 5 2 4 2 5 4 112 0 4 0 9 6 4 9 99 0 6 0 0 1 6 0 99 12 1 10 0 1 10 1 95 11 8 2 2 2 3 89 7 1 3 3 25 2 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 31 values pushed */\01275 75 63 63 75 82 75 81 70 68 63 66 63 66 65 64 61 59 52 50 45 43 30 29 28 27 36 33 13 6 22 \012CALL[ ]	/* CallFunction */";
};
width = 541;
}
);
note = uni0926094D092C;
},
{
glyphname = "d_bha-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"809 11 LINE",
"790.333 -7 OFFCURVE",
"774 -16 OFFCURVE",
"760 -16 CURVE SMOOTH",
"725.333 -16 OFFCURVE",
"674.333 33 OFFCURVE",
"637 105 CURVE",
"678.333 127.667 OFFCURVE",
"706 162.333 OFFCURVE",
"706 197 CURVE SMOOTH",
"706 251.667 OFFCURVE",
"660.667 300 OFFCURVE",
"602 300 CURVE SMOOTH",
"574 300 OFFCURVE",
"552 275 OFFCURVE",
"552 247 CURVE SMOOTH",
"552 219.667 OFFCURVE",
"558.667 194.333 OFFCURVE",
"572 171 CURVE",
"539.333 152.333 OFFCURVE",
"503 143 OFFCURVE",
"463 143 CURVE SMOOTH",
"387.337 143 OFFCURVE",
"323 198.198 OFFCURVE",
"323 267 CURVE SMOOTH",
"323 313.667 OFFCURVE",
"368 356.333 OFFCURVE",
"428 367 CURVE SMOOTH",
"565 396 LINE SMOOTH",
"621 408 OFFCURVE",
"664 443.667 OFFCURVE",
"664 477 CURVE SMOOTH",
"664 517.667 OFFCURVE",
"647.333 561.667 OFFCURVE",
"614 609 CURVE",
"537 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"569 609 LINE",
"591.667 583.667 OFFCURVE",
"607 550.333 OFFCURVE",
"607 529 CURVE SMOOTH",
"607 503.667 OFFCURVE",
"585 483 OFFCURVE",
"553 475 CURVE SMOOTH",
"375 437 LINE SMOOTH",
"307 421 OFFCURVE",
"259 374.667 OFFCURVE",
"259 324 CURVE SMOOTH",
"259 290 OFFCURVE",
"267.333 257 OFFCURVE",
"284 225 CURVE SMOOTH",
"317.333 161 OFFCURVE",
"377.667 112.333 OFFCURVE",
"451 91 CURVE",
"335 42 LINE",
"243 169 LINE SMOOTH",
"197.667 233 OFFCURVE",
"153.333 265 OFFCURVE",
"110 265 CURVE SMOOTH",
"63.333 265 OFFCURVE",
"25 233 OFFCURVE",
"25 189 CURVE SMOOTH",
"25 123.667 OFFCURVE",
"90 81.333 OFFCURVE",
"170 80 CURVE",
"176 103 LINE",
"129.333 103 OFFCURVE",
"96 118 OFFCURVE",
"96 150 CURVE SMOOTH",
"96 176.667 OFFCURVE",
"120 197 OFFCURVE",
"148 197 CURVE SMOOTH",
"172 197 OFFCURVE",
"201.333 170.333 OFFCURVE",
"224 137 CURVE SMOOTH",
"300 26 LINE",
"260 8.667 OFFCURVE",
"233.167 -3.833 OFFCURVE",
"219.5 -11.5 CURVE SMOOTH",
"205.833 -19.167 OFFCURVE",
"199 -26.333 OFFCURVE",
"199 -33 CURVE SMOOTH",
"199 -76.406 OFFCURVE",
"319.815 -110 OFFCURVE",
"374 -110 CURVE SMOOTH",
"387.333 -110 OFFCURVE",
"396 -100.667 OFFCURVE",
"396 -86 CURVE SMOOTH",
"396 -80.667 OFFCURVE",
"394 -73.167 OFFCURVE",
"390 -63.5 CURVE SMOOTH",
"386 -53.833 OFFCURVE",
"378.333 -37.667 OFFCURVE",
"367 -15 CURVE",
"604 90 LINE",
"662.667 -8.667 OFFCURVE",
"740.333 -70 OFFCURVE",
"803 -70 CURVE SMOOTH",
"832.333 -70 OFFCURVE",
"856.333 -60.667 OFFCURVE",
"875 -42 CURVE"
);
},
{
closed = 1;
nodes = (
"660 609 LINE",
"777 609 LINE",
"777 689 LINE",
"583 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */\01273 1 8 2 84 1 3 8 40 5 2 4 3 89 39 19 6 4 10 4 4 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 59 values pushed */\0120 9 6 5 6 9 5 112 0 8 2 3 2 8 3 112 0 1 0 1 115 0 5 0 2 8 5 2 99 0 3 0 4 10 3 4 99 0 10 0 0 1 10 0 99 13 12 2 6 6 7 89 11 1 7 7 24 6 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 59 values pushed */\0120 9 6 5 6 9 5 112 0 8 2 3 2 8 3 112 0 1 0 1 115 0 5 0 2 8 5 2 99 0 3 0 4 10 3 4 99 0 10 0 0 1 10 0 99 13 12 2 6 6 7 89 11 1 7 7 25 6 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 27 values pushed */\01290 90 90 93 90 93 92 91 88 86 79 77 72 70 57 56 55 54 36 17 20 41 40 33 14 6 26 \012CALL[ ]	/* CallFunction */";
};
width = 763;
}
);
note = uni0926094D092D;
},
{
glyphname = "d_ma-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"683 609 LINE",
"602 689 LINE",
"298 689 LINE",
"372 609 LINE",
"600 609 LINE",
"600 263 LINE",
"447 212 LINE",
"419.667 259.333 OFFCURVE",
"399 291.333 OFFCURVE",
"385 308 CURVE SMOOTH",
"371 324.667 OFFCURVE",
"357.667 333 OFFCURVE",
"345 333 CURVE SMOOTH",
"323.667 333 OFFCURVE",
"310 324.333 OFFCURVE",
"282 307 CURVE SMOOTH",
"247.333 284.333 OFFCURVE",
"224 271 OFFCURVE",
"184 271 CURVE SMOOTH",
"140 271 OFFCURVE",
"104 294.333 OFFCURVE",
"104 333 CURVE SMOOTH",
"104 385.52 OFFCURVE",
"175.38 402.473 OFFCURVE",
"249 419 CURVE SMOOTH",
"293.667 429 OFFCURVE",
"326.833 438.833 OFFCURVE",
"348.5 448.5 CURVE SMOOTH",
"370.167 458.167 OFFCURVE",
"381 473 OFFCURVE",
"381 493 CURVE SMOOTH",
"381 525 OFFCURVE",
"360.667 561 OFFCURVE",
"326 609 CURVE",
"251 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"283 609 LINE",
"307 581 OFFCURVE",
"319 560 OFFCURVE",
"319 536 CURVE SMOOTH",
"319 527.333 OFFCURVE",
"311.333 520.167 OFFCURVE",
"296 514.5 CURVE SMOOTH",
"280.667 508.833 OFFCURVE",
"256 502.333 OFFCURVE",
"222 495 CURVE SMOOTH",
"155.341 479.183 OFFCURVE",
"33 434.57 OFFCURVE",
"33 381 CURVE SMOOTH",
"33 356.333 OFFCURVE",
"43.667 331.5 OFFCURVE",
"65 306.5 CURVE SMOOTH",
"107.667 256.5 OFFCURVE",
"178 220 OFFCURVE",
"234 220 CURVE SMOOTH",
"277.333 220 OFFCURVE",
"316.333 236.333 OFFCURVE",
"351 269 CURVE",
"395 195 LINE",
"359 183.667 OFFCURVE",
"329.167 172.333 OFFCURVE",
"305.5 161 CURVE SMOOTH",
"281.833 149.667 OFFCURVE",
"270 137.333 OFFCURVE",
"270 124 CURVE SMOOTH",
"270 80.549 OFFCURVE",
"401.383 52 OFFCURVE",
"461 52 CURVE SMOOTH",
"479.667 52 OFFCURVE",
"494 65 OFFCURVE",
"494 81 CURVE SMOOTH",
"494 94.333 OFFCURVE",
"487.667 115.667 OFFCURVE",
"475 145 CURVE",
"601 189 LINE",
"601 165 LINE SMOOTH",
"601 137 OFFCURVE",
"620.5 105.167 OFFCURVE",
"659.5 69.5 CURVE SMOOTH",
"737.5 -1.833 OFFCURVE",
"857.667 -61 OFFCURVE",
"927 -61 CURVE SMOOTH",
"949.667 -61 OFFCURVE",
"970.667 -50.667 OFFCURVE",
"990 -30 CURVE",
"918 17 LINE",
"903.333 -3 OFFCURVE",
"885.667 -13 OFFCURVE",
"865 -13 CURVE SMOOTH",
"813.164 -13 OFFCURVE",
"683 57.428 OFFCURVE",
"683 111 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"799 609 LINE",
"799 689 LINE",
"648 689 LINE",
"727 609 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */\01272 29 2 3 6 71 28 16 15 4 2 3 7 1 0 2 8 1 1 0 4 74 0 1 4 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 46 values pushed */\0120 7 4 6 4 7 6 112 0 2 3 0 3 2 0 112 0 6 0 3 2 6 3 99 0 0 0 1 0 1 95 10 8 2 4 4 5 89 11 9 2 5 5 24 4 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 46 values pushed */\0120 7 4 6 4 7 6 112 0 2 3 0 3 2 0 112 0 6 0 3 2 6 3 99 0 0 0 1 0 1 95 10 8 2 4 4 5 89 11 9 2 5 5 25 4 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 18 values pushed */\01280 79 78 77 76 75 20 36 45 17 29 40 41 35 36 12 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 786;
}
);
note = uni0926094D092E;
},
{
glyphname = "d_ya-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"597 609 LINE",
"516 689 LINE",
"305 689 LINE",
"376 609 LINE",
"514 609 LINE",
"514 280 LINE",
"430 185.333 OFFCURVE",
"329.333 131 OFFCURVE",
"240 131 CURVE SMOOTH",
"206.667 131 OFFCURVE",
"178 152 OFFCURVE",
"178 176 CURVE SMOOTH",
"178 224 OFFCURVE",
"256 275.667 OFFCURVE",
"364 309 CURVE",
"325 381 LINE",
"270.333 355.667 OFFCURVE",
"197.333 334 OFFCURVE",
"176 334 CURVE SMOOTH",
"138.667 334 OFFCURVE",
"107 356.667 OFFCURVE",
"107 382 CURVE SMOOTH",
"107 400 OFFCURVE",
"118.333 413.167 OFFCURVE",
"141 421.5 CURVE SMOOTH",
"163.667 429.833 OFFCURVE",
"198.333 438.333 OFFCURVE",
"245 447 CURVE SMOOTH",
"291 455.667 OFFCURVE",
"325.167 464.167 OFFCURVE",
"347.5 472.5 CURVE SMOOTH",
"369.833 480.833 OFFCURVE",
"381 493.667 OFFCURVE",
"381 511 CURVE SMOOTH",
"381 541 OFFCURVE",
"364.333 573.667 OFFCURVE",
"331 609 CURVE SMOOTH",
"260 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"290 609 LINE",
"311.333 587.667 OFFCURVE",
"322 571.333 OFFCURVE",
"322 560 CURVE SMOOTH",
"322 548.667 OFFCURVE",
"313.333 540.333 OFFCURVE",
"296 535 CURVE SMOOTH",
"278.667 529.667 OFFCURVE",
"250.333 523.667 OFFCURVE",
"211 517 CURVE SMOOTH",
"146.851 505.337 OFFCURVE",
"34 471.889 OFFCURVE",
"34 424 CURVE SMOOTH",
"34 374.667 OFFCURVE",
"91.333 324.667 OFFCURVE",
"174 302 CURVE",
"131.333 276.667 OFFCURVE",
"104 243 OFFCURVE",
"104 211 CURVE SMOOTH",
"104 154.761 OFFCURVE",
"234.109 81 OFFCURVE",
"302 81 CURVE SMOOTH",
"379.333 81 OFFCURVE",
"455.333 115.333 OFFCURVE",
"518 178 CURVE",
"518 158 LINE SMOOTH",
"518 135.333 OFFCURVE",
"536.5 106.333 OFFCURVE",
"573.5 71 CURVE SMOOTH",
"647.5 0.333 OFFCURVE",
"762.333 -61 OFFCURVE",
"841 -61 CURVE SMOOTH",
"864.333 -61 OFFCURVE",
"885.333 -50.667 OFFCURVE",
"904 -30 CURVE",
"830 17 LINE",
"814 -3 OFFCURVE",
"796.667 -13 OFFCURVE",
"778 -13 CURVE SMOOTH",
"724.47 -13 OFFCURVE",
"597 61.319 OFFCURVE",
"597 111 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"713 609 LINE",
"713 689 LINE",
"562 689 LINE",
"643 609 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */\01255 1 5 3 65 56 25 15 4 6 5 7 1 0 2 8 1 1 0 4 74 0 1 3 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 38 values pushed */\0120 5 3 6 3 5 6 112 0 6 0 2 0 6 2 99 0 0 0 1 0 1 95 9 7 2 3 3 4 89 10 8 2 4 4 24 3 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 38 values pushed */\0120 5 3 6 3 5 6 112 0 6 0 2 0 6 2 99 0 0 0 1 0 1 95 9 7 2 3 3 4 89 10 8 2 4 4 25 3 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 22 values pushed */\01273 72 71 70 69 68 67 66 63 61 53 51 40 39 38 37 38 35 36 11 6 23 \012CALL[ ]	/* CallFunction */";
};
width = 698;
}
);
note = uni0926094D092F;
},
{
glyphname = "d_va-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"596 11 LINE",
"576 -7 OFFCURVE",
"559.667 -16 OFFCURVE",
"547 -16 CURVE SMOOTH",
"512.333 -16 OFFCURVE",
"462.333 33 OFFCURVE",
"421 105 CURVE",
"465 127.667 OFFCURVE",
"494 162.333 OFFCURVE",
"494 197 CURVE SMOOTH",
"494 250.333 OFFCURVE",
"446.333 300 OFFCURVE",
"389 300 CURVE SMOOTH",
"359.667 300 OFFCURVE",
"338 276.333 OFFCURVE",
"338 247 CURVE SMOOTH",
"338 218.333 OFFCURVE",
"344.667 193 OFFCURVE",
"358 171 CURVE",
"325.333 152.333 OFFCURVE",
"289.333 143 OFFCURVE",
"250 143 CURVE SMOOTH",
"174.937 143 OFFCURVE",
"109 198.555 OFFCURVE",
"109 267 CURVE SMOOTH",
"109 313.667 OFFCURVE",
"153 355 OFFCURVE",
"213 367 CURVE SMOOTH",
"358 400 LINE SMOOTH",
"419.333 413.333 OFFCURVE",
"449 443.667 OFFCURVE",
"449 493 CURVE SMOOTH",
"449 536.333 OFFCURVE",
"433 575 OFFCURVE",
"401 609 CURVE SMOOTH",
"322 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"354 609 LINE",
"378 583.667 OFFCURVE",
"394 550.333 OFFCURVE",
"394 529 CURVE SMOOTH",
"394 501.667 OFFCURVE",
"375.333 483.667 OFFCURVE",
"338 475 CURVE SMOOTH",
"161 437 LINE SMOOTH",
"93 421 OFFCURVE",
"46 374.667 OFFCURVE",
"46 324 CURVE SMOOTH",
"46 260 OFFCURVE",
"77 196.333 OFFCURVE",
"129 151 CURVE",
"67.667 125.667 OFFCURVE",
"14 72 OFFCURVE",
"14 24 CURVE SMOOTH",
"14 1.333 OFFCURVE",
"24.833 -20.333 OFFCURVE",
"46.5 -41 CURVE SMOOTH",
"89.833 -82.333 OFFCURVE",
"161 -111 OFFCURVE",
"217 -111 CURVE SMOOTH",
"291.667 -111 OFFCURVE",
"363 -41.667 OFFCURVE",
"407 65 CURVE",
"463 -19 OFFCURVE",
"533 -70 OFFCURVE",
"589 -70 CURVE SMOOTH",
"619 -70 OFFCURVE",
"643 -60.667 OFFCURVE",
"661 -42 CURVE"
);
},
{
closed = 1;
nodes = (
"446 609 LINE",
"555 609 LINE",
"555 689 LINE",
"369 689 LINE"
);
},
{
closed = 1;
nodes = (
"119.333 -67 OFFCURVE",
"79 -45 OFFCURVE",
"79 -13 CURVE SMOOTH",
"79 25.667 OFFCURVE",
"139.667 83.333 OFFCURVE",
"197 106 CURVE",
"233.667 88.667 OFFCURVE",
"273.667 80 OFFCURVE",
"317 80 CURVE SMOOTH",
"333 80 LINE",
"311.249 28.73 OFFCURVE",
"217.91 -67 OFFCURVE",
"162 -67 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */\01246 15 2 4 5 73 57 2 9 4 62 5 2 6 9 3 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 46 values pushed */\0120 5 2 4 2 5 4 112 0 4 0 9 6 4 9 99 0 6 0 0 1 6 0 99 12 1 10 0 1 10 1 95 11 8 2 2 2 3 89 7 1 3 3 24 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 46 values pushed */\0120 5 2 4 2 5 4 112 0 4 0 9 6 4 9 99 0 6 0 0 1 6 0 99 12 1 10 0 1 10 1 95 11 8 2 2 2 3 89 7 1 3 3 25 2 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 31 values pushed */\01267 67 63 63 67 79 67 78 72 70 63 66 63 66 65 64 61 59 52 50 45 43 30 29 28 27 36 33 13 6 22 \012CALL[ ]	/* CallFunction */";
};
width = 541;
}
);
note = uni0926094D0935;
},
{
glyphname = "dha_rakar-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"800 17 LINE",
"785.333 -3 OFFCURVE",
"765.333 -13 OFFCURVE",
"748 -13 CURVE SMOOTH",
"695.32 -13 OFFCURVE",
"565 59.451 OFFCURVE",
"565 111 CURVE SMOOTH",
"565 609 LINE",
"485 689 LINE",
"349 689 LINE",
"413 609 LINE",
"483 609 LINE",
"483 388 LINE",
"435 293.333 OFFCURVE",
"333.333 231 OFFCURVE",
"228 231 CURVE SMOOTH",
"177.333 231 OFFCURVE",
"132 259.667 OFFCURVE",
"132 297 CURVE SMOOTH",
"132 351.9 OFFCURVE",
"233.434 413 OFFCURVE",
"303 413 CURVE",
"260 486 LINE",
"240 486 OFFCURVE",
"212.667 479.333 OFFCURVE",
"178 466 CURVE",
"143.333 486 OFFCURVE",
"123 523 OFFCURVE",
"123 563 CURVE SMOOTH",
"123 569.667 OFFCURVE",
"124 576.167 OFFCURVE",
"126 582.5 CURVE SMOOTH",
"128 588.833 OFFCURVE",
"129.333 593.333 OFFCURVE",
"130 596 CURVE",
"160 564.667 OFFCURVE",
"195.333 549 OFFCURVE",
"236 549 CURVE SMOOTH",
"285.333 549 OFFCURVE",
"326 580 OFFCURVE",
"326 620 CURVE SMOOTH",
"326 682.837 OFFCURVE",
"251.337 742 OFFCURVE",
"183 742 CURVE SMOOTH",
"112.129 742 OFFCURVE",
"52 681.21 OFFCURVE",
"52 609 CURVE SMOOTH",
"52 554.333 OFFCURVE",
"87.333 493 OFFCURVE",
"146 453 CURVE",
"96.667 429 OFFCURVE",
"67 385.667 OFFCURVE",
"67 343 CURVE SMOOTH",
"67 317 OFFCURVE",
"76 291.333 OFFCURVE",
"94 266 CURVE SMOOTH",
"130 215.333 OFFCURVE",
"195 177.667 OFFCURVE",
"267 171 CURVE",
"171 90 LINE SMOOTH",
"158.333 80 OFFCURVE",
"146.667 75 OFFCURVE",
"136 75 CURVE SMOOTH",
"123.333 75 OFFCURVE",
"111.333 80.667 OFFCURVE",
"100 92 CURVE",
"84 70 LINE",
"122.667 35.333 OFFCURVE",
"158 14 OFFCURVE",
"182 14 CURVE SMOOTH",
"197.333 14 OFFCURVE",
"219 26.333 OFFCURVE",
"247 51 CURVE SMOOTH",
"483 260 LINE",
"483 166 LINE SMOOTH",
"483 140 OFFCURVE",
"502 108.833 OFFCURVE",
"540 72.5 CURVE SMOOTH",
"616 -0.167 OFFCURVE",
"733 -61 OFFCURVE",
"809 -61 CURVE SMOOTH",
"831.667 -61 OFFCURVE",
"852.667 -50.667 OFFCURVE",
"872 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"611 609 LINE",
"680 609 LINE",
"680 689 LINE",
"531 689 LINE"
);
},
{
closed = 1;
nodes = (
"208.333 680.333 OFFCURVE",
"212.333 681 OFFCURVE",
"215 681 CURVE SMOOTH",
"231 681 OFFCURVE",
"245.333 670 OFFCURVE",
"248 654 CURVE",
"249.333 631.333 OFFCURVE",
"226.667 605.667 OFFCURVE",
"204 603 CURVE",
"198.667 601.667 OFFCURVE",
"194.333 601 OFFCURVE",
"191 601 CURVE SMOOTH",
"172.333 601 OFFCURVE",
"156.667 608.333 OFFCURVE",
"144 623 CURVE",
"153.333 653.667 OFFCURVE",
"177.667 677.667 OFFCURVE",
"203 679 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */\01288 81 2 8 14 42 1 4 13 48 26 2 6 5 61 7 2 7 6 19 14 2 2 7 74 13 2 1 2 6 74 66 1 8 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 67 values pushed */\0120 2 7 1 7 2 1 112 0 13 0 4 5 13 4 99 0 5 0 6 7 5 6 99 0 10 0 0 10 0 95 17 15 2 14 14 3 91 0 3 3 31 75 16 12 2 8 8 9 89 11 1 9 9 24 75 0 7 7 1 91 0 1 1 26 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 67 values pushed */\0120 2 7 1 7 2 1 112 0 13 0 4 5 13 4 99 0 5 0 6 7 5 6 99 0 10 0 0 10 0 95 0 3 3 14 91 17 15 2 14 14 25 75 16 12 2 8 8 9 89 11 1 9 9 25 75 0 7 7 1 91 0 1 1 26 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 65 values pushed */\0120 2 7 1 7 2 1 112 0 13 0 4 5 13 4 99 0 5 0 6 7 5 6 99 0 7 0 1 10 7 1 99 0 10 0 0 10 0 95 0 3 3 14 91 17 15 2 14 14 25 75 16 12 2 8 8 9 89 11 1 9 9 25 8 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 34 values pushed */\01279 79 75 75 79 93 79 93 91 90 83 82 75 78 75 78 77 76 72 70 65 64 19 37 17 24 37 47 36 38 33 18 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 668;
}
);
note = uni0927094D0930;
},
{
glyphname = "na_rakar-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"795 17 LINE",
"781.667 -1.667 OFFCURVE",
"761.667 -13 OFFCURVE",
"743 -13 CURVE SMOOTH",
"691.134 -13 OFFCURVE",
"561 59.656 OFFCURVE",
"561 111 CURVE SMOOTH",
"561 609 LINE",
"482 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"479 609 LINE",
"479 358 LINE",
"412.333 434 OFFCURVE",
"324 479 OFFCURVE",
"236 479 CURVE SMOOTH",
"203.333 479 OFFCURVE",
"172 472 OFFCURVE",
"142 458 CURVE SMOOTH",
"82 430 OFFCURVE",
"42 382.333 OFFCURVE",
"42 333 CURVE SMOOTH",
"42 303 OFFCURVE",
"53.167 271.833 OFFCURVE",
"75.5 239.5 CURVE SMOOTH",
"120.167 174.833 OFFCURVE",
"193 127 OFFCURVE",
"257 127 CURVE SMOOTH",
"313 127 OFFCURVE",
"362 170.667 OFFCURVE",
"362 224 CURVE SMOOTH",
"362 272 OFFCURVE",
"317.333 338 OFFCURVE",
"240 402 CURVE",
"247.333 406.667 OFFCURVE",
"268 409 OFFCURVE",
"302 409 CURVE SMOOTH",
"366 409 OFFCURVE",
"428.333 376.333 OFFCURVE",
"479 319 CURVE",
"479 185 LINE",
"208 -42 LINE SMOOTH",
"196 -52 OFFCURVE",
"184.667 -57 OFFCURVE",
"174 -57 CURVE SMOOTH",
"160.667 -57 OFFCURVE",
"148.667 -51.667 OFFCURVE",
"138 -41 CURVE",
"122 -63 LINE",
"160.667 -97.667 OFFCURVE",
"195 -118 OFFCURVE",
"219 -118 CURVE SMOOTH",
"235 -118 OFFCURVE",
"253.333 -107.667 OFFCURVE",
"284 -81 CURVE SMOOTH",
"502 111 LINE",
"521.333 84.333 OFFCURVE",
"549.167 57.667 OFFCURVE",
"585.5 31 CURVE SMOOTH",
"658.167 -22.333 OFFCURVE",
"746 -61 OFFCURVE",
"806 -61 CURVE SMOOTH",
"828 -61 OFFCURVE",
"849.333 -50.667 OFFCURVE",
"870 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"607 609 LINE",
"677 609 LINE",
"677 689 LINE",
"527 689 LINE"
);
},
{
closed = 1;
nodes = (
"290 223.667 OFFCURVE",
"247 187 OFFCURVE",
"199 187 CURVE SMOOTH",
"156.408 187 OFFCURVE",
"105 236.493 OFFCURVE",
"105 279 CURVE SMOOTH",
"105 325.667 OFFCURVE",
"146.333 368.333 OFFCURVE",
"209 391 CURVE",
"259.667 349.667 OFFCURVE",
"290 303.667 OFFCURVE",
"290 269 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */\01262 42 25 20 4 11 3 19 1 4 11 55 6 2 8 4 14 1 2 8 13 1 1 0 5 74 47 1 6 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 56 values pushed */\0120 8 4 2 4 8 2 112 0 2 0 4 2 0 110 0 0 1 4 0 1 110 0 1 1 113 0 5 0 3 11 5 3 99 0 11 0 4 8 11 4 99 12 10 2 6 6 7 89 9 1 7 7 24 6 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 56 values pushed */\0120 8 4 2 4 8 2 112 0 2 0 4 2 0 110 0 0 1 4 0 1 110 0 1 1 113 0 5 0 3 11 5 3 99 0 11 0 4 8 11 4 99 12 10 2 6 6 7 89 9 1 7 7 25 6 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 22 values pushed */\01256 56 70 68 56 59 56 59 58 57 37 17 19 38 38 37 36 38 33 13 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 664;
}
);
note = uni0928094D0930;
},
{
glyphname = "n_na-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"795 17 LINE",
"781.667 -1.667 OFFCURVE",
"761.667 -13 OFFCURVE",
"743 -13 CURVE SMOOTH",
"691.134 -13 OFFCURVE",
"561 59.656 OFFCURVE",
"561 111 CURVE SMOOTH",
"561 609 LINE",
"482 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"479 609 LINE",
"479 358 LINE",
"412.333 434 OFFCURVE",
"324 479 OFFCURVE",
"236 479 CURVE SMOOTH",
"203.333 479 OFFCURVE",
"172 472 OFFCURVE",
"142 458 CURVE SMOOTH",
"82 430 OFFCURVE",
"42 382.333 OFFCURVE",
"42 333 CURVE SMOOTH",
"42 303 OFFCURVE",
"53.167 271.833 OFFCURVE",
"75.5 239.5 CURVE SMOOTH",
"120.167 174.833 OFFCURVE",
"193 127 OFFCURVE",
"257 127 CURVE SMOOTH",
"313 127 OFFCURVE",
"362 170.667 OFFCURVE",
"362 224 CURVE SMOOTH",
"362 272 OFFCURVE",
"317.333 338 OFFCURVE",
"240 402 CURVE",
"247.333 406.667 OFFCURVE",
"268 409 OFFCURVE",
"302 409 CURVE SMOOTH",
"366 409 OFFCURVE",
"428.333 376.333 OFFCURVE",
"479 319 CURVE",
"479 168 LINE SMOOTH",
"479 162.667 OFFCURVE",
"480 157 OFFCURVE",
"482 151 CURVE",
"305 80 LINE SMOOTH",
"229 50.667 OFFCURVE",
"179 9.667 OFFCURVE",
"179 -21 CURVE SMOOTH",
"179 -45 OFFCURVE",
"189.5 -69.5 OFFCURVE",
"210.5 -94.5 CURVE SMOOTH",
"252.5 -144.5 OFFCURVE",
"322.333 -181 OFFCURVE",
"381 -181 CURVE SMOOTH",
"433 -181 OFFCURVE",
"476 -146.667 OFFCURVE",
"476 -104 CURVE SMOOTH",
"476 -73.333 OFFCURVE",
"426.333 -36.667 OFFCURVE",
"357 -18 CURVE",
"340 -40 LINE",
"376 -48 OFFCURVE",
"404 -64.333 OFFCURVE",
"404 -79 CURVE SMOOTH",
"404 -103 OFFCURVE",
"369.667 -134 OFFCURVE",
"343 -134 CURVE SMOOTH",
"293.667 -134 OFFCURVE",
"254 -102.667 OFFCURVE",
"254 -64 CURVE SMOOTH",
"254 -36 OFFCURVE",
"297 -0.333 OFFCURVE",
"361 25 CURVE SMOOTH",
"523 86 LINE",
"592.333 10 OFFCURVE",
"723.333 -61 OFFCURVE",
"806 -61 CURVE SMOOTH",
"828 -61 OFFCURVE",
"849.333 -50.667 OFFCURVE",
"870 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"607 609 LINE",
"677 609 LINE",
"677 689 LINE",
"527 689 LINE"
);
},
{
closed = 1;
nodes = (
"290 223.667 OFFCURVE",
"247 187 OFFCURVE",
"199 187 CURVE SMOOTH",
"156.408 187 OFFCURVE",
"105 236.493 OFFCURVE",
"105 279 CURVE SMOOTH",
"105 325.667 OFFCURVE",
"146.333 368.333 OFFCURVE",
"209 391 CURVE",
"259.667 349.667 OFFCURVE",
"290 303.667 OFFCURVE",
"290 269 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */\01278 58 41 36 4 11 3 71 5 2 8 4 19 18 2 0 8 3 74 63 1 6 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 45 values pushed */\0120 5 0 3 11 5 3 99 0 11 0 4 8 11 4 99 0 8 0 0 1 8 0 99 0 1 0 2 1 2 95 12 10 2 6 6 7 89 9 1 7 7 24 6 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 45 values pushed */\0120 5 0 3 11 5 3 99 0 11 0 4 8 11 4 99 0 8 0 0 1 8 0 99 0 1 0 2 1 2 95 12 10 2 6 6 7 89 9 1 7 7 25 6 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 22 values pushed */\01272 72 86 84 72 75 72 75 74 73 37 17 19 38 38 44 43 40 33 13 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 664;
}
);
note = uni0928094D0928;
},
{
glyphname = "p_r-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"396 281 LINE",
"396 392 LINE",
"349.333 325.333 OFFCURVE",
"286 285 OFFCURVE",
"230 285 CURVE SMOOTH",
"183.333 285 OFFCURVE",
"143 317.667 OFFCURVE",
"143 359 CURVE SMOOTH",
"143 609 LINE",
"382 609 LINE",
"382 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"61 609 LINE",
"61 404 LINE SMOOTH",
"61 349.33 OFFCURVE",
"168.807 258.012 OFFCURVE",
"235 238 CURVE",
"84 111 LINE",
"70.667 101.667 OFFCURVE",
"59 97 OFFCURVE",
"49 97 CURVE SMOOTH",
"37 97 OFFCURVE",
"25 102.333 OFFCURVE",
"13 113 CURVE",
"-3 91 LINE",
"35.667 56.333 OFFCURVE",
"71 35 OFFCURVE",
"95 35 CURVE SMOOTH",
"109.667 35 OFFCURVE",
"131.333 47.667 OFFCURVE",
"160 73 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */\01228 1 5 2 29 11 6 3 1 5 5 1 0 1 3 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 31 values pushed */\0120 5 2 1 2 5 1 112 0 1 0 2 1 0 110 0 0 0 113 4 1 2 2 3 89 0 3 3 24 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 31 values pushed */\0120 5 2 1 2 5 1 112 0 1 0 2 1 0 110 0 0 0 113 4 1 2 2 3 89 0 3 3 25 2 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 9 values pushed */\01235 17 17 23 36 33 6 6 26 \012CALL[ ]	/* CallFunction */";
};
width = 368;
}
);
note = uni092A094D0072;
},
{
glyphname = "pa_rakar-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"713 17 LINE",
"698.333 -3 OFFCURVE",
"678.667 -13 OFFCURVE",
"660 -13 CURVE SMOOTH",
"607.514 -13 OFFCURVE",
"479 59.72 OFFCURVE",
"479 111 CURVE SMOOTH",
"479 609 LINE",
"398 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"61 609 LINE",
"61 404 LINE SMOOTH",
"61 349.245 OFFCURVE",
"168.65 258.227 OFFCURVE",
"234 238 CURVE",
"95 121 LINE",
"81.667 111.667 OFFCURVE",
"70 107 OFFCURVE",
"60 107 CURVE SMOOTH",
"48 107 OFFCURVE",
"36 112.333 OFFCURVE",
"24 123 CURVE",
"9 101 LINE",
"46.333 66.333 OFFCURVE",
"82 45 OFFCURVE",
"106 45 CURVE SMOOTH",
"120.667 45 OFFCURVE",
"142.333 57.667 OFFCURVE",
"171 83 CURVE SMOOTH",
"396 281 LINE",
"396 166 LINE SMOOTH",
"396 140 OFFCURVE",
"414.833 108.833 OFFCURVE",
"452.5 72.5 CURVE SMOOTH",
"527.833 -0.167 OFFCURVE",
"645.667 -61 OFFCURVE",
"723 -61 CURVE SMOOTH",
"744.333 -61 OFFCURVE",
"765.333 -50.667 OFFCURVE",
"786 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"524 609 LINE",
"594 609 LINE",
"594 689 LINE",
"446 689 LINE"
);
},
{
closed = 1;
nodes = (
"143 609 LINE",
"396 609 LINE",
"396 392 LINE",
"349.333 325.333 OFFCURVE",
"286 285 OFFCURVE",
"230 285 CURVE SMOOTH",
"183.333 285 OFFCURVE",
"143 317.667 OFFCURVE",
"143 359 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 25 values pushed */\01246 1 8 3 19 14 7 3 2 8 13 1 1 2 36 1 5 1 4 74 28 1 3 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 44 values pushed */\0120 8 3 2 3 8 2 112 0 2 1 3 2 1 110 0 1 5 3 1 5 110 0 5 0 0 5 0 95 9 10 7 3 3 3 4 89 6 1 4 4 24 3 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 44 values pushed */\0120 8 3 2 3 8 2 112 0 2 1 3 2 1 110 0 1 5 3 1 5 110 0 5 0 0 5 0 95 9 10 7 3 3 3 4 89 6 1 4 4 25 3 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 20 values pushed */\01237 37 48 47 44 42 37 40 37 40 20 37 17 23 36 38 33 11 6 27 \012CALL[ ]	/* CallFunction */";
};
width = 581;
}
);
note = uni092A094D0930;
},
{
glyphname = "p_ta-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"97 609 LINE",
"-14 609 LINE",
"-14 689 LINE",
"496 689 LINE",
"577 609 LINE",
"577 111 LINE SMOOTH",
"577 61.12 OFFCURVE",
"704.647 -13 OFFCURVE",
"759 -13 CURVE SMOOTH",
"775.667 -13 OFFCURVE",
"793 -3 OFFCURVE",
"811 17 CURVE",
"884 -30 LINE",
"865.333 -50.667 OFFCURVE",
"844.333 -61 OFFCURVE",
"821 -61 CURVE SMOOTH",
"783.667 -61 OFFCURVE",
"738.833 -47.833 OFFCURVE",
"686.5 -21.5 CURVE SMOOTH",
"581.833 31.167 OFFCURVE",
"494 114 OFFCURVE",
"494 166 CURVE SMOOTH",
"494 293 LINE",
"476 311 OFFCURVE",
"455.667 320 OFFCURVE",
"433 320 CURVE SMOOTH",
"271 320 LINE SMOOTH",
"196.172 320 OFFCURVE",
"134 270.189 OFFCURVE",
"134 203 CURVE SMOOTH",
"134 178.333 OFFCURVE",
"144 151.833 OFFCURVE",
"164 123.5 CURVE SMOOTH",
"204 66.833 OFFCURVE",
"268.333 22 OFFCURVE",
"319 22 CURVE SMOOTH",
"340.333 22 OFFCURVE",
"359.667 29 OFFCURVE",
"377 43 CURVE",
"425 -9 LINE",
"409.667 -23 OFFCURVE",
"390 -30 OFFCURVE",
"366 -30 CURVE SMOOTH",
"324.667 -30 OFFCURVE",
"281.167 -14.667 OFFCURVE",
"235.5 16 CURVE SMOOTH",
"144.167 77.333 OFFCURVE",
"74 176.667 OFFCURVE",
"74 258 CURVE SMOOTH",
"74 314 OFFCURVE",
"117 363.667 OFFCURVE",
"177 381 CURVE",
"125 410.333 OFFCURVE",
"97 449 OFFCURVE",
"97 485 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"692 609 LINE",
"622 609 LINE",
"542 689 LINE",
"692 689 LINE"
);
},
{
closed = 1;
nodes = (
"494 609 LINE",
"180 609 LINE",
"180 442 LINE SMOOTH",
"180 416.667 OFFCURVE",
"201.667 396 OFFCURVE",
"227 396 CURVE SMOOTH",
"399 396 LINE SMOOTH",
"429.667 396 OFFCURVE",
"461.333 383.667 OFFCURVE",
"494 359 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 25 values pushed */\01251 4 2 2 9 27 14 2 1 2 35 13 2 4 1 3 74 42 1 6 34 1 0 2 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 40 values pushed */\0120 9 0 2 1 9 2 99 0 1 0 0 3 1 0 99 0 4 0 3 4 3 95 13 10 12 8 11 5 6 6 5 89 7 1 5 5 24 6 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 40 values pushed */\0120 9 0 2 1 9 2 99 0 1 0 0 3 1 0 99 0 4 0 3 4 3 95 13 10 12 8 11 5 6 6 5 89 7 1 5 5 25 6 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 31 values pushed */\01250 50 46 46 0 0 50 58 50 58 55 52 46 49 46 49 48 47 0 45 0 45 21 35 37 54 35 42 14 6 26 \012CALL[ ]	/* CallFunction */";
};
width = 678;
}
);
note = uni092A094D0924;
},
{
glyphname = "p_la-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"1189 17 LINE",
"1174.333 -3 OFFCURVE",
"1156.667 -13 OFFCURVE",
"1136 -13 CURVE SMOOTH",
"1084.809 -13 OFFCURVE",
"955 59.544 OFFCURVE",
"955 111 CURVE SMOOTH",
"955 609 LINE",
"875 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"61 609 LINE",
"61 404 LINE SMOOTH",
"61 382 OFFCURVE",
"72.833 357.167 OFFCURVE",
"96.5 329.5 CURVE SMOOTH",
"143.833 274.167 OFFCURVE",
"222 230 OFFCURVE",
"286 230 CURVE SMOOTH",
"318 230 OFFCURVE",
"354.333 245.333 OFFCURVE",
"385 272 CURVE",
"397 225.333 OFFCURVE",
"421.833 177.5 OFFCURVE",
"459.5 128.5 CURVE SMOOTH",
"534.833 30.5 OFFCURVE",
"643 -40 OFFCURVE",
"731 -40 CURVE SMOOTH",
"760.333 -40 OFFCURVE",
"784.333 -30.333 OFFCURVE",
"803 -11 CURVE",
"752 45 LINE",
"733.333 26.333 OFFCURVE",
"706.333 15 OFFCURVE",
"681 15 CURVE SMOOTH",
"651 15 OFFCURVE",
"617.833 28.667 OFFCURVE",
"581.5 56 CURVE SMOOTH",
"508.833 110.667 OFFCURVE",
"450 198.667 OFFCURVE",
"450 264 CURVE SMOOTH",
"450 336.526 OFFCURVE",
"496.015 416 OFFCURVE",
"555 416 CURVE SMOOTH",
"583 416 OFFCURVE",
"614.667 390.333 OFFCURVE",
"636 353 CURVE",
"635.333 347 OFFCURVE",
"634 336.167 OFFCURVE",
"632 320.5 CURVE SMOOTH",
"630 304.833 OFFCURVE",
"629 290.333 OFFCURVE",
"629 277 CURVE",
"710 239 LINE",
"710 357.667 OFFCURVE",
"748.333 420 OFFCURVE",
"803 420 CURVE SMOOTH",
"823 420 OFFCURVE",
"848 402.333 OFFCURVE",
"872 369 CURVE",
"872 168 LINE SMOOTH",
"872 140.667 OFFCURVE",
"891 108.833 OFFCURVE",
"929 72.5 CURVE SMOOTH",
"1005 -0.167 OFFCURVE",
"1124.333 -61 OFFCURVE",
"1199 -61 CURVE SMOOTH",
"1222.333 -61 OFFCURVE",
"1243.667 -50.667 OFFCURVE",
"1263 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"1001 609 LINE",
"1071 609 LINE",
"1071 689 LINE",
"920 689 LINE"
);
},
{
closed = 1;
nodes = (
"872 609 LINE",
"872 415 LINE",
"828 457.667 OFFCURVE",
"783.333 482 OFFCURVE",
"754 482 CURVE SMOOTH",
"708.667 482 OFFCURVE",
"665.667 443.333 OFFCURVE",
"651 390 CURVE",
"609.667 451.333 OFFCURVE",
"551.667 489 OFFCURVE",
"505 489 CURVE SMOOTH",
"458.333 489 OFFCURVE",
"409.333 442 OFFCURVE",
"388 382 CURVE",
"341.333 322 OFFCURVE",
"283.333 285 OFFCURVE",
"230 285 CURVE SMOOTH",
"183.333 285 OFFCURVE",
"143 317.667 OFFCURVE",
"143 359 CURVE SMOOTH",
"143 609 LINE",
"382 609 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */\01283 77 17 7 4 12 1 38 14 13 3 5 12 57 31 2 3 5 32 1 8 3 4 74 50 1 6 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 48 values pushed */\01214 1 13 2 1 1 12 13 1 99 0 12 0 5 3 12 5 99 0 3 0 4 0 3 4 99 0 8 0 0 8 0 95 11 15 10 3 6 6 7 89 9 1 7 7 24 6 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 48 values pushed */\01214 1 13 2 1 1 12 13 1 99 0 12 0 5 3 12 5 99 0 3 0 4 0 3 4 99 0 8 0 0 8 0 95 11 15 10 3 6 6 7 89 9 1 7 7 25 6 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 53 values pushed */\0120 13 14 1 13 87 0 14 2 1 1 12 14 1 99 0 12 0 5 3 12 5 99 0 3 0 4 0 3 4 99 0 8 0 0 8 0 95 11 15 10 3 6 6 7 89 9 1 7 7 25 6 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 28 values pushed */\01258 58 81 79 75 73 69 67 64 62 58 61 58 61 60 59 37 17 20 37 36 38 40 38 33 16 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 1058;
}
);
note = uni092A094D0932;
},
{
glyphname = "pha_rakar-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"556.32 -13 OFFCURVE",
"426 59.451 OFFCURVE",
"426 111 CURVE SMOOTH",
"426 327 LINE",
"482 399 OFFCURVE",
"546 445 OFFCURVE",
"594 445 CURVE SMOOTH",
"623.333 445 OFFCURVE",
"648 418.667 OFFCURVE",
"648 388 CURVE SMOOTH",
"648 326.667 OFFCURVE",
"583.667 267.667 OFFCURVE",
"493 249 CURVE",
"549 190 LINE",
"642.333 208.667 OFFCURVE",
"712 270.667 OFFCURVE",
"712 340 CURVE SMOOTH",
"712 364.667 OFFCURVE",
"703.333 389.5 OFFCURVE",
"686 414.5 CURVE SMOOTH",
"651.333 464.5 OFFCURVE",
"593 501 OFFCURVE",
"545 501 CURVE SMOOTH",
"505 501 OFFCURVE",
"459.333 477 OFFCURVE",
"426 437 CURVE",
"426 609 LINE",
"346 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"49 609 LINE",
"49 402 LINE SMOOTH",
"49 382.667 OFFCURVE",
"57.667 360.167 OFFCURVE",
"75 334.5 CURVE SMOOTH",
"109.667 283.167 OFFCURVE",
"168 236.333 OFFCURVE",
"220 223 CURVE",
"95 105 LINE SMOOTH",
"83.667 94.333 OFFCURVE",
"72.333 89 OFFCURVE",
"61 89 CURVE SMOOTH",
"47 89 OFFCURVE",
"35 94.667 OFFCURVE",
"25 106 CURVE",
"9 84 LINE",
"47.667 48 OFFCURVE",
"82.333 28 OFFCURVE",
"105 28 CURVE SMOOTH",
"126.333 28 OFFCURVE",
"148.333 40.667 OFFCURVE",
"171 66 CURVE",
"343 242 LINE",
"343 166 LINE SMOOTH",
"343 140 OFFCURVE",
"361.833 108.833 OFFCURVE",
"399.5 72.5 CURVE SMOOTH",
"474.833 -0.167 OFFCURVE",
"593.667 -61 OFFCURVE",
"671 -61 CURVE SMOOTH",
"692.333 -61 OFFCURVE",
"713.333 -50.667 OFFCURVE",
"734 -30 CURVE",
"661 17 LINE",
"645 -3 OFFCURVE",
"627.667 -13 OFFCURVE",
"609 -13 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"761 689 LINE",
"391 689 LINE",
"473 609 LINE",
"761 609 LINE"
);
},
{
closed = 1;
nodes = (
"132 609 LINE",
"343 609 LINE",
"343 372 LINE",
"297.667 312 OFFCURVE",
"244.333 277 OFFCURVE",
"199 277 CURVE SMOOTH",
"167 277 OFFCURVE",
"132 313 OFFCURVE",
"132 349 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */\01266 51 31 3 10 6 42 41 21 16 9 5 2 10 15 1 1 2 1 1 7 1 2 1 0 7 5 74 30 1 3 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 53 values pushed */\0120 10 6 2 6 10 2 112 0 2 1 6 2 1 110 0 1 7 6 1 7 110 0 5 0 6 10 5 6 99 12 1 7 0 0 7 0 95 11 8 2 3 3 4 89 13 9 2 4 4 24 3 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 53 values pushed */\0120 10 6 2 6 10 2 112 0 2 1 6 2 1 110 0 1 7 6 1 7 110 0 5 0 6 10 5 6 99 12 1 7 0 0 7 0 95 11 8 2 3 3 4 89 13 9 2 4 4 25 3 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 28 values pushed */\01257 57 0 0 68 67 64 62 57 60 57 60 59 58 0 56 0 55 44 36 17 23 36 38 35 14 6 27 \012CALL[ ]	/* CallFunction */";
};
width = 747;
}
);
note = uni092B094D0930;
},
{
glyphname = "ph_la-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"1425 17 LINE",
"1410.333 -3 OFFCURVE",
"1393 -13 OFFCURVE",
"1373 -13 CURVE SMOOTH",
"1321.134 -13 OFFCURVE",
"1191 59.656 OFFCURVE",
"1191 111 CURVE SMOOTH",
"1191 609 LINE",
"1111 689 LINE",
"404 689 LINE",
"484 609 LINE",
"657 609 LINE",
"1108 609 LINE",
"1108 415 LINE",
"1065.333 457.667 OFFCURVE",
"1020.667 482 OFFCURVE",
"990 482 CURVE SMOOTH",
"944.667 482 OFFCURVE",
"901.667 443.333 OFFCURVE",
"887 390 CURVE",
"847 451.333 OFFCURVE",
"787.667 489 OFFCURVE",
"741 489 CURVE SMOOTH",
"713 489 OFFCURVE",
"685.667 473.667 OFFCURVE",
"663 447 CURVE",
"620.333 485.667 OFFCURVE",
"589 506 OFFCURVE",
"557 506 CURVE SMOOTH",
"518.333 506 OFFCURVE",
"473.667 479.667 OFFCURVE",
"439 437 CURVE",
"439 609 LINE",
"359 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"62 609 LINE",
"62 402 LINE SMOOTH",
"62 380 OFFCURVE",
"72.667 354.5 OFFCURVE",
"94 325.5 CURVE SMOOTH",
"136.667 267.5 OFFCURVE",
"205.333 219 OFFCURVE",
"260 219 CURVE SMOOTH",
"292 219 OFFCURVE",
"329.333 238.333 OFFCURVE",
"356 269 CURVE",
"356 166 LINE SMOOTH",
"356 140 OFFCURVE",
"375 108.833 OFFCURVE",
"413 72.5 CURVE SMOOTH",
"489 -0.167 OFFCURVE",
"607 -61 OFFCURVE",
"683 -61 CURVE SMOOTH",
"705.667 -61 OFFCURVE",
"726.667 -50.667 OFFCURVE",
"746 -30 CURVE",
"672 17 LINE",
"660 -3 OFFCURVE",
"639.667 -13 OFFCURVE",
"621 -13 CURVE SMOOTH",
"569.134 -13 OFFCURVE",
"439 59.656 OFFCURVE",
"439 111 CURVE SMOOTH",
"439 327 LINE",
"495 399 OFFCURVE",
"557.333 445 OFFCURVE",
"604 445 CURVE SMOOTH",
"614.667 445 OFFCURVE",
"631.667 436.333 OFFCURVE",
"645 423 CURVE",
"625 391 OFFCURVE",
"615 357.667 OFFCURVE",
"615 323 CURVE SMOOTH",
"615 274.333 OFFCURVE",
"633.667 221.333 OFFCURVE",
"671 164 CURVE SMOOTH",
"745.667 49.333 OFFCURVE",
"867 -40 OFFCURVE",
"967 -40 CURVE SMOOTH",
"996.333 -40 OFFCURVE",
"1020.667 -30.333 OFFCURVE",
"1040 -11 CURVE",
"988 45 LINE",
"969.333 26.333 OFFCURVE",
"942.333 15 OFFCURVE",
"917 15 CURVE SMOOTH",
"887 15 OFFCURVE",
"853.833 28.667 OFFCURVE",
"817.5 56 CURVE SMOOTH",
"744.833 110.667 OFFCURVE",
"686 198.667 OFFCURVE",
"686 264 CURVE SMOOTH",
"686 336.526 OFFCURVE",
"732.015 416 OFFCURVE",
"791 416 CURVE SMOOTH",
"819 416 OFFCURVE",
"850.333 390.333 OFFCURVE",
"873 353 CURVE",
"867.667 318.333 OFFCURVE",
"865 293 OFFCURVE",
"865 277 CURVE",
"946 239 LINE",
"946 357.667 OFFCURVE",
"984 420 OFFCURVE",
"1040 420 CURVE SMOOTH",
"1060 420 OFFCURVE",
"1085.333 401 OFFCURVE",
"1108 369 CURVE",
"1108 168 LINE SMOOTH",
"1108 140.667 OFFCURVE",
"1127.167 108.833 OFFCURVE",
"1165.5 72.5 CURVE SMOOTH",
"1242.167 -0.167 OFFCURVE",
"1361.333 -61 OFFCURVE",
"1436 -61 CURVE SMOOTH",
"1458.667 -61 OFFCURVE",
"1479.667 -50.667 OFFCURVE",
"1499 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"1237 609 LINE",
"1307 609 LINE",
"1307 689 LINE",
"1156 689 LINE"
);
},
{
closed = 1;
nodes = (
"356 609 LINE",
"356 372 LINE",
"310.667 310.667 OFFCURVE",
"257.667 277 OFFCURVE",
"211 277 CURVE SMOOTH",
"179 277 OFFCURVE",
"145 313 OFFCURVE",
"145 349 CURVE SMOOTH",
"145 609 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 48 values pushed */\01280 1 5 12 74 39 2 1 5 118 92 86 45 16 7 6 20 1 61 13 2 8 20 105 53 30 3 3 8 31 1 6 3 54 1 4 6 7 74 98 73 2 9 14 1 20 2 73 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 48 values pushed */\01280 1 5 13 74 39 2 1 5 118 92 86 45 16 7 6 20 1 61 13 2 8 20 105 53 30 3 3 8 31 1 6 3 54 1 4 6 7 74 98 73 2 9 14 1 20 2 73 \012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 60 values pushed */\0120 11 0 5 1 11 5 99 13 1 12 2 1 1 20 12 1 99 0 20 0 8 3 20 8 99 0 3 0 4 0 3 4 99 16 1 6 7 1 0 6 0 95 19 21 18 14 4 9 9 10 89 17 15 2 10 10 24 9 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 60 values pushed */\0120 11 0 5 1 11 5 99 13 1 12 2 1 1 20 12 1 99 0 20 0 8 3 20 8 99 0 3 0 4 0 3 4 99 16 1 6 7 1 0 6 0 95 19 21 18 14 4 9 9 10 89 17 15 2 10 10 25 9 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 65 values pushed */\0120 12 13 1 12 87 0 11 0 5 1 11 5 99 0 13 2 1 1 20 13 1 99 0 20 0 8 3 20 8 99 0 3 0 4 0 3 4 99 16 1 6 7 1 0 6 0 95 19 21 18 14 4 9 9 10 89 17 15 2 10 10 25 9 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 40 values pushed */\012106 106 116 114 111 110 106 109 106 109 108 107 104 102 97 96 95 93 90 88 84 82 78 76 72 71 70 69 38 36 38 39 36 38 39 38 33 22 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 1294;
}
);
note = uni092B094D0932;
},
{
glyphname = "ba_rakar-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"709 17 LINE",
"695.667 -1.667 OFFCURVE",
"675.667 -13 OFFCURVE",
"657 -13 CURVE SMOOTH",
"605.134 -13 OFFCURVE",
"475 59.656 OFFCURVE",
"475 111 CURVE SMOOTH",
"475 609 LINE",
"395 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"393 609 LINE",
"393 434 LINE",
"349 494 OFFCURVE",
"281.333 529 OFFCURVE",
"212 529 CURVE SMOOTH",
"145.502 529 OFFCURVE",
"43 454.306 OFFCURVE",
"43 391 CURVE SMOOTH",
"43 364.333 OFFCURVE",
"51.5 336.833 OFFCURVE",
"68.5 308.5 CURVE SMOOTH",
"102.5 251.833 OFFCURVE",
"162.333 204 OFFCURVE",
"229 188 CURVE",
"108 86 LINE",
"96 76.667 OFFCURVE",
"84.667 72 OFFCURVE",
"74 72 CURVE SMOOTH",
"60.667 72 OFFCURVE",
"48.667 77.333 OFFCURVE",
"38 88 CURVE",
"22 66 LINE",
"62.667 28.667 OFFCURVE",
"95 10 OFFCURVE",
"119 10 CURVE SMOOTH",
"133.667 10 OFFCURVE",
"155.333 22.667 OFFCURVE",
"184 48 CURVE SMOOTH",
"394 233 LINE",
"394 165 LINE SMOOTH",
"394 140.333 OFFCURVE",
"412.667 109.833 OFFCURVE",
"450 73.5 CURVE SMOOTH",
"524.667 0.833 OFFCURVE",
"641.333 -61 OFFCURVE",
"720 -61 CURVE SMOOTH",
"742.667 -61 OFFCURVE",
"763.333 -50.667 OFFCURVE",
"782 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"520 609 LINE",
"591 609 LINE",
"591 689 LINE",
"441 689 LINE"
);
},
{
closed = 1;
nodes = (
"319.667 466 OFFCURVE",
"363.667 435.667 OFFCURVE",
"393 389 CURVE",
"393 345 LINE",
"379 323 OFFCURVE",
"362 304 OFFCURVE",
"342 288 CURVE",
"202 448 LINE",
"228 460 OFFCURVE",
"254.333 466 OFFCURVE",
"281 466 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"113 366 OFFCURVE",
"134.667 401.667 OFFCURVE",
"168 427 CURVE",
"309 268 LINE",
"277 252 OFFCURVE",
"245.333 244 OFFCURVE",
"214 244 CURVE SMOOTH",
"164.667 244 OFFCURVE",
"113 286 OFFCURVE",
"113 330 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */\01261 60 52 51 49 48 29 7 10 9 18 13 7 3 2 10 42 12 2 1 2 3 74 34 1 4 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 48 values pushed */\0120 10 9 2 9 10 2 112 0 3 12 1 9 10 3 9 99 0 6 0 0 6 0 95 11 8 2 4 4 5 89 7 1 5 5 24 75 0 2 2 1 91 0 1 1 26 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01245 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 48 values pushed */\0120 10 9 2 9 10 2 112 0 3 12 1 9 10 3 9 99 0 6 0 0 6 0 95 11 8 2 4 4 5 89 7 1 5 5 25 75 0 2 2 1 91 0 1 1 26 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 46 values pushed */\0120 10 9 2 9 10 2 112 0 3 12 1 9 10 3 9 99 0 2 0 1 6 2 1 99 0 6 0 0 6 0 95 11 8 2 4 4 5 89 7 1 5 5 25 4 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 25 values pushed */\01247 47 43 43 59 57 47 55 47 54 43 46 43 46 20 37 17 19 41 35 38 33 13 6 28 \012CALL[ ]	/* CallFunction */";
};
width = 578;
}
);
note = uni092C094D0930;
},
{
glyphname = "bha_rakar-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"794 17 LINE",
"778 -3 OFFCURVE",
"760.667 -13 OFFCURVE",
"742 -13 CURVE SMOOTH",
"689.32 -13 OFFCURVE",
"559 59.451 OFFCURVE",
"559 111 CURVE SMOOTH",
"559 609 LINE",
"478 689 LINE",
"308 689 LINE",
"360 609 LINE",
"476 609 LINE",
"476 368 LINE",
"280 368 LINE",
"280 598 LINE SMOOTH",
"280 622.667 OFFCURVE",
"270.833 649.167 OFFCURVE",
"252.5 677.5 CURVE SMOOTH",
"215.833 734.167 OFFCURVE",
"155.333 779 OFFCURVE",
"110 779 CURVE SMOOTH",
"55.79 779 OFFCURVE",
"3 717.146 OFFCURVE",
"3 659 CURVE SMOOTH",
"3 599 OFFCURVE",
"59.333 532.333 OFFCURVE",
"146 495 CURVE",
"163 522 LINE",
"109.667 550 OFFCURVE",
"76 587.333 OFFCURVE",
"76 618 CURVE SMOOTH",
"76 660.882 OFFCURVE",
"117.467 716 OFFCURVE",
"154 716 CURVE SMOOTH",
"178 716 OFFCURVE",
"198 695.333 OFFCURVE",
"198 666 CURVE SMOOTH",
"198 368 LINE",
"117 368 LINE SMOOTH",
"103.667 368 OFFCURVE",
"95 359 OFFCURVE",
"95 347 CURVE SMOOTH",
"95 303.014 OFFCURVE",
"211.989 197 OFFCURVE",
"258 197 CURVE SMOOTH",
"271.333 197 OFFCURVE",
"280 204.667 OFFCURVE",
"280 218 CURVE SMOOTH",
"280 295 LINE",
"475 295 LINE",
"194 59 LINE SMOOTH",
"182 49 OFFCURVE",
"170.667 44 OFFCURVE",
"160 44 CURVE SMOOTH",
"146 44 OFFCURVE",
"134 49.667 OFFCURVE",
"124 61 CURVE",
"108 39 LINE",
"148.667 1.667 OFFCURVE",
"181 -17 OFFCURVE",
"205 -17 CURVE SMOOTH",
"220.333 -17 OFFCURVE",
"242 -4.667 OFFCURVE",
"270 20 CURVE SMOOTH",
"476 203 LINE",
"476 166 LINE SMOOTH",
"476 140 OFFCURVE",
"494.833 108.833 OFFCURVE",
"532.5 72.5 CURVE SMOOTH",
"607.833 -0.167 OFFCURVE",
"725.667 -61 OFFCURVE",
"803 -61 CURVE SMOOTH",
"825.667 -61 OFFCURVE",
"846.667 -50.667 OFFCURVE",
"866 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"605 609 LINE",
"675 609 LINE",
"675 689 LINE",
"524 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 25 values pushed */\01243 42 2 5 9 7 1 4 3 13 1 2 4 68 12 2 11 2 4 74 61 1 9 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 56 values pushed */\0120 4 3 2 3 4 2 112 0 7 0 6 10 7 6 99 8 1 5 0 3 4 5 3 97 0 11 0 0 11 0 95 14 13 2 9 9 10 89 12 1 10 10 24 75 0 2 2 1 92 0 1 1 26 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 56 values pushed */\0120 4 3 2 3 4 2 112 0 7 0 6 10 7 6 99 8 1 5 0 3 4 5 3 97 0 11 0 0 11 0 95 14 13 2 9 9 10 89 12 1 10 10 25 75 0 2 2 1 92 0 1 1 26 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 54 values pushed */\0120 4 3 2 3 4 2 112 0 7 0 6 10 7 6 99 8 1 5 0 3 4 5 3 97 0 2 0 1 0 2 1 100 0 11 0 0 11 0 95 14 13 2 9 9 10 89 12 1 10 10 25 9 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 26 values pushed */\01269 69 69 72 69 72 71 70 67 65 60 59 58 57 20 45 35 37 35 18 35 38 33 15 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 662;
}
);
note = uni092D094D0930;
},
{
glyphname = "ma_rakar-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"723 17 LINE",
"707 -3 OFFCURVE",
"689.667 -13 OFFCURVE",
"671 -13 CURVE SMOOTH",
"618.32 -13 OFFCURVE",
"488 59.451 OFFCURVE",
"488 111 CURVE SMOOTH",
"488 609 LINE",
"407 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"121 609 LINE",
"121 391 LINE",
"52 391 LINE SMOOTH",
"36 391 OFFCURVE",
"23 382 OFFCURVE",
"23 370 CURVE SMOOTH",
"23 332.818 OFFCURVE",
"144.616 219 OFFCURVE",
"182 219 CURVE SMOOTH",
"195.333 219 OFFCURVE",
"204 227.667 OFFCURVE",
"204 241 CURVE SMOOTH",
"204 313 LINE",
"405 313 LINE",
"405 296 LINE",
"123 59 LINE SMOOTH",
"111 49 OFFCURVE",
"99.667 44 OFFCURVE",
"89 44 CURVE SMOOTH",
"75 44 OFFCURVE",
"63 49.667 OFFCURVE",
"53 61 CURVE",
"37 39 LINE",
"77.667 1.667 OFFCURVE",
"110 -17 OFFCURVE",
"134 -17 CURVE SMOOTH",
"149.333 -17 OFFCURVE",
"171 -4.667 OFFCURVE",
"199 20 CURVE SMOOTH",
"405 203 LINE",
"405 166 LINE SMOOTH",
"405 140 OFFCURVE",
"424 108.833 OFFCURVE",
"462 72.5 CURVE SMOOTH",
"538 -0.167 OFFCURVE",
"656 -61 OFFCURVE",
"732 -61 CURVE SMOOTH",
"755.333 -61 OFFCURVE",
"776.667 -50.667 OFFCURVE",
"796 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"534 609 LINE",
"604 609 LINE",
"604 689 LINE",
"454 689 LINE"
);
},
{
closed = 1;
nodes = (
"405 391 LINE",
"204 391 LINE",
"204 609 LINE",
"405 609 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */\01218 1 4 3 13 7 2 2 4 44 12 2 8 2 3 74 37 1 6 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 50 values pushed */\0120 4 3 2 3 4 2 112 14 12 2 5 0 3 4 5 3 97 0 8 0 0 8 0 95 11 13 10 3 6 6 7 89 9 1 7 7 24 75 0 2 2 1 92 0 1 1 26 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 50 values pushed */\0120 4 3 2 3 4 2 112 14 12 2 5 0 3 4 5 3 97 0 8 0 0 8 0 95 11 13 10 3 6 6 7 89 9 1 7 7 25 75 0 2 2 1 92 0 1 1 26 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 48 values pushed */\0120 4 3 2 3 4 2 112 14 12 2 5 0 3 4 5 3 97 0 2 0 1 0 2 1 100 0 8 0 0 8 0 95 11 13 10 3 6 6 7 89 9 1 7 7 25 6 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 28 values pushed */\01249 49 45 45 49 52 49 52 51 50 45 48 45 48 47 46 37 17 17 37 35 19 35 38 33 15 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 591;
}
);
note = uni092E094D0930;
},
{
glyphname = "ya_rakar-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"744 17 LINE",
"728 -3 OFFCURVE",
"710.333 -13 OFFCURVE",
"691 -13 CURVE SMOOTH",
"639.134 -13 OFFCURVE",
"509 59.656 OFFCURVE",
"509 111 CURVE SMOOTH",
"509 609 LINE",
"429 689 LINE",
"181 689 LINE",
"260 609 LINE",
"427 609 LINE",
"427 371 LINE",
"379 305.667 OFFCURVE",
"305.667 265 OFFCURVE",
"231 265 CURVE SMOOTH",
"169.667 265 OFFCURVE",
"113.333 310.333 OFFCURVE",
"92 373 CURVE",
"196 373 OFFCURVE",
"262 418 OFFCURVE",
"262 486 CURVE SMOOTH",
"262 528.667 OFFCURVE",
"248.333 574.333 OFFCURVE",
"215 609 CURVE SMOOTH",
"135 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"151 609 LINE SMOOTH",
"188.333 609 OFFCURVE",
"211 577.333 OFFCURVE",
"211 540 CURVE SMOOTH",
"211 486.667 OFFCURVE",
"155 451 OFFCURVE",
"91 451 CURVE SMOOTH",
"72.333 451 OFFCURVE",
"55.667 454.667 OFFCURVE",
"41 462 CURVE",
"29 453 LINE",
"51.667 326.333 OFFCURVE",
"141.333 223 OFFCURVE",
"248 203 CURVE",
"143 115 LINE SMOOTH",
"131 105 OFFCURVE",
"119.667 100 OFFCURVE",
"109 100 CURVE SMOOTH",
"95.667 100 OFFCURVE",
"83.667 105.333 OFFCURVE",
"73 116 CURVE",
"57 94 LINE",
"95.667 59.333 OFFCURVE",
"130 39 OFFCURVE",
"154 39 CURVE SMOOTH",
"169.333 39 OFFCURVE",
"191 51.333 OFFCURVE",
"219 76 CURVE SMOOTH",
"427 258 LINE",
"427 166 LINE SMOOTH",
"427 140 OFFCURVE",
"445.833 108.833 OFFCURVE",
"483.5 72.5 CURVE SMOOTH",
"558.833 -0.167 OFFCURVE",
"676.667 -61 OFFCURVE",
"754 -61 CURVE SMOOTH",
"776.667 -61 OFFCURVE",
"797.667 -50.667 OFFCURVE",
"817 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"555 609 LINE",
"625 609 LINE",
"625 689 LINE",
"476 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */\01223 1 3 4 47 1 7 6 19 14 7 3 2 7 13 1 1 2 59 1 10 1 5 74 52 1 4 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 53 values pushed */\0120 7 6 2 6 7 2 112 0 2 1 6 2 1 110 0 1 10 6 1 10 110 0 3 0 6 7 3 6 99 0 10 0 0 10 0 95 13 12 8 3 4 4 5 89 11 9 2 5 5 24 4 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 53 values pushed */\0120 7 6 2 6 7 2 112 0 2 1 6 2 1 110 0 1 10 6 1 10 110 0 3 0 6 7 3 6 99 0 10 0 0 10 0 95 13 12 8 3 4 4 5 89 11 9 2 5 5 25 4 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 24 values pushed */\01260 60 60 63 60 63 62 61 58 56 51 50 19 34 22 17 36 39 36 38 33 14 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 611;
}
);
note = uni092F094D0930;
},
{
glyphname = "la_rakar-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"868 17 LINE",
"853.333 -3 OFFCURVE",
"835.667 -13 OFFCURVE",
"815 -13 CURVE SMOOTH",
"763.549 -13 OFFCURVE",
"635.221 56.704 OFFCURVE",
"633 110 CURVE",
"634 111 LINE",
"634 203 LINE",
"633 202 LINE",
"633 609 LINE",
"553 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"551 609 LINE",
"551 415 LINE",
"515 451 OFFCURVE",
"466.333 482 OFFCURVE",
"433 482 CURVE SMOOTH",
"385 482 OFFCURVE",
"345 443.333 OFFCURVE",
"329 390 CURVE",
"291.667 447.333 OFFCURVE",
"235 489 OFFCURVE",
"183 489 CURVE SMOOTH",
"125.614 489 OFFCURVE",
"57 384.155 OFFCURVE",
"57 323 CURVE SMOOTH",
"57 216.333 OFFCURVE",
"143 90.333 OFFCURVE",
"271 9 CURVE",
"310 45 LINE",
"281.333 57 OFFCURVE",
"253 75 OFFCURVE",
"225 99 CURVE SMOOTH",
"169 147 OFFCURVE",
"128 210.667 OFFCURVE",
"128 264 CURVE SMOOTH",
"128 344 OFFCURVE",
"169 416 OFFCURVE",
"233 416 CURVE SMOOTH",
"263.667 416 OFFCURVE",
"295 389 OFFCURVE",
"315 353 CURVE",
"310.333 323 OFFCURVE",
"308 297.667 OFFCURVE",
"308 277 CURVE",
"389 239 LINE",
"389 347 OFFCURVE",
"418 420 OFFCURVE",
"482 420 CURVE SMOOTH",
"504.667 420 OFFCURVE",
"527.667 403 OFFCURVE",
"551 369 CURVE",
"551 170 LINE SMOOTH",
"551 159.333 OFFCURVE",
"553.333 149 OFFCURVE",
"558 139 CURVE",
"322 -59 LINE",
"310 -68.333 OFFCURVE",
"298.333 -73 OFFCURVE",
"287 -73 CURVE SMOOTH",
"274.333 -73 OFFCURVE",
"262.667 -67.667 OFFCURVE",
"252 -57 CURVE",
"236 -79 LINE",
"273.333 -113.667 OFFCURVE",
"309 -135 OFFCURVE",
"333 -135 CURVE SMOOTH",
"347.667 -135 OFFCURVE",
"369.333 -122.333 OFFCURVE",
"398 -97 CURVE SMOOTH",
"600 81 LINE",
"673.333 7.667 OFFCURVE",
"804.667 -61 OFFCURVE",
"878 -61 CURVE SMOOTH",
"900.667 -61 OFFCURVE",
"921.667 -50.667 OFFCURVE",
"941 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"679 609 LINE",
"749 609 LINE",
"749 689 LINE",
"599 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */\01270 55 49 39 38 28 26 25 20 5 10 9 3 12 1 0 9 11 1 1 2 3 74 60 1 7 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 44 values pushed */\0120 2 0 1 0 2 1 112 0 1 1 113 6 1 5 4 1 3 9 5 3 99 0 9 0 0 2 9 0 99 12 11 2 7 7 8 89 10 1 8 8 24 7 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 44 values pushed */\0120 2 0 1 0 2 1 112 0 1 1 113 6 1 5 4 1 3 9 5 3 99 0 9 0 0 2 9 0 99 12 11 2 7 7 8 89 10 1 8 8 25 7 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 49 values pushed */\0120 2 0 1 0 2 1 112 0 1 1 113 0 5 6 3 5 87 0 6 4 1 3 9 6 3 99 0 9 0 0 2 9 0 99 12 11 2 7 7 8 89 10 1 8 8 25 7 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 22 values pushed */\01271 71 71 74 71 74 73 72 69 67 17 19 36 45 39 38 36 36 33 13 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 735;
}
);
note = uni0932094D0930;
},
{
glyphname = "l_la-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"1334 17 LINE",
"1319.333 -3 OFFCURVE",
"1302 -13 OFFCURVE",
"1282 -13 CURVE SMOOTH",
"1230.134 -13 OFFCURVE",
"1100 59.656 OFFCURVE",
"1100 111 CURVE SMOOTH",
"1100 609 LINE",
"1020 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"537 609 LINE",
"1017 609 LINE",
"1017 415 LINE",
"974.333 457.667 OFFCURVE",
"929.667 482 OFFCURVE",
"899 482 CURVE SMOOTH",
"855 482 OFFCURVE",
"812 443.333 OFFCURVE",
"796 390 CURVE",
"756 451.333 OFFCURVE",
"696.667 489 OFFCURVE",
"650 489 CURVE SMOOTH",
"612.667 489 OFFCURVE",
"574.333 460 OFFCURVE",
"549 416 CURVE",
"506.333 457.333 OFFCURVE",
"461.333 482 OFFCURVE",
"432 482 CURVE SMOOTH",
"386.667 482 OFFCURVE",
"343.667 443.333 OFFCURVE",
"329 390 CURVE",
"287.667 451.333 OFFCURVE",
"229.667 489 OFFCURVE",
"183 489 CURVE SMOOTH",
"126.387 489 OFFCURVE",
"56 384.204 OFFCURVE",
"56 323 CURVE SMOOTH",
"56 274.333 OFFCURVE",
"74.667 221.333 OFFCURVE",
"112 164 CURVE SMOOTH",
"186.667 49.333 OFFCURVE",
"309 -40 OFFCURVE",
"409 -40 CURVE SMOOTH",
"438.333 -40 OFFCURVE",
"462.333 -30.333 OFFCURVE",
"481 -11 CURVE",
"418 45 LINE",
"404.667 26.333 OFFCURVE",
"380.333 15 OFFCURVE",
"359 15 CURVE SMOOTH",
"329 15 OFFCURVE",
"295.833 28.667 OFFCURVE",
"259.5 56 CURVE SMOOTH",
"186.833 110.667 OFFCURVE",
"128 198.667 OFFCURVE",
"128 264 CURVE SMOOTH",
"128 336.526 OFFCURVE",
"174.015 416 OFFCURVE",
"233 416 CURVE SMOOTH",
"261 416 OFFCURVE",
"292.667 390.333 OFFCURVE",
"314 353 CURVE",
"313.333 347 OFFCURVE",
"312 336.167 OFFCURVE",
"310 320.5 CURVE SMOOTH",
"308 304.833 OFFCURVE",
"307 290.333 OFFCURVE",
"307 277 CURVE",
"388 239 LINE",
"388 267 LINE SMOOTH",
"388 326.571 OFFCURVE",
"435.42 420 OFFCURVE",
"481 420 CURVE SMOOTH",
"498.333 420 OFFCURVE",
"516.667 408.667 OFFCURVE",
"536 386 CURVE",
"528 366 OFFCURVE",
"524 345 OFFCURVE",
"524 323 CURVE SMOOTH",
"524 274.333 OFFCURVE",
"542.667 221.333 OFFCURVE",
"580 164 CURVE SMOOTH",
"654.667 49.333 OFFCURVE",
"776 -40 OFFCURVE",
"876 -40 CURVE SMOOTH",
"905.333 -40 OFFCURVE",
"929.667 -30.333 OFFCURVE",
"949 -11 CURVE",
"897 45 LINE",
"878.333 26.333 OFFCURVE",
"852.333 15 OFFCURVE",
"827 15 CURVE SMOOTH",
"797 15 OFFCURVE",
"763.667 28.667 OFFCURVE",
"727 56 CURVE SMOOTH",
"653.667 110.667 OFFCURVE",
"595 198.667 OFFCURVE",
"595 264 CURVE SMOOTH",
"595 336.526 OFFCURVE",
"641.015 416 OFFCURVE",
"700 416 CURVE SMOOTH",
"728 416 OFFCURVE",
"760.667 390.333 OFFCURVE",
"782 353 CURVE",
"776.667 318.333 OFFCURVE",
"774 293 OFFCURVE",
"774 277 CURVE",
"855 239 LINE",
"855 357.667 OFFCURVE",
"893 420 OFFCURVE",
"949 420 CURVE SMOOTH",
"969 420 OFFCURVE",
"994.333 401 OFFCURVE",
"1017 369 CURVE",
"1017 168 LINE SMOOTH",
"1017 140.667 OFFCURVE",
"1036.167 108.833 OFFCURVE",
"1074.5 72.5 CURVE SMOOTH",
"1151.167 -0.167 OFFCURVE",
"1270.333 -61 OFFCURVE",
"1345 -61 CURVE SMOOTH",
"1367.667 -61 OFFCURVE",
"1388.667 -50.667 OFFCURVE",
"1408 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"1146 609 LINE",
"1216 609 LINE",
"1216 689 LINE",
"1065 689 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */\012109 96 90 84 78 64 50 47 46 39 30 16 14 13 7 15 3 1 65 31 2 15 3 2 74 102 1 13 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 45 values pushed */\01212 11 10 3 9 6 5 2 3 1 3 9 1 99 7 1 3 8 1 4 0 3 4 99 0 15 0 0 15 0 95 18 17 2 13 13 14 89 16 1 14 14 24 13 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 45 values pushed */\01212 11 10 3 9 6 5 2 3 1 3 9 1 99 7 1 3 8 1 4 0 3 4 99 0 15 0 0 15 0 95 18 17 2 13 13 14 89 16 1 14 14 25 13 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 50 values pushed */\01211 1 9 10 1 9 87 12 1 10 6 5 2 3 1 3 10 1 99 7 1 3 8 1 4 0 3 4 99 0 15 0 0 15 0 95 18 17 2 13 13 14 89 16 1 14 14 25 13 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 34 values pushed */\012110 110 110 113 110 113 112 111 108 106 101 100 99 97 94 92 88 86 82 80 76 74 36 38 42 38 36 38 39 38 33 19 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 1202;
}
);
note = uni0932094D0932;
},
{
glyphname = "lla_rakar-deva";
layers = (
{
components = (
{
alignment = -1;
name = "ll-deva";
},
{
alignment = -1;
name = "rakar-deva";
transform = "{1, 0, 0, 1, 697, 0}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 686;
}
);
note = uni0933094D0930;
},
{
glyphname = "va_rakar-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"709 17 LINE",
"695.667 -1.667 OFFCURVE",
"675.667 -13 OFFCURVE",
"657 -13 CURVE SMOOTH",
"605.134 -13 OFFCURVE",
"475 59.656 OFFCURVE",
"475 111 CURVE SMOOTH",
"475 609 LINE",
"395 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"393 609 LINE",
"393 434 LINE",
"349 494 OFFCURVE",
"281.333 529 OFFCURVE",
"212 529 CURVE SMOOTH",
"145.502 529 OFFCURVE",
"43 454.306 OFFCURVE",
"43 391 CURVE SMOOTH",
"43 364.333 OFFCURVE",
"51.5 336.833 OFFCURVE",
"68.5 308.5 CURVE SMOOTH",
"102.5 251.833 OFFCURVE",
"162.333 204 OFFCURVE",
"229 188 CURVE",
"108 86 LINE",
"96 76.667 OFFCURVE",
"84.667 72 OFFCURVE",
"74 72 CURVE SMOOTH",
"60.667 72 OFFCURVE",
"48.667 77.333 OFFCURVE",
"38 88 CURVE",
"22 66 LINE",
"62.667 28.667 OFFCURVE",
"95 10 OFFCURVE",
"119 10 CURVE SMOOTH",
"133.667 10 OFFCURVE",
"155.333 22.667 OFFCURVE",
"184 48 CURVE SMOOTH",
"394 233 LINE",
"394 165 LINE SMOOTH",
"394 140.333 OFFCURVE",
"412.667 109.833 OFFCURVE",
"450 73.5 CURVE SMOOTH",
"524.667 0.833 OFFCURVE",
"641.333 -61 OFFCURVE",
"720 -61 CURVE SMOOTH",
"742.667 -61 OFFCURVE",
"763.333 -50.667 OFFCURVE",
"782 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"520 609 LINE",
"591 609 LINE",
"591 689 LINE",
"441 689 LINE"
);
},
{
closed = 1;
nodes = (
"113 391.243 OFFCURVE",
"216.739 466 OFFCURVE",
"281 466 CURVE SMOOTH",
"319.667 466 OFFCURVE",
"363.667 435.667 OFFCURVE",
"393 389 CURVE",
"393 345 LINE",
"354.333 282.333 OFFCURVE",
"283.333 244 OFFCURVE",
"214 244 CURVE SMOOTH",
"164.667 244 OFFCURVE",
"113 286 OFFCURVE",
"113 330 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */\01253 52 29 3 9 10 18 13 7 3 2 9 42 12 2 1 2 3 74 34 1 4 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 47 values pushed */\0120 9 10 2 10 9 2 112 0 3 0 10 9 3 10 99 0 6 0 0 6 0 95 11 8 2 4 4 5 89 7 1 5 5 24 75 0 2 2 1 91 0 1 1 26 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01245 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 47 values pushed */\0120 9 10 2 10 9 2 112 0 3 0 10 9 3 10 99 0 6 0 0 6 0 95 11 8 2 4 4 5 89 7 1 5 5 25 75 0 2 2 1 91 0 1 1 26 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 45 values pushed */\0120 9 10 2 10 9 2 112 0 3 0 10 9 3 10 99 0 2 0 1 6 2 1 99 0 6 0 0 6 0 95 11 8 2 4 4 5 89 7 1 5 5 25 4 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 21 values pushed */\01243 43 57 55 50 48 43 46 43 46 20 37 17 19 41 35 38 33 12 6 28 \012CALL[ ]	/* CallFunction */";
};
width = 578;
}
);
note = uni0935094D0930;
},
{
glyphname = "sh_r-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"90 306 LINE",
"164.667 320 OFFCURVE",
"239 352 OFFCURVE",
"313 402 CURVE",
"556 299 LINE",
"556 330 LINE",
"336 423 LINE",
"382.667 459 OFFCURVE",
"411 506 OFFCURVE",
"411 550 CURVE SMOOTH",
"411 572.667 OFFCURVE",
"400.333 596.667 OFFCURVE",
"379 622 CURVE SMOOTH",
"336.333 672.667 OFFCURVE",
"265.667 711 OFFCURVE",
"211 711 CURVE SMOOTH",
"147.37 711 OFFCURVE",
"88 646.455 OFFCURVE",
"88 580 CURVE SMOOTH",
"88 537.333 OFFCURVE",
"144.667 483.667 OFFCURVE",
"230 445 CURVE",
"154.667 403 OFFCURVE",
"83.333 379.667 OFFCURVE",
"16 375 CURVE"
);
},
{
closed = 1;
nodes = (
"207.333 486 OFFCURVE",
"172 518.667 OFFCURVE",
"172 548 CURVE SMOOTH",
"172 598.474 OFFCURVE",
"221.829 658 OFFCURVE",
"268 658 CURVE SMOOTH",
"302.667 658 OFFCURVE",
"338 625.667 OFFCURVE",
"338 595 CURVE SMOOTH",
"338 551 OFFCURVE",
"307.333 502 OFFCURVE",
"258 466 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */\01234 18 15 1 4 1 2 1 74 20 17 16 3 1 71 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 17 values pushed */\0123 1 1 2 1 115 0 2 2 0 91 0 0 0 24 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 17 values pushed */\0123 1 1 2 1 115 0 2 2 0 91 0 0 0 31 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01223 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 17 values pushed */\0123 1 1 2 1 115 0 2 2 0 91 0 0 0 25 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 22 values pushed */\0123 1 1 2 1 115 0 0 2 2 0 87 0 0 0 2 91 0 2 0 2 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 12 values pushed */\0120 0 28 26 0 21 0 21 39 4 6 21 \012CALL[ ]	/* CallFunction */";
};
width = 440;
}
);
note = uni0936094D0072;
},
{
glyphname = "sha_rakar-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"87 326 LINE",
"161 338.667 OFFCURVE",
"236 370.667 OFFCURVE",
"312 422 CURVE",
"477 350 LINE",
"401 290.667 OFFCURVE",
"308 243.333 OFFCURVE",
"198 208 CURVE",
"279 146 LINE",
"388.333 189.333 OFFCURVE",
"480 245.333 OFFCURVE",
"554 314 CURVE",
"554 168 LINE SMOOTH",
"554 138.667 OFFCURVE",
"573.333 106 OFFCURVE",
"612 70 CURVE SMOOTH",
"689.333 -2 OFFCURVE",
"808 -61 OFFCURVE",
"880 -61 CURVE SMOOTH",
"903.333 -61 OFFCURVE",
"924.667 -50.667 OFFCURVE",
"944 -30 CURVE",
"870 17 LINE",
"854 -3 OFFCURVE",
"836.333 -13 OFFCURVE",
"817 -13 CURVE SMOOTH",
"764.514 -13 OFFCURVE",
"636 59.72 OFFCURVE",
"636 111 CURVE SMOOTH",
"636 609 LINE",
"556 689 LINE",
"400 689 LINE",
"467 609 LINE",
"554 609 LINE",
"554 350 LINE",
"336 443 LINE",
"377.333 475 OFFCURVE",
"404 521 OFFCURVE",
"404 561 CURVE SMOOTH",
"404 582.333 OFFCURVE",
"393.667 604.833 OFFCURVE",
"373 628.5 CURVE SMOOTH",
"331.667 675.833 OFFCURVE",
"264.667 711 OFFCURVE",
"210 711 CURVE SMOOTH",
"148.942 711 OFFCURVE",
"93 655.003 OFFCURVE",
"93 593 CURVE SMOOTH",
"93 553 OFFCURVE",
"145.333 501.333 OFFCURVE",
"228 464 CURVE",
"154.667 423.333 OFFCURVE",
"83.333 400 OFFCURVE",
"14 394 CURVE"
);
},
{
closed = 1;
nodes = (
"602 689 LINE",
"682 609 LINE",
"752 609 LINE",
"752 689 LINE"
);
},
{
closed = 1;
nodes = (
"209 504.667 OFFCURVE",
"177 534 OFFCURVE",
"177 562 CURVE SMOOTH",
"177 606.635 OFFCURVE",
"224.476 658 OFFCURVE",
"268 658 CURVE SMOOTH",
"300 658 OFFCURVE",
"333 632.667 OFFCURVE",
"333 606 CURVE SMOOTH",
"333 564.667 OFFCURVE",
"303.667 519.333 OFFCURVE",
"257 486 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */\01262 45 44 42 41 39 38 36 28 16 15 1 12 3 1 29 1 4 3 2 74 21 1 1 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 30 values pushed */\0120 3 0 4 3 4 95 0 7 7 0 91 0 0 0 24 75 6 1 1 1 2 89 5 1 2 2 24 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 30 values pushed */\0120 3 0 4 3 4 95 0 7 7 0 91 0 0 0 31 75 6 1 1 1 2 89 5 1 2 2 24 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01223 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 30 values pushed */\0120 3 0 4 3 4 95 0 7 7 0 91 0 0 0 25 75 6 1 1 1 2 89 5 1 2 2 25 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 28 values pushed */\0120 0 0 7 1 0 7 99 0 3 0 4 3 4 95 6 1 1 1 2 89 5 1 2 2 25 1 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 11 values pushed */\01237 17 30 35 37 17 24 39 8 6 28 \012CALL[ ]	/* CallFunction */";
};
width = 738;
}
);
note = uni0936094D0930;
},
{
glyphname = "sha_rakar_rVocalicMatra-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"772.333 -37.667 OFFCURVE",
"836 -61 OFFCURVE",
"880 -61 CURVE SMOOTH",
"903.333 -61 OFFCURVE",
"924.667 -50.667 OFFCURVE",
"944 -30 CURVE",
"870 17 LINE",
"854 -3 OFFCURVE",
"836.333 -13 OFFCURVE",
"817 -13 CURVE SMOOTH",
"764.514 -13 OFFCURVE",
"636 59.72 OFFCURVE",
"636 111 CURVE SMOOTH",
"636 609 LINE",
"556 689 LINE",
"400 689 LINE",
"467 609 LINE",
"554 609 LINE",
"554 350 LINE",
"336 443 LINE",
"377.333 475 OFFCURVE",
"404 521 OFFCURVE",
"404 561 CURVE SMOOTH",
"404 582.333 OFFCURVE",
"393.667 604.833 OFFCURVE",
"373 628.5 CURVE SMOOTH",
"331.667 675.833 OFFCURVE",
"264.667 711 OFFCURVE",
"210 711 CURVE SMOOTH",
"148.942 711 OFFCURVE",
"93 655.003 OFFCURVE",
"93 593 CURVE SMOOTH",
"93 553 OFFCURVE",
"145.333 501.333 OFFCURVE",
"228 464 CURVE",
"154.667 423.333 OFFCURVE",
"83.333 400 OFFCURVE",
"14 394 CURVE",
"87 326 LINE",
"161 338.667 OFFCURVE",
"236 370.667 OFFCURVE",
"312 422 CURVE",
"554 320 LINE",
"554 168 LINE SMOOTH",
"554 133.333 OFFCURVE",
"584.667 91.333 OFFCURVE",
"634 50 CURVE",
"552.667 35.333 OFFCURVE",
"493 -14.333 OFFCURVE",
"493 -69 CURVE SMOOTH",
"493 -97 OFFCURVE",
"505 -126.333 OFFCURVE",
"529 -157 CURVE SMOOTH",
"577 -218.333 OFFCURVE",
"659.333 -263 OFFCURVE",
"734 -263 CURVE SMOOTH",
"800.667 -263 OFFCURVE",
"856 -243.667 OFFCURVE",
"888 -209 CURVE",
"833 -150 LINE",
"794.333 -188 OFFCURVE",
"746.667 -207 OFFCURVE",
"690 -207 CURVE SMOOTH",
"618 -207 OFFCURVE",
"559 -165.333 OFFCURVE",
"559 -112 CURVE SMOOTH",
"559 -62.667 OFFCURVE",
"619 -19 OFFCURVE",
"711 -3 CURVE"
);
},
{
closed = 1;
nodes = (
"682 609 LINE",
"752 609 LINE",
"752 689 LINE",
"602 689 LINE"
);
},
{
closed = 1;
nodes = (
"209 504.667 OFFCURVE",
"177 534 OFFCURVE",
"177 562 CURVE SMOOTH",
"177 606.635 OFFCURVE",
"224.476 658 OFFCURVE",
"268 658 CURVE SMOOTH",
"300 658 OFFCURVE",
"333 632.667 OFFCURVE",
"333 606 CURVE SMOOTH",
"333 564.667 OFFCURVE",
"303.667 519.333 OFFCURVE",
"257 486 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */\01278 61 55 43 42 28 26 25 23 22 18 11 5 3 56 1 6 5 7 1 0 6 8 1 1 0 4 74 48 1 3 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 46 values pushed */\0120 5 3 6 3 5 6 112 0 6 0 3 6 0 110 0 0 0 1 0 1 95 0 9 9 2 91 0 2 2 24 75 10 8 2 3 3 4 89 7 1 4 4 24 3 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 46 values pushed */\0120 5 3 6 3 5 6 112 0 6 0 3 6 0 110 0 0 0 1 0 1 95 0 9 9 2 91 0 2 2 31 75 10 8 2 3 3 4 89 7 1 4 4 24 3 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01223 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 46 values pushed */\0120 5 3 6 3 5 6 112 0 6 0 3 6 0 110 0 0 0 1 0 1 95 0 9 9 2 91 0 2 2 25 75 10 8 2 3 3 4 89 7 1 4 4 25 3 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 44 values pushed */\0120 5 3 6 3 5 6 112 0 6 0 3 6 0 110 0 2 0 9 3 2 9 99 0 0 0 1 0 1 95 10 8 2 3 3 4 89 7 1 4 4 25 3 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 25 values pushed */\01262 62 72 70 62 65 62 65 64 63 59 57 54 52 47 46 45 44 36 34 36 36 11 6 22 \012CALL[ ]	/* CallFunction */";
};
width = 738;
}
);
note = uni0936094D09300943;
},
{
glyphname = "ssa_rakar-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"713 17 LINE",
"698.333 -3 OFFCURVE",
"678.667 -13 OFFCURVE",
"660 -13 CURVE SMOOTH",
"607.514 -13 OFFCURVE",
"479 59.72 OFFCURVE",
"479 111 CURVE SMOOTH",
"479 609 LINE",
"398 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"61 609 LINE",
"61 404 LINE SMOOTH",
"61 349.245 OFFCURVE",
"168.65 258.227 OFFCURVE",
"234 238 CURVE",
"95 121 LINE",
"81.667 111.667 OFFCURVE",
"70 107 OFFCURVE",
"60 107 CURVE SMOOTH",
"48 107 OFFCURVE",
"36 112.333 OFFCURVE",
"24 123 CURVE",
"9 101 LINE",
"46.333 66.333 OFFCURVE",
"82 45 OFFCURVE",
"106 45 CURVE SMOOTH",
"120.667 45 OFFCURVE",
"142.333 57.667 OFFCURVE",
"171 83 CURVE SMOOTH",
"396 281 LINE",
"396 166 LINE SMOOTH",
"396 140 OFFCURVE",
"414.833 108.833 OFFCURVE",
"452.5 72.5 CURVE SMOOTH",
"527.833 -0.167 OFFCURVE",
"645.667 -61 OFFCURVE",
"723 -61 CURVE SMOOTH",
"744.333 -61 OFFCURVE",
"765.333 -50.667 OFFCURVE",
"786 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"524 609 LINE",
"594 609 LINE",
"594 689 LINE",
"446 689 LINE"
);
},
{
closed = 1;
nodes = (
"143 609 LINE",
"396 609 LINE",
"396 392 LINE",
"381 373 LINE",
"176 592 LINE",
"143 590 LINE"
);
},
{
closed = 1;
nodes = (
"143 571 LINE",
"340 360 LINE",
"364 354 LINE",
"321.333 310 OFFCURVE",
"274 285 OFFCURVE",
"230 285 CURVE SMOOTH",
"183.333 285 OFFCURVE",
"143 317.667 OFFCURVE",
"143 359 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */\01254 52 45 44 4 10 8 19 14 7 3 2 10 13 1 1 2 36 1 5 1 4 74 28 1 3 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 52 values pushed */\0120 8 3 10 3 8 10 112 0 10 2 3 10 2 110 0 2 1 3 2 1 110 0 1 5 3 1 5 110 0 5 0 0 5 0 95 12 9 11 7 4 3 3 4 89 6 1 4 4 24 3 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 52 values pushed */\0120 8 3 10 3 8 10 112 0 10 2 3 10 2 110 0 2 1 3 2 1 110 0 1 5 3 1 5 110 0 5 0 0 5 0 95 12 9 11 7 4 3 3 4 89 6 1 4 4 25 3 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 26 values pushed */\01241 41 37 37 50 48 41 46 41 46 43 42 37 40 37 40 20 37 17 23 36 38 33 13 6 27 \012CALL[ ]	/* CallFunction */";
};
width = 581;
}
);
note = uni0937094D0930;
},
{
glyphname = "ss_tta-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"337 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"130 609 LINE",
"80.667 527 OFFCURVE",
"56 463.333 OFFCURVE",
"56 418 CURVE SMOOTH",
"56 358 OFFCURVE",
"110 296.333 OFFCURVE",
"190 267 CURVE",
"124.667 236.333 OFFCURVE",
"84 196.667 OFFCURVE",
"84 162 CURVE SMOOTH",
"84 135.333 OFFCURVE",
"96.833 108.5 OFFCURVE",
"122.5 81.5 CURVE SMOOTH",
"173.833 27.5 OFFCURVE",
"260.667 -10 OFFCURVE",
"342 -10 CURVE SMOOTH",
"436.667 -10 OFFCURVE",
"521.333 24 OFFCURVE",
"572 84 CURVE",
"507 142 LINE",
"451 74 OFFCURVE",
"370.333 38 OFFCURVE",
"281 38 CURVE SMOOTH",
"214.333 38 OFFCURVE",
"161 74 OFFCURVE",
"161 118 CURVE SMOOTH",
"161 143.333 OFFCURVE",
"174.167 164.167 OFFCURVE",
"200.5 180.5 CURVE SMOOTH",
"226.833 196.833 OFFCURVE",
"266.667 214.667 OFFCURVE",
"320 234 CURVE SMOOTH",
"363.333 250 OFFCURVE",
"398.5 264.667 OFFCURVE",
"425.5 278 CURVE SMOOTH",
"479.5 304.667 OFFCURVE",
"522 344.667 OFFCURVE",
"522 402 CURVE SMOOTH",
"522 458 OFFCURVE",
"487.333 533.333 OFFCURVE",
"434 588 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"614 609 LINE",
"614 689 LINE",
"386 689 LINE",
"453 609 LINE"
);
},
{
closed = 1;
nodes = (
"229 609 LINE",
"364 609 LINE",
"428 554.333 OFFCURVE",
"465 495.333 OFFCURVE",
"465 450 CURVE SMOOTH",
"465 423.333 OFFCURVE",
"453 399 OFFCURVE",
"429 383 CURVE",
"197 558 LINE"
);
},
{
closed = 1;
nodes = (
"403 358 LINE",
"348.333 316 OFFCURVE",
"292.667 293 OFFCURVE",
"236 289 CURVE",
"180 289 OFFCURVE",
"133 329.667 OFFCURVE",
"133 379 CURVE SMOOTH",
"133 425.667 OFFCURVE",
"149 473 OFFCURVE",
"181 521 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */\01256 55 42 41 4 7 2 27 17 16 3 0 7 2 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 33 values pushed */\0120 7 2 0 2 7 0 112 8 6 4 3 2 2 3 89 5 1 3 3 24 75 0 0 0 1 92 0 1 1 26 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 33 values pushed */\0120 7 2 0 2 7 0 112 8 6 4 3 2 2 3 89 5 1 3 3 25 75 0 0 0 1 92 0 1 1 26 1 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 17 values pushed */\01240 40 54 52 40 48 40 48 17 17 17 27 37 44 9 6 26 \012CALL[ ]	/* CallFunction */";
};
width = 599;
}
);
note = uni0937094D091F;
},
{
glyphname = "ss_tta_rakar-deva";
layers = (
{
components = (
{
alignment = -1;
name = "rakar-deva";
transform = "{1, 0, 0, 1, 581, 0}";
},
{
alignment = -1;
name = "ss_tta-deva";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 599;
}
);
note = uni0937094D091F094D0930;
},
{
glyphname = "ss_ttha-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"342 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"130 609 LINE",
"80.667 525.667 OFFCURVE",
"56 462 OFFCURVE",
"56 418 CURVE SMOOTH",
"56 358 OFFCURVE",
"110.333 295.667 OFFCURVE",
"193 265 CURVE",
"125 234.333 OFFCURVE",
"83 194.667 OFFCURVE",
"83 160 CURVE SMOOTH",
"83 133.333 OFFCURVE",
"95.833 106.833 OFFCURVE",
"121.5 80.5 CURVE SMOOTH",
"172.833 27.833 OFFCURVE",
"260.667 -9 OFFCURVE",
"342 -9 CURVE SMOOTH",
"385.333 -9 OFFCURVE",
"425.333 -2.5 OFFCURVE",
"462 10.5 CURVE SMOOTH",
"535.333 36.5 OFFCURVE",
"582 84.333 OFFCURVE",
"582 139 CURVE SMOOTH",
"582 192.333 OFFCURVE",
"524.333 249.333 OFFCURVE",
"439 280 CURVE",
"492.333 312 OFFCURVE",
"524 355 OFFCURVE",
"524 395 CURVE SMOOTH",
"524 457.667 OFFCURVE",
"483.333 534.333 OFFCURVE",
"410 609 CURVE"
);
},
{
closed = 1;
nodes = (
"635 609 LINE",
"635 689 LINE",
"387 689 LINE",
"455 609 LINE"
);
},
{
closed = 1;
nodes = (
"227 609 LINE",
"365 609 LINE",
"429 554.333 OFFCURVE",
"466 495.333 OFFCURVE",
"466 450 CURVE SMOOTH",
"466 423.333 OFFCURVE",
"453 398 OFFCURVE",
"429 382 CURVE",
"198 558 LINE"
);
},
{
closed = 1;
nodes = (
"400 357 LINE",
"344.667 315 OFFCURVE",
"289.667 292 OFFCURVE",
"235 288 CURVE",
"180.333 288 OFFCURVE",
"134 329.667 OFFCURVE",
"134 379 CURVE SMOOTH",
"134 423 OFFCURVE",
"149.667 470 OFFCURVE",
"181 520 CURVE"
);
},
{
closed = 1;
nodes = (
"459 244.667 OFFCURVE",
"501 207.333 OFFCURVE",
"501 170 CURVE SMOOTH",
"501 146 OFFCURVE",
"491 123.833 OFFCURVE",
"471 103.5 CURVE SMOOTH",
"431 62.833 OFFCURVE",
"360.333 37 OFFCURVE",
"283 37 CURVE SMOOTH",
"217.667 37 OFFCURVE",
"164 73 OFFCURVE",
"164 117 CURVE SMOOTH",
"164 141.667 OFFCURVE",
"178.333 162 OFFCURVE",
"207 178 CURVE SMOOTH",
"235.667 194 OFFCURVE",
"276.667 211.333 OFFCURVE",
"330 230 CURVE SMOOTH",
"367.333 244 OFFCURVE",
"391.667 253.333 OFFCURVE",
"403 258 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */\01249 48 35 34 4 6 1 64 20 6 3 7 6 2 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 33 values pushed */\0120 6 1 7 1 6 7 112 8 5 3 3 1 1 2 89 4 1 2 2 24 75 0 7 7 0 91 0 0 0 26 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 33 values pushed */\0120 6 1 7 1 6 7 112 8 5 3 3 1 1 2 89 4 1 2 2 25 75 0 7 7 0 91 0 0 0 26 0 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 18 values pushed */\01233 33 58 56 46 45 33 41 33 41 17 17 17 27 44 9 6 25 \012CALL[ ]	/* CallFunction */";
};
width = 622;
}
);
note = uni0937094D0920;
},
{
glyphname = "ss_ttha_rakar-deva";
layers = (
{
components = (
{
alignment = -1;
name = "rakar-deva";
transform = "{1, 0, 0, 1, 602, 0}";
},
{
alignment = -1;
name = "ss_ttha-deva";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 622;
}
);
note = uni0937094D0920094D0930;
},
{
glyphname = "sa_rakar-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"646 609 LINE",
"567 689 LINE",
"252 689 LINE",
"326 609 LINE",
"564 609 LINE",
"564 364 LINE",
"507.333 419.333 OFFCURVE",
"455.667 447 OFFCURVE",
"409 447 CURVE SMOOTH",
"386.333 447 OFFCURVE",
"367.333 445.333 OFFCURVE",
"352 442 CURVE",
"345.333 495.333 OFFCURVE",
"310.333 577 OFFCURVE",
"281 609 CURVE SMOOTH",
"206 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"226 609 LINE",
"268.667 566.333 OFFCURVE",
"296 512.333 OFFCURVE",
"296 463 CURVE SMOOTH",
"296 431 OFFCURVE",
"278 400.667 OFFCURVE",
"250 386 CURVE",
"223.333 455.333 OFFCURVE",
"173.333 500 OFFCURVE",
"124 500 CURVE SMOOTH",
"77.333 500 OFFCURVE",
"40 468 OFFCURVE",
"40 428 CURVE SMOOTH",
"40 386.667 OFFCURVE",
"68.333 329.333 OFFCURVE",
"119 264 CURVE SMOOTH",
"261.667 68 OFFCURVE",
"403.333 -48 OFFCURVE",
"498 -48 CURVE SMOOTH",
"536.667 -48 OFFCURVE",
"569.667 -34.667 OFFCURVE",
"587 -12 CURVE",
"522 42 LINE",
"504.667 20.667 OFFCURVE",
"480.667 7 OFFCURVE",
"458 7 CURVE SMOOTH",
"383.333 7 OFFCURVE",
"268.667 105.667 OFFCURVE",
"154 271 CURVE",
"254 269.667 OFFCURVE",
"313.333 301.333 OFFCURVE",
"344 368 CURVE",
"368 376.667 OFFCURVE",
"403.667 381 OFFCURVE",
"451 381 CURVE SMOOTH",
"489.667 381 OFFCURVE",
"529.333 362.667 OFFCURVE",
"564 328 CURVE",
"564 314 LINE",
"506 262.667 OFFCURVE",
"422 215.333 OFFCURVE",
"312 172 CURVE",
"368 104 LINE",
"446 138 OFFCURVE",
"511.333 181.333 OFFCURVE",
"564 234 CURVE",
"564 168 LINE SMOOTH",
"564 141.333 OFFCURVE",
"583.167 109.833 OFFCURVE",
"621.5 73.5 CURVE SMOOTH",
"698.167 0.833 OFFCURVE",
"816.333 -61 OFFCURVE",
"891 -61 CURVE SMOOTH",
"914.333 -61 OFFCURVE",
"935.333 -50.667 OFFCURVE",
"954 -30 CURVE",
"880 17 LINE",
"864 -3 OFFCURVE",
"847 -13 OFFCURVE",
"829 -13 CURVE SMOOTH",
"773.842 -13 OFFCURVE",
"646 60.915 OFFCURVE",
"646 111 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"762 609 LINE",
"762 689 LINE",
"612 689 LINE",
"692 609 LINE"
);
},
{
closed = 1;
nodes = (
"183.333 430 OFFCURVE",
"209.333 406.667 OFFCURVE",
"224 368 CURVE",
"194.667 352 OFFCURVE",
"163.333 344 OFFCURVE",
"130 344 CURVE SMOOTH",
"111.333 344 OFFCURVE",
"97 364 OFFCURVE",
"97 388 CURVE SMOOTH",
"97 409.333 OFFCURVE",
"126 430 OFFCURVE",
"154 430 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */\01251 1 2 15 84 68 2 14 2 21 20 2 3 14 35 18 17 15 7 5 4 3 36 1 0 4 8 1 5 0 6 74 0 1 7 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 55 values pushed */\0120 6 16 1 15 2 6 15 99 0 9 0 2 14 9 2 99 0 14 0 3 4 14 3 99 0 4 0 5 1 4 5 99 0 0 0 1 0 1 95 12 10 2 7 7 8 89 13 11 2 8 8 24 7 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 55 values pushed */\0120 6 16 1 15 2 6 15 99 0 9 0 2 14 9 2 99 0 14 0 3 4 14 3 99 0 4 0 5 1 4 5 99 0 0 0 1 0 1 95 12 10 2 7 7 8 89 13 11 2 8 8 25 7 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 30 values pushed */\01277 77 77 87 77 86 83 81 76 75 74 73 72 71 70 69 67 65 17 24 39 37 34 19 44 35 36 17 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 749;
}
);
note = uni0938094D0930;
},
{
glyphname = "s_ta_rakar-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"392.333 24 OFFCURVE",
"353.167 46 OFFCURVE",
"305.5 90 CURVE SMOOTH",
"257.833 134 OFFCURVE",
"206.667 195 OFFCURVE",
"152 273 CURVE",
"158 272.333 OFFCURVE",
"166.667 272 OFFCURVE",
"178 272 CURVE SMOOTH",
"240.667 272 OFFCURVE",
"296.667 296 OFFCURVE",
"334 348 CURVE",
"376 318 OFFCURVE",
"420.333 303 OFFCURVE",
"467 303 CURVE SMOOTH",
"478.333 303 OFFCURVE",
"492 305.333 OFFCURVE",
"508 310 CURVE",
"508 386 LINE",
"473.333 368.667 OFFCURVE",
"439.333 360 OFFCURVE",
"406 360 CURVE SMOOTH",
"388 360 OFFCURVE",
"369 366 OFFCURVE",
"349 378 CURVE",
"355.667 396.667 OFFCURVE",
"359 414.333 OFFCURVE",
"359 431 CURVE SMOOTH",
"359 489.667 OFFCURVE",
"325.667 558.333 OFFCURVE",
"279 609 CURVE SMOOTH",
"205 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"229 609 LINE",
"271.667 566.333 OFFCURVE",
"297 513.667 OFFCURVE",
"297 467 CURVE SMOOTH",
"297 433.667 OFFCURVE",
"279.333 403.333 OFFCURVE",
"250 386 CURVE",
"224.667 455.333 OFFCURVE",
"175.667 501 OFFCURVE",
"129 501 CURVE SMOOTH",
"82.333 501 OFFCURVE",
"40 471 OFFCURVE",
"40 431 CURVE SMOOTH",
"40 390.333 OFFCURVE",
"66.167 332.333 OFFCURVE",
"118.5 257 CURVE SMOOTH",
"223.167 106.333 OFFCURVE",
"377.333 -34 OFFCURVE",
"456 -34 CURVE SMOOTH",
"486.667 -34 OFFCURVE",
"518.333 -20.333 OFFCURVE",
"537 1 CURVE",
"470 55 LINE",
"454.667 34.333 OFFCURVE",
"439 24 OFFCURVE",
"423 24 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1221 17 LINE",
"1209 -3 OFFCURVE",
"1192.333 -13 OFFCURVE",
"1171 -13 CURVE SMOOTH",
"1120.773 -13 OFFCURVE",
"988 55.776 OFFCURVE",
"988 111 CURVE SMOOTH",
"988 609 LINE",
"908 689 LINE",
"251 689 LINE",
"325 609 LINE",
"494 609 LINE",
"905 609 LINE",
"905 382 LINE",
"819.667 466 OFFCURVE",
"730 512 OFFCURVE",
"654 512 CURVE SMOOTH",
"606.667 512 OFFCURVE",
"554.667 496.333 OFFCURVE",
"498 465 CURVE",
"550 390 LINE",
"605.333 431.333 OFFCURVE",
"660 452 OFFCURVE",
"714 452 CURVE SMOOTH",
"764.667 452 OFFCURVE",
"824.667 421.667 OFFCURVE",
"882 367 CURVE",
"794.667 289 OFFCURVE",
"695.667 229.667 OFFCURVE",
"585 189 CURVE",
"648 119 LINE",
"740.667 157.667 OFFCURVE",
"826.333 214.667 OFFCURVE",
"905 290 CURVE",
"905 166 LINE SMOOTH",
"905 135.333 OFFCURVE",
"924.833 102.167 OFFCURVE",
"964.5 66.5 CURVE SMOOTH",
"1043.833 -4.833 OFFCURVE",
"1166.333 -61 OFFCURVE",
"1233 -61 CURVE SMOOTH",
"1254.333 -61 OFFCURVE",
"1275.333 -50.667 OFFCURVE",
"1296 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"1034 609 LINE",
"1104 609 LINE",
"1104 689 LINE",
"953 689 LINE"
);
},
{
closed = 1;
nodes = (
"97 411.333 OFFCURVE",
"126.667 431 OFFCURVE",
"156 431 CURVE SMOOTH",
"184 431 OFFCURVE",
"215.333 403.333 OFFCURVE",
"226 370 CURVE",
"196 354 OFFCURVE",
"163.667 346 OFFCURVE",
"129 346 CURVE SMOOTH",
"111.667 346 OFFCURVE",
"97 367.333 OFFCURVE",
"97 390 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */\01266 1 9 1 93 71 65 60 34 30 15 7 4 17 39 1 16 4 35 1 5 16 55 1 6 5 58 57 1 3 7 6 84 2 2 13 7 7 74 77 1 2 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 64 values pushed */\0120 10 0 9 17 10 9 99 0 1 0 17 4 1 17 99 0 4 0 5 6 4 5 99 0 16 0 6 7 16 6 99 18 1 7 0 0 8 7 0 99 0 13 0 8 13 8 95 19 15 11 3 2 2 3 89 14 12 2 3 3 24 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 64 values pushed */\0120 10 0 9 17 10 9 99 0 1 0 17 4 1 17 99 0 4 0 5 6 4 5 99 0 16 0 6 7 16 6 99 18 1 7 0 0 8 7 0 99 0 13 0 8 13 8 95 19 15 11 3 2 2 3 89 14 12 2 3 3 25 2 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 40 values pushed */\01285 85 0 0 97 95 92 90 85 88 85 88 87 86 83 81 76 75 74 72 69 67 64 62 51 49 0 47 0 46 35 35 39 17 24 37 36 20 6 27 \012CALL[ ]	/* CallFunction */";
};
width = 1090;
}
);
note = uni0938094D0924094D0930;
},
{
glyphname = "ha_rakar-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"330 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"358 609 LINE",
"386.667 575 OFFCURVE",
"401 546.333 OFFCURVE",
"401 523 CURVE SMOOTH",
"401 501.667 OFFCURVE",
"380.333 485 OFFCURVE",
"355 485 CURVE SMOOTH",
"331 485 OFFCURVE",
"302 486.667 OFFCURVE",
"278 488 CURVE SMOOTH",
"235.333 490.667 OFFCURVE",
"206 492 OFFCURVE",
"190 492 CURVE SMOOTH",
"122 492 OFFCURVE",
"64 454.667 OFFCURVE",
"64 408 CURVE SMOOTH",
"64 365.333 OFFCURVE",
"105 314.667 OFFCURVE",
"169 276 CURVE",
"102.333 237.333 OFFCURVE",
"59 182.333 OFFCURVE",
"59 137 CURVE SMOOTH",
"59 90.333 OFFCURVE",
"78.833 43.833 OFFCURVE",
"118.5 -2.5 CURVE SMOOTH",
"197.833 -95.167 OFFCURVE",
"332.667 -160 OFFCURVE",
"458 -160 CURVE SMOOTH",
"514.667 -160 OFFCURVE",
"553.333 -151.333 OFFCURVE",
"574 -134 CURVE",
"509 -79 LINE",
"487.667 -101.667 OFFCURVE",
"443.333 -114 OFFCURVE",
"390 -114 CURVE SMOOTH",
"352 -114 OFFCURVE",
"312.167 -103.667 OFFCURVE",
"270.5 -83 CURVE SMOOTH",
"187.167 -41.667 OFFCURVE",
"125 26 OFFCURVE",
"125 82 CURVE SMOOTH",
"125 111.333 OFFCURVE",
"139.5 141.167 OFFCURVE",
"168.5 171.5 CURVE SMOOTH",
"226.5 232.167 OFFCURVE",
"325 276 OFFCURVE",
"413 276 CURVE SMOOTH",
"437 276 OFFCURVE",
"454 269.333 OFFCURVE",
"464 256 CURVE",
"414.667 199.333 OFFCURVE",
"380.333 162 OFFCURVE",
"361 144 CURVE SMOOTH",
"333 118 OFFCURVE",
"311 105 OFFCURVE",
"295 105 CURVE SMOOTH",
"287 105 OFFCURVE",
"278 109.333 OFFCURVE",
"268 118 CURVE",
"253 103 LINE",
"290.333 68.333 OFFCURVE",
"318.333 51 OFFCURVE",
"337 51 CURVE SMOOTH",
"381 51 OFFCURVE",
"451.667 111.667 OFFCURVE",
"525 213 CURVE",
"550.333 191.667 OFFCURVE",
"566 167 OFFCURVE",
"566 147 CURVE SMOOTH",
"566 101.667 OFFCURVE",
"524.667 55.667 OFFCURVE",
"462 33 CURVE",
"530 -17 LINE",
"588.667 5.667 OFFCURVE",
"628 56 OFFCURVE",
"628 108 CURVE SMOOTH",
"628 136 OFFCURVE",
"613.5 167.667 OFFCURVE",
"584.5 203 CURVE SMOOTH",
"526.5 273.667 OFFCURVE",
"433 331 OFFCURVE",
"369 331 CURVE SMOOTH",
"305 331 OFFCURVE",
"248.667 318.333 OFFCURVE",
"200 293 CURVE",
"160 313 OFFCURVE",
"136 340.667 OFFCURVE",
"136 366 CURVE SMOOTH",
"136 400.667 OFFCURVE",
"175.667 428 OFFCURVE",
"225 428 CURVE SMOOTH",
"233 428 OFFCURVE",
"261.667 426.667 OFFCURVE",
"311 424 CURVE SMOOTH",
"394 421 LINE",
"430 421 OFFCURVE",
"458 444.333 OFFCURVE",
"458 475 CURVE SMOOTH",
"458 511 OFFCURVE",
"439.333 555.667 OFFCURVE",
"402 609 CURVE"
);
},
{
closed = 1;
nodes = (
"674 609 LINE",
"674 689 LINE",
"379 689 LINE",
"448 609 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */\01214 1 4 1 42 36 30 3 3 4 35 1 2 3 55 24 23 3 5 2 56 1 6 5 5 74 65 1 4 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 44 values pushed */\0120 7 0 0 1 7 0 99 0 1 0 4 3 1 4 99 0 3 0 2 5 3 2 99 0 5 0 6 5 6 95 10 1 8 8 9 89 11 1 9 9 24 8 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 44 values pushed */\0120 7 0 0 1 7 0 99 0 1 0 4 3 1 4 99 0 3 0 2 5 3 2 99 0 5 0 6 5 6 95 10 1 8 8 9 89 11 1 9 9 25 8 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 18 values pushed */\01288 87 86 85 84 83 20 123 36 38 36 35 47 38 84 12 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 660;
}
);
note = uni0939094D0930;
},
{
glyphname = "h_nna-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-14 689 LINE",
"-14 609 LINE",
"382 609 LINE",
"414.667 570.333 OFFCURVE",
"431 541.333 OFFCURVE",
"431 522 CURVE SMOOTH",
"431 498 OFFCURVE",
"412.333 484 OFFCURVE",
"387 484 CURVE SMOOTH",
"359 484 OFFCURVE",
"326.667 485.667 OFFCURVE",
"296 487 CURVE SMOOTH",
"245.333 489.667 OFFCURVE",
"211.667 491 OFFCURVE",
"195 491 CURVE SMOOTH",
"129.667 491 OFFCURVE",
"65 456.667 OFFCURVE",
"65 406 CURVE SMOOTH",
"65 359.333 OFFCURVE",
"109.333 310.667 OFFCURVE",
"168 276 CURVE",
"104 241.333 OFFCURVE",
"59 187.667 OFFCURVE",
"59 133 CURVE SMOOTH",
"59 84.333 OFFCURVE",
"80.167 37.5 OFFCURVE",
"122.5 -7.5 CURVE SMOOTH",
"207.167 -97.5 OFFCURVE",
"346 -158 OFFCURVE",
"458 -158 CURVE SMOOTH",
"509.333 -158 OFFCURVE",
"546 -147.333 OFFCURVE",
"568 -126 CURVE",
"501 -82 LINE",
"482.333 -104.667 OFFCURVE",
"442.333 -116 OFFCURVE",
"401 -116 CURVE SMOOTH",
"364.333 -116 OFFCURVE",
"324 -106.333 OFFCURVE",
"280 -87 CURVE SMOOTH",
"192 -48.333 OFFCURVE",
"123 17.333 OFFCURVE",
"123 80 CURVE SMOOTH",
"123 132 OFFCURVE",
"165 183.667 OFFCURVE",
"225 221 CURVE",
"225 144 LINE SMOOTH",
"225 83.936 OFFCURVE",
"297.457 34 OFFCURVE",
"363 34 CURVE SMOOTH",
"404.333 34 OFFCURVE",
"449 73 OFFCURVE",
"449 117 CURVE SMOOTH",
"449 285 LINE",
"490.333 282.333 OFFCURVE",
"529 273.333 OFFCURVE",
"529 252 CURVE SMOOTH",
"529 63 LINE SMOOTH",
"529 22.129 OFFCURVE",
"649.732 -46 OFFCURVE",
"701 -46 CURVE SMOOTH",
"721.667 -46 OFFCURVE",
"742 -39.333 OFFCURVE",
"762 -26 CURVE",
"710 15 LINE",
"699.333 0.333 OFFCURVE",
"684.333 -8 OFFCURVE",
"671 -8 CURVE SMOOTH",
"637.667 -8 OFFCURVE",
"607 8.333 OFFCURVE",
"607 31 CURVE SMOOTH",
"607 226 LINE SMOOTH",
"607 282.126 OFFCURVE",
"448.143 338 OFFCURVE",
"384 338 CURVE SMOOTH",
"319.333 338 OFFCURVE",
"257.333 323 OFFCURVE",
"198 293 CURVE",
"156.667 313.667 OFFCURVE",
"136 338 OFFCURVE",
"136 366 CURVE SMOOTH",
"136 402 OFFCURVE",
"172.667 426 OFFCURVE",
"222 426 CURVE SMOOTH",
"327 423 LINE SMOOTH",
"385.667 420.333 OFFCURVE",
"420.333 419 OFFCURVE",
"431 419 CURVE SMOOTH",
"464.333 419 OFFCURVE",
"492 441.333 OFFCURVE",
"492 472 CURVE SMOOTH",
"492 504 OFFCURVE",
"462 561 OFFCURVE",
"426 609 CURVE",
"358 689 LINE"
);
},
{
closed = 1;
nodes = (
"404 689 LINE",
"473 609 LINE",
"741 609 LINE",
"741 689 LINE"
);
},
{
closed = 1;
nodes = (
"376 129 LINE SMOOTH",
"376 102.333 OFFCURVE",
"345.667 67 OFFCURVE",
"323 67 CURVE SMOOTH",
"308.333 67 OFFCURVE",
"298 76 OFFCURVE",
"298 92 CURVE SMOOTH",
"298 258 LINE",
"332 269.333 OFFCURVE",
"358 276.333 OFFCURVE",
"376 279 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */\01216 1 5 2 100 92 69 49 4 13 5 29 1 3 6 30 1 4 3 59 1 7 4 60 1 8 7 6 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 59 values pushed */\0120 2 1 5 1 2 5 112 0 5 13 1 5 13 110 0 9 0 1 2 9 1 99 0 13 0 6 3 13 6 100 0 3 0 4 7 3 4 99 0 7 0 8 7 8 95 12 1 10 10 0 89 11 1 0 0 24 10 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 59 values pushed */\0120 2 1 5 1 2 5 112 0 5 13 1 5 13 110 0 9 0 1 2 9 1 99 0 13 0 6 3 13 6 100 0 3 0 4 7 3 4 99 0 7 0 8 7 8 95 12 1 10 10 0 89 11 1 0 0 25 10 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 22 values pushed */\01297 95 90 89 88 87 86 85 81 74 36 42 35 22 36 38 37 86 16 14 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 727;
}
);
note = uni0939094D0923;
},
{
glyphname = "h_na-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"721.667 -46 OFFCURVE",
"742 -39.333 OFFCURVE",
"762 -26 CURVE",
"710 15 LINE",
"699.333 0.333 OFFCURVE",
"684.333 -8 OFFCURVE",
"671 -8 CURVE SMOOTH",
"637.667 -8 OFFCURVE",
"607 8.333 OFFCURVE",
"607 31 CURVE SMOOTH",
"607 226 LINE SMOOTH",
"607 282.126 OFFCURVE",
"448.143 338 OFFCURVE",
"384 338 CURVE SMOOTH",
"319.333 338 OFFCURVE",
"257.333 323 OFFCURVE",
"198 293 CURVE",
"156.667 313.667 OFFCURVE",
"136 338 OFFCURVE",
"136 366 CURVE SMOOTH",
"136 402 OFFCURVE",
"172.667 426 OFFCURVE",
"222 426 CURVE SMOOTH",
"327 423 LINE SMOOTH",
"385.667 420.333 OFFCURVE",
"420.333 419 OFFCURVE",
"431 419 CURVE SMOOTH",
"464.333 419 OFFCURVE",
"492 441.333 OFFCURVE",
"492 472 CURVE SMOOTH",
"492 504 OFFCURVE",
"462 561 OFFCURVE",
"426 609 CURVE",
"358 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"382 609 LINE",
"414.667 570.333 OFFCURVE",
"431 541.333 OFFCURVE",
"431 522 CURVE SMOOTH",
"431 498 OFFCURVE",
"412.333 484 OFFCURVE",
"387 484 CURVE SMOOTH",
"359 484 OFFCURVE",
"326.667 485.667 OFFCURVE",
"296 487 CURVE SMOOTH",
"245.333 489.667 OFFCURVE",
"211.667 491 OFFCURVE",
"195 491 CURVE SMOOTH",
"129.667 491 OFFCURVE",
"65 456.667 OFFCURVE",
"65 406 CURVE SMOOTH",
"65 359.333 OFFCURVE",
"109.333 310.667 OFFCURVE",
"168 276 CURVE",
"104 241.333 OFFCURVE",
"59 187.667 OFFCURVE",
"59 133 CURVE SMOOTH",
"59 84.333 OFFCURVE",
"80.167 37.5 OFFCURVE",
"122.5 -7.5 CURVE SMOOTH",
"207.167 -97.5 OFFCURVE",
"346 -158 OFFCURVE",
"458 -158 CURVE SMOOTH",
"509.333 -158 OFFCURVE",
"546 -147.333 OFFCURVE",
"568 -126 CURVE",
"501 -82 LINE",
"482.333 -104.667 OFFCURVE",
"442.333 -116 OFFCURVE",
"401 -116 CURVE SMOOTH",
"364.333 -116 OFFCURVE",
"324 -106.333 OFFCURVE",
"280 -87 CURVE SMOOTH",
"192 -48.333 OFFCURVE",
"123 17.333 OFFCURVE",
"123 80 CURVE SMOOTH",
"123 114 OFFCURVE",
"138.5 146.833 OFFCURVE",
"169.5 178.5 CURVE SMOOTH",
"231.5 241.833 OFFCURVE",
"341 285 OFFCURVE",
"449 285 CURVE",
"490.333 282.333 OFFCURVE",
"529 273.333 OFFCURVE",
"529 252 CURVE SMOOTH",
"529 178 LINE",
"361 178 LINE SMOOTH",
"305 178 OFFCURVE",
"258 145 OFFCURVE",
"258 97 CURVE SMOOTH",
"258 44.874 OFFCURVE",
"328.226 -8 OFFCURVE",
"385 -8 CURVE SMOOTH",
"425 -8 OFFCURVE",
"459 13.667 OFFCURVE",
"459 47 CURVE",
"461.667 67 OFFCURVE",
"444.667 92.667 OFFCURVE",
"414 114 CURVE",
"529 114 LINE",
"529 63 LINE SMOOTH",
"529 22.129 OFFCURVE",
"649.732 -46 OFFCURVE",
"701 -46 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"473 609 LINE",
"741 609 LINE",
"741 689 LINE",
"404 689 LINE"
);
},
{
closed = 1;
nodes = (
"328 35 OFFCURVE",
"319 43.667 OFFCURVE",
"319 61 CURVE SMOOTH",
"319 87.667 OFFCURVE",
"356.667 114 OFFCURVE",
"390 114 CURVE",
"401.333 101.333 OFFCURVE",
"407 90.667 OFFCURVE",
"407 82 CURVE SMOOTH",
"407 62 OFFCURVE",
"376.667 35 OFFCURVE",
"346 35 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */\01278 1 3 10 44 1 2 3 8 1 16 0 91 1 1 16 92 1 12 11 34 1 4 12 35 1 5 4 7 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 66 values pushed */\0120 6 0 9 10 6 9 99 0 10 0 3 2 10 3 99 0 2 15 1 0 16 2 0 99 0 11 17 1 12 4 11 12 99 0 4 0 5 4 5 95 18 14 2 7 7 8 89 13 1 8 8 24 75 19 1 16 16 1 91 0 1 1 26 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 66 values pushed */\0120 6 0 9 10 6 9 99 0 10 0 3 2 10 3 99 0 2 15 1 0 16 2 0 99 0 11 17 1 12 4 11 12 99 0 4 0 5 4 5 95 18 14 2 7 7 8 89 13 1 8 8 25 75 19 1 16 16 1 91 0 1 1 26 1 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 40 values pushed */\01299 99 95 95 0 0 99 108 99 107 104 103 95 98 95 98 97 96 0 94 0 93 89 87 81 79 74 69 17 20 123 36 38 35 37 37 20 20 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 727;
}
);
note = uni0939094D0928;
},
{
glyphname = "h_ma-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"962 17 LINE",
"947.333 -3 OFFCURVE",
"931.333 -13 OFFCURVE",
"910 -13 CURVE SMOOTH",
"858.164 -13 OFFCURVE",
"728 57.428 OFFCURVE",
"728 111 CURVE SMOOTH",
"728 609 LINE",
"648 689 LINE",
"404 689 LINE",
"473 609 LINE",
"645 609 LINE",
"645 248 LINE",
"610.333 248 OFFCURVE",
"568 242 OFFCURVE",
"518 230 CURVE",
"495.335 279.451 OFFCURVE",
"421.148 338 OFFCURVE",
"367 338 CURVE SMOOTH",
"299 338 OFFCURVE",
"266 329 OFFCURVE",
"198 293 CURVE",
"156.667 313.667 OFFCURVE",
"136 338 OFFCURVE",
"136 366 CURVE SMOOTH",
"136 402 OFFCURVE",
"172.667 426 OFFCURVE",
"222 426 CURVE SMOOTH",
"327 423 LINE SMOOTH",
"385.667 420.333 OFFCURVE",
"420.333 419 OFFCURVE",
"431 419 CURVE SMOOTH",
"464.333 419 OFFCURVE",
"492 441.333 OFFCURVE",
"492 472 CURVE SMOOTH",
"492 504 OFFCURVE",
"462 561 OFFCURVE",
"426 609 CURVE",
"358 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"382 609 LINE",
"414.667 570.333 OFFCURVE",
"431 541.333 OFFCURVE",
"431 522 CURVE SMOOTH",
"431 498 OFFCURVE",
"412.333 484 OFFCURVE",
"387 484 CURVE SMOOTH",
"359 484 OFFCURVE",
"326.667 485.667 OFFCURVE",
"296 487 CURVE SMOOTH",
"245.333 489.667 OFFCURVE",
"211.667 491 OFFCURVE",
"195 491 CURVE SMOOTH",
"129.667 491 OFFCURVE",
"65 456.667 OFFCURVE",
"65 406 CURVE SMOOTH",
"65 359.333 OFFCURVE",
"109.333 310.667 OFFCURVE",
"168 276 CURVE",
"104 241.333 OFFCURVE",
"59 187.667 OFFCURVE",
"59 133 CURVE SMOOTH",
"59 84.333 OFFCURVE",
"80.167 37.5 OFFCURVE",
"122.5 -7.5 CURVE SMOOTH",
"207.167 -97.5 OFFCURVE",
"346 -158 OFFCURVE",
"458 -158 CURVE SMOOTH",
"509.333 -158 OFFCURVE",
"546 -147.333 OFFCURVE",
"568 -126 CURVE",
"501 -82 LINE",
"482.333 -104.667 OFFCURVE",
"442.333 -116 OFFCURVE",
"401 -116 CURVE SMOOTH",
"364.333 -116 OFFCURVE",
"324 -106.333 OFFCURVE",
"280 -87 CURVE SMOOTH",
"192 -48.333 OFFCURVE",
"123 17.333 OFFCURVE",
"123 80 CURVE SMOOTH",
"123 118 OFFCURVE",
"139.333 152.667 OFFCURVE",
"172 184 CURVE SMOOTH",
"237.333 246.667 OFFCURVE",
"338.333 285 OFFCURVE",
"397 285 CURVE SMOOTH",
"426.333 285 OFFCURVE",
"448 274.667 OFFCURVE",
"448 252 CURVE SMOOTH",
"448 211 LINE",
"354.667 180.333 OFFCURVE",
"292 137 OFFCURVE",
"292 85 CURVE SMOOTH",
"292 39.048 OFFCURVE",
"387.112 -11 OFFCURVE",
"442 -11 CURVE SMOOTH",
"488.667 -11 OFFCURVE",
"526 24.667 OFFCURVE",
"526 70 CURVE SMOOTH",
"526 170 LINE",
"572.667 187.333 OFFCURVE",
"612.333 196 OFFCURVE",
"645 196 CURVE",
"645 166 LINE SMOOTH",
"645 138 OFFCURVE",
"664.5 106.167 OFFCURVE",
"703.5 70.5 CURVE SMOOTH",
"781.5 -0.833 OFFCURVE",
"901.333 -61 OFFCURVE",
"972 -61 CURVE SMOOTH",
"997.333 -61 OFFCURVE",
"1022.667 -50 OFFCURVE",
"1036 -30 CURVE"
);
},
{
closed = 1;
nodes = (
"774 609 LINE",
"844 609 LINE",
"844 689 LINE",
"693 689 LINE"
);
},
{
closed = 1;
nodes = (
"448 76 LINE SMOOTH",
"448 52 OFFCURVE",
"428.333 30 OFFCURVE",
"407 30 CURVE SMOOTH",
"383 30 OFFCURVE",
"362 42 OFFCURVE",
"362 62 CURVE SMOOTH",
"362 87.333 OFFCURVE",
"401.333 120.667 OFFCURVE",
"448 142 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */\01280 1 3 10 46 1 11 3 87 21 2 1 11 107 10 2 17 1 102 1 2 17 36 1 4 0 37 1 5 4 7 74 94 1 7 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 65 values pushed */\0120 6 0 9 10 6 9 99 0 10 0 3 11 10 3 99 0 11 0 1 17 11 1 99 0 14 0 0 4 14 0 99 0 4 0 5 4 5 95 18 16 12 3 7 7 8 89 15 13 2 8 8 24 75 0 17 17 2 91 0 2 2 26 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 65 values pushed */\0120 6 0 9 10 6 9 99 0 10 0 3 11 10 3 99 0 11 0 1 17 11 1 99 0 14 0 0 4 14 0 99 0 4 0 5 4 5 95 18 16 12 3 7 7 8 89 15 13 2 8 8 25 75 0 17 17 2 91 0 2 2 26 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 63 values pushed */\0120 6 0 9 10 6 9 99 0 10 0 3 11 10 3 99 0 11 0 1 17 11 1 99 0 17 0 2 14 17 2 99 0 14 0 0 4 14 0 99 0 4 0 5 4 5 95 18 16 12 3 7 7 8 89 15 13 2 8 8 25 7 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 34 values pushed */\012103 103 114 112 103 106 103 106 105 104 100 98 93 92 91 90 89 88 84 82 76 71 17 20 123 36 38 41 36 20 34 19 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 831;
}
);
note = uni0939094D092E;
},
{
glyphname = "h_ya-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"740 609 LINE",
"660 689 LINE",
"389 689 LINE",
"456 609 LINE",
"658 609 LINE",
"658 237 LINE",
"611.333 130.333 OFFCURVE",
"556.333 67 OFFCURVE",
"467 67 CURVE SMOOTH",
"428.333 67 OFFCURVE",
"395.333 82.333 OFFCURVE",
"378 113 CURVE",
"454 121 OFFCURVE",
"516 156 OFFCURVE",
"516 212 CURVE SMOOTH",
"516 269.072 OFFCURVE",
"408.825 338 OFFCURVE",
"352 338 CURVE SMOOTH",
"284 338 OFFCURVE",
"254 329 OFFCURVE",
"182 293 CURVE",
"142 313.667 OFFCURVE",
"122 338 OFFCURVE",
"122 366 CURVE SMOOTH",
"122 402 OFFCURVE",
"157.667 426 OFFCURVE",
"207 426 CURVE SMOOTH",
"312 423 LINE SMOOTH",
"369.333 420.333 OFFCURVE",
"404 419 OFFCURVE",
"416 419 CURVE SMOOTH",
"450.667 419 OFFCURVE",
"477 441.333 OFFCURVE",
"477 472 CURVE SMOOTH",
"477 506.667 OFFCURVE",
"448 567.667 OFFCURVE",
"412 609 CURVE SMOOTH",
"343 689 LINE",
"-29 689 LINE",
"-29 609 LINE",
"366 609 LINE",
"399.333 569.667 OFFCURVE",
"416 540.667 OFFCURVE",
"416 522 CURVE SMOOTH",
"416 498 OFFCURVE",
"397.333 484 OFFCURVE",
"372 484 CURVE SMOOTH",
"344 484 OFFCURVE",
"311.667 485.667 OFFCURVE",
"281 487 CURVE SMOOTH",
"230.333 489.667 OFFCURVE",
"196.667 491 OFFCURVE",
"180 491 CURVE SMOOTH",
"114.667 491 OFFCURVE",
"52 456.667 OFFCURVE",
"52 406 CURVE SMOOTH",
"52 359.333 OFFCURVE",
"95.667 309.333 OFFCURVE",
"153 276 CURVE",
"89 240 OFFCURVE",
"43 187.667 OFFCURVE",
"43 133 CURVE SMOOTH",
"43 84.333 OFFCURVE",
"64.167 37.5 OFFCURVE",
"106.5 -7.5 CURVE SMOOTH",
"191.167 -97.5 OFFCURVE",
"330.667 -158 OFFCURVE",
"444 -158 CURVE SMOOTH",
"494.667 -158 OFFCURVE",
"530.667 -147.333 OFFCURVE",
"552 -126 CURVE",
"486 -82 LINE",
"467.333 -103.333 OFFCURVE",
"427.333 -116 OFFCURVE",
"386 -116 CURVE SMOOTH",
"349.333 -116 OFFCURVE",
"309 -106.333 OFFCURVE",
"265 -87 CURVE SMOOTH",
"177 -48.333 OFFCURVE",
"108 17.333 OFFCURVE",
"108 80 CURVE SMOOTH",
"108 118 OFFCURVE",
"124.333 152.667 OFFCURVE",
"157 184 CURVE SMOOTH",
"222.333 246.667 OFFCURVE",
"323.667 285 OFFCURVE",
"381 285 CURVE SMOOTH",
"422.333 285 OFFCURVE",
"459 265.333 OFFCURVE",
"459 240 CURVE SMOOTH",
"459 202.667 OFFCURVE",
"402.333 176 OFFCURVE",
"345 176 CURVE SMOOTH",
"328.333 176 OFFCURVE",
"313.333 178.333 OFFCURVE",
"300 183 CURVE",
"336 87 OFFCURVE",
"420.667 17 OFFCURVE",
"514 17 CURVE SMOOTH",
"572.667 17 OFFCURVE",
"629.333 59 OFFCURVE",
"668 127 CURVE",
"672.667 103.667 OFFCURVE",
"694.5 77.167 OFFCURVE",
"733.5 47.5 CURVE SMOOTH",
"811.5 -11.833 OFFCURVE",
"922.667 -61 OFFCURVE",
"984 -61 CURVE SMOOTH",
"1005.333 -61 OFFCURVE",
"1026.333 -50.667 OFFCURVE",
"1047 -30 CURVE",
"974 17 LINE",
"960 -3 OFFCURVE",
"942.667 -13 OFFCURVE",
"922 -13 CURVE SMOOTH",
"870.29 -13 OFFCURVE",
"740 57.735 OFFCURVE",
"740 111 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"856 609 LINE",
"856 689 LINE",
"706 689 LINE",
"786 609 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */\01283 1 4 11 99 49 20 3 3 4 93 14 2 12 3 8 1 1 0 39 1 5 1 40 1 6 5 6 74 0 1 8 7 1 2 2 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 64 values pushed */\0120 3 4 12 4 3 12 112 0 7 0 10 11 7 10 99 0 11 0 4 3 11 4 99 0 0 0 1 5 0 1 99 0 5 0 6 5 6 96 15 13 2 8 8 9 89 16 14 2 9 9 24 75 0 12 12 2 91 0 2 2 26 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01227 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 64 values pushed */\0120 3 4 12 4 3 12 112 0 7 0 10 11 7 10 99 0 11 0 4 3 11 4 99 0 0 0 1 5 0 1 99 0 5 0 6 5 6 96 15 13 2 8 8 9 89 16 14 2 9 9 25 75 0 12 12 2 91 0 2 2 26 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 62 values pushed */\0120 3 4 12 4 3 12 112 0 7 0 10 11 7 10 99 0 11 0 4 3 11 4 99 0 12 0 2 0 12 2 99 0 0 0 1 5 0 1 99 0 5 0 6 5 6 96 15 13 2 8 8 9 89 16 14 2 9 9 25 8 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 28 values pushed */\012107 106 105 104 103 102 101 100 97 95 87 85 79 74 68 67 20 123 36 38 36 35 37 35 36 17 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 841;
}
);
note = uni0939094D092F;
},
{
glyphname = "h_la-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"607 226 LINE SMOOTH",
"607 282.126 OFFCURVE",
"448.143 338 OFFCURVE",
"384 338 CURVE SMOOTH",
"319.333 338 OFFCURVE",
"257.333 323 OFFCURVE",
"198 293 CURVE",
"156.667 313.667 OFFCURVE",
"136 338 OFFCURVE",
"136 366 CURVE SMOOTH",
"136 402 OFFCURVE",
"172.667 426 OFFCURVE",
"222 426 CURVE SMOOTH",
"327 423 LINE SMOOTH",
"385.667 420.333 OFFCURVE",
"420.333 419 OFFCURVE",
"431 419 CURVE SMOOTH",
"464.333 419 OFFCURVE",
"492 441.333 OFFCURVE",
"492 472 CURVE SMOOTH",
"492 505.333 OFFCURVE",
"462 565 OFFCURVE",
"426 609 CURVE SMOOTH",
"358 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"382 609 LINE",
"414.667 570.333 OFFCURVE",
"431 541.333 OFFCURVE",
"431 522 CURVE SMOOTH",
"431 498 OFFCURVE",
"412.333 484 OFFCURVE",
"387 484 CURVE SMOOTH",
"359 484 OFFCURVE",
"326.667 485.667 OFFCURVE",
"296 487 CURVE SMOOTH",
"245.333 489.667 OFFCURVE",
"211.667 491 OFFCURVE",
"195 491 CURVE SMOOTH",
"129.667 491 OFFCURVE",
"65 456.667 OFFCURVE",
"65 406 CURVE SMOOTH",
"65 359.333 OFFCURVE",
"109.333 310.667 OFFCURVE",
"168 276 CURVE",
"104 241.333 OFFCURVE",
"59 187.667 OFFCURVE",
"59 133 CURVE SMOOTH",
"59 84.333 OFFCURVE",
"80.167 37.5 OFFCURVE",
"122.5 -7.5 CURVE SMOOTH",
"207.167 -97.5 OFFCURVE",
"346 -158 OFFCURVE",
"458 -158 CURVE SMOOTH",
"509.333 -158 OFFCURVE",
"546 -147.333 OFFCURVE",
"568 -126 CURVE",
"501 -82 LINE",
"482.333 -104.667 OFFCURVE",
"442.333 -116 OFFCURVE",
"401 -116 CURVE SMOOTH",
"364.333 -116 OFFCURVE",
"324 -106.333 OFFCURVE",
"280 -87 CURVE SMOOTH",
"192 -48.333 OFFCURVE",
"123 17.333 OFFCURVE",
"123 80 CURVE SMOOTH",
"123 114 OFFCURVE",
"138.5 146.833 OFFCURVE",
"169.5 178.5 CURVE SMOOTH",
"231.5 241.833 OFFCURVE",
"341 285 OFFCURVE",
"449 285 CURVE",
"490.333 282.333 OFFCURVE",
"529 273.333 OFFCURVE",
"529 252 CURVE SMOOTH",
"529 193 LINE",
"503.667 187 OFFCURVE",
"480.333 170.667 OFFCURVE",
"459 144 CURVE",
"424.333 182.667 OFFCURVE",
"385 210 OFFCURVE",
"353 210 CURVE SMOOTH",
"293 210 OFFCURVE",
"247 165.667 OFFCURVE",
"247 107 CURVE SMOOTH",
"247 82.333 OFFCURVE",
"258.667 57.667 OFFCURVE",
"282 33 CURVE SMOOTH",
"328.667 -16.333 OFFCURVE",
"404.667 -52 OFFCURVE",
"466 -52 CURVE",
"472 -30 LINE",
"405.049 -30 OFFCURVE",
"318 11.588 OFFCURVE",
"318 69 CURVE SMOOTH",
"318 114.333 OFFCURVE",
"349.333 152 OFFCURVE",
"392 152 CURVE SMOOTH",
"412 152 OFFCURVE",
"432.333 144 OFFCURVE",
"443 128 CURVE",
"422 94 LINE",
"491 56 LINE",
"508.333 108 OFFCURVE",
"549.333 151 OFFCURVE",
"592 151 CURVE SMOOTH",
"616 151 OFFCURVE",
"636 132 OFFCURVE",
"636 108 CURVE SMOOTH",
"636 61.333 OFFCURVE",
"588.667 21.333 OFFCURVE",
"530 4 CURVE",
"585 -41 LINE",
"643.667 -25 OFFCURVE",
"685 20 OFFCURVE",
"685 76 CURVE SMOOTH",
"685 112 OFFCURVE",
"651 161.667 OFFCURVE",
"607 183 CURVE"
);
},
{
closed = 1;
nodes = (
"741 689 LINE",
"404 689 LINE",
"473 609 LINE",
"741 609 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */\01299 1 5 12 65 1 4 5 106 40 2 0 4 38 17 16 15 6 5 2 0 5 1 3 2 55 1 6 3 56 1 7 6 7 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 54 values pushed */\0120 8 0 11 12 8 11 99 0 12 0 5 4 12 5 99 0 4 1 1 0 2 4 0 99 0 2 0 3 6 2 3 99 0 6 0 7 6 7 95 13 1 9 9 10 89 15 14 2 10 10 24 9 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 54 values pushed */\0120 8 0 11 12 8 11 99 0 12 0 5 4 12 5 99 0 4 1 1 0 2 4 0 99 0 2 0 3 6 2 3 99 0 6 0 7 6 7 95 13 1 9 9 10 89 15 14 2 10 10 25 9 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 28 values pushed */\012107 107 107 110 107 110 109 108 102 100 95 90 84 83 82 81 123 36 38 39 37 17 21 38 43 16 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 727;
}
);
note = uni0939094D0932;
},
{
glyphname = "h_va-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"722.333 -85 OFFCURVE",
"742.667 -78 OFFCURVE",
"762 -64 CURVE",
"710 -24 LINE",
"699.333 -38.667 OFFCURVE",
"684.333 -47 OFFCURVE",
"671 -47 CURVE SMOOTH",
"637.667 -47 OFFCURVE",
"607 -30.667 OFFCURVE",
"607 -8 CURVE SMOOTH",
"607 226 LINE SMOOTH",
"607 282.126 OFFCURVE",
"448.143 338 OFFCURVE",
"384 338 CURVE SMOOTH",
"319.333 338 OFFCURVE",
"257.333 323 OFFCURVE",
"198 293 CURVE",
"156.667 313.667 OFFCURVE",
"136 338 OFFCURVE",
"136 366 CURVE SMOOTH",
"136 402 OFFCURVE",
"172.667 426 OFFCURVE",
"222 426 CURVE SMOOTH",
"327 423 LINE SMOOTH",
"385.667 420.333 OFFCURVE",
"420.333 419 OFFCURVE",
"431 419 CURVE SMOOTH",
"464.333 419 OFFCURVE",
"492 441.333 OFFCURVE",
"492 472 CURVE SMOOTH",
"492 504 OFFCURVE",
"462 561 OFFCURVE",
"426 609 CURVE",
"358 689 LINE",
"-14 689 LINE",
"-14 609 LINE",
"382 609 LINE",
"414.667 570.333 OFFCURVE",
"431 541.333 OFFCURVE",
"431 522 CURVE SMOOTH",
"431 498 OFFCURVE",
"412.333 484 OFFCURVE",
"387 484 CURVE SMOOTH",
"359 484 OFFCURVE",
"326.667 485.667 OFFCURVE",
"296 487 CURVE SMOOTH",
"245.333 489.667 OFFCURVE",
"211.667 491 OFFCURVE",
"195 491 CURVE SMOOTH",
"129.667 491 OFFCURVE",
"65 456.667 OFFCURVE",
"65 406 CURVE SMOOTH",
"65 359.333 OFFCURVE",
"109.333 310.667 OFFCURVE",
"168 276 CURVE",
"104 241.333 OFFCURVE",
"59 187.667 OFFCURVE",
"59 133 CURVE SMOOTH",
"59 84.333 OFFCURVE",
"80.167 37.5 OFFCURVE",
"122.5 -7.5 CURVE SMOOTH",
"207.167 -97.5 OFFCURVE",
"346 -158 OFFCURVE",
"458 -158 CURVE SMOOTH",
"509.333 -158 OFFCURVE",
"546 -147.333 OFFCURVE",
"568 -126 CURVE",
"501 -82 LINE",
"482.333 -104.667 OFFCURVE",
"442.333 -116 OFFCURVE",
"401 -116 CURVE SMOOTH",
"364.333 -116 OFFCURVE",
"324 -106.333 OFFCURVE",
"280 -87 CURVE SMOOTH",
"192 -48.333 OFFCURVE",
"123 17.333 OFFCURVE",
"123 80 CURVE SMOOTH",
"123 114 OFFCURVE",
"138.5 146.833 OFFCURVE",
"169.5 178.5 CURVE SMOOTH",
"231.5 241.833 OFFCURVE",
"341 285 OFFCURVE",
"449 285 CURVE",
"490.333 282.333 OFFCURVE",
"529 273.333 OFFCURVE",
"529 252 CURVE SMOOTH",
"529 170 LINE",
"481.667 203.333 OFFCURVE",
"441.667 220 OFFCURVE",
"409 220 CURVE SMOOTH",
"329 220 OFFCURVE",
"261 175 OFFCURVE",
"261 115 CURVE SMOOTH",
"261 63.136 OFFCURVE",
"365.44 4 OFFCURVE",
"425 4 CURVE SMOOTH",
"468.333 4 OFFCURVE",
"503 17.667 OFFCURVE",
"529 45 CURVE",
"529 25 LINE SMOOTH",
"529 -16.729 OFFCURVE",
"648.458 -85 OFFCURVE",
"701 -85 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"473 609 LINE",
"741 609 LINE",
"741 689 LINE",
"404 689 LINE"
);
},
{
closed = 1;
nodes = (
"341.667 49 OFFCURVE",
"323 59.667 OFFCURVE",
"323 81 CURVE SMOOTH",
"323 131.667 OFFCURVE",
"389 168 OFFCURVE",
"457 168 CURVE SMOOTH",
"486.333 168 OFFCURVE",
"510.333 159.667 OFFCURVE",
"529 143 CURVE",
"529 116 LINE",
"487.667 73.333 OFFCURVE",
"427 49 OFFCURVE",
"367 49 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */\01274 1 2 9 40 1 1 2 15 1 14 1 98 97 2 15 14 4 1 0 15 87 1 10 0 88 30 2 11 10 31 1 4 3 8 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 65 values pushed */\0120 5 0 8 9 5 8 99 0 9 0 2 1 9 2 99 0 1 0 14 15 1 14 99 0 10 16 1 11 3 10 11 99 0 3 0 4 3 4 95 17 13 2 6 6 7 89 12 1 7 7 24 75 18 1 15 15 0 91 0 0 0 26 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 65 values pushed */\0120 5 0 8 9 5 8 99 0 9 0 2 1 9 2 99 0 1 0 14 15 1 14 99 0 10 16 1 11 3 10 11 99 0 3 0 4 3 4 95 17 13 2 6 6 7 89 12 1 7 7 25 75 18 1 15 15 0 91 0 0 0 26 0 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 38 values pushed */\01295 95 91 91 0 0 95 106 95 105 101 99 91 94 91 94 93 92 0 90 0 89 85 83 77 75 86 17 20 123 36 38 36 37 37 19 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 727;
}
);
note = uni0939094D0935;
},
{
glyphname = "fa_rakar-deva";
layers = (
{
components = (
{
alignment = -1;
name = "pha_rakar-deva";
},
{
alignment = -1;
name = "nukta-deva";
transform = "{1, 0, 0, 1, 459, -73}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 747;
}
);
note = uni095E094D0930;
},
{
glyphname = "j_ny-deva.1";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"435 609 LINE",
"435 689 LINE",
"-14 689 LINE",
"-14 609 LINE"
);
},
{
closed = 1;
nodes = (
"537 424 LINE",
"537 495 LINE",
"225 495 LINE SMOOTH",
"187.667 495 OFFCURVE",
"152 470.333 OFFCURVE",
"152 441 CURVE SMOOTH",
"152 403.667 OFFCURVE",
"177.333 383.667 OFFCURVE",
"228 353 CURVE SMOOTH",
"277.333 321 OFFCURVE",
"301 304 OFFCURVE",
"301 268 CURVE SMOOTH",
"301 221.333 OFFCURVE",
"257 184.333 OFFCURVE",
"197 179 CURVE",
"166.333 236.333 OFFCURVE",
"117.667 266 OFFCURVE",
"83 266 CURVE SMOOTH",
"53.667 266 OFFCURVE",
"28 249.333 OFFCURVE",
"28 224 CURVE SMOOTH",
"28 176.965 OFFCURVE",
"118.829 122.492 OFFCURVE",
"183 121 CURVE",
"269.667 13 OFFCURVE",
"371.667 -50.333 OFFCURVE",
"461 -57 CURVE SMOOTH",
"485 -58.333 OFFCURVE",
"514.333 -48.667 OFFCURVE",
"533 -30 CURVE",
"471 32 LINE",
"455 14 OFFCURVE",
"434 5 OFFCURVE",
"408 5 CURVE SMOOTH",
"350.667 5 OFFCURVE",
"281.667 48 OFFCURVE",
"223 120 CURVE",
"290.419 121.498 OFFCURVE",
"382 181.71 OFFCURVE",
"382 233 CURVE SMOOTH",
"382 285 OFFCURVE",
"342.667 319 OFFCURVE",
"280 359 CURVE SMOOTH",
"265.333 369 OFFCURVE",
"254.5 376.833 OFFCURVE",
"247.5 382.5 CURVE SMOOTH",
"240.5 388.167 OFFCURVE",
"237 393.333 OFFCURVE",
"237 398 CURVE SMOOTH",
"237 411.333 OFFCURVE",
"251 424 OFFCURVE",
"267 424 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */\0126 1 6 8 38 1 2 6 21 1 3 2 22 1 4 3 4 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 47 values pushed */\0120 6 8 2 8 6 2 112 5 1 2 3 8 2 3 110 0 3 4 8 3 4 110 0 4 4 113 0 7 9 1 8 6 7 8 99 0 0 0 1 89 0 1 1 24 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 47 values pushed */\0120 6 8 2 8 6 2 112 5 1 2 3 8 2 3 110 0 3 4 8 3 4 110 0 4 4 113 0 7 9 1 8 6 7 8 99 0 0 0 1 89 0 1 1 25 0 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 17 values pushed */\0124 4 4 53 4 52 45 37 19 20 34 28 17 16 10 6 28 \012CALL[ ]	/* CallFunction */";
};
width = 421;
}
);
note = uni091C094D091E094D.1;
},
{
glyphname = zero;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"278 -9 OFFCURVE",
"223.5 8.167 OFFCURVE",
"178.5 42.5 CURVE SMOOTH",
"88.5 111.167 OFFCURVE",
"43 230.667 OFFCURVE",
"43 356 CURVE SMOOTH",
"43 419.333 OFFCURVE",
"54.333 479 OFFCURVE",
"77 535 CURVE SMOOTH",
"122.333 647 OFFCURVE",
"214 723 OFFCURVE",
"342 723 CURVE SMOOTH",
"406 723 OFFCURVE",
"460.833 705.667 OFFCURVE",
"506.5 671 CURVE SMOOTH",
"597.833 601.667 OFFCURVE",
"644 482.667 OFFCURVE",
"644 356 CURVE SMOOTH",
"644 293.333 OFFCURVE",
"632.5 234 OFFCURVE",
"609.5 178 CURVE SMOOTH",
"563.5 66 OFFCURVE",
"470 -9 OFFCURVE",
"342 -9 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"190.667 675 OFFCURVE",
"131 574.667 OFFCURVE",
"131 436 CURVE SMOOTH",
"131 376 OFFCURVE",
"141.667 316 OFFCURVE",
"163 256 CURVE SMOOTH",
"205.667 136 OFFCURVE",
"285.333 50 OFFCURVE",
"380 50 CURVE SMOOTH",
"500 50 OFFCURVE",
"560 152 OFFCURVE",
"560 292 CURVE SMOOTH",
"560 351.333 OFFCURVE",
"549.333 410.667 OFFCURVE",
"528 470 CURVE SMOOTH",
"485.333 588.667 OFFCURVE",
"404 675 OFFCURVE",
"308 675 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */\0125 1 3 3 0 91 0 0 0 42 75 0 2 2 1 91 4 1 1 1 46 1 76 16 16 0 0 16 29 16 28 23 21 0 15 0 14 38 6 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 685;
}
);
leftKerningGroup = zero;
note = zero;
rightKerningGroup = zero;
unicode = 0030;
},
{
glyphname = one;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"13 590 LINE",
"228 710 LINE",
"228 16 LINE",
"135 -19 LINE",
"135 620 LINE",
"30 559 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0125 3 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 318;
}
);
leftKerningGroup = one;
note = one;
rightKerningGroup = one;
unicode = 0031;
},
{
glyphname = two;
lastChange = "2022-05-03 15:42:27 +0000";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"179 717 OFFCURVE",
"77.667 646.667 OFFCURVE",
"23 564 CURVE",
"50 547 LINE",
"93 600 OFFCURVE",
"147 636 OFFCURVE",
"215 636 CURVE SMOOTH",
"245.667 636 OFFCURVE",
"273.333 628.833 OFFCURVE",
"298 614.5 CURVE SMOOTH",
"347.333 585.833 OFFCURVE",
"378 532.333 OFFCURVE",
"378 471 CURVE SMOOTH",
"378 425.667 OFFCURVE",
"364.667 380 OFFCURVE",
"338 334 CURVE SMOOTH",
"284.667 242 OFFCURVE",
"215.667 175.333 OFFCURVE",
"109 78 CURVE SMOOTH",
"75 48 OFFCURVE",
"50 24.333 OFFCURVE",
"34 7 CURVE",
"52 -9 LINE",
"72 7 OFFCURVE",
"119 12 OFFCURVE",
"164 12 CURVE SMOOTH",
"231 12 OFFCURVE",
"291 12 OFFCURVE",
"403 -2 CURVE SMOOTH",
"458 -9 LINE",
"540 117 LINE",
"516 128 LINE",
"489 86 OFFCURVE",
"465 81 OFFCURVE",
"430 81 CURVE SMOOTH",
"402 81 OFFCURVE",
"369 85 OFFCURVE",
"330 93 CURVE SMOOTH",
"298 100 OFFCURVE",
"271 104 OFFCURVE",
"250 104 CURVE SMOOTH",
"229 104 OFFCURVE",
"219 101 OFFCURVE",
"193 94 CURVE",
"189 98 LINE",
"247 139 OFFCURVE",
"284.667 176.833 OFFCURVE",
"326 212.5 CURVE SMOOTH",
"408.667 283.833 OFFCURVE",
"481 386.667 OFFCURVE",
"481 504 CURVE SMOOTH",
"481 636 OFFCURVE",
"397.667 717 OFFCURVE",
"267 717 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */\01239 38 16 15 4 0 3 6 1 1 0 2 74 24 17 2 2 71 0 0 3 1 3 0 1 112 0 1 2 3 1 2 110 0 2 2 113 0 3 3 4 91 5 1 4 4 42 3 76 0 0 0 42 0 41 44 38 34 40 6 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 560;
}
);
leftKerningGroup = two;
note = two;
rightKerningGroup = two;
unicode = 0032;
},
{
glyphname = three;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"206 386 LINE",
"233.333 392.667 OFFCURVE",
"259.333 396 OFFCURVE",
"284 396 CURVE SMOOTH",
"322 396 OFFCURVE",
"356.667 388.333 OFFCURVE",
"388 373 CURVE SMOOTH",
"450.667 342.333 OFFCURVE",
"490 284.333 OFFCURVE",
"490 211 CURVE SMOOTH",
"490 147.667 OFFCURVE",
"466.5 94.833 OFFCURVE",
"419.5 52.5 CURVE SMOOTH",
"325.5 -32.167 OFFCURVE",
"176.333 -71 OFFCURVE",
"51 -71 CURVE",
"46 -46 LINE",
"95.333 -40 OFFCURVE",
"146 -26.167 OFFCURVE",
"198 -4.5 CURVE SMOOTH",
"302 38.833 OFFCURVE",
"382 113.333 OFFCURVE",
"382 208 CURVE SMOOTH",
"382 298.667 OFFCURVE",
"309.667 358 OFFCURVE",
"211 358 CURVE SMOOTH",
"167 358 OFFCURVE",
"141.667 351 OFFCURVE",
"83 327 CURVE",
"72 353 LINE",
"223.333 422.333 OFFCURVE",
"299 498.333 OFFCURVE",
"299 581 CURVE SMOOTH",
"299 629 OFFCURVE",
"268 651 OFFCURVE",
"224 651 CURVE SMOOTH",
"165.333 651 OFFCURVE",
"86 613 OFFCURVE",
"46 569 CURVE",
"28 585 LINE",
"97.333 675.667 OFFCURVE",
"196.667 725 OFFCURVE",
"286 725 CURVE SMOOTH",
"360.667 725 OFFCURVE",
"414 683 OFFCURVE",
"414 611 CURVE SMOOTH",
"414 523 OFFCURVE",
"314.667 445.333 OFFCURVE",
"204 392 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */\0129 8 2 4 1 39 1 2 4 18 17 2 3 2 3 74 0 3 2 3 115 0 4 0 2 3 4 2 99 0 1 1 0 91 0 0 0 42 1 76 38 23 39 37 36 5 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 525;
}
);
leftKerningGroup = three;
note = three;
rightKerningGroup = three;
unicode = 0033;
},
{
glyphname = four;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"441 713 LINE",
"441 290 LINE",
"532 290 LINE",
"495 189 LINE",
"441 189 LINE",
"441 16 LINE",
"351 -19 LINE",
"351 189 LINE",
"5 189 LINE",
"125 317 OFFCURVE",
"202.667 459 OFFCURVE",
"248 627 CURVE",
"302 594 LINE",
"279.333 498 OFFCURVE",
"201.333 359.333 OFFCURVE",
"132 290 CURVE",
"351 290 LINE",
"351 679 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */\0127 6 1 0 4 0 72 13 12 2 1 71 3 1 0 1 1 0 85 3 1 0 0 1 89 2 1 1 0 1 77 17 19 23 18 4 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 560;
}
);
leftKerningGroup = four;
note = four;
rightKerningGroup = four;
unicode = 0034;
},
{
glyphname = five;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"474 154 OFFCURVE",
"450 101.833 OFFCURVE",
"402 57.5 CURVE SMOOTH",
"306 -31.167 OFFCURVE",
"156.667 -78 OFFCURVE",
"46 -86 CURVE",
"36 -57 LINE",
"208 -17 OFFCURVE",
"370 75.667 OFFCURVE",
"370 225 CURVE SMOOTH",
"370 258.333 OFFCURVE",
"360.5 286.5 OFFCURVE",
"341.5 309.5 CURVE SMOOTH",
"303.5 355.5 OFFCURVE",
"239.667 379 OFFCURVE",
"169 379 CURVE SMOOTH",
"118.333 379 OFFCURVE",
"74.333 369 OFFCURVE",
"37 349 CURVE",
"129 711 LINE",
"474 711 LINE",
"439 603 LINE",
"144 603 LINE",
"95 404 LINE",
"136.333 421.333 OFFCURVE",
"175.333 431 OFFCURVE",
"234 431 CURVE SMOOTH",
"277.333 431 OFFCURVE",
"317.167 423.167 OFFCURVE",
"353.5 407.5 CURVE SMOOTH",
"426.167 376.167 OFFCURVE",
"474 310 OFFCURVE",
"474 214 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */\0126 1 3 0 1 74 21 11 2 3 71 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01234 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 18 values pushed */\0120 0 0 3 0 3 95 0 1 1 2 89 0 2 2 42 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 24 values pushed */\0120 2 0 1 0 2 1 97 0 0 3 3 0 87 0 0 0 3 91 0 3 0 3 79 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 7 values pushed */\01234 17 19 34 4 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 514;
}
);
leftKerningGroup = five;
note = five;
rightKerningGroup = five;
unicode = 0035;
},
{
glyphname = six;
lastChange = "2022-05-03 15:44:17 +0000";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"596 190.333 OFFCURVE",
"583.5 147 OFFCURVE",
"558.5 107 CURVE SMOOTH",
"508.5 27 OFFCURVE",
"416.333 -25 OFFCURVE",
"315 -25 CURVE SMOOTH",
"261.667 -25 OFFCURVE",
"214.667 -12.167 OFFCURVE",
"174 13.5 CURVE SMOOTH",
"92.667 64.833 OFFCURVE",
"46 157.333 OFFCURVE",
"46 264 CURVE SMOOTH",
"46 337.333 OFFCURVE",
"68 406.667 OFFCURVE",
"112 472 CURVE SMOOTH",
"200 602.667 OFFCURVE",
"350.333 693.667 OFFCURVE",
"497 715 CURVE",
"509 677 LINE",
"462 665 OFFCURVE",
"412.333 656 OFFCURVE",
"367 628 CURVE SMOOTH",
"276.333 572 OFFCURVE",
"205 504 OFFCURVE",
"178 417 CURVE",
"235 457 OFFCURVE",
"300.333 463 OFFCURVE",
"377 463 CURVE SMOOTH",
"423 463 OFFCURVE",
"462.5 452.5 OFFCURVE",
"495.5 431.5 CURVE SMOOTH",
"561.5 389.5 OFFCURVE",
"596 317 OFFCURVE",
"596 237 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"150.333 307 OFFCURVE",
"146 273.667 OFFCURVE",
"146 249 CURVE SMOOTH",
"146 123.667 OFFCURVE",
"208.333 27 OFFCURVE",
"335 27 CURVE SMOOTH",
"439 27 OFFCURVE",
"494 99.333 OFFCURVE",
"494 202 CURVE SMOOTH",
"494 237.333 OFFCURVE",
"487.5 270.833 OFFCURVE",
"474.5 302.5 CURVE SMOOTH",
"448.5 365.833 OFFCURVE",
"391.333 409 OFFCURVE",
"306 409 CURVE SMOOTH",
"251.333 409 OFFCURVE",
"197.667 387.667 OFFCURVE",
"159 349 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */\0125 1 3 2 1 74 10 1 0 72 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01238 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 19 values pushed */\0120 0 0 2 3 0 2 99 0 3 3 1 91 0 1 1 43 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 24 values pushed */\0120 0 0 2 3 0 2 99 0 3 1 1 3 87 0 3 3 1 91 0 1 3 1 79 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 7 values pushed */\01237 37 45 34 4 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 624;
}
);
leftKerningGroup = six;
note = six;
rightKerningGroup = six;
unicode = 0036;
},
{
glyphname = seven;
lastChange = "2022-05-03 15:43:19 +0000";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"505 720 LINE",
"489 708 OFFCURVE",
"463 703 OFFCURVE",
"435 703 CURVE SMOOTH",
"99 699 LINE",
"5 551 LINE",
"41 531 LINE",
"82 582 OFFCURVE",
"113.333 602 OFFCURVE",
"188 602 CURVE SMOOTH",
"367 602 LINE",
"216 425 OFFCURVE",
"114 186.333 OFFCURVE",
"114 -19 CURVE",
"244 35 LINE",
"240.667 42.333 OFFCURVE",
"239 60.667 OFFCURVE",
"239 90 CURVE SMOOTH",
"239 154 OFFCURVE",
"251.167 223.167 OFFCURVE",
"275.5 297.5 CURVE SMOOTH",
"324.167 446.167 OFFCURVE",
"413 587 OFFCURVE",
"521 696 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */\01220 1 1 72 15 14 7 3 0 71 0 1 0 0 1 87 0 1 1 0 91 0 0 1 0 79 36 42 2 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 501;
}
);
leftKerningGroup = seven;
note = seven;
rightKerningGroup = seven;
unicode = 0037;
},
{
glyphname = eight;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"547 51.333 OFFCURVE",
"452.667 -32 OFFCURVE",
"286 -32 CURVE SMOOTH",
"242 -32 OFFCURVE",
"201.333 -23.833 OFFCURVE",
"164 -7.5 CURVE SMOOTH",
"89.333 25.167 OFFCURVE",
"41 89.333 OFFCURVE",
"41 172 CURVE SMOOTH",
"41 260 OFFCURVE",
"110.333 334.667 OFFCURVE",
"201 380 CURVE",
"137 416 OFFCURVE",
"94 471.667 OFFCURVE",
"94 537 CURVE SMOOTH",
"94 577 OFFCURVE",
"105 611 OFFCURVE",
"127 639 CURVE SMOOTH",
"171 695 OFFCURVE",
"246 722 OFFCURVE",
"326 722 CURVE SMOOTH",
"432.667 722 OFFCURVE",
"499 669.667 OFFCURVE",
"499 575 CURVE SMOOTH",
"499 505.667 OFFCURVE",
"444.667 447.667 OFFCURVE",
"336 401 CURVE",
"433 347 LINE SMOOTH",
"505 305.667 OFFCURVE",
"547 260.667 OFFCURVE",
"547 186 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"416 628 OFFCURVE",
"368.667 679 OFFCURVE",
"294 679 CURVE SMOOTH",
"223.333 679 OFFCURVE",
"171 638.667 OFFCURVE",
"171 576 CURVE SMOOTH",
"171 513.333 OFFCURVE",
"227 454 OFFCURVE",
"295 418 CURVE",
"363 448.667 OFFCURVE",
"416 498.667 OFFCURVE",
"416 560 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"244 358 LINE",
"185.333 318 OFFCURVE",
"147 253.667 OFFCURVE",
"147 191 CURVE SMOOTH",
"147 88.333 OFFCURVE",
"213 21 OFFCURVE",
"313 21 CURVE SMOOTH",
"386.54 21 OFFCURVE",
"472 90.829 OFFCURVE",
"472 148 CURVE SMOOTH",
"472 204 OFFCURVE",
"446.333 252 OFFCURVE",
"377 288 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */\01250 28 15 3 4 3 2 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01224 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 21 values pushed */\0120 2 2 0 91 0 0 0 42 75 0 3 3 1 91 0 1 1 43 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 18 values pushed */\0120 3 0 1 3 1 95 0 2 2 0 91 0 0 0 42 2 76 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 7 values pushed */\01240 42 44 39 4 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 589;
}
);
leftKerningGroup = eight;
note = eight;
rightKerningGroup = eight;
unicode = 0038;
},
{
glyphname = nine;
lastChange = "2022-05-03 15:43:54 +0000";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"31 501 OFFCURVE",
"43.333 543.833 OFFCURVE",
"68 583.5 CURVE SMOOTH",
"117.333 662.833 OFFCURVE",
"207.667 715 OFFCURVE",
"309 715 CURVE SMOOTH",
"363 715 OFFCURVE",
"410.5 702.333 OFFCURVE",
"451.5 677 CURVE SMOOTH",
"533.5 626.333 OFFCURVE",
"581 533.667 OFFCURVE",
"581 427 CURVE SMOOTH",
"581 353.667 OFFCURVE",
"558.833 284.333 OFFCURVE",
"514.5 219 CURVE SMOOTH",
"425.833 88.333 OFFCURVE",
"274.667 -3.667 OFFCURVE",
"128 -25 CURVE",
"114 16 LINE",
"161 27 OFFCURVE",
"210.667 34.833 OFFCURVE",
"256 62.5 CURVE SMOOTH",
"346.667 117.833 OFFCURVE",
"418 187 OFFCURVE",
"447 275 CURVE",
"390 234 OFFCURVE",
"325 223 OFFCURVE",
"248 223 CURVE SMOOTH",
"201 223 OFFCURVE",
"161.667 237.5 OFFCURVE",
"129 258.5 CURVE SMOOTH",
"63.667 300.5 OFFCURVE",
"31 373.667 OFFCURVE",
"31 455 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"473.333 376.667 OFFCURVE",
"477 409.667 OFFCURVE",
"477 441 CURVE SMOOTH",
"477 567.667 OFFCURVE",
"415.333 662 OFFCURVE",
"290 662 CURVE SMOOTH",
"186 662 OFFCURVE",
"131 590.333 OFFCURVE",
"131 489 CURVE SMOOTH",
"131 453.667 OFFCURVE",
"137.5 420.333 OFFCURVE",
"150.5 389 CURVE SMOOTH",
"176.5 326.333 OFFCURVE",
"232.667 282 OFFCURVE",
"318 282 CURVE SMOOTH",
"375.333 282 OFFCURVE",
"427.333 303.333 OFFCURVE",
"466 342 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */\0125 1 2 3 1 74 10 1 0 71 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01245 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 18 values pushed */\0120 2 0 0 2 0 95 0 3 3 1 91 0 1 1 42 3 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 24 values pushed */\0120 1 0 3 2 1 3 99 0 2 0 0 2 87 0 2 2 0 91 0 0 2 0 79 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 7 values pushed */\01237 37 45 34 4 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 624;
}
);
leftKerningGroup = nine;
note = nine;
rightKerningGroup = nine;
unicode = 0039;
},
{
glyphname = zerosuperior;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"169.667 317 OFFCURVE",
"139.667 326.167 OFFCURVE",
"115 344.5 CURVE SMOOTH",
"65.667 381.167 OFFCURVE",
"40 444.333 OFFCURVE",
"40 511 CURVE SMOOTH",
"40 544.333 OFFCURVE",
"46.333 576 OFFCURVE",
"59 606 CURVE SMOOTH",
"84.333 666 OFFCURVE",
"134.333 706 OFFCURVE",
"205 706 CURVE SMOOTH",
"240.333 706 OFFCURVE",
"270.5 696.833 OFFCURVE",
"295.5 678.5 CURVE SMOOTH",
"345.5 641.833 OFFCURVE",
"371 577.667 OFFCURVE",
"371 511 CURVE SMOOTH",
"371 477.667 OFFCURVE",
"364.667 446.167 OFFCURVE",
"352 416.5 CURVE SMOOTH",
"326.667 357.167 OFFCURVE",
"275.667 317 OFFCURVE",
"205 317 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"136.667 678 OFFCURVE",
"110 626 OFFCURVE",
"110 554 CURVE SMOOTH",
"110 480.787 OFFCURVE",
"163.002 351 OFFCURVE",
"224 351 CURVE SMOOTH",
"274.667 351 OFFCURVE",
"302 403.667 OFFCURVE",
"302 477 CURVE SMOOTH",
"302 550.049 OFFCURVE",
"249.407 678 OFFCURVE",
"190 678 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01224 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 20 values pushed */\0120 2 4 1 1 2 1 95 5 1 3 3 0 91 0 0 0 42 3 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 26 values pushed */\0120 0 5 1 3 2 0 3 99 0 2 1 1 2 87 0 2 2 1 91 4 1 1 2 1 79 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 18 values pushed */\01216 16 0 0 16 29 16 28 23 21 0 15 0 14 38 6 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 409;
}
);
note = uni2070;
unicode = 2070;
},
{
glyphname = onesuperior;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"8 635 LINE",
"138 703 LINE",
"138 332 LINE",
"67 310 LINE",
"67 636 LINE",
"20 612 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0125 3 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 225;
}
);
note = uni00B9;
unicode = 00B9;
},
{
glyphname = twosuperior;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"101.667 702 OFFCURVE",
"48 666 OFFCURVE",
"16 622 CURVE",
"32 608 LINE",
"56 637.333 OFFCURVE",
"93 658 OFFCURVE",
"125 658 CURVE SMOOTH",
"171.667 658 OFFCURVE",
"201 626.667 OFFCURVE",
"201 576 CURVE SMOOTH",
"201 508 OFFCURVE",
"146.667 450.333 OFFCURVE",
"52 365 CURVE SMOOTH",
"28 343 OFFCURVE",
"16 332 OFFCURVE",
"16 332 CURVE",
"32 317 LINE",
"48.667 329.667 OFFCURVE",
"67.667 336 OFFCURVE",
"89 336 CURVE SMOOTH",
"108.333 336 OFFCURVE",
"127.667 334.667 OFFCURVE",
"147 332 CURVE SMOOTH",
"166.333 329.333 OFFCURVE",
"178.667 327.667 OFFCURVE",
"184 327 CURVE",
"216 321.667 OFFCURVE",
"241.333 318.333 OFFCURVE",
"260 317 CURVE",
"306 412 LINE",
"293 421 LINE",
"276.333 397 OFFCURVE",
"257 385 OFFCURVE",
"235 385 CURVE SMOOTH",
"223.667 385 OFFCURVE",
"211.333 386.667 OFFCURVE",
"198 390 CURVE SMOOTH",
"192.667 391.333 OFFCURVE",
"174.667 395 OFFCURVE",
"160 395 CURVE SMOOTH",
"146 395 OFFCURVE",
"132.667 392 OFFCURVE",
"120 386 CURVE",
"116 388 LINE",
"153.333 413.333 OFFCURVE",
"181.833 433.667 OFFCURVE",
"201.5 449 CURVE SMOOTH",
"240.833 479.667 OFFCURVE",
"280 530 OFFCURVE",
"280 590 CURVE SMOOTH",
"280 659.333 OFFCURVE",
"228.333 702 OFFCURVE",
"151 702 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01224 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 19 values pushed */\01238 37 17 16 4 0 3 6 1 2 0 2 74 26 25 18 3 2 71 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 19 values pushed */\01238 37 17 16 4 0 3 6 1 1 0 2 74 26 25 18 3 2 71 \012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01212 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 31 values pushed */\0121 1 0 3 2 3 0 2 112 0 2 2 113 5 1 4 3 3 4 87 5 1 4 4 3 91 0 3 4 3 79 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01220 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 25 values pushed */\0121 1 0 3 2 3 0 2 112 0 2 2 113 0 3 3 4 91 5 1 4 4 42 3 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01224 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 31 values pushed */\0121 1 0 3 2 3 0 2 112 0 2 2 113 5 1 4 3 3 4 87 5 1 4 4 3 91 0 3 4 3 79 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 37 values pushed */\0120 0 3 1 3 0 1 112 0 1 2 3 1 2 110 0 2 2 113 5 1 4 3 3 4 87 5 1 4 4 3 91 0 3 4 3 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 13 values pushed */\0120 0 0 41 0 40 41 39 35 40 6 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 320;
}
);
note = uni00B2;
unicode = 00B2;
},
{
glyphname = threesuperior;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"136 529 LINE",
"143.333 531.667 OFFCURVE",
"155 533 OFFCURVE",
"171 533 CURVE SMOOTH",
"232.333 533 OFFCURVE",
"282 492.667 OFFCURVE",
"282 434 CURVE SMOOTH",
"282 400.667 OFFCURVE",
"268.833 372.833 OFFCURVE",
"242.5 350.5 CURVE SMOOTH",
"189.833 305.833 OFFCURVE",
"106.333 285 OFFCURVE",
"37 285 CURVE",
"34 303 LINE",
"90.162 309.24 OFFCURVE",
"201 370.009 OFFCURVE",
"201 432 CURVE SMOOTH",
"201 477.333 OFFCURVE",
"167 507 OFFCURVE",
"123 507 CURVE SMOOTH",
"104.333 507 OFFCURVE",
"81.333 501 OFFCURVE",
"54 489 CURVE",
"47 508 LINE",
"104.333 533.333 OFFCURVE",
"159 574.667 OFFCURVE",
"159 624 CURVE SMOOTH",
"159 648.667 OFFCURVE",
"146.333 661 OFFCURVE",
"121 661 CURVE SMOOTH",
"94.333 661 OFFCURVE",
"58.667 640.667 OFFCURVE",
"40 618 CURVE",
"26 632 LINE",
"63.333 680 OFFCURVE",
"120 707 OFFCURVE",
"168 707 CURVE SMOOTH",
"212 707 OFFCURVE",
"242 684.667 OFFCURVE",
"242 646 CURVE SMOOTH",
"242 600.667 OFFCURVE",
"191.333 561 OFFCURVE",
"134 533 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */\0129 8 2 4 1 37 17 2 2 4 18 1 3 2 3 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 26 values pushed */\0120 3 2 3 115 0 1 1 0 91 0 0 0 42 75 0 2 2 4 91 0 4 4 53 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01242 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 24 values pushed */\0120 3 2 3 115 0 0 0 1 4 0 1 99 0 2 2 4 91 0 4 4 53 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 29 values pushed */\0120 3 2 3 115 0 0 0 1 4 0 1 99 0 4 2 2 4 87 0 4 4 2 91 0 2 4 2 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01237 23 38 37 36 5 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 314;
}
);
note = uni00B3;
unicode = 00B3;
},
{
glyphname = foursuperior;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"251 703 LINE",
"251 477 LINE",
"297 477 LINE",
"278 421 LINE",
"251 421 LINE",
"251 332 LINE",
"180 310 LINE",
"180 421 LINE",
"-4 421 LINE",
"54.667 490.333 OFFCURVE",
"91.333 564.667 OFFCURVE",
"114 658 CURVE",
"167 635 LINE",
"153.667 587 OFFCURVE",
"114 517 OFFCURVE",
"78 477 CURVE",
"180 477 LINE",
"180 681 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */\0127 6 1 0 4 0 72 13 12 2 1 71 3 1 0 1 1 0 85 3 1 0 0 1 89 2 1 1 0 1 77 17 19 23 18 4 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 320;
}
);
note = uni2074;
unicode = 2074;
},
{
glyphname = fivesuperior;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"276 403.333 OFFCURVE",
"263.667 375.167 OFFCURVE",
"239 351.5 CURVE SMOOTH",
"189.667 304.167 OFFCURVE",
"108.667 278.333 OFFCURVE",
"38 277 CURVE",
"33 295 LINE",
"129 317.667 OFFCURVE",
"198 361 OFFCURVE",
"198 441 CURVE SMOOTH",
"198 491.667 OFFCURVE",
"158 518 OFFCURVE",
"106 518 CURVE SMOOTH",
"79.333 518 OFFCURVE",
"54.667 511.333 OFFCURVE",
"32 498 CURVE",
"81 699 LINE",
"276 699 LINE",
"256 633 LINE",
"99 633 LINE",
"76 537 LINE",
"98.667 546.333 OFFCURVE",
"122.667 551 OFFCURVE",
"148 551 CURVE SMOOTH",
"220 551 OFFCURVE",
"276 512 OFFCURVE",
"276 436 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */\0124 1 3 0 9 1 4 3 2 74 0 4 3 4 115 0 2 0 1 0 2 1 97 0 0 3 3 0 87 0 0 0 3 91 0 3 0 3 79 22 34 17 18 33 5 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 313;
}
);
note = uni2075;
unicode = 2075;
},
{
glyphname = sixsuperior;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"346 385.948 OFFCURVE",
"254.93 310 OFFCURVE",
"190 310 CURVE SMOOTH",
"99.333 310 OFFCURVE",
"39 375 OFFCURVE",
"39 463 CURVE SMOOTH",
"39 505 OFFCURVE",
"51.833 543.167 OFFCURVE",
"77.5 577.5 CURVE SMOOTH",
"128.833 646.167 OFFCURVE",
"215.333 690.333 OFFCURVE",
"298 701 CURVE",
"304 680 LINE",
"230.667 664 OFFCURVE",
"158 608 OFFCURVE",
"134 544 CURVE",
"161.333 560.667 OFFCURVE",
"192.667 569 OFFCURVE",
"228 569 CURVE SMOOTH",
"301.333 569 OFFCURVE",
"346 513.667 OFFCURVE",
"346 447 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"118 489 OFFCURVE",
"116 471.667 OFFCURVE",
"116 455 CURVE SMOOTH",
"116 389.667 OFFCURVE",
"143 341 OFFCURVE",
"199 341 CURVE SMOOTH",
"244.333 341 OFFCURVE",
"268 378 OFFCURVE",
"268 430 CURVE SMOOTH",
"268 487.333 OFFCURVE",
"240.667 536 OFFCURVE",
"186 536 CURVE SMOOTH",
"162 536 OFFCURVE",
"138 525.667 OFFCURVE",
"122 507 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */\0124 1 2 0 1 74 8 1 0 72 0 0 0 2 3 0 2 99 0 3 1 1 3 87 0 3 3 1 91 0 1 3 1 79 36 37 43 33 4 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 369;
}
);
note = uni2076;
unicode = 2076;
},
{
glyphname = sevensuperior;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"274 715 LINE",
"260 703.667 OFFCURVE",
"242 698 OFFCURVE",
"220 698 CURVE SMOOTH",
"57 698 LINE",
"5 606 LINE",
"21 593 LINE",
"43.667 625 OFFCURVE",
"63 633 OFFCURVE",
"119 633 CURVE SMOOTH",
"203 633 LINE",
"121.667 543.667 OFFCURVE",
"62 421 OFFCURVE",
"62 309 CURVE",
"152 341 LINE",
"150 353 OFFCURVE",
"149 365 OFFCURVE",
"149 377 CURVE SMOOTH",
"149 485 OFFCURVE",
"207.667 605.667 OFFCURVE",
"289 699 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */\01218 1 1 72 14 13 6 3 0 71 0 1 0 0 1 87 0 1 1 0 91 0 0 1 0 79 36 41 2 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 264;
}
);
note = uni2077;
unicode = 2077;
},
{
glyphname = eightsuperior;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"321 351.667 OFFCURVE",
"263.333 306 OFFCURVE",
"174 306 CURVE SMOOTH",
"99.333 306 OFFCURVE",
"37 348.667 OFFCURVE",
"37 414 CURVE SMOOTH",
"37 458 OFFCURVE",
"72.333 494 OFFCURVE",
"119 518 CURVE",
"87 540.667 OFFCURVE",
"64 572.667 OFFCURVE",
"64 606 CURVE SMOOTH",
"64 668.667 OFFCURVE",
"122.667 706 OFFCURVE",
"192 706 CURVE SMOOTH",
"254.667 706 OFFCURVE",
"295 676.667 OFFCURVE",
"295 626 CURVE SMOOTH",
"295 590.667 OFFCURVE",
"269 559.667 OFFCURVE",
"217 533 CURVE",
"259 510 LINE SMOOTH",
"300.333 488 OFFCURVE",
"321 458.333 OFFCURVE",
"321 421 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"227 656.333 OFFCURVE",
"208.333 682 OFFCURVE",
"179 682 CURVE SMOOTH",
"151 682 OFFCURVE",
"128 661.333 OFFCURVE",
"128 632 CURVE SMOOTH",
"128 599.333 OFFCURVE",
"146 572.333 OFFCURVE",
"182 551 CURVE",
"207.333 567 OFFCURVE",
"227 592.333 OFFCURVE",
"227 623 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"153 497 LINE",
"131.667 478.333 OFFCURVE",
"117 450.667 OFFCURVE",
"117 420 CURVE SMOOTH",
"117 370.667 OFFCURVE",
"150.333 335 OFFCURVE",
"193 335 CURVE SMOOTH",
"233 335 OFFCURVE",
"255 362.333 OFFCURVE",
"255 397 CURVE SMOOTH",
"255 425 OFFCURVE",
"242.333 446.667 OFFCURVE",
"205 468 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */\01245 25 13 2 4 3 2 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01224 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 18 values pushed */\0120 3 0 1 3 1 95 0 2 2 0 91 0 0 0 42 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 24 values pushed */\0120 0 0 2 3 0 2 99 0 3 1 1 3 87 0 3 3 1 91 0 1 3 1 79 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 7 values pushed */\01239 41 42 38 4 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 358;
}
);
note = uni2078;
unicode = 2078;
},
{
glyphname = ninesuperior;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"25 625.145 OFFCURVE",
"115.806 701 OFFCURVE",
"180 701 CURVE SMOOTH",
"269.333 701 OFFCURVE",
"331 635.667 OFFCURVE",
"331 549 CURVE SMOOTH",
"331 507 OFFCURVE",
"318.167 468.833 OFFCURVE",
"292.5 434.5 CURVE SMOOTH",
"241.167 365.833 OFFCURVE",
"154.333 320.667 OFFCURVE",
"73 310 CURVE",
"67 330 LINE",
"139 347.333 OFFCURVE",
"212 404 OFFCURVE",
"236 468 CURVE",
"206.667 450 OFFCURVE",
"174.667 441 OFFCURVE",
"140 441 CURVE SMOOTH",
"68 441 OFFCURVE",
"25 496.333 OFFCURVE",
"25 563 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"252 522.333 OFFCURVE",
"254 539.333 OFFCURVE",
"254 556 CURVE SMOOTH",
"254 621.333 OFFCURVE",
"225.667 671 OFFCURVE",
"171 671 CURVE SMOOTH",
"125.667 671 OFFCURVE",
"100 633 OFFCURVE",
"100 581 CURVE SMOOTH",
"100 523.667 OFFCURVE",
"128.333 476 OFFCURVE",
"183 476 CURVE SMOOTH",
"209 476 OFFCURVE",
"230.667 485.667 OFFCURVE",
"248 505 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */\0124 1 0 2 1 74 8 1 0 71 0 1 0 3 2 1 3 99 0 2 0 0 2 87 0 2 2 0 91 0 0 2 0 79 36 36 43 33 4 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 369;
}
);
note = uni2079;
unicode = 2079;
},
{
glyphname = zero.dnom;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"169.667 -5 OFFCURVE",
"139.667 4.167 OFFCURVE",
"115 22.5 CURVE SMOOTH",
"65.667 59.167 OFFCURVE",
"40 122.333 OFFCURVE",
"40 189 CURVE SMOOTH",
"40 222.333 OFFCURVE",
"46.333 253.833 OFFCURVE",
"59 283.5 CURVE SMOOTH",
"84.333 342.833 OFFCURVE",
"134.333 383 OFFCURVE",
"205 383 CURVE SMOOTH",
"240.333 383 OFFCURVE",
"270.5 373.833 OFFCURVE",
"295.5 355.5 CURVE SMOOTH",
"345.5 318.833 OFFCURVE",
"371 255.667 OFFCURVE",
"371 189 CURVE SMOOTH",
"371 155.667 OFFCURVE",
"364.667 124.167 OFFCURVE",
"352 94.5 CURVE SMOOTH",
"326.667 35.167 OFFCURVE",
"275.667 -5 OFFCURVE",
"205 -5 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"136.667 355 OFFCURVE",
"110 303 OFFCURVE",
"110 231 CURVE SMOOTH",
"110 158.574 OFFCURVE",
"163.186 29 OFFCURVE",
"224 29 CURVE SMOOTH",
"276 29 OFFCURVE",
"302 80.667 OFFCURVE",
"302 154 CURVE SMOOTH",
"302 227.068 OFFCURVE",
"249.106 355 OFFCURVE",
"190 355 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */\0120 0 5 1 3 2 0 3 99 0 2 2 1 91 4 1 1 1 46 1 76 16 16 0 0 16 29 16 28 23 21 0 15 0 14 38 6 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 409;
}
);
note = zero.dnom;
},
{
glyphname = two.dnom;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"101.667 380 OFFCURVE",
"48 344 OFFCURVE",
"16 300 CURVE",
"32 287 LINE",
"57.333 316.333 OFFCURVE",
"93 336 OFFCURVE",
"125 336 CURVE SMOOTH",
"171.667 336 OFFCURVE",
"201 303.333 OFFCURVE",
"201 254 CURVE SMOOTH",
"201 186 OFFCURVE",
"146.667 128.333 OFFCURVE",
"52 43 CURVE SMOOTH",
"28 21 OFFCURVE",
"16 10 OFFCURVE",
"16 10 CURVE",
"32 -5 LINE",
"48.667 7.667 OFFCURVE",
"67.667 14 OFFCURVE",
"89 14 CURVE SMOOTH",
"108.333 14 OFFCURVE",
"127.667 12.667 OFFCURVE",
"147 10 CURVE SMOOTH",
"166.333 7.333 OFFCURVE",
"178.667 5.667 OFFCURVE",
"184 5 CURVE",
"216 -0.333 OFFCURVE",
"241.333 -3.667 OFFCURVE",
"260 -5 CURVE",
"306 90 LINE",
"293 99 LINE",
"276.333 75 OFFCURVE",
"257 63 OFFCURVE",
"235 63 CURVE SMOOTH",
"226.333 63 OFFCURVE",
"214 64.333 OFFCURVE",
"198 67 CURVE",
"184.667 70.333 OFFCURVE",
"172 72 OFFCURVE",
"160 72 CURVE SMOOTH",
"146.667 72 OFFCURVE",
"133.333 69 OFFCURVE",
"120 63 CURVE",
"116 67 LINE",
"152 91 OFFCURVE",
"180.167 110.833 OFFCURVE",
"200.5 126.5 CURVE SMOOTH",
"241.167 157.833 OFFCURVE",
"280 207 OFFCURVE",
"280 267 CURVE SMOOTH",
"280 336.333 OFFCURVE",
"228.333 380 OFFCURVE",
"151 380 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 19 values pushed */\01237 36 16 15 4 0 3 6 1 2 0 2 74 25 24 17 3 2 71 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 19 values pushed */\01237 36 16 15 4 0 3 6 1 1 0 2 74 25 24 17 3 2 71 \012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01222 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 24 values pushed */\0121 1 0 3 2 3 0 2 112 5 1 4 0 3 0 4 3 99 0 2 2 46 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 31 values pushed */\0121 1 0 3 2 3 0 2 112 0 2 2 113 5 1 4 3 3 4 87 5 1 4 4 3 91 0 3 4 3 79 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 37 values pushed */\0120 0 3 1 3 0 1 112 0 1 2 3 1 2 110 0 2 2 113 5 1 4 3 3 4 87 5 1 4 4 3 91 0 3 4 3 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 13 values pushed */\0120 0 0 40 0 39 41 39 34 40 6 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 320;
}
);
note = two.dnom;
},
{
glyphname = four.dnom;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"251 381 LINE",
"251 154 LINE",
"297 154 LINE",
"278 99 LINE",
"251 99 LINE",
"251 9 LINE",
"180 -13 LINE",
"180 99 LINE",
"-4 99 LINE",
"54.667 167 OFFCURVE",
"91.333 242.667 OFFCURVE",
"114 336 CURVE",
"167 314 LINE",
"153.667 264.667 OFFCURVE",
"114 195.333 OFFCURVE",
"78 154 CURVE",
"180 154 LINE",
"180 360 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */\0127 6 1 0 4 0 72 13 12 2 1 71 3 1 0 1 1 0 85 3 1 0 0 1 89 2 1 1 0 1 77 17 19 23 18 4 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 320;
}
);
note = four.dnom;
},
{
glyphname = zero.numr;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"169.667 317 OFFCURVE",
"139.667 326.167 OFFCURVE",
"115 344.5 CURVE SMOOTH",
"65.667 381.167 OFFCURVE",
"40 444.333 OFFCURVE",
"40 511 CURVE SMOOTH",
"40 544.333 OFFCURVE",
"46.333 576 OFFCURVE",
"59 606 CURVE SMOOTH",
"84.333 666 OFFCURVE",
"134.333 706 OFFCURVE",
"205 706 CURVE SMOOTH",
"240.333 706 OFFCURVE",
"270.5 696.833 OFFCURVE",
"295.5 678.5 CURVE SMOOTH",
"345.5 641.833 OFFCURVE",
"371 577.667 OFFCURVE",
"371 511 CURVE SMOOTH",
"371 477.667 OFFCURVE",
"364.667 446.167 OFFCURVE",
"352 416.5 CURVE SMOOTH",
"326.667 357.167 OFFCURVE",
"275.667 317 OFFCURVE",
"205 317 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"136.667 678 OFFCURVE",
"110 626 OFFCURVE",
"110 554 CURVE SMOOTH",
"110 480.787 OFFCURVE",
"163.002 351 OFFCURVE",
"224 351 CURVE SMOOTH",
"274.667 351 OFFCURVE",
"302 403.667 OFFCURVE",
"302 477 CURVE SMOOTH",
"302 550.049 OFFCURVE",
"249.407 678 OFFCURVE",
"190 678 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01224 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 20 values pushed */\0120 2 4 1 1 2 1 95 5 1 3 3 0 91 0 0 0 42 3 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 26 values pushed */\0120 0 5 1 3 2 0 3 99 0 2 1 1 2 87 0 2 2 1 91 4 1 1 2 1 79 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 18 values pushed */\01216 16 0 0 16 29 16 28 23 21 0 15 0 14 38 6 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 409;
}
);
note = zero.numr;
},
{
glyphname = one.numr;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"8 635 LINE",
"138 703 LINE",
"138 332 LINE",
"67 310 LINE",
"67 636 LINE",
"20 612 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0125 3 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 225;
}
);
note = one.numr;
},
{
glyphname = three.numr;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"136 529 LINE",
"143.333 531.667 OFFCURVE",
"155 533 OFFCURVE",
"171 533 CURVE SMOOTH",
"232.333 533 OFFCURVE",
"282 492.667 OFFCURVE",
"282 434 CURVE SMOOTH",
"282 400.667 OFFCURVE",
"268.833 372.833 OFFCURVE",
"242.5 350.5 CURVE SMOOTH",
"189.833 305.833 OFFCURVE",
"106.333 285 OFFCURVE",
"37 285 CURVE",
"34 303 LINE",
"90.162 309.24 OFFCURVE",
"201 370.009 OFFCURVE",
"201 432 CURVE SMOOTH",
"201 477.333 OFFCURVE",
"167 507 OFFCURVE",
"123 507 CURVE SMOOTH",
"104.333 507 OFFCURVE",
"81.333 501 OFFCURVE",
"54 489 CURVE",
"47 508 LINE",
"104.333 533.333 OFFCURVE",
"159 574.667 OFFCURVE",
"159 624 CURVE SMOOTH",
"159 648.667 OFFCURVE",
"146.333 661 OFFCURVE",
"121 661 CURVE SMOOTH",
"94.333 661 OFFCURVE",
"58.667 640.667 OFFCURVE",
"40 618 CURVE",
"26 632 LINE",
"63.333 680 OFFCURVE",
"120 707 OFFCURVE",
"168 707 CURVE SMOOTH",
"212 707 OFFCURVE",
"242 684.667 OFFCURVE",
"242 646 CURVE SMOOTH",
"242 600.667 OFFCURVE",
"191.333 561 OFFCURVE",
"134 533 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */\0129 8 2 4 1 37 17 2 2 4 18 1 3 2 3 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 26 values pushed */\0120 3 2 3 115 0 1 1 0 91 0 0 0 42 75 0 2 2 4 91 0 4 4 53 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01242 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 24 values pushed */\0120 3 2 3 115 0 0 0 1 4 0 1 99 0 2 2 4 91 0 4 4 53 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 29 values pushed */\0120 3 2 3 115 0 0 0 1 4 0 1 99 0 4 2 2 4 87 0 4 4 2 91 0 2 4 2 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01237 23 38 37 36 5 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 314;
}
);
note = three.numr;
},
{
glyphname = fraction;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"392 697 LINE",
"439 663 LINE",
"36 15 LINE",
"-17 50 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0122 0 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 423;
}
);
leftKerningGroup = fraction;
note = fraction;
rightKerningGroup = fraction;
unicode = 2044;
},
{
glyphname = onehalf;
layers = (
{
components = (
{
alignment = -1;
name = one.numr;
transform = "{1, 0, 0, 1, 149, 0}";
},
{
alignment = -1;
name = fraction;
transform = "{1, 0, 0, 1, 225, 0}";
},
{
alignment = -1;
name = two.dnom;
transform = "{1, 0, 0, 1, 499, 0}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 969;
}
);
note = onehalf;
unicode = 00BD;
},
{
glyphname = onequarter;
layers = (
{
components = (
{
alignment = -1;
name = one.numr;
transform = "{1, 0, 0, 1, 149, 0}";
},
{
alignment = -1;
name = fraction;
transform = "{1, 0, 0, 1, 225, 0}";
},
{
alignment = -1;
name = four.dnom;
transform = "{1, 0, 0, 1, 499, 0}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 967;
}
);
note = onequarter;
unicode = 00BC;
},
{
glyphname = threequarters;
layers = (
{
components = (
{
alignment = -1;
name = three.numr;
transform = "{1, 0, 0, 1, 149, 0}";
},
{
alignment = -1;
name = fraction;
transform = "{1, 0, 0, 1, 314, 0}";
},
{
alignment = -1;
name = four.dnom;
transform = "{1, 0, 0, 1, 589, 0}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 1057;
}
);
note = threequarters;
unicode = 00BE;
},
{
glyphname = "zero-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"42 271 OFFCURVE",
"55.833 224.167 OFFCURVE",
"83.5 174.5 CURVE SMOOTH",
"138.833 75.167 OFFCURVE",
"230 0 OFFCURVE",
"302 0 CURVE SMOOTH",
"350.667 0 OFFCURVE",
"397.167 22.167 OFFCURVE",
"441.5 66.5 CURVE SMOOTH",
"530.167 155.167 OFFCURVE",
"589 311.667 OFFCURVE",
"589 469 CURVE SMOOTH",
"589 517 OFFCURVE",
"574.667 566.333 OFFCURVE",
"546 617 CURVE SMOOTH",
"488.667 718.333 OFFCURVE",
"392 794 OFFCURVE",
"312 794 CURVE SMOOTH",
"266 794 OFFCURVE",
"222.167 771.167 OFFCURVE",
"180.5 725.5 CURVE SMOOTH",
"97.167 634.167 OFFCURVE",
"42 475 OFFCURVE",
"42 315 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"186.758 69 OFFCURVE",
"130 175.113 OFFCURVE",
"130 249 CURVE SMOOTH",
"130 333.667 OFFCURVE",
"141.167 412.667 OFFCURVE",
"163.5 486 CURVE SMOOTH",
"208.167 632.667 OFFCURVE",
"289 728 OFFCURVE",
"377 728 CURVE SMOOTH",
"437.176 728 OFFCURVE",
"504 607.473 OFFCURVE",
"504 527 CURVE SMOOTH",
"504 445.667 OFFCURVE",
"492.167 370 OFFCURVE",
"468.5 300 CURVE SMOOTH",
"421.167 160 OFFCURVE",
"335.333 69 OFFCURVE",
"242 69 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */\0120 0 0 2 3 0 2 99 4 1 3 3 1 91 0 1 1 26 1 76 16 16 16 31 16 30 42 38 34 5 6 23 \012CALL[ ]	/* CallFunction */";
};
width = 632;
}
);
note = uni0966;
unicode = 0966;
},
{
glyphname = "one-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"142 620.333 OFFCURVE",
"152 595.333 OFFCURVE",
"172 568 CURVE SMOOTH",
"212 513.333 OFFCURVE",
"277 470 OFFCURVE",
"325 470 CURVE SMOOTH",
"355.667 470 OFFCURVE",
"388.333 489 OFFCURVE",
"407 521 CURVE",
"407 120 LINE SMOOTH",
"407 89.333 OFFCURVE",
"382.667 58.333 OFFCURVE",
"348 49 CURVE",
"415 0 LINE",
"460.333 9.333 OFFCURVE",
"490 42 OFFCURVE",
"490 82 CURVE SMOOTH",
"490 563 LINE SMOOTH",
"490 599 OFFCURVE",
"480.167 635.333 OFFCURVE",
"460.5 672 CURVE SMOOTH",
"421.167 745.333 OFFCURVE",
"355.333 798 OFFCURVE",
"294 798 CURVE SMOOTH",
"269.333 798 OFFCURVE",
"245.167 790.333 OFFCURVE",
"221.5 775 CURVE SMOOTH",
"174.167 744.333 OFFCURVE",
"142 692.333 OFFCURVE",
"142 643 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"249.667 525 OFFCURVE",
"221 555 OFFCURVE",
"221 587 CURVE SMOOTH",
"221 649.168 OFFCURVE",
"291.307 735 OFFCURVE",
"348 735 CURVE SMOOTH",
"377.333 735 OFFCURVE",
"405 708.667 OFFCURVE",
"405 674 CURVE SMOOTH",
"405 612.271 OFFCURVE",
"338.507 525 OFFCURVE",
"283 525 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */\01216 1 1 3 1 74 12 11 2 1 71 0 0 0 2 3 0 2 99 4 1 3 1 1 3 87 4 1 3 3 1 91 0 1 3 1 79 24 24 24 37 24 36 41 46 34 5 6 23 \012CALL[ ]	/* CallFunction */";
};
width = 632;
}
);
note = uni0967;
unicode = 0967;
},
{
glyphname = "two-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"97 621 LINE",
"154.333 693 OFFCURVE",
"242.333 740 OFFCURVE",
"333 740 CURVE SMOOTH",
"394.837 740 OFFCURVE",
"444 683.061 OFFCURVE",
"444 617 CURVE SMOOTH",
"444 526.333 OFFCURVE",
"373.667 436 OFFCURVE",
"267 380 CURVE",
"239 454.667 OFFCURVE",
"191.333 505 OFFCURVE",
"146 505 CURVE SMOOTH",
"94 505 OFFCURVE",
"48 467.667 OFFCURVE",
"48 425 CURVE SMOOTH",
"48 357.083 OFFCURVE",
"113.669 278 OFFCURVE",
"181 278 CURVE SMOOTH",
"211.667 278 OFFCURVE",
"236.333 282 OFFCURVE",
"255 290 CURVE",
"317 136 LINE SMOOTH",
"357 37.333 OFFCURVE",
"412 -19 OFFCURVE",
"496 -19 CURVE SMOOTH",
"541.333 -19 OFFCURVE",
"581.667 13 OFFCURVE",
"607 65 CURVE",
"529 129 LINE",
"511.667 82.333 OFFCURVE",
"474.333 52 OFFCURVE",
"433 52 CURVE SMOOTH",
"403.667 52 OFFCURVE",
"364.667 101.667 OFFCURVE",
"338 175 CURVE SMOOTH",
"290 298 LINE",
"332 313.333 OFFCURVE",
"369.5 335 OFFCURVE",
"402.5 363 CURVE SMOOTH",
"468.5 419 OFFCURVE",
"507 495 OFFCURVE",
"507 571 CURVE SMOOTH",
"507 606.333 OFFCURVE",
"495.5 641.833 OFFCURVE",
"472.5 677.5 CURVE SMOOTH",
"426.5 748.833 OFFCURVE",
"348 800 OFFCURVE",
"276 800 CURVE SMOOTH",
"178.667 800 OFFCURVE",
"85.667 762.667 OFFCURVE",
"23 696 CURVE"
);
},
{
closed = 1;
nodes = (
"124.667 345 OFFCURVE",
"104 362.667 OFFCURVE",
"104 384 CURVE SMOOTH",
"104 408 OFFCURVE",
"133 429 OFFCURVE",
"169 429 CURVE SMOOTH",
"194.333 429 OFFCURVE",
"219.333 402.333 OFFCURVE",
"234 365 CURVE",
"204.667 351.667 OFFCURVE",
"178 345 OFFCURVE",
"154 345 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */\01248 47 2 4 5 50 37 2 7 6 10 1 3 7 18 17 2 1 3 4 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01227 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 36 values pushed */\0120 0 0 5 4 0 5 99 0 4 0 6 7 4 6 99 8 1 7 0 3 1 7 3 99 0 1 1 2 91 0 2 2 26 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 41 values pushed */\0120 0 0 5 4 0 5 99 0 4 0 6 7 4 6 99 8 1 7 0 3 1 7 3 99 0 1 2 2 1 87 0 1 1 2 91 0 2 1 2 79 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 16 values pushed */\01249 49 49 59 49 58 39 40 37 36 37 42 33 9 6 27 \012CALL[ ]	/* CallFunction */";
};
width = 630;
}
);
note = uni0968;
unicode = 0968;
},
{
glyphname = "three-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"112 661 LINE",
"157.333 713 OFFCURVE",
"234.333 743 OFFCURVE",
"317 743 CURVE SMOOTH",
"358.333 743 OFFCURVE",
"392 703.333 OFFCURVE",
"392 658 CURVE SMOOTH",
"392 619.333 OFFCURVE",
"372 578.667 OFFCURVE",
"336 544 CURVE",
"296 582.667 OFFCURVE",
"261.333 602 OFFCURVE",
"232 602 CURVE SMOOTH",
"183.882 602 OFFCURVE",
"129 563.862 OFFCURVE",
"129 524 CURVE SMOOTH",
"129 476.23 OFFCURVE",
"206.312 415 OFFCURVE",
"260 415 CURVE SMOOTH",
"292 415 OFFCURVE",
"330.667 430.667 OFFCURVE",
"360 456 CURVE",
"396 418.667 OFFCURVE",
"415 379 OFFCURVE",
"415 343 CURVE SMOOTH",
"415 279 OFFCURVE",
"358.333 225.333 OFFCURVE",
"281 212 CURVE",
"258.333 292 OFFCURVE",
"205.333 354 OFFCURVE",
"156 354 CURVE SMOOTH",
"106.667 354 OFFCURVE",
"66 318.333 OFFCURVE",
"66 277 CURVE SMOOTH",
"66 219.047 OFFCURVE",
"172.578 134 OFFCURVE",
"266 134 CURVE",
"312.667 16.667 OFFCURVE",
"399 -62 OFFCURVE",
"487 -62 CURVE SMOOTH",
"531 -62 OFFCURVE",
"567.667 -45 OFFCURVE",
"585 -17 CURVE",
"510 37 LINE",
"496.667 15.667 OFFCURVE",
"470.333 2 OFFCURVE",
"441 2 CURVE SMOOTH",
"389 2 OFFCURVE",
"332.667 57.667 OFFCURVE",
"302 135 CURVE",
"335.333 137 OFFCURVE",
"366.333 145.5 OFFCURVE",
"395 160.5 CURVE SMOOTH",
"452.333 190.5 OFFCURVE",
"489 241 OFFCURVE",
"489 297 CURVE SMOOTH",
"489 349 OFFCURVE",
"453 415.667 OFFCURVE",
"389 477 CURVE",
"431.667 510.333 OFFCURVE",
"456 561 OFFCURVE",
"456 613 CURVE SMOOTH",
"456 641.667 OFFCURVE",
"445.667 670.833 OFFCURVE",
"425 700.5 CURVE SMOOTH",
"383.667 759.833 OFFCURVE",
"314 803 OFFCURVE",
"254 803 CURVE SMOOTH",
"172.667 803 OFFCURVE",
"96.667 775.333 OFFCURVE",
"46 726 CURVE"
);
},
{
closed = 1;
nodes = (
"209.667 470 OFFCURVE",
"195 478 OFFCURVE",
"195 490 CURVE SMOOTH",
"195 514 OFFCURVE",
"236.333 543 OFFCURVE",
"267 543 CURVE SMOOTH",
"284.333 543 OFFCURVE",
"300 534.333 OFFCURVE",
"314 517 CURVE",
"286 489 OFFCURVE",
"251 470 OFFCURVE",
"223 470 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"156.667 195 OFFCURVE",
"132 214.667 OFFCURVE",
"132 236 CURVE SMOOTH",
"132 257.333 OFFCURVE",
"157.667 279 OFFCURVE",
"187 279 CURVE SMOOTH",
"209.667 279 OFFCURVE",
"230.333 247.667 OFFCURVE",
"245 205 CURVE",
"231.667 198.333 OFFCURVE",
"212 195 OFFCURVE",
"186 195 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 120 values pushed */\01268 67 2 7 8 58 1 9 7 71 9 2 10 9 45 1 6 10 81 39 2 12 11 22 1 2 1 23 1 3 2 7 74 0 0 0 8 7 0 8 99 0 7 0 9 10 7 9 99 13 1 10 0 6 5 10 6 99 0 5 0 11 12 5 11 99 14 1 12 4 1 1 2 12 1 99 0 2 3 3 2 87 0 2 2 3 91 0 3 2 3 79 80 80 69 69 80 90 80 89 85 83 69 79 69 78 74 72 38 38 42 37 18 37 34 28 33 15 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 630;
}
);
note = uni0969;
unicode = 0969;
},
{
glyphname = "four-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"40 451.333 OFFCURVE",
"125.667 354 OFFCURVE",
"255 294 CURVE",
"183 248.667 OFFCURVE",
"140 192.667 OFFCURVE",
"140 150 CURVE SMOOTH",
"140 124.667 OFFCURVE",
"151.667 99.667 OFFCURVE",
"175 75 CURVE SMOOTH",
"221.667 25.667 OFFCURVE",
"300 -9 OFFCURVE",
"368 -9 CURVE SMOOTH",
"441.55 -9 OFFCURVE",
"516 61.008 OFFCURVE",
"516 134 CURVE SMOOTH",
"516 183.333 OFFCURVE",
"453 241.333 OFFCURVE",
"365 276 CURVE",
"505 364 OFFCURVE",
"592 474 OFFCURVE",
"592 570 CURVE SMOOTH",
"592 613.333 OFFCURVE",
"577.333 655.333 OFFCURVE",
"548 696 CURVE SMOOTH",
"489.333 777.333 OFFCURVE",
"386 832 OFFCURVE",
"286 832 CURVE",
"265 803 LINE",
"306.333 803 OFFCURVE",
"347 794.5 OFFCURVE",
"387 777.5 CURVE SMOOTH",
"467 743.5 OFFCURVE",
"523 684.333 OFFCURVE",
"523 627 CURVE SMOOTH",
"523 525.667 OFFCURVE",
"434 410.667 OFFCURVE",
"290 320 CURVE",
"186 358.667 OFFCURVE",
"115 429.667 OFFCURVE",
"115 499 CURVE SMOOTH",
"115 563 OFFCURVE",
"157.667 633 OFFCURVE",
"227 685 CURVE",
"156 754 LINE",
"84 700.667 OFFCURVE",
"40 620.667 OFFCURVE",
"40 542 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"262.333 40 OFFCURVE",
"222 70 OFFCURVE",
"222 110 CURVE SMOOTH",
"222 151.333 OFFCURVE",
"265.667 204.667 OFFCURVE",
"335 250 CURVE",
"393.667 234 OFFCURVE",
"438 199.333 OFFCURVE",
"438 166 CURVE SMOOTH",
"438 109.723 OFFCURVE",
"368.892 40 OFFCURVE",
"313 40 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */\01248 38 24 9 3 2 6 3 0 1 74 0 1 0 0 3 1 0 99 4 1 3 3 2 91 0 2 2 26 2 76 42 42 42 54 42 53 44 17 31 5 6 23 \012CALL[ ]	/* CallFunction */";
};
width = 632;
}
);
note = uni096A;
unicode = 096A;
},
{
glyphname = "five-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"37 534.333 OFFCURVE",
"50.5 493 OFFCURVE",
"77.5 455 CURVE SMOOTH",
"131.5 379 OFFCURVE",
"228 331 OFFCURVE",
"336 331 CURVE SMOOTH",
"355.333 331 OFFCURVE",
"376.667 333.333 OFFCURVE",
"400 338 CURVE",
"469.333 290 OFFCURVE",
"511 233 OFFCURVE",
"511 189 CURVE SMOOTH",
"511 162.333 OFFCURVE",
"502 137.333 OFFCURVE",
"484 114 CURVE SMOOTH",
"448 67.333 OFFCURVE",
"382 37 OFFCURVE",
"310 37 CURVE SMOOTH",
"242 37 OFFCURVE",
"172 64.667 OFFCURVE",
"120 114 CURVE",
"99 86 LINE",
"196.333 18 OFFCURVE",
"288.667 -16 OFFCURVE",
"376 -16 CURVE SMOOTH",
"414 -16 OFFCURVE",
"449.667 -9 OFFCURVE",
"483 5 CURVE SMOOTH",
"549.667 33 OFFCURVE",
"593 83.333 OFFCURVE",
"593 142 CURVE SMOOTH",
"593 207.333 OFFCURVE",
"534.667 287 OFFCURVE",
"440 351 CURVE",
"518.667 372.333 OFFCURVE",
"577 428.333 OFFCURVE",
"577 487 CURVE SMOOTH",
"577 544.79 OFFCURVE",
"492.354 621 OFFCURVE",
"432 621 CURVE SMOOTH",
"359.023 621 OFFCURVE",
"287 564.557 OFFCURVE",
"287 499 CURVE SMOOTH",
"287 461.667 OFFCURVE",
"314.333 420.333 OFFCURVE",
"357 391 CURVE",
"339 382.333 OFFCURVE",
"314 378 OFFCURVE",
"282 378 CURVE SMOOTH",
"209.963 378 OFFCURVE",
"108 447.434 OFFCURVE",
"108 509 CURVE SMOOTH",
"108 543 OFFCURVE",
"119.833 575.667 OFFCURVE",
"143.5 607 CURVE SMOOTH",
"190.833 669.667 OFFCURVE",
"277.333 717.667 OFFCURVE",
"380 735 CURVE",
"311 807 LINE",
"259 797.667 OFFCURVE",
"212.167 781.5 OFFCURVE",
"170.5 758.5 CURVE SMOOTH",
"87.167 712.5 OFFCURVE",
"37 645.667 OFFCURVE",
"37 579 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"372.667 420 OFFCURVE",
"362 437.667 OFFCURVE",
"362 459 CURVE SMOOTH",
"362 503.484 OFFCURVE",
"427.09 566 OFFCURVE",
"473 566 CURVE SMOOTH",
"493 566 OFFCURVE",
"510 549 OFFCURVE",
"510 529 CURVE SMOOTH",
"510 487.667 OFFCURVE",
"462 436.667 OFFCURVE",
"394 406 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */\01266 14 2 0 5 28 1 4 0 38 37 2 3 4 3 74 4 3 2 1 72 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 27 values pushed */\0120 1 0 5 0 1 5 99 0 0 0 4 3 0 4 99 0 3 3 2 91 0 2 2 26 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 32 values pushed */\0120 1 0 5 0 1 5 99 0 0 0 4 3 0 4 99 0 3 2 2 3 87 0 3 3 2 91 0 2 3 2 79 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 9 values pushed */\01240 39 36 44 39 43 6 6 26 \012CALL[ ]	/* CallFunction */";
};
width = 630;
}
);
note = uni096B;
unicode = 096B;
},
{
glyphname = "six-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"22 580.333 OFFCURVE",
"80.333 517.333 OFFCURVE",
"175 472 CURVE",
"111 428 OFFCURVE",
"71 372.333 OFFCURVE",
"71 327 CURVE SMOOTH",
"71 292.333 OFFCURVE",
"83 260 OFFCURVE",
"107 230 CURVE SMOOTH",
"155 170 OFFCURVE",
"242.667 131 OFFCURVE",
"348 131 CURVE",
"392 8.333 OFFCURVE",
"466.333 -74 OFFCURVE",
"537 -74 CURVE SMOOTH",
"565.667 -74 OFFCURVE",
"589.333 -65 OFFCURVE",
"608 -47 CURVE",
"548 22 LINE",
"529.333 4.667 OFFCURVE",
"509.333 -4 OFFCURVE",
"488 -4 CURVE SMOOTH",
"454.667 -4 OFFCURVE",
"412.333 52 OFFCURVE",
"383 132 CURVE",
"441.667 142.667 OFFCURVE",
"485 172 OFFCURVE",
"485 204 CURVE SMOOTH",
"485 245.672 OFFCURVE",
"418.679 294 OFFCURVE",
"371 294 CURVE SMOOTH",
"344.333 294 OFFCURVE",
"322 272.333 OFFCURVE",
"322 247 CURVE SMOOTH",
"322 232.333 OFFCURVE",
"325.333 216.667 OFFCURVE",
"332 200 CURVE",
"322.667 192.667 OFFCURVE",
"302.333 189 OFFCURVE",
"271 189 CURVE SMOOTH",
"199 189 OFFCURVE",
"142 224.667 OFFCURVE",
"142 270 CURVE SMOOTH",
"142 324.667 OFFCURVE",
"184 384.333 OFFCURVE",
"248 419 CURVE",
"272.667 409.667 OFFCURVE",
"297 405 OFFCURVE",
"321 405 CURVE SMOOTH",
"361 405 OFFCURVE",
"392 426.667 OFFCURVE",
"392 452 CURVE SMOOTH",
"392 483.789 OFFCURVE",
"328.19 518 OFFCURVE",
"289 518 CURVE SMOOTH",
"263.667 518 OFFCURVE",
"235.333 508 OFFCURVE",
"204 488 CURVE",
"141.333 516 OFFCURVE",
"101 558.333 OFFCURVE",
"101 597 CURVE SMOOTH",
"101 658.803 OFFCURVE",
"215.323 726 OFFCURVE",
"293 726 CURVE SMOOTH",
"314.333 726 OFFCURVE",
"340.667 713.667 OFFCURVE",
"372 689 CURVE",
"386 704 LINE",
"302 784 LINE",
"286.667 790 OFFCURVE",
"265.667 793 OFFCURVE",
"239 793 CURVE SMOOTH",
"201 793 OFFCURVE",
"165.333 786.167 OFFCURVE",
"132 772.5 CURVE SMOOTH",
"65.333 745.167 OFFCURVE",
"22 695 OFFCURVE",
"22 639 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 89 values pushed */\0127 6 2 2 1 65 27 16 3 3 2 35 1 4 5 47 1 8 4 52 1 6 8 53 1 7 6 6 74 0 5 3 4 3 5 4 112 0 0 0 1 2 0 1 99 0 2 0 3 5 2 3 99 0 4 0 8 6 4 8 99 0 6 7 7 6 87 0 6 6 7 91 0 7 6 7 79 18 35 40 37 38 37 39 36 34 9 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 630;
}
);
note = uni096C;
unicode = 096C;
},
{
glyphname = "seven-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"40 476.667 OFFCURVE",
"54.167 380.5 OFFCURVE",
"82.5 291.5 CURVE SMOOTH",
"139.167 113.5 OFFCURVE",
"245 -1 OFFCURVE",
"373 -1 CURVE SMOOTH",
"412.333 -1 OFFCURVE",
"448.667 12.5 OFFCURVE",
"482 39.5 CURVE SMOOTH",
"548.667 93.5 OFFCURVE",
"590 190.667 OFFCURVE",
"590 296 CURVE SMOOTH",
"590 344 OFFCURVE",
"581 390.5 OFFCURVE",
"563 435.5 CURVE SMOOTH",
"527 525.5 OFFCURVE",
"462.333 588 OFFCURVE",
"397 588 CURVE SMOOTH",
"371 588 OFFCURVE",
"347.167 579.833 OFFCURVE",
"325.5 563.5 CURVE SMOOTH",
"282.167 530.833 OFFCURVE",
"256 471.333 OFFCURVE",
"256 402 CURVE SMOOTH",
"256 373.333 OFFCURVE",
"265 343.667 OFFCURVE",
"283 313 CURVE SMOOTH",
"319 251.667 OFFCURVE",
"379.333 206 OFFCURVE",
"430 206 CURVE SMOOTH",
"458 206 OFFCURVE",
"487 225 OFFCURVE",
"507 253 CURVE",
"503.667 222.333 OFFCURVE",
"492.667 192.333 OFFCURVE",
"474 163 CURVE SMOOTH",
"436.667 104.333 OFFCURVE",
"379.667 63 OFFCURVE",
"329 63 CURVE SMOOTH",
"287 63 OFFCURVE",
"248.5 81.833 OFFCURVE",
"213.5 119.5 CURVE SMOOTH",
"143.5 194.833 OFFCURVE",
"99 327.667 OFFCURVE",
"99 473 CURVE SMOOTH",
"99 563.667 OFFCURVE",
"112 654.667 OFFCURVE",
"138 746 CURVE",
"64 782 LINE",
"48 705.333 OFFCURVE",
"40 638 OFFCURVE",
"40 580 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"358.667 256 OFFCURVE",
"332 295.667 OFFCURVE",
"332 345 CURVE SMOOTH",
"332 416.163 OFFCURVE",
"386.95 518 OFFCURVE",
"439 518 CURVE SMOOTH",
"477.667 518 OFFCURVE",
"505 482.667 OFFCURVE",
"505 432 CURVE SMOOTH",
"505 328 OFFCURVE",
"458.667 256 OFFCURVE",
"392 256 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */\01212 1 1 5 1 74 2 1 2 2 72 0 2 0 4 5 2 4 99 6 1 5 0 1 0 5 1 99 0 0 0 3 91 0 3 3 26 3 76 36 36 36 48 36 47 40 38 38 37 39 7 6 25 \012CALL[ ]	/* CallFunction */";
};
width = 630;
}
);
note = uni096D;
unicode = 096D;
},
{
glyphname = "eight-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"43 185 OFFCURVE",
"55.667 151.5 OFFCURVE",
"81 116.5 CURVE SMOOTH",
"131.667 46.5 OFFCURVE",
"216.333 -7 OFFCURVE",
"291 -7 CURVE SMOOTH",
"395 -7 OFFCURVE",
"495.667 33 OFFCURVE",
"581 105 CURVE",
"519 185 LINE",
"439 103.667 OFFCURVE",
"332.667 56 OFFCURVE",
"226 56 CURVE SMOOTH",
"163.333 56 OFFCURVE",
"112 103.667 OFFCURVE",
"112 161 CURVE SMOOTH",
"112 193 OFFCURVE",
"141.333 241 OFFCURVE",
"200 305 CURVE SMOOTH",
"587 729 LINE",
"521 800 LINE",
"140 381 LINE SMOOTH",
"75.333 309.667 OFFCURVE",
"43 255 OFFCURVE",
"43 217 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */\01213 12 3 2 4 0 72 0 0 0 1 91 0 1 1 26 1 76 37 40 2 6 22 \012CALL[ ]	/* CallFunction */";
};
width = 630;
}
);
note = uni096E;
unicode = 096E;
},
{
glyphname = "nine-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"40 348.333 OFFCURVE",
"52.833 304.667 OFFCURVE",
"78.5 262 CURVE SMOOTH",
"129.833 176.667 OFFCURVE",
"219.333 117 OFFCURVE",
"306 117 CURVE SMOOTH",
"314 117 OFFCURVE",
"336.667 121.667 OFFCURVE",
"374 131 CURVE SMOOTH",
"410 140.333 OFFCURVE",
"432.333 145 OFFCURVE",
"441 145 CURVE SMOOTH",
"489 145 OFFCURVE",
"528 108 OFFCURVE",
"528 60 CURVE SMOOTH",
"528 14.046 OFFCURVE",
"468.441 -42.173 OFFCURVE",
"416 -48 CURVE",
"498 -117 LINE",
"552.667 -97 OFFCURVE",
"592 -45.667 OFFCURVE",
"592 13 CURVE SMOOTH",
"592 44.333 OFFCURVE",
"581 75.667 OFFCURVE",
"559 107 CURVE SMOOTH",
"515 169.667 OFFCURVE",
"440.333 215 OFFCURVE",
"375 215 CURVE SMOOTH",
"363.667 215 OFFCURVE",
"341.333 210.667 OFFCURVE",
"308 202 CURVE",
"304 201.333 OFFCURVE",
"292.5 198.667 OFFCURVE",
"273.5 194 CURVE SMOOTH",
"254.5 189.333 OFFCURVE",
"239 187 OFFCURVE",
"227 187 CURVE SMOOTH",
"161.155 187 OFFCURVE",
"110 251.68 OFFCURVE",
"110 326 CURVE SMOOTH",
"110 403.333 OFFCURVE",
"135 479.333 OFFCURVE",
"185 554 CURVE",
"210.333 466 OFFCURVE",
"276.333 406 OFFCURVE",
"347 406 CURVE SMOOTH",
"375 406 OFFCURVE",
"403 414.833 OFFCURVE",
"431 432.5 CURVE SMOOTH",
"487 467.833 OFFCURVE",
"527 529 OFFCURVE",
"527 585 CURVE SMOOTH",
"527 615 OFFCURVE",
"517.667 644.333 OFFCURVE",
"499 673 CURVE SMOOTH",
"461.667 730.333 OFFCURVE",
"396.333 771 OFFCURVE",
"335 771 CURVE SMOOTH",
"291 771 OFFCURVE",
"245.833 751.667 OFFCURVE",
"199.5 713 CURVE SMOOTH",
"106.833 635.667 OFFCURVE",
"40 506.333 OFFCURVE",
"40 393 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"256.667 479 OFFCURVE",
"219.333 521.667 OFFCURVE",
"206 583 CURVE",
"256.667 661.667 OFFCURVE",
"327.667 712 OFFCURVE",
"393 712 CURVE SMOOTH",
"434.333 712 OFFCURVE",
"470 675 OFFCURVE",
"470 631 CURVE SMOOTH",
"470 607.667 OFFCURVE",
"460.833 584.167 OFFCURVE",
"442.5 560.5 CURVE SMOOTH",
"405.833 513.167 OFFCURVE",
"346 479 OFFCURVE",
"298 479 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */\01258 14 2 7 6 1 74 33 32 2 5 71 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 43 values pushed */\0120 3 1 2 1 3 2 112 0 4 2 5 2 4 5 112 8 1 7 0 1 3 7 1 99 0 2 0 5 2 5 95 0 0 0 6 91 0 6 6 25 6 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 49 values pushed */\0120 3 1 2 1 3 2 112 0 4 2 5 2 4 5 112 0 0 0 6 7 0 6 99 8 1 7 0 1 3 7 1 99 0 2 4 5 2 87 0 2 2 5 91 0 5 2 5 79 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 16 values pushed */\01249 49 49 61 49 60 41 34 45 35 39 38 34 9 6 27 \012CALL[ ]	/* CallFunction */";
};
width = 632;
}
);
note = uni096F;
unicode = 096F;
},
{
glyphname = "five-deva.loclNEP";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"584 211 OFFCURVE",
"533.333 288.333 OFFCURVE",
"440 351 CURVE",
"518.667 372.333 OFFCURVE",
"577 428.333 OFFCURVE",
"577 487 CURVE SMOOTH",
"577 544.79 OFFCURVE",
"492.354 621 OFFCURVE",
"432 621 CURVE SMOOTH",
"359.023 621 OFFCURVE",
"287 564.557 OFFCURVE",
"287 499 CURVE SMOOTH",
"287 461.667 OFFCURVE",
"314.333 420.333 OFFCURVE",
"357 391 CURVE",
"339 382.333 OFFCURVE",
"314 378 OFFCURVE",
"282 378 CURVE SMOOTH",
"209.963 378 OFFCURVE",
"108 447.434 OFFCURVE",
"108 509 CURVE SMOOTH",
"108 543 OFFCURVE",
"119.833 575.667 OFFCURVE",
"143.5 607 CURVE SMOOTH",
"190.833 669.667 OFFCURVE",
"277.333 717.667 OFFCURVE",
"380 735 CURVE",
"311 807 LINE",
"259 797.667 OFFCURVE",
"212.167 781.5 OFFCURVE",
"170.5 758.5 CURVE SMOOTH",
"87.167 712.5 OFFCURVE",
"37 645.667 OFFCURVE",
"37 579 CURVE SMOOTH",
"37 534.333 OFFCURVE",
"50.5 493 OFFCURVE",
"77.5 455 CURVE SMOOTH",
"131.5 379 OFFCURVE",
"228 331 OFFCURVE",
"336 331 CURVE SMOOTH",
"355.333 331 OFFCURVE",
"376.667 333.333 OFFCURVE",
"400 338 CURVE",
"469.333 290 OFFCURVE",
"511 233 OFFCURVE",
"511 189 CURVE SMOOTH",
"511 127.667 OFFCURVE",
"453.333 72.333 OFFCURVE",
"376 59 CURVE",
"354.667 139 OFFCURVE",
"300 200 OFFCURVE",
"252 200 CURVE SMOOTH",
"202.667 200 OFFCURVE",
"161 165 OFFCURVE",
"161 125 CURVE SMOOTH",
"161 65.661 OFFCURVE",
"267.747 -19 OFFCURVE",
"361 -19 CURVE",
"407.667 -136.333 OFFCURVE",
"494 -215 OFFCURVE",
"582 -215 CURVE SMOOTH",
"626 -215 OFFCURVE",
"664.333 -198 OFFCURVE",
"679 -170 CURVE",
"606 -116 LINE",
"592.667 -137.333 OFFCURVE",
"565 -152 OFFCURVE",
"537 -152 CURVE SMOOTH",
"485 -152 OFFCURVE",
"428.667 -96.667 OFFCURVE",
"398 -18 CURVE",
"430.667 -16 OFFCURVE",
"461.333 -7.5 OFFCURVE",
"490 7.5 CURVE SMOOTH",
"547.333 37.5 OFFCURVE",
"584 88.333 OFFCURVE",
"584 143 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"372.667 420 OFFCURVE",
"362 437.667 OFFCURVE",
"362 459 CURVE SMOOTH",
"362 503.484 OFFCURVE",
"427.09 566 OFFCURVE",
"473 566 CURVE SMOOTH",
"493 566 OFFCURVE",
"510 549 OFFCURVE",
"510 529 CURVE SMOOTH",
"510 487.667 OFFCURVE",
"462 436.667 OFFCURVE",
"394 406 CURVE"
);
},
{
closed = 1;
nodes = (
"251.667 42 OFFCURVE",
"227 61.667 OFFCURVE",
"227 83 CURVE SMOOTH",
"227 104.333 OFFCURVE",
"252.667 124 OFFCURVE",
"282 124 CURVE SMOOTH",
"304.667 124 OFFCURVE",
"326.667 95 OFFCURVE",
"340 51 CURVE",
"325.333 45 OFFCURVE",
"305.667 42 OFFCURVE",
"281 42 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 93 values pushed */\01282 53 2 6 8 67 1 5 6 84 26 2 10 9 9 1 1 0 10 1 2 1 5 74 43 42 2 7 72 0 7 0 8 6 7 8 99 0 6 0 5 4 6 5 99 0 4 0 9 10 4 9 99 0 1 0 2 1 2 95 11 1 10 10 0 91 3 1 0 0 43 0 76 83 83 83 93 83 92 88 86 46 39 47 41 37 18 37 34 18 12 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 630;
}
);
note = uni096B.loclNEP;
},
{
glyphname = "eight-deva.loclNEP";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"476 609 LINE",
"596 609 LINE",
"596 689 LINE",
"34 689 LINE",
"34 609 LINE",
"348 609 LINE",
"140 381 LINE SMOOTH",
"75.333 309.667 OFFCURVE",
"43 255 OFFCURVE",
"43 217 CURVE SMOOTH",
"43 185 OFFCURVE",
"55.667 151.5 OFFCURVE",
"81 116.5 CURVE SMOOTH",
"131.667 46.5 OFFCURVE",
"216.333 -7 OFFCURVE",
"291 -7 CURVE SMOOTH",
"395 -7 OFFCURVE",
"495.667 33 OFFCURVE",
"581 105 CURVE",
"519 185 LINE",
"439 103.667 OFFCURVE",
"332.667 56 OFFCURVE",
"226 56 CURVE SMOOTH",
"163.333 56 OFFCURVE",
"112 103.667 OFFCURVE",
"112 161 CURVE SMOOTH",
"112 193 OFFCURVE",
"141.333 241 OFFCURVE",
"200 305 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */\0129 8 2 0 2 1 74 0 3 4 1 2 0 3 2 97 0 0 0 1 91 0 1 1 46 1 76 17 17 22 37 36 5 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 630;
}
);
note = uni096E.loclNEP;
},
{
glyphname = period;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"170 75.333 OFFCURVE",
"142.333 103 OFFCURVE",
"109 103 CURVE SMOOTH",
"75.667 103 OFFCURVE",
"48 75.333 OFFCURVE",
"48 42 CURVE SMOOTH",
"48 8.667 OFFCURVE",
"75.667 -17 OFFCURVE",
"109 -17 CURVE SMOOTH",
"142.333 -17 OFFCURVE",
"170 8.667 OFFCURVE",
"170 42 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */\0120 1 1 0 91 0 0 0 43 0 76 36 33 2 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 217;
}
);
leftKerningGroup = comma;
note = period;
rightKerningGroup = comma;
unicode = 002E;
},
{
glyphname = comma;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"75.667 103 OFFCURVE",
"48 75.333 OFFCURVE",
"48 42 CURVE SMOOTH",
"48 14 OFFCURVE",
"67 -9.333 OFFCURVE",
"95 -16 CURVE",
"91 -33.333 OFFCURVE",
"79.333 -54.333 OFFCURVE",
"66 -65 CURVE",
"85 -81 LINE",
"135.667 -53 OFFCURVE",
"170 -8.667 OFFCURVE",
"170 42 CURVE SMOOTH",
"170 75.333 OFFCURVE",
"142.333 103 OFFCURVE",
"109 103 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */\0129 6 5 3 0 71 1 1 0 0 105 0 0 0 15 0 14 2 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 217;
}
);
leftKerningGroup = comma;
note = comma;
rightKerningGroup = comma;
unicode = 002C;
},
{
glyphname = colon;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"171 307.333 OFFCURVE",
"143.333 279 OFFCURVE",
"110 279 CURVE SMOOTH",
"78 279 OFFCURVE",
"51 307.333 OFFCURVE",
"51 338 CURVE SMOOTH",
"51 372.667 OFFCURVE",
"78 401 OFFCURVE",
"110 401 CURVE SMOOTH",
"143.333 401 OFFCURVE",
"171 372.667 OFFCURVE",
"171 338 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"171 8.667 OFFCURVE",
"143.333 -17 OFFCURVE",
"110 -17 CURVE SMOOTH",
"78 -17 OFFCURVE",
"51 8.667 OFFCURVE",
"51 42 CURVE SMOOTH",
"51 75.333 OFFCURVE",
"78 103 OFFCURVE",
"110 103 CURVE SMOOTH",
"143.333 103 OFFCURVE",
"171 75.333 OFFCURVE",
"171 42 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */\0120 0 0 1 2 0 1 99 0 2 2 3 91 0 3 3 43 3 76 36 36 36 33 4 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 222;
}
);
leftKerningGroup = colon;
note = colon;
rightKerningGroup = colon;
unicode = 003A;
},
{
glyphname = semicolon;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"78 401 OFFCURVE",
"51 372.667 OFFCURVE",
"51 338 CURVE SMOOTH",
"51 307.333 OFFCURVE",
"78 279 OFFCURVE",
"110 279 CURVE SMOOTH",
"143.333 279 OFFCURVE",
"171 307.333 OFFCURVE",
"171 338 CURVE SMOOTH",
"171 372.667 OFFCURVE",
"143.333 401 OFFCURVE",
"110 401 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"78 103 OFFCURVE",
"51 75.333 OFFCURVE",
"51 42 CURVE SMOOTH",
"51 14 OFFCURVE",
"69.333 -9.333 OFFCURVE",
"96 -16 CURVE",
"93.333 -34.667 OFFCURVE",
"81.667 -54.333 OFFCURVE",
"67 -65 CURVE",
"87 -81 LINE",
"136.333 -53 OFFCURVE",
"171 -8.667 OFFCURVE",
"171 42 CURVE SMOOTH",
"171 75.333 OFFCURVE",
"143.333 103 OFFCURVE",
"110 103 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */\01221 18 17 3 2 71 4 1 2 0 2 115 3 1 1 0 0 1 87 3 1 1 1 0 91 0 0 1 0 79 12 12 0 0 12 27 12 26 0 11 0 10 36 5 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 222;
}
);
leftKerningGroup = colon;
note = semicolon;
rightKerningGroup = colon;
unicode = 003B;
},
{
glyphname = ellipsis;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"170 8.667 OFFCURVE",
"142.333 -17 OFFCURVE",
"109 -17 CURVE SMOOTH",
"75.667 -17 OFFCURVE",
"48 8.667 OFFCURVE",
"48 42 CURVE SMOOTH",
"48 75.333 OFFCURVE",
"75.667 103 OFFCURVE",
"109 103 CURVE SMOOTH",
"142.333 103 OFFCURVE",
"170 75.333 OFFCURVE",
"170 42 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"387 8.667 OFFCURVE",
"360.667 -17 OFFCURVE",
"326 -17 CURVE SMOOTH",
"292.667 -17 OFFCURVE",
"266 8.667 OFFCURVE",
"266 42 CURVE SMOOTH",
"266 75.333 OFFCURVE",
"292.667 103 OFFCURVE",
"326 103 CURVE SMOOTH",
"359.333 103 OFFCURVE",
"387 75.333 OFFCURVE",
"387 42 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"604 8.667 OFFCURVE",
"576 -17 OFFCURVE",
"544 -17 CURVE SMOOTH",
"512 -17 OFFCURVE",
"484 8.667 OFFCURVE",
"484 42 CURVE SMOOTH",
"484 75.333 OFFCURVE",
"512 103 OFFCURVE",
"544 103 CURVE SMOOTH",
"576 103 OFFCURVE",
"604 75.333 OFFCURVE",
"604 42 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */\0124 2 2 0 0 1 91 5 3 2 1 1 43 1 76 36 36 36 36 36 33 6 7 26 \012CALL[ ]	/* CallFunction */";
};
width = 652;
}
);
leftKerningGroup = comma;
note = ellipsis;
rightKerningGroup = comma;
unicode = 2026;
},
{
glyphname = exclam;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"98 149 LINE",
"56 674 LINE",
"187 712 LINE",
"147 164 LINE"
);
},
{
closed = 1;
nodes = (
"183 8.667 OFFCURVE",
"155 -17 OFFCURVE",
"123 -17 CURVE SMOOTH",
"88.333 -17 OFFCURVE",
"62 8.667 OFFCURVE",
"62 42 CURVE SMOOTH",
"62 75.333 OFFCURVE",
"89.667 103 OFFCURVE",
"123 103 CURVE SMOOTH",
"155 103 OFFCURVE",
"183 75.333 OFFCURVE",
"183 42 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */\0123 2 2 0 72 0 0 0 1 91 0 1 1 43 1 76 36 37 2 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 243;
}
);
leftKerningGroup = exclam;
note = exclam;
unicode = 0021;
},
{
glyphname = exclamdown;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"60 482.333 OFFCURVE",
"88 508 OFFCURVE",
"120 508 CURVE SMOOTH",
"154.667 508 OFFCURVE",
"182 482.333 OFFCURVE",
"182 449 CURVE SMOOTH",
"182 415.667 OFFCURVE",
"153.333 388 OFFCURVE",
"120 388 CURVE SMOOTH",
"88 388 OFFCURVE",
"60 415.667 OFFCURVE",
"60 449 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"145 342 LINE",
"187 -184 LINE",
"56 -221 LINE",
"97 326 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */\01215 14 2 0 71 0 0 0 1 91 0 1 1 45 0 76 36 33 2 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 243;
}
);
note = exclamdown;
rightKerningGroup = exclamdown;
unicode = 00A1;
},
{
glyphname = question;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"465 497 OFFCURVE",
"459.167 471.167 OFFCURVE",
"447.5 447.5 CURVE SMOOTH",
"424.167 400.167 OFFCURVE",
"395 370.667 OFFCURVE",
"339 320 CURVE SMOOTH",
"268.333 256 OFFCURVE",
"235 218.667 OFFCURVE",
"235 164 CURVE",
"189 154 LINE",
"189 182 OFFCURVE",
"193.167 207.333 OFFCURVE",
"201.5 230 CURVE SMOOTH",
"218.167 275.333 OFFCURVE",
"241 303.333 OFFCURVE",
"281 350 CURVE SMOOTH",
"337 415.333 OFFCURVE",
"364 454.667 OFFCURVE",
"364 520 CURVE SMOOTH",
"364 609.333 OFFCURVE",
"303.667 673 OFFCURVE",
"221 673 CURVE SMOOTH",
"166.333 673 OFFCURVE",
"116 629 OFFCURVE",
"116 573 CURVE SMOOTH",
"116 537 OFFCURVE",
"134.333 502.333 OFFCURVE",
"161 477 CURVE",
"89 415 LINE",
"57 441.667 OFFCURVE",
"40 487.667 OFFCURVE",
"40 529 CURVE SMOOTH",
"40 563.667 OFFCURVE",
"50.167 595.667 OFFCURVE",
"70.5 625 CURVE SMOOTH",
"111.167 683.667 OFFCURVE",
"182.333 720 OFFCURVE",
"257 720 CURVE SMOOTH",
"297 720 OFFCURVE",
"332.667 712 OFFCURVE",
"364 696 CURVE SMOOTH",
"426.667 664 OFFCURVE",
"465 602.333 OFFCURVE",
"465 525 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"272 8.667 OFFCURVE",
"245.667 -17 OFFCURVE",
"211 -17 CURVE SMOOTH",
"177.667 -17 OFFCURVE",
"152 8.667 OFFCURVE",
"152 42 CURVE SMOOTH",
"152 75.333 OFFCURVE",
"177.667 103 OFFCURVE",
"211 103 CURVE SMOOTH",
"244.333 103 OFFCURVE",
"272 75.333 OFFCURVE",
"272 42 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */\01228 27 11 10 4 2 1 1 74 0 1 1 0 91 0 0 0 42 75 0 2 2 3 91 0 3 3 43 3 76 45 43 39 37 44 34 4 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 505;
}
);
leftKerningGroup = question;
note = question;
unicode = 003F;
},
{
glyphname = questiondown;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"233 482.333 OFFCURVE",
"259.333 508 OFFCURVE",
"294 508 CURVE SMOOTH",
"328.667 508 OFFCURVE",
"353 483.667 OFFCURVE",
"353 449 CURVE SMOOTH",
"353 415.667 OFFCURVE",
"327.333 388 OFFCURVE",
"294 388 CURVE SMOOTH",
"260.667 388 OFFCURVE",
"233 415.667 OFFCURVE",
"233 449 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"40 -7 OFFCURVE",
"45.833 19 OFFCURVE",
"57.5 43 CURVE SMOOTH",
"80.833 91 OFFCURVE",
"111.333 120.667 OFFCURVE",
"166 170 CURVE SMOOTH",
"236.667 234 OFFCURVE",
"270 271.333 OFFCURVE",
"270 326 CURVE",
"316 337 LINE",
"316 309 OFFCURVE",
"311.833 283.667 OFFCURVE",
"303.5 261 CURVE SMOOTH",
"286.833 215.667 OFFCURVE",
"265.333 188 OFFCURVE",
"224 140 CURVE SMOOTH",
"168 74.667 OFFCURVE",
"141 35.333 OFFCURVE",
"141 -30 CURVE SMOOTH",
"141 -119.333 OFFCURVE",
"200 -182 OFFCURVE",
"284 -182 CURVE SMOOTH",
"338.667 -182 OFFCURVE",
"389 -139.333 OFFCURVE",
"389 -82 CURVE SMOOTH",
"389 -46 OFFCURVE",
"370.667 -11.333 OFFCURVE",
"344 14 CURVE",
"416 76 LINE",
"448 49.333 OFFCURVE",
"465 2.333 OFFCURVE",
"465 -39 CURVE SMOOTH",
"465 -73.667 OFFCURVE",
"454.833 -105.667 OFFCURVE",
"434.5 -135 CURVE SMOOTH",
"393.833 -193.667 OFFCURVE",
"322.667 -230 OFFCURVE",
"248 -230 CURVE SMOOTH",
"208 -230 OFFCURVE",
"172.333 -222 OFFCURVE",
"141 -206 CURVE SMOOTH",
"78.333 -174 OFFCURVE",
"40 -112.333 OFFCURVE",
"40 -35 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */\01240 39 23 22 4 3 0 1 74 0 3 0 2 3 2 95 0 0 0 1 91 0 1 1 45 0 76 44 37 36 33 4 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 505;
}
);
note = questiondown;
rightKerningGroup = questiondown;
unicode = 00BF;
},
{
glyphname = periodcentered;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"167 328.333 OFFCURVE",
"139.333 303 OFFCURVE",
"106 303 CURVE SMOOTH",
"72.667 303 OFFCURVE",
"46 328.333 OFFCURVE",
"46 363 CURVE SMOOTH",
"46 396.333 OFFCURVE",
"72.667 423 OFFCURVE",
"106 423 CURVE SMOOTH",
"138 423 OFFCURVE",
"167 395 OFFCURVE",
"167 363 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */\0120 0 1 1 0 87 0 0 0 1 91 0 1 0 1 79 36 33 2 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 212;
}
);
leftKerningGroup = periodcentered;
note = periodcentered;
rightKerningGroup = periodcentered;
unicode = 00B7;
},
{
glyphname = bullet;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"253 316.333 OFFCURVE",
"205.667 270 OFFCURVE",
"147 270 CURVE SMOOTH",
"85.667 270 OFFCURVE",
"39 316.333 OFFCURVE",
"39 375 CURVE SMOOTH",
"39 435 OFFCURVE",
"87 483 OFFCURVE",
"147 483 CURVE SMOOTH",
"205.667 483 OFFCURVE",
"253 433.667 OFFCURVE",
"253 375 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */\0120 0 1 1 0 87 0 0 0 1 91 0 1 0 1 79 36 33 2 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 292;
}
);
note = bullet;
unicode = 2022;
},
{
glyphname = asterisk;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"218 498 LINE",
"239 380 LINE",
"151 380 LINE",
"169 486 LINE",
"101 416 LINE",
"49 478 LINE",
"151 543 LINE",
"49 608 LINE",
"101 671 LINE",
"172 590 LINE",
"151 711 LINE",
"239 711 LINE",
"220 582 LINE",
"297 671 LINE",
"349 608 LINE",
"248 543 LINE",
"349 478 LINE",
"297 416 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */\01215 14 13 12 11 10 9 6 5 4 3 2 1 13 1 0 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01234 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 11 values pushed */\0120 1 1 0 89 0 0 0 42 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 16 values pushed */\0120 0 1 1 0 85 0 0 0 1 89 0 1 0 1 77 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 5 values pushed */\01224 23 2 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 398;
}
);
leftKerningGroup = asterisk;
note = asterisk;
rightKerningGroup = asterisk;
unicode = 002A;
},
{
glyphname = numbersign;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"113 115 LINE",
"157 257 LINE",
"41 257 LINE",
"55 292 LINE",
"168 292 LINE",
"191 363 LINE",
"83 363 LINE",
"95 395 LINE",
"200 395 LINE",
"242 535 LINE",
"345 554 LINE",
"289 395 LINE",
"365 395 LINE",
"408 535 LINE",
"509 554 LINE",
"453 395 LINE",
"563 395 LINE",
"551 363 LINE",
"441 363 LINE",
"416 292 LINE",
"523 292 LINE",
"509 257 LINE",
"405 257 LINE",
"358 124 LINE",
"280 115 LINE",
"322 257 LINE",
"239 257 LINE",
"192 124 LINE"
);
},
{
closed = 1;
nodes = (
"355 363 LINE",
"277 363 LINE",
"251 292 LINE",
"334 292 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */\01218 14 2 4 72 4 1 0 71 6 5 2 4 12 11 7 3 3 2 4 3 97 10 8 2 2 0 0 2 85 10 8 2 2 2 0 89 9 1 2 0 2 0 77 28 28 28 31 28 31 30 29 27 26 17 17 19 19 17 17 17 19 18 13 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 609;
}
);
leftKerningGroup = numbersign;
note = numbersign;
rightKerningGroup = numbersign;
unicode = 0023;
},
{
glyphname = slash;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"537 697 LINE",
"498 723 LINE",
"40 15 LINE",
"85 -15 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0123 1 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 577;
}
);
leftKerningGroup = slash;
note = slash;
rightKerningGroup = slash;
unicode = 002F;
},
{
glyphname = backslash;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"535 15 LINE",
"78 722 LINE",
"40 697 LINE",
"491 -15 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0123 1 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 577;
}
);
leftKerningGroup = backslash;
note = backslash;
rightKerningGroup = backslash;
unicode = 005C;
},
{
glyphname = parenleft;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"310 -147 LINE",
"256.667 -119.667 OFFCURVE",
"208.833 -82.167 OFFCURVE",
"166.5 -34.5 CURVE SMOOTH",
"81.833 60.833 OFFCURVE",
"31 184 OFFCURVE",
"31 304 CURVE SMOOTH",
"31 364 OFFCURVE",
"43 423.5 OFFCURVE",
"67 482.5 CURVE SMOOTH",
"115 600.5 OFFCURVE",
"202.333 701 OFFCURVE",
"309 757 CURVE",
"320 737 LINE",
"281.333 706.333 OFFCURVE",
"247.833 666.833 OFFCURVE",
"219.5 618.5 CURVE SMOOTH",
"162.833 521.833 OFFCURVE",
"133 406.667 OFFCURVE",
"133 304 CURVE SMOOTH",
"133 252.667 OFFCURVE",
"140.333 199.833 OFFCURVE",
"155 145.5 CURVE SMOOTH",
"184.333 36.833 OFFCURVE",
"242.667 -63 OFFCURVE",
"320 -123 CURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\01216 8 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 323;
}
);
leftKerningGroup = parenleft;
note = parenleft;
rightKerningGroup = parenleft;
unicode = 0028;
},
{
glyphname = parenright;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"3 733 LINE",
"41.667 703 OFFCURVE",
"75.167 664.167 OFFCURVE",
"103.5 616.5 CURVE SMOOTH",
"160.167 521.167 OFFCURVE",
"190 408.667 OFFCURVE",
"190 306 CURVE SMOOTH",
"190 254 OFFCURVE",
"182.833 200.5 OFFCURVE",
"168.5 145.5 CURVE SMOOTH",
"139.833 35.5 OFFCURVE",
"81.667 -65.667 OFFCURVE",
"3 -127 CURVE",
"16 -147 LINE",
"68.667 -119 OFFCURVE",
"115.833 -81 OFFCURVE",
"157.5 -33 CURVE SMOOTH",
"240.833 63 OFFCURVE",
"292 186 OFFCURVE",
"292 306 CURVE SMOOTH",
"292 366 OFFCURVE",
"280 425.5 OFFCURVE",
"256 484.5 CURVE SMOOTH",
"208 602.5 OFFCURVE",
"121.333 701 OFFCURVE",
"16 757 CURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\01217 7 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 322;
}
);
leftKerningGroup = parenright;
note = parenright;
rightKerningGroup = parenright;
unicode = 0029;
},
{
glyphname = braceleft;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"216 752 OFFCURVE",
"185.833 741.833 OFFCURVE",
"165.5 721.5 CURVE SMOOTH",
"124.833 680.833 OFFCURVE",
"117 621.667 OFFCURVE",
"117 539 CURVE SMOOTH",
"117 484 LINE SMOOTH",
"117 451.333 OFFCURVE",
"114.667 424.5 OFFCURVE",
"110 403.5 CURVE SMOOTH",
"100.667 361.5 OFFCURVE",
"72.333 331 OFFCURVE",
"7 323 CURVE",
"7 288 LINE",
"96.333 278.667 OFFCURVE",
"118 224.667 OFFCURVE",
"118 138 CURVE SMOOTH",
"117 68 LINE SMOOTH",
"117 -57.333 OFFCURVE",
"144 -143 OFFCURVE",
"256 -143 CURVE SMOOTH",
"274.667 -143 OFFCURVE",
"289.333 -141 OFFCURVE",
"300 -137 CURVE",
"293 -110 LINE",
"289.667 -110.667 OFFCURVE",
"283.333 -111 OFFCURVE",
"274 -111 CURVE SMOOTH",
"218.253 -111 OFFCURVE",
"215 -76.342 OFFCURVE",
"215 -20 CURVE SMOOTH",
"215 72 LINE SMOOTH",
"215 198.667 OFFCURVE",
"183 294.667 OFFCURVE",
"75 304 CURVE",
"75 309 LINE",
"183 322.333 OFFCURVE",
"216 413 OFFCURVE",
"216 537 CURVE",
"215 634 LINE",
"215 690 OFFCURVE",
"226 722 OFFCURVE",
"274 722 CURVE SMOOTH",
"280 722 OFFCURVE",
"286.333 720.667 OFFCURVE",
"293 718 CURVE",
"300 746 LINE",
"289.333 750 OFFCURVE",
"274.667 752 OFFCURVE",
"256 752 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */\0121 1 0 3 33 32 11 2 4 1 0 23 1 2 1 3 74 4 1 3 0 0 1 3 0 99 0 1 2 2 1 87 0 1 1 2 91 0 2 1 2 79 0 0 0 42 0 41 35 46 35 5 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 314;
}
);
leftKerningGroup = braceleft;
note = braceleft;
rightKerningGroup = braceleft;
unicode = 007B;
},
{
glyphname = braceright;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"39.333 752 OFFCURVE",
"24.667 750 OFFCURVE",
"14 746 CURVE",
"21 718 LINE",
"27.667 720.667 OFFCURVE",
"34 722 OFFCURVE",
"40 722 CURVE SMOOTH",
"88 722 OFFCURVE",
"99 690 OFFCURVE",
"99 634 CURVE SMOOTH",
"98 537 LINE SMOOTH",
"98 413 OFFCURVE",
"131 322.333 OFFCURVE",
"239 309 CURVE",
"239 304 LINE",
"131 294.667 OFFCURVE",
"99 198.667 OFFCURVE",
"99 72 CURVE SMOOTH",
"99 -20 LINE SMOOTH",
"99 -76.342 OFFCURVE",
"95.747 -111 OFFCURVE",
"40 -111 CURVE SMOOTH",
"30.667 -111 OFFCURVE",
"24.333 -110.667 OFFCURVE",
"21 -110 CURVE",
"14 -137 LINE",
"24.667 -141 OFFCURVE",
"39.333 -143 OFFCURVE",
"58 -143 CURVE SMOOTH",
"170 -143 OFFCURVE",
"197 -57.333 OFFCURVE",
"197 68 CURVE",
"196 138 LINE",
"196 224.667 OFFCURVE",
"217.667 278.667 OFFCURVE",
"307 288 CURVE",
"307 323 LINE",
"274.333 327 OFFCURVE",
"250.167 336.167 OFFCURVE",
"234.5 350.5 CURVE SMOOTH",
"203.167 379.167 OFFCURVE",
"197 418.667 OFFCURVE",
"197 484 CURVE SMOOTH",
"197 539 LINE SMOOTH",
"197 580.333 OFFCURVE",
"194 616 OFFCURVE",
"188 646 CURVE SMOOTH",
"176 706 OFFCURVE",
"138 752 OFFCURVE",
"58 752 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */\01240 1 2 3 39 29 9 8 4 1 2 18 1 0 1 3 74 4 1 3 0 2 1 3 2 99 0 1 0 0 1 87 0 1 1 0 91 0 0 1 0 79 0 0 0 42 0 41 46 50 47 5 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 314;
}
);
leftKerningGroup = braceright;
note = braceright;
rightKerningGroup = braceright;
unicode = 007D;
},
{
glyphname = bracketleft;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"170 -107 LINE",
"269 -107 LINE",
"269 -141 LINE",
"75 -141 LINE",
"75 747 LINE",
"269 747 LINE",
"269 714 LINE",
"170 714 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01224 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 19 values pushed */\0124 1 3 0 2 3 2 93 0 0 0 1 89 0 1 1 42 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 26 values pushed */\0120 1 0 0 3 1 0 97 4 1 3 2 2 3 85 4 1 3 3 2 89 0 2 3 2 77 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 12 values pushed */\0120 0 0 7 0 7 17 17 17 5 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 288;
}
);
note = bracketleft;
rightKerningGroup = bracketleft;
unicode = 005B;
},
{
glyphname = bracketright;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"215 -141 LINE",
"215 747 LINE",
"20 747 LINE",
"20 714 LINE",
"120 714 LINE",
"120 -107 LINE",
"20 -107 LINE",
"20 -141 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01224 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 18 values pushed */\0120 1 0 0 1 0 93 0 2 2 3 89 0 3 3 42 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 24 values pushed */\0120 3 0 2 1 3 2 97 0 1 0 0 1 85 0 1 1 0 89 0 0 1 0 77 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 7 values pushed */\01217 17 17 16 4 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 288;
}
);
leftKerningGroup = bracketright;
note = bracketright;
unicode = 005D;
},
{
glyphname = hyphen;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"59 332 LINE",
"91 417 LINE",
"428 417 LINE",
"398 332 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */\0120 1 0 0 1 85 0 1 1 0 89 0 0 1 0 77 17 16 2 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 472;
}
);
leftKerningGroup = emdash;
note = hyphen;
rightKerningGroup = emdash;
unicode = 002D;
},
{
glyphname = softhyphen;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"59 332 LINE",
"91 417 LINE",
"428 417 LINE",
"398 332 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */\0120 1 0 0 1 85 0 1 1 0 89 0 0 1 0 77 17 16 2 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 472;
}
);
note = uni00AD;
unicode = 00AD;
},
{
glyphname = endash;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"50 332 LINE",
"50 417 LINE",
"456 417 LINE",
"456 332 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */\0120 1 0 0 1 85 0 1 1 0 89 0 0 1 0 77 17 16 2 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 513;
}
);
leftKerningGroup = emdash;
note = endash;
rightKerningGroup = emdash;
unicode = 2013;
},
{
glyphname = emdash;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"50 332 LINE",
"50 417 LINE",
"862 417 LINE",
"862 332 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */\0120 1 0 0 1 85 0 1 1 0 89 0 0 1 0 77 17 16 2 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 919;
}
);
leftKerningGroup = emdash;
note = emdash;
rightKerningGroup = emdash;
unicode = 2014;
},
{
glyphname = underscore;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"104 -153 LINE",
"136 -74 LINE",
"474 -74 LINE",
"443 -153 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */\0120 1 0 0 1 85 0 1 1 0 89 0 0 1 0 77 17 16 2 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 554;
}
);
note = underscore;
unicode = 005F;
},
{
glyphname = quotesinglbase;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"75.667 103 OFFCURVE",
"48 75.333 OFFCURVE",
"48 42 CURVE SMOOTH",
"48 14 OFFCURVE",
"67 -9.333 OFFCURVE",
"95 -16 CURVE",
"91 -33.333 OFFCURVE",
"79.333 -54.333 OFFCURVE",
"66 -65 CURVE",
"85 -81 LINE",
"135.667 -53 OFFCURVE",
"170 -8.667 OFFCURVE",
"170 42 CURVE SMOOTH",
"170 75.333 OFFCURVE",
"142.333 103 OFFCURVE",
"109 103 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */\0129 6 5 3 0 71 1 1 0 0 105 0 0 0 15 0 14 2 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 217;
}
);
leftKerningGroup = comma;
note = quotesinglbase;
rightKerningGroup = comma;
unicode = 201A;
},
{
glyphname = quotedblbase;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"76 103 OFFCURVE",
"48 75.333 OFFCURVE",
"48 42 CURVE SMOOTH",
"48 14 OFFCURVE",
"67 -9.333 OFFCURVE",
"95 -16 CURVE",
"91 -33.333 OFFCURVE",
"79.333 -54.333 OFFCURVE",
"66 -65 CURVE",
"85 -81 LINE",
"134.333 -51.667 OFFCURVE",
"170 -8.667 OFFCURVE",
"170 42 CURVE SMOOTH",
"170 75.333 OFFCURVE",
"141.333 103 OFFCURVE",
"108 103 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"234.667 103 OFFCURVE",
"206 75.333 OFFCURVE",
"206 42 CURVE SMOOTH",
"206 14 OFFCURVE",
"226 -9.333 OFFCURVE",
"254 -16 CURVE",
"251.333 -33.333 OFFCURVE",
"238.333 -53 OFFCURVE",
"225 -65 CURVE",
"244 -81 LINE",
"293.333 -51.667 OFFCURVE",
"328 -8.667 OFFCURVE",
"328 42 CURVE SMOOTH",
"328 75.333 OFFCURVE",
"301.333 103 OFFCURVE",
"268 103 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */\01225 22 21 9 6 5 6 0 71 3 1 2 3 0 0 105 16 16 0 0 16 31 16 30 0 15 0 14 4 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 376;
}
);
leftKerningGroup = comma;
note = quotedblbase;
rightKerningGroup = comma;
unicode = 201E;
},
{
glyphname = quotedblleft;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"182 551.667 OFFCURVE",
"155.333 524 OFFCURVE",
"122 524 CURVE SMOOTH",
"88.667 524 OFFCURVE",
"62 550.333 OFFCURVE",
"62 585 CURVE SMOOTH",
"62 631.667 OFFCURVE",
"89.667 673.333 OFFCURVE",
"145 710 CURVE",
"165 693 LINE",
"151.667 681 OFFCURVE",
"138.667 659.333 OFFCURVE",
"136 642 CURVE",
"162.667 635.333 OFFCURVE",
"182 613 OFFCURVE",
"182 585 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"341 551.667 OFFCURVE",
"313 524 OFFCURVE",
"281 524 CURVE SMOOTH",
"247.667 524 OFFCURVE",
"220 551.667 OFFCURVE",
"220 585 CURVE SMOOTH",
"220 630.333 OFFCURVE",
"248 672 OFFCURVE",
"304 710 CURVE",
"325 693 LINE",
"311.667 681 OFFCURVE",
"299 660.667 OFFCURVE",
"295 642 CURVE",
"321.667 635.333 OFFCURVE",
"341 613 OFFCURVE",
"341 585 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */\01221 20 17 6 5 2 6 0 72 1 1 0 0 105 45 42 2 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 403;
}
);
leftKerningGroup = quotedblleft;
note = quotedblleft;
rightKerningGroup = quotedblleft;
unicode = 201C;
},
{
glyphname = quotedblright;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"182 597.333 OFFCURVE",
"147.333 553.333 OFFCURVE",
"98 524 CURVE",
"80 540 LINE",
"93.333 552 OFFCURVE",
"106.667 572.667 OFFCURVE",
"108 590 CURVE",
"81.333 596.667 OFFCURVE",
"62 620 OFFCURVE",
"62 648 CURVE SMOOTH",
"62 681.333 OFFCURVE",
"88.667 710 OFFCURVE",
"122 710 CURVE SMOOTH",
"155.333 710 OFFCURVE",
"182 681.333 OFFCURVE",
"182 648 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"341 597.333 OFFCURVE",
"306.333 553.333 OFFCURVE",
"257 524 CURVE",
"237 540 LINE",
"250.333 552 OFFCURVE",
"263.333 572.667 OFFCURVE",
"266 590 CURVE",
"239.333 596.667 OFFCURVE",
"220 620 OFFCURVE",
"220 648 CURVE SMOOTH",
"220 681.333 OFFCURVE",
"246.667 710 OFFCURVE",
"280 710 CURVE SMOOTH",
"313.333 710 OFFCURVE",
"341 681.333 OFFCURVE",
"341 648 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */\01228 27 24 12 11 8 6 0 71 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 7 values pushed */\0121 1 0 0 42 0 76 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 5 values pushed */\0121 1 0 0 105 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 5 values pushed */\01246 33 2 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 403;
}
);
leftKerningGroup = quotedblleft;
note = quotedblright;
rightKerningGroup = quotedblleft;
unicode = 201D;
},
{
glyphname = quoteleft;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"182 551.667 OFFCURVE",
"155.333 524 OFFCURVE",
"122 524 CURVE SMOOTH",
"88.667 524 OFFCURVE",
"62 550.333 OFFCURVE",
"62 585 CURVE SMOOTH",
"62 631.667 OFFCURVE",
"89.667 673.333 OFFCURVE",
"145 710 CURVE",
"165 693 LINE",
"151.667 681 OFFCURVE",
"138.667 659.333 OFFCURVE",
"136 642 CURVE",
"162.667 635.333 OFFCURVE",
"182 613 OFFCURVE",
"182 585 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */\0126 5 2 3 0 72 0 0 0 105 42 1 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 244;
}
);
leftKerningGroup = quotedblleft;
note = quoteleft;
rightKerningGroup = quotedblleft;
unicode = 2018;
},
{
glyphname = quoteright;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"182 597.333 OFFCURVE",
"147.333 553.333 OFFCURVE",
"98 524 CURVE",
"80 540 LINE",
"93.333 552 OFFCURVE",
"106.667 572.667 OFFCURVE",
"108 590 CURVE",
"81.333 596.667 OFFCURVE",
"62 620 OFFCURVE",
"62 648 CURVE SMOOTH",
"62 681.333 OFFCURVE",
"88.667 710 OFFCURVE",
"122 710 CURVE SMOOTH",
"155.333 710 OFFCURVE",
"182 681.333 OFFCURVE",
"182 648 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\01212 11 8 3 0 71 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 6 values pushed */\0120 0 0 42 0 76 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 105 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 4 values pushed */\01233 1 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 244;
}
);
leftKerningGroup = quotedblleft;
note = quoteright;
rightKerningGroup = quotedblleft;
unicode = 2019;
},
{
glyphname = guillemetleft;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"224 303 LINE",
"143 189 LINE",
"224 81 LINE",
"203 57 LINE",
"30 189 LINE",
"203 321 LINE"
);
},
{
closed = 1;
nodes = (
"377 303 LINE",
"296 189 LINE",
"377 81 LINE",
"357 57 LINE",
"183 189 LINE",
"357 321 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\0129 7 3 1 2 48 \012CALL[ ]	/* CallFunction */";
};
width = 428;
}
);
leftKerningGroup = guillemetleft;
note = guillemotleft;
rightKerningGroup = guillemetleft;
unicode = 00AB;
},
{
glyphname = guillemetright;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"246 189 LINE",
"71 321 LINE",
"52 302 LINE",
"131 189 LINE",
"52 80 LINE",
"71 57 LINE"
);
},
{
closed = 1;
nodes = (
"400 189 LINE",
"226 321 LINE",
"205 302 LINE",
"286 189 LINE",
"205 80 LINE",
"226 57 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\01211 7 5 1 2 48 \012CALL[ ]	/* CallFunction */";
};
width = 428;
}
);
leftKerningGroup = guillemetright;
note = guillemotright;
rightKerningGroup = guillemetright;
unicode = 00BB;
},
{
glyphname = guilsinglleft;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"224 303 LINE",
"143 189 LINE",
"224 81 LINE",
"203 57 LINE",
"30 189 LINE",
"203 321 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0123 1 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 276;
}
);
leftKerningGroup = guillemetleft;
note = guilsinglleft;
rightKerningGroup = guillemetleft;
unicode = 2039;
},
{
glyphname = guilsinglright;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"246 189 LINE",
"71 321 LINE",
"52 302 LINE",
"131 189 LINE",
"52 80 LINE",
"71 57 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0125 1 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 276;
}
);
leftKerningGroup = guillemetright;
note = guilsinglright;
rightKerningGroup = guillemetright;
unicode = 203A;
},
{
glyphname = quotedbl;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"96 449 LINE",
"62 669 LINE",
"170 712 LINE",
"139 467 LINE"
);
},
{
closed = 1;
nodes = (
"234 449 LINE",
"200 669 LINE",
"307 712 LINE",
"276 467 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\0126 4 2 0 2 48 \012CALL[ ]	/* CallFunction */";
};
width = 369;
}
);
leftKerningGroup = quotedbl;
note = quotedbl;
rightKerningGroup = quotedbl;
unicode = 0022;
},
{
glyphname = quotesingle;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"96 449 LINE",
"62 669 LINE",
"170 712 LINE",
"139 467 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0122 0 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 232;
}
);
leftKerningGroup = quotesingle;
note = quotesingle;
rightKerningGroup = quotesingle;
unicode = 0027;
},
{
glyphname = "glottalstop-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"50 461.667 OFFCURVE",
"92.667 404.333 OFFCURVE",
"170 343 CURVE",
"195 360 LINE",
"147.667 398 OFFCURVE",
"124 428 OFFCURVE",
"124 450 CURVE SMOOTH",
"124 472 OFFCURVE",
"132.667 496.5 OFFCURVE",
"150 523.5 CURVE SMOOTH",
"184.667 577.5 OFFCURVE",
"239.667 621 OFFCURVE",
"281 621 CURVE SMOOTH",
"333.276 621 OFFCURVE",
"383 551.971 OFFCURVE",
"383 491 CURVE SMOOTH",
"383 445.667 OFFCURVE",
"343.333 391.333 OFFCURVE",
"282 350 CURVE SMOOTH",
"181 285 LINE SMOOTH",
"127.667 251.667 OFFCURVE",
"92 211 OFFCURVE",
"92 175 CURVE SMOOTH",
"92 115 OFFCURVE",
"144.667 50.667 OFFCURVE",
"230 0 CURVE",
"252 16 LINE",
"194.667 50.667 OFFCURVE",
"157 93.333 OFFCURVE",
"157 128 CURVE SMOOTH",
"157 162.667 OFFCURVE",
"180.667 186 OFFCURVE",
"230 218 CURVE SMOOTH",
"321 277 LINE SMOOTH",
"395.667 323.667 OFFCURVE",
"440 382 OFFCURVE",
"440 430 CURVE SMOOTH",
"440 468 OFFCURVE",
"428.667 507.5 OFFCURVE",
"406 548.5 CURVE SMOOTH",
"360.667 630.5 OFFCURVE",
"287.333 691 OFFCURVE",
"230 691 CURVE SMOOTH",
"206.667 691 OFFCURVE",
"180.667 680.833 OFFCURVE",
"152 660.5 CURVE SMOOTH",
"94.667 619.833 OFFCURVE",
"50 553.667 OFFCURVE",
"50 503 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */\01239 38 18 17 4 1 71 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 11 values pushed */\0120 1 1 0 91 0 0 0 24 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 11 values pushed */\0120 1 1 0 91 0 0 0 25 1 76 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 6 values pushed */\01233 31 34 2 6 21 \012CALL[ ]	/* CallFunction */";
};
width = 489;
}
);
note = uni097D;
unicode = 097D;
},
{
glyphname = "danda-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"287 755 LINE",
"205 826 LINE",
"205 110 LINE SMOOTH",
"205 83.333 OFFCURVE",
"224 51.833 OFFCURVE",
"262 15.5 CURVE SMOOTH",
"338 -57.167 OFFCURVE",
"456.333 -118 OFFCURVE",
"531 -118 CURVE SMOOTH",
"554.333 -118 OFFCURVE",
"575.667 -107.667 OFFCURVE",
"595 -87 CURVE",
"522 -40 LINE",
"506 -60 OFFCURVE",
"488 -70 OFFCURVE",
"468 -70 CURVE SMOOTH",
"416.805 -70 OFFCURVE",
"287 3.691 OFFCURVE",
"287 55 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\01215 9 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 696;
}
);
note = uni0964;
unicode = 0964;
},
{
glyphname = "dbldanda-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"287 755 LINE",
"205 826 LINE",
"205 110 LINE SMOOTH",
"205 83.333 OFFCURVE",
"224 51.833 OFFCURVE",
"262 15.5 CURVE SMOOTH",
"338 -57.167 OFFCURVE",
"456.333 -118 OFFCURVE",
"531 -118 CURVE SMOOTH",
"554.333 -118 OFFCURVE",
"575.667 -107.667 OFFCURVE",
"595 -87 CURVE",
"522 -40 LINE",
"506 -60 OFFCURVE",
"488 -70 OFFCURVE",
"468 -70 CURVE SMOOTH",
"416.805 -70 OFFCURVE",
"287 3.691 OFFCURVE",
"287 55 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"621 755 LINE",
"538 826 LINE",
"538 110 LINE SMOOTH",
"538 83.333 OFFCURVE",
"557.167 51.833 OFFCURVE",
"595.5 15.5 CURVE SMOOTH",
"672.167 -57.167 OFFCURVE",
"790.333 -118 OFFCURVE",
"865 -118 CURVE SMOOTH",
"889.667 -118 OFFCURVE",
"910.667 -107.667 OFFCURVE",
"928 -87 CURVE",
"855 -40 LINE",
"840.333 -60 OFFCURVE",
"822.667 -70 OFFCURVE",
"802 -70 CURVE SMOOTH",
"750.805 -70 OFFCURVE",
"621 3.691 OFFCURVE",
"621 55 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\01231 25 15 9 2 48 \012CALL[ ]	/* CallFunction */";
};
width = 1030;
}
);
note = uni0965;
unicode = 0965;
},
{
glyphname = "abbreviation-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"103 75.188 OFFCURVE",
"225.685 -7 OFFCURVE",
"287 -7 CURVE SMOOTH",
"313 -7 OFFCURVE",
"337.667 1 OFFCURVE",
"361 17 CURVE SMOOTH",
"407.667 49 OFFCURVE",
"440 103.333 OFFCURVE",
"440 158 CURVE SMOOTH",
"440 219.49 OFFCURVE",
"328.265 303 OFFCURVE",
"268 303 CURVE SMOOTH",
"240 303 OFFCURVE",
"213.333 295.167 OFFCURVE",
"188 279.5 CURVE SMOOTH",
"137.333 248.167 OFFCURVE",
"103 193.333 OFFCURVE",
"103 136 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"205.333 40 OFFCURVE",
"182 64.333 OFFCURVE",
"182 91 CURVE SMOOTH",
"182 149.051 OFFCURVE",
"259.216 253 OFFCURVE",
"320 253 CURVE SMOOTH",
"344 253 OFFCURVE",
"365 232 OFFCURVE",
"365 208 CURVE SMOOTH",
"365 146.653 OFFCURVE",
"290.443 40 OFFCURVE",
"232 40 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */\0120 0 0 2 3 0 2 99 4 1 3 3 1 91 0 1 1 26 1 76 16 16 16 29 16 28 41 38 34 5 6 23 \012CALL[ ]	/* CallFunction */";
};
width = 542;
}
);
note = uni0970;
unicode = 0970;
},
{
glyphname = "highspacingdot-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"136 729 LINE",
"55 648 LINE",
"136 569 LINE",
"215 648 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0122 0 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 271;
}
);
note = uni0971;
unicode = 0971;
},
{
glyphname = CR;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 215;
}
);
note = CR;
unicode = 000D;
},
{
glyphname = DEL;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 0;
}
);
note = DEL;
unicode = 007F;
},
{
glyphname = .notdef;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 215;
}
);
note = .notdef;
},
{
glyphname = emquad;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 1377;
}
);
note = uni2001;
unicode = 2001;
},
{
glyphname = emspace;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 1377;
}
);
note = uni2003;
unicode = 2003;
},
{
glyphname = enquad;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 2066;
}
);
note = uni2000;
unicode = 2000;
},
{
glyphname = enspace;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 689;
}
);
note = uni2002;
unicode = 2002;
},
{
glyphname = figurespace;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 866;
}
);
note = uni2007;
unicode = 2007;
},
{
glyphname = fourperemspace;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 345;
}
);
note = uni2005;
unicode = 2005;
},
{
glyphname = hairspace;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 138;
}
);
note = uni200A;
unicode = 200A;
},
{
glyphname = punctuationspace;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 486;
}
);
note = uni2008;
unicode = 2008;
},
{
glyphname = sixperemspace;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 230;
}
);
note = uni2006;
unicode = 2006;
},
{
glyphname = space;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 215;
}
);
note = space;
rightKerningGroup = space;
unicode = 0020;
},
{
glyphname = nbspace;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 215;
}
);
note = uni00A0;
unicode = 00A0;
},
{
glyphname = thinspace;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 275;
}
);
note = uni2009;
unicode = 2009;
},
{
glyphname = threeperemspace;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 458;
}
);
note = uni2004;
unicode = 2004;
},
{
glyphname = zerowidthjoiner;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 0;
}
);
note = uni200D;
unicode = 200D;
},
{
glyphname = zerowidthnonjoiner;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 0;
}
);
note = uni200C;
unicode = 200C;
},
{
glyphname = at;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"282 447 OFFCURVE",
"225.5 432.833 OFFCURVE",
"178.5 404.5 CURVE SMOOTH",
"84.5 347.833 OFFCURVE",
"37 252 OFFCURVE",
"37 156 CURVE SMOOTH",
"37 114.667 OFFCURVE",
"45.667 76.833 OFFCURVE",
"63 42.5 CURVE SMOOTH",
"97.667 -26.167 OFFCURVE",
"166 -70 OFFCURVE",
"258 -70 CURVE SMOOTH",
"302 -70 OFFCURVE",
"357 -59.667 OFFCURVE",
"393 -41 CURVE",
"385 -22 LINE",
"354.333 -34 OFFCURVE",
"325 -40 OFFCURVE",
"297 -40 CURVE SMOOTH",
"259 -40 OFFCURVE",
"226.667 -30.667 OFFCURVE",
"200 -12 CURVE SMOOTH",
"146.667 25.333 OFFCURVE",
"120 89.667 OFFCURVE",
"120 163 CURVE SMOOTH",
"120 205.667 OFFCURVE",
"129 247.167 OFFCURVE",
"147 287.5 CURVE SMOOTH",
"183 368.167 OFFCURVE",
"255.333 424 OFFCURVE",
"350 424 CURVE SMOOTH",
"399.333 424 OFFCURVE",
"439.833 414.833 OFFCURVE",
"471.5 396.5 CURVE SMOOTH",
"534.833 359.833 OFFCURVE",
"562 297.333 OFFCURVE",
"562 228 CURVE SMOOTH",
"562 163.333 OFFCURVE",
"530.011 83 OFFCURVE",
"493 83 CURVE SMOOTH",
"485 83 OFFCURVE",
"479 91.333 OFFCURVE",
"479 102 CURVE SMOOTH",
"479 259 LINE",
"401 233 LINE",
"401 206 LINE SMOOTH",
"401 143.333 OFFCURVE",
"385.333 81 OFFCURVE",
"336 81 CURVE SMOOTH",
"297.333 81 OFFCURVE",
"281 125.667 OFFCURVE",
"281 187 CURVE SMOOTH",
"281 253.667 OFFCURVE",
"312 306 OFFCURVE",
"360 306 CURVE SMOOTH",
"381.333 306 OFFCURVE",
"400.667 290.667 OFFCURVE",
"414 268 CURVE",
"479 292 LINE",
"460.333 328 OFFCURVE",
"419 344 OFFCURVE",
"375 344 CURVE SMOOTH",
"342.333 344 OFFCURVE",
"313.333 335.667 OFFCURVE",
"288 319 CURVE SMOOTH",
"237.333 285.667 OFFCURVE",
"208 227 OFFCURVE",
"208 163 CURVE SMOOTH",
"208 89.667 OFFCURVE",
"246 35 OFFCURVE",
"310 35 CURVE SMOOTH",
"351.333 35 OFFCURVE",
"383.667 66.333 OFFCURVE",
"401 109 CURVE",
"405 109 LINE",
"405 61 OFFCURVE",
"420.667 39 OFFCURVE",
"462 39 CURVE SMOOTH",
"523.331 39 OFFCURVE",
"589 158.234 OFFCURVE",
"589 233 CURVE SMOOTH",
"589 271.667 OFFCURVE",
"580.333 307.167 OFFCURVE",
"563 339.5 CURVE SMOOTH",
"528.333 404.167 OFFCURVE",
"454.667 447 OFFCURVE",
"348 447 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 80 values pushed */\01240 39 38 25 24 10 6 4 3 61 1 7 0 62 1 8 7 3 74 10 1 9 0 6 2 9 6 99 0 2 0 3 4 2 3 99 5 1 4 1 1 0 7 4 0 99 0 7 8 8 7 87 0 7 7 8 91 0 8 7 8 79 0 0 0 73 0 72 36 38 38 39 36 37 37 37 38 11 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 622;
}
);
leftKerningGroup = at;
note = at;
rightKerningGroup = at;
unicode = 0040;
},
{
glyphname = ampersand;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"646 110 LINE",
"623.333 70 OFFCURVE",
"583.333 50.333 OFFCURVE",
"546 49 CURVE",
"511.333 49 OFFCURVE",
"487.333 62 OFFCURVE",
"466 90 CURVE",
"510.667 152.667 OFFCURVE",
"533 233 OFFCURVE",
"533 331 CURVE",
"447 307 LINE",
"447 244.333 OFFCURVE",
"440.667 192.333 OFFCURVE",
"428 151 CURVE",
"235 472 LINE",
"216.333 508.667 OFFCURVE",
"207 544.333 OFFCURVE",
"207 579 CURVE SMOOTH",
"207 628.333 OFFCURVE",
"237.333 665 OFFCURVE",
"292 665 CURVE SMOOTH",
"350.667 665 OFFCURVE",
"388 615.333 OFFCURVE",
"388 550 CURVE SMOOTH",
"388 507.333 OFFCURVE",
"375 463.333 OFFCURVE",
"331 442 CURVE",
"341 422 LINE",
"427.667 442 OFFCURVE",
"476 500.333 OFFCURVE",
"476 559 CURVE SMOOTH",
"476 621.274 OFFCURVE",
"380.046 704 OFFCURVE",
"301 704 CURVE SMOOTH",
"272.333 704 OFFCURVE",
"244.833 697.833 OFFCURVE",
"218.5 685.5 CURVE SMOOTH",
"165.833 660.833 OFFCURVE",
"129 612.667 OFFCURVE",
"129 550 CURVE SMOOTH",
"129 504.667 OFFCURVE",
"140.667 459 OFFCURVE",
"174 395 CURVE",
"187 375 LINE",
"89.667 331 OFFCURVE",
"34 260.667 OFFCURVE",
"34 170 CURVE SMOOTH",
"34 132 OFFCURVE",
"43.333 98.5 OFFCURVE",
"62 69.5 CURVE SMOOTH",
"99.333 11.5 OFFCURVE",
"164.667 -21 OFFCURVE",
"238 -21 CURVE SMOOTH",
"302 -21 OFFCURVE",
"358.333 -3.667 OFFCURVE",
"407 31 CURVE",
"436.333 -1 OFFCURVE",
"467.333 -14 OFFCURVE",
"510 -14 CURVE SMOOTH",
"570 -14 OFFCURVE",
"624.333 23 OFFCURVE",
"663 99 CURVE"
);
},
{
closed = 1;
nodes = (
"211.514 25 OFFCURVE",
"125 100.599 OFFCURVE",
"125 189 CURVE SMOOTH",
"125 254.333 OFFCURVE",
"152.333 305 OFFCURVE",
"207 341 CURVE",
"351 107 LINE",
"378 66 LINE",
"350.667 38.667 OFFCURVE",
"313.333 25 OFFCURVE",
"266 25 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */\01258 56 54 48 46 45 43 31 30 15 10 4 3 6 1 5 4 2 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01222 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 34 values pushed */\0120 3 3 2 91 0 2 2 42 75 0 4 4 0 91 1 1 0 0 43 75 6 1 5 5 0 91 1 1 0 0 43 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01234 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 32 values pushed */\0120 2 0 3 4 2 3 99 0 4 4 0 91 1 1 0 0 43 75 6 1 5 5 0 91 1 1 0 0 43 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 30 values pushed */\0120 2 0 3 4 2 3 99 0 4 4 0 91 0 0 0 43 75 6 1 5 5 1 91 0 1 1 43 1 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\01255 55 55 64 55 63 44 44 45 35 34 7 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 629;
}
);
leftKerningGroup = ampersand;
note = ampersand;
rightKerningGroup = ampersand;
unicode = 0026;
},
{
glyphname = paragraph;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"389 22 LINE",
"389 715 LINE",
"334.333 715 OFFCURVE",
"281 706.167 OFFCURVE",
"229 688.5 CURVE SMOOTH",
"125 653.167 OFFCURVE",
"50 582 OFFCURVE",
"50 482 CURVE SMOOTH",
"50 363.333 OFFCURVE",
"152.333 289 OFFCURVE",
"295 261 CURVE",
"295 -14 LINE"
);
},
{
closed = 1;
nodes = (
"295 303 LINE",
"204.333 335 OFFCURVE",
"146 396.667 OFFCURVE",
"146 482 CURVE SMOOTH",
"146 567.333 OFFCURVE",
"203 625.667 OFFCURVE",
"295 659 CURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */\01216 15 2 1 0 5 0 71 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01245 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 6 values pushed */\0120 0 0 42 0 76 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 105 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 4 values pushed */\01224 1 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 509;
}
);
note = paragraph;
unicode = 00B6;
},
{
glyphname = section;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"408 416.334 OFFCURVE",
"349.649 445.765 OFFCURVE",
"275 478 CURVE SMOOTH",
"224.471 500.457 OFFCURVE",
"140 562.594 OFFCURVE",
"140 620 CURVE SMOOTH",
"140 676 OFFCURVE",
"176.333 715 OFFCURVE",
"239 715 CURVE SMOOTH",
"304.333 715 OFFCURVE",
"354 665 OFFCURVE",
"378 597 CURVE",
"441 668 LINE",
"398.333 725.333 OFFCURVE",
"336 756 OFFCURVE",
"268 756 CURVE SMOOTH",
"230.667 756 OFFCURVE",
"196.833 748.667 OFFCURVE",
"166.5 734 CURVE SMOOTH",
"105.833 704.667 OFFCURVE",
"68 649.667 OFFCURVE",
"68 583 CURVE SMOOTH",
"68 536.333 OFFCURVE",
"88 497.667 OFFCURVE",
"128 467 CURVE",
"90.667 436.333 OFFCURVE",
"68 392.667 OFFCURVE",
"68 346 CURVE SMOOTH",
"68 315.333 OFFCURVE",
"75.333 289.5 OFFCURVE",
"90 268.5 CURVE SMOOTH",
"119.333 226.5 OFFCURVE",
"158.333 204.667 OFFCURVE",
"225 174 CURVE SMOOTH",
"290.226 142.94 OFFCURVE",
"346 115.021 OFFCURVE",
"346 59 CURVE SMOOTH",
"346 20.333 OFFCURVE",
"314.333 -6 OFFCURVE",
"273 -6 CURVE SMOOTH",
"221 -6 OFFCURVE",
"170.333 28 OFFCURVE",
"141 108 CURVE",
"81 41 LINE",
"114.333 -12.333 OFFCURVE",
"176.667 -39 OFFCURVE",
"242 -39 CURVE SMOOTH",
"334 -39 OFFCURVE",
"408 13.333 OFFCURVE",
"408 104 CURVE SMOOTH",
"408 157.333 OFFCURVE",
"377.333 188 OFFCURVE",
"324 216 CURVE",
"374.667 238.667 OFFCURVE",
"408 283.667 OFFCURVE",
"408 341 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"251 249.333 OFFCURVE",
"225 262 OFFCURVE",
"207 272 CURVE SMOOTH",
"171 292 OFFCURVE",
"140 326.667 OFFCURVE",
"140 380 CURVE SMOOTH",
"140 406 OFFCURVE",
"147.667 427.333 OFFCURVE",
"163 444 CURVE",
"173.667 437.333 OFFCURVE",
"194.667 426.667 OFFCURVE",
"226 412 CURVE SMOOTH",
"289.847 382.413 OFFCURVE",
"346 353.826 OFFCURVE",
"346 300 CURVE SMOOTH",
"346 264 OFFCURVE",
"321 239.333 OFFCURVE",
"285 234 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */\01262 39 38 29 12 11 2 7 1 3 1 74 0 2 0 3 1 2 3 99 0 1 0 0 1 87 0 1 1 0 91 0 0 1 0 79 43 41 36 34 37 39 4 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 487;
}
);
note = section;
unicode = 00A7;
},
{
glyphname = copyright;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"249.667 575 OFFCURVE",
"211.333 564.833 OFFCURVE",
"176 544.5 CURVE SMOOTH",
"105.333 503.833 OFFCURVE",
"61 428.667 OFFCURVE",
"61 346 CURVE SMOOTH",
"61 305.333 OFFCURVE",
"71.333 267.5 OFFCURVE",
"92 232.5 CURVE SMOOTH",
"133.333 162.5 OFFCURVE",
"208.333 118 OFFCURVE",
"291 118 CURVE SMOOTH",
"331.667 118 OFFCURVE",
"369.667 128.333 OFFCURVE",
"405 149 CURVE SMOOTH",
"475.667 190.333 OFFCURVE",
"520 264.667 OFFCURVE",
"520 346 CURVE SMOOTH",
"520 387.333 OFFCURVE",
"509.667 425.667 OFFCURVE",
"489 461 CURVE SMOOTH",
"447.667 531.667 OFFCURVE",
"373.667 575 OFFCURVE",
"291 575 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"327.667 553 OFFCURVE",
"361.833 543.667 OFFCURVE",
"393.5 525 CURVE SMOOTH",
"456.833 487.667 OFFCURVE",
"497 420.667 OFFCURVE",
"497 346 CURVE SMOOTH",
"497 308.667 OFFCURVE",
"487.667 274.167 OFFCURVE",
"469 242.5 CURVE SMOOTH",
"431.667 179.167 OFFCURVE",
"364.333 140 OFFCURVE",
"291 140 CURVE SMOOTH",
"253 140 OFFCURVE",
"218.167 149.167 OFFCURVE",
"186.5 167.5 CURVE SMOOTH",
"123.167 204.167 OFFCURVE",
"84 271.333 OFFCURVE",
"84 346 CURVE SMOOTH",
"84 383.333 OFFCURVE",
"93.167 417.833 OFFCURVE",
"111.5 449.5 CURVE SMOOTH",
"148.167 512.833 OFFCURVE",
"215 553 OFFCURVE",
"291 553 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"298.333 498 OFFCURVE",
"270.667 489.833 OFFCURVE",
"246 473.5 CURVE SMOOTH",
"196.667 440.833 OFFCURVE",
"167 383.667 OFFCURVE",
"167 325 CURVE SMOOTH",
"167 262.333 OFFCURVE",
"208.333 207 OFFCURVE",
"267 207 CURVE SMOOTH",
"306.333 207 OFFCURVE",
"341.667 226.667 OFFCURVE",
"373 266 CURVE",
"365 275 LINE",
"345.667 252.333 OFFCURVE",
"324 241 OFFCURVE",
"300 241 CURVE SMOOTH",
"245.333 241 OFFCURVE",
"215 289 OFFCURVE",
"215 353 CURVE SMOOTH",
"215 406.624 OFFCURVE",
"245.656 475 OFFCURVE",
"298 475 CURVE SMOOTH",
"327.333 475 OFFCURVE",
"344 452.667 OFFCURVE",
"344 422 CURVE SMOOTH",
"344 398 OFFCURVE",
"328.333 370.333 OFFCURVE",
"307 361 CURVE",
"312 353 LINE",
"350.667 365 OFFCURVE",
"386 406 OFFCURVE",
"386 446 CURVE SMOOTH",
"386 479.333 OFFCURVE",
"362.333 498 OFFCURVE",
"329 498 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */\01254 53 38 37 4 5 4 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01236 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 37 values pushed */\0128 1 1 9 1 3 7 1 3 99 0 5 0 6 2 5 6 99 0 2 0 0 2 0 95 0 4 4 7 91 10 1 7 7 45 4 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 43 values pushed */\0128 1 1 9 1 3 7 1 3 99 10 1 7 0 4 5 7 4 99 0 5 0 6 2 5 6 99 0 2 0 0 2 87 0 2 2 0 91 0 0 2 0 79 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 30 values pushed */\01232 32 16 16 0 0 32 63 32 62 57 55 52 50 45 43 16 31 16 30 24 22 0 15 0 14 38 11 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 580;
}
);
note = copyright;
unicode = 00A9;
},
{
glyphname = registered;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"249.667 575 OFFCURVE",
"211.333 564.833 OFFCURVE",
"176 544.5 CURVE SMOOTH",
"105.333 503.833 OFFCURVE",
"61 428.667 OFFCURVE",
"61 346 CURVE SMOOTH",
"61 305.333 OFFCURVE",
"71.333 267.5 OFFCURVE",
"92 232.5 CURVE SMOOTH",
"133.333 162.5 OFFCURVE",
"208.333 118 OFFCURVE",
"291 118 CURVE SMOOTH",
"331.667 118 OFFCURVE",
"369.667 128.333 OFFCURVE",
"405 149 CURVE SMOOTH",
"475.667 190.333 OFFCURVE",
"520 264.667 OFFCURVE",
"520 346 CURVE SMOOTH",
"520 387.333 OFFCURVE",
"509.667 425.667 OFFCURVE",
"489 461 CURVE SMOOTH",
"447.667 531.667 OFFCURVE",
"373.667 575 OFFCURVE",
"291 575 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"327.667 553 OFFCURVE",
"361.833 543.667 OFFCURVE",
"393.5 525 CURVE SMOOTH",
"456.833 487.667 OFFCURVE",
"497 420.667 OFFCURVE",
"497 346 CURVE SMOOTH",
"497 308.667 OFFCURVE",
"487.667 274.167 OFFCURVE",
"469 242.5 CURVE SMOOTH",
"431.667 179.167 OFFCURVE",
"364.333 140 OFFCURVE",
"291 140 CURVE SMOOTH",
"253 140 OFFCURVE",
"218.167 149.167 OFFCURVE",
"186.5 167.5 CURVE SMOOTH",
"123.167 204.167 OFFCURVE",
"84 271.333 OFFCURVE",
"84 346 CURVE SMOOTH",
"84 383.333 OFFCURVE",
"93.167 417.833 OFFCURVE",
"111.5 449.5 CURVE SMOOTH",
"148.167 512.833 OFFCURVE",
"215 553 OFFCURVE",
"291 553 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"253 501 OFFCURVE",
"213.333 476.667 OFFCURVE",
"172 438 CURVE",
"180 430 LINE",
"218.667 459.333 OFFCURVE",
"253 477 OFFCURVE",
"293 477 CURVE SMOOTH",
"331.667 477 OFFCURVE",
"356 449.667 OFFCURVE",
"356 411 CURVE SMOOTH",
"356 356.333 OFFCURVE",
"305.667 318.333 OFFCURVE",
"247 309 CURVE",
"246 300 LINE",
"291 237 LINE",
"309.667 214.333 OFFCURVE",
"319.333 207 OFFCURVE",
"338 207 CURVE SMOOTH",
"363.333 207 OFFCURVE",
"388.667 230.667 OFFCURVE",
"406 256 CURVE",
"399 263 LINE",
"389.667 251 OFFCURVE",
"374 239 OFFCURVE",
"362 239 CURVE SMOOTH",
"353.333 239 OFFCURVE",
"346 242.667 OFFCURVE",
"340 250 CURVE SMOOTH",
"293 306 LINE",
"358.333 331.333 OFFCURVE",
"402 362 OFFCURVE",
"402 418 CURVE SMOOTH",
"402 466 OFFCURVE",
"366.333 501 OFFCURVE",
"317 501 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"239 221 LINE",
"239 446 LINE",
"196 430 LINE",
"196 205 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */\01269 68 62 61 51 44 43 37 8 4 6 66 1 5 4 67 1 2 5 3 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01245 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 37 values pushed */\0128 1 1 9 1 3 7 1 3 99 0 4 0 5 2 4 5 99 0 2 0 0 2 0 95 0 6 6 7 91 10 1 7 7 45 6 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 43 values pushed */\0128 1 1 9 1 3 7 1 3 99 10 1 7 0 6 4 7 6 99 0 4 0 5 2 4 5 99 0 2 0 0 2 87 0 2 2 0 91 0 0 2 0 79 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 30 values pushed */\01232 32 16 16 0 0 32 65 32 64 59 57 48 46 41 39 16 31 16 30 24 22 0 15 0 14 38 11 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 580;
}
);
leftKerningGroup = registered;
note = registered;
rightKerningGroup = registered;
unicode = 00AE;
},
{
glyphname = trademark;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"192 723 LINE",
"180.667 713.667 OFFCURVE",
"166 709 OFFCURVE",
"148 709 CURVE SMOOTH",
"68 709 LINE SMOOTH",
"36 709 OFFCURVE",
"17.667 690.333 OFFCURVE",
"-5 657 CURVE",
"4 649 LINE",
"17.333 663.667 OFFCURVE",
"31 671 OFFCURVE",
"45 671 CURVE SMOOTH",
"95 671 LINE",
"70.333 649.667 OFFCURVE",
"58 630.667 OFFCURVE",
"58 614 CURVE SMOOTH",
"58 485 LINE SMOOTH",
"58 471.667 OFFCURVE",
"57.667 457 OFFCURVE",
"51 449 CURVE",
"58 439 LINE",
"94 460.333 OFFCURVE",
"112 486.667 OFFCURVE",
"112 518 CURVE SMOOTH",
"112 635 LINE SMOOTH",
"112 650.333 OFFCURVE",
"116.333 662.333 OFFCURVE",
"125 671 CURVE",
"154.333 671 OFFCURVE",
"183 689.667 OFFCURVE",
"199 715 CURVE"
);
},
{
closed = 1;
nodes = (
"266 719 LINE",
"212 702 LINE",
"212 439 LINE",
"266 455 LINE",
"266 590 LINE SMOOTH",
"266 628.667 OFFCURVE",
"285.667 691 OFFCURVE",
"307 691 CURVE SMOOTH",
"317 691 OFFCURVE",
"322 680.333 OFFCURVE",
"322 659 CURVE SMOOTH",
"322 439 LINE",
"375 455 LINE",
"375 590 LINE SMOOTH",
"375 628.667 OFFCURVE",
"395.333 691 OFFCURVE",
"418 691 CURVE SMOOTH",
"428 691 OFFCURVE",
"433 680.333 OFFCURVE",
"433 659 CURVE SMOOTH",
"433 495 LINE SMOOTH",
"433 460.333 OFFCURVE",
"447.333 443 OFFCURVE",
"476 443 CURVE SMOOTH",
"496.667 443 OFFCURVE",
"514 452.333 OFFCURVE",
"528 471 CURVE",
"518 480 LINE",
"512.667 472 OFFCURVE",
"504.667 467 OFFCURVE",
"498 467 CURVE SMOOTH",
"490 467 OFFCURVE",
"486 472.333 OFFCURVE",
"486 483 CURVE SMOOTH",
"486 666 LINE SMOOTH",
"486 695.333 OFFCURVE",
"470.667 716 OFFCURVE",
"440 716 CURVE SMOOTH",
"410.667 716 OFFCURVE",
"385.667 693.667 OFFCURVE",
"375 647 CURVE",
"375 693.667 OFFCURVE",
"362.667 716 OFFCURVE",
"328 716 CURVE SMOOTH",
"300 716 OFFCURVE",
"275.333 692 OFFCURVE",
"266 648 CURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\01267 57 25 8 2 48 \012CALL[ ]	/* CallFunction */";
};
width = 523;
}
);
leftKerningGroup = trademark;
note = trademark;
rightKerningGroup = trademark;
unicode = 2122;
},
{
glyphname = degree;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"113.291 747 OFFCURVE",
"52 685.785 OFFCURVE",
"52 608 CURVE SMOOTH",
"52 528.45 OFFCURVE",
"113.45 467 OFFCURVE",
"193 467 CURVE SMOOTH",
"252.852 467 OFFCURVE",
"339 544.188 OFFCURVE",
"339 608 CURVE SMOOTH",
"339 670.791 OFFCURVE",
"251.375 747 OFFCURVE",
"193 747 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"222.556 706 OFFCURVE",
"265 626.508 OFFCURVE",
"265 572 CURVE SMOOTH",
"265 536 OFFCURVE",
"252 509 OFFCURVE",
"220 509 CURVE SMOOTH",
"165.417 509 OFFCURVE",
"123 589.062 OFFCURVE",
"123 644 CURVE SMOOTH",
"123 678.667 OFFCURVE",
"137.333 706 OFFCURVE",
"168 706 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01224 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 23 values pushed */\0125 1 3 3 1 91 4 1 1 1 42 75 0 0 0 2 91 0 2 2 45 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 21 values pushed */\0124 1 1 5 1 3 2 1 3 99 0 0 0 2 91 0 2 2 45 0 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 18 values pushed */\01216 16 0 0 16 29 16 28 23 21 0 15 0 14 38 6 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 387;
}
);
leftKerningGroup = degree;
note = degree;
rightKerningGroup = degree;
unicode = 00B0;
},
{
glyphname = bar;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"79 715 LINE",
"171 742 LINE",
"171 -105 LINE",
"79 -138 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0123 1 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 250;
}
);
leftKerningGroup = bar;
note = bar;
rightKerningGroup = bar;
unicode = 007C;
},
{
glyphname = brokenbar;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"74 714 LINE",
"166 744 LINE",
"166 360 LINE",
"74 327 LINE"
);
},
{
closed = 1;
nodes = (
"74 246 LINE",
"166 278 LINE",
"166 -105 LINE",
"74 -138 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\0127 5 3 1 2 48 \012CALL[ ]	/* CallFunction */";
};
width = 240;
}
);
note = brokenbar;
unicode = 00A6;
},
{
glyphname = dagger;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"243 498 LINE",
"243 745 LINE",
"150 711 LINE",
"150 498 LINE",
"48 498 LINE",
"38 463 LINE",
"150 463 LINE",
"150 -141 LINE",
"243 -104 LINE",
"243 463 LINE",
"344 463 LINE",
"353 498 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */\01211 10 2 0 72 5 4 2 1 71 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01236 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 13 values pushed */\0122 1 1 1 0 89 3 1 0 0 45 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 19 values pushed */\0123 1 0 1 1 0 85 3 1 0 0 1 89 2 1 1 0 1 77 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 7 values pushed */\01217 19 17 16 4 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 390;
}
);
note = dagger;
unicode = 2020;
},
{
glyphname = daggerdbl;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"244 498 LINE",
"244 745 LINE",
"152 713 LINE",
"152 498 LINE",
"50 498 LINE",
"38 463 LINE",
"152 463 LINE",
"152 178 LINE",
"50 178 LINE",
"38 144 LINE",
"152 144 LINE",
"152 -141 LINE",
"244 -104 LINE",
"244 144 LINE",
"348 144 LINE",
"357 178 LINE",
"244 178 LINE",
"244 463 LINE",
"348 463 LINE",
"357 498 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */\01219 18 2 0 72 9 8 2 3 71 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01236 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 22 values pushed */\0125 1 2 4 1 3 2 3 93 6 1 1 1 0 89 7 1 0 0 45 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 29 values pushed */\0127 1 0 6 1 1 2 0 1 97 5 1 2 3 3 2 85 5 1 2 2 3 89 4 1 3 2 3 77 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 11 values pushed */\01217 17 17 19 17 17 17 16 8 7 28 \012CALL[ ]	/* CallFunction */";
};
width = 395;
}
);
note = daggerdbl;
unicode = 2021;
},
{
glyphname = cent;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"477 311 LINE",
"422.333 248.333 OFFCURVE",
"367 206 OFFCURVE",
"287 206 CURVE SMOOTH",
"253.667 206 OFFCURVE",
"223.667 214.833 OFFCURVE",
"197 232.5 CURVE SMOOTH",
"143.667 267.833 OFFCURVE",
"111 337.667 OFFCURVE",
"111 431 CURVE SMOOTH",
"111 481.667 OFFCURVE",
"138.333 537 OFFCURVE",
"181 569 CURVE",
"189 518 LINE",
"229 535 LINE",
"235 594 LINE",
"248.333 597.333 OFFCURVE",
"261 599 OFFCURVE",
"273 599 CURVE SMOOTH",
"317 599 OFFCURVE",
"361.667 571 OFFCURVE",
"375 523 CURVE",
"457 566 LINE",
"430.333 632.667 OFFCURVE",
"380.667 662 OFFCURVE",
"326 662 CURVE SMOOTH",
"293.333 662 OFFCURVE",
"265 658.667 OFFCURVE",
"241 652 CURVE",
"246 700 LINE",
"167 673 LINE",
"173 626 LINE",
"86.333 578 OFFCURVE",
"41 487 OFFCURVE",
"41 379 CURVE SMOOTH",
"41 265.667 OFFCURVE",
"99.333 182 OFFCURVE",
"190 154 CURVE",
"174 5 LINE",
"254 34 LINE",
"238 145 LINE",
"242 144.333 OFFCURVE",
"248.333 144 OFFCURVE",
"257 144 CURVE SMOOTH",
"362.333 144 OFFCURVE",
"428.667 196 OFFCURVE",
"494 296 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */\01217 1 2 1 41 31 30 23 22 5 3 2 8 1 0 3 3 74 16 1 1 72 7 6 2 0 71 0 1 0 2 3 1 2 99 0 3 0 0 3 87 0 3 3 0 91 0 0 3 0 79 42 37 46 34 4 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 400;
}
);
leftKerningGroup = c;
note = cent;
rightKerningGroup = c;
unicode = 00A2;
},
{
glyphname = currency;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"563 526 OFFCURVE",
"506 621.333 OFFCURVE",
"414 652 CURVE",
"375.333 624 OFFCURVE",
"335.667 593.333 OFFCURVE",
"309 568 CURVE",
"339.667 565.333 OFFCURVE",
"369.333 553.333 OFFCURVE",
"398 532 CURVE",
"360 481 LINE",
"399 456 LINE",
"443 492 LINE",
"481.667 450.667 OFFCURVE",
"506 397.667 OFFCURVE",
"506 351 CURVE SMOOTH",
"506 297.667 OFFCURVE",
"480.333 249.333 OFFCURVE",
"439 224 CURVE",
"395 258 LINE",
"371 219 LINE",
"383 204 LINE",
"372.333 202.667 OFFCURVE",
"364.333 202 OFFCURVE",
"359 202 CURVE SMOOTH",
"323.667 202 OFFCURVE",
"293.333 212 OFFCURVE",
"268 232 CURVE SMOOTH",
"217.333 272 OFFCURVE",
"192 338 OFFCURVE",
"192 398 CURVE SMOOTH",
"192 504.667 OFFCURVE",
"254.333 580 OFFCURVE",
"353 644 CURVE",
"335 664 LINE",
"249.667 638.667 OFFCURVE",
"180.333 585.333 OFFCURVE",
"139 512 CURVE",
"82 583 LINE",
"33 524 LINE",
"117 461 LINE",
"107 431 OFFCURVE",
"102 399 OFFCURVE",
"102 365 CURVE SMOOTH",
"102 322.333 OFFCURVE",
"112.667 283.333 OFFCURVE",
"134 248 CURVE",
"35 168 LINE",
"93 119 LINE",
"162 210 LINE",
"203.333 167.333 OFFCURVE",
"259.667 142 OFFCURVE",
"321 142 CURVE SMOOTH",
"355.667 142 OFFCURVE",
"387.333 148.667 OFFCURVE",
"416 162 CURVE",
"450 120 LINE",
"499 180 LINE",
"472 200 LINE",
"530.667 252 OFFCURVE",
"563 338 OFFCURVE",
"563 422 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */\01212 5 3 2 4 0 1 1 74 50 47 45 44 43 42 36 35 34 33 24 23 20 19 18 17 13 10 18 1 72 11 4 2 0 71 0 1 0 0 1 87 0 1 1 0 91 0 0 1 0 79 31 30 38 2 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 533;
}
);
note = currency;
unicode = 00A4;
},
{
glyphname = dollar;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"123 622.333 OFFCURVE",
"173.333 677 OFFCURVE",
"260 677 CURVE SMOOTH",
"350.667 677 OFFCURVE",
"418.667 608.333 OFFCURVE",
"452 515 CURVE",
"530 611 LINE",
"475.333 684.333 OFFCURVE",
"392 726.667 OFFCURVE",
"304 728 CURVE",
"321 864 LINE",
"243 836 LINE",
"259 725 LINE",
"217.667 719.667 OFFCURVE",
"180.833 706.5 OFFCURVE",
"148.5 685.5 CURVE SMOOTH",
"83.833 643.5 OFFCURVE",
"45 577.333 OFFCURVE",
"45 500 CURVE SMOOTH",
"45 459.333 OFFCURVE",
"55 424.833 OFFCURVE",
"75 396.5 CURVE SMOOTH",
"115 339.833 OFFCURVE",
"165.667 312.667 OFFCURVE",
"259 270 CURVE SMOOTH",
"322.607 241.088 OFFCURVE",
"421 174.755 OFFCURVE",
"421 120 CURVE SMOOTH",
"421 69.333 OFFCURVE",
"374.333 35 OFFCURVE",
"317 35 CURVE SMOOTH",
"255.667 35 OFFCURVE",
"184.333 75.333 OFFCURVE",
"139 182 CURVE",
"61 95 LINE",
"105 28.333 OFFCURVE",
"181.667 -6.667 OFFCURVE",
"263 -12 CURVE",
"248 -146 LINE",
"325 -118 LINE",
"309 -11 LINE",
"417 -3 OFFCURVE",
"490.333 61 OFFCURVE",
"489 169 CURVE",
"489 200.333 OFFCURVE",
"481 226.667 OFFCURVE",
"465 248 CURVE SMOOTH",
"433 290.667 OFFCURVE",
"392 311 OFFCURVE",
"312 347 CURVE SMOOTH",
"270 365.667 OFFCURVE",
"236.667 382.333 OFFCURVE",
"212 397 CURVE SMOOTH",
"162.667 426.333 OFFCURVE",
"123 473 OFFCURVE",
"123 545 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */\01235 1 3 2 42 41 17 16 4 1 3 2 74 37 36 2 2 72 12 11 10 3 0 71 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0129 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 24 values pushed */\0120 1 3 0 3 1 0 112 0 3 3 2 91 0 2 2 42 75 0 0 0 46 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01212 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 24 values pushed */\0120 1 3 0 3 1 0 112 0 3 3 2 91 0 2 2 42 75 0 0 0 43 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 24 values pushed */\0120 1 3 0 3 1 0 112 0 3 3 2 91 0 2 2 42 75 0 0 0 46 0 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 9 values pushed */\01246 44 39 38 37 29 4 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 553;
}
);
note = dollar;
unicode = 0024;
},
{
glyphname = euro;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"265.333 65 OFFCURVE",
"196.333 122.333 OFFCURVE",
"163 217 CURVE",
"349 217 LINE",
"374 270 LINE",
"149 270 LINE",
"143.667 300 OFFCURVE",
"141 330 OFFCURVE",
"141 360 CURVE SMOOTH",
"141 367 LINE",
"374 367 LINE",
"398 418 LINE",
"145 418 LINE",
"151.667 464 OFFCURVE",
"165.167 506.167 OFFCURVE",
"185.5 544.5 CURVE SMOOTH",
"226.167 621.167 OFFCURVE",
"292.333 670 OFFCURVE",
"371 670 CURVE SMOOTH",
"439 670 OFFCURVE",
"480 631.333 OFFCURVE",
"480 570 CURVE SMOOTH",
"480 542 OFFCURVE",
"475 520.667 OFFCURVE",
"459 494 CURVE",
"485 473 LINE",
"538.333 517 OFFCURVE",
"565 567 OFFCURVE",
"565 623 CURVE SMOOTH",
"565 688.333 OFFCURVE",
"503.667 730 OFFCURVE",
"417 730 CURVE SMOOTH",
"358.333 730 OFFCURVE",
"304.5 716.833 OFFCURVE",
"255.5 690.5 CURVE SMOOTH",
"157.5 637.833 OFFCURVE",
"88.333 540.667 OFFCURVE",
"59 418 CURVE",
"7 418 LINE",
"-18 367 LINE",
"50 367 LINE",
"46.667 339 OFFCURVE",
"45 313.333 OFFCURVE",
"45 290 CURVE SMOOTH",
"45 270 LINE",
"-18 270 LINE",
"-44 217 LINE",
"51 217 LINE",
"76.333 83.667 OFFCURVE",
"168.333 -11 OFFCURVE",
"307 -11 CURVE SMOOTH",
"413.667 -11 OFFCURVE",
"481.333 44.333 OFFCURVE",
"544 123 CURVE",
"523 145 LINE",
"471.667 91.667 OFFCURVE",
"416 65 OFFCURVE",
"356 65 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 76 values pushed */\01227 26 2 4 6 2 1 2 11 1 2 74 7 1 4 8 1 3 2 4 3 97 9 1 2 10 1 1 11 2 1 97 0 6 6 5 91 0 5 5 42 75 12 1 11 11 0 91 0 0 0 43 0 76 0 0 0 49 0 48 46 45 44 43 17 19 42 35 17 19 17 18 36 13 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 598;
}
);
note = Euro;
unicode = 20AC;
},
{
glyphname = florin;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"130.667 731 OFFCURVE",
"79 627.333 OFFCURVE",
"79 502 CURVE SMOOTH",
"79 384 LINE",
"52 384 LINE",
"31 335 LINE",
"79 335 LINE",
"79 -18 LINE SMOOTH",
"79 -86.667 OFFCURVE",
"57 -121 OFFCURVE",
"13 -121 CURVE SMOOTH",
"-20.333 -121 OFFCURVE",
"-42.667 -99.333 OFFCURVE",
"-56 -66 CURVE",
"-112 -107 LINE",
"-89.333 -136.333 OFFCURVE",
"-44 -156 OFFCURVE",
"-4 -156 CURVE SMOOTH",
"113.333 -156 OFFCURVE",
"165 -53.333 OFFCURVE",
"165 72 CURVE SMOOTH",
"165 335 LINE",
"273 335 LINE",
"293 384 LINE",
"165 384 LINE",
"165 590 LINE SMOOTH",
"165 660 OFFCURVE",
"187 695 OFFCURVE",
"231 695 CURVE SMOOTH",
"261 695 OFFCURVE",
"284 677.667 OFFCURVE",
"300 643 CURVE",
"356 681 LINE",
"333.333 711.667 OFFCURVE",
"288 731 OFFCURVE",
"248 731 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */\0123 2 2 1 0 19 18 2 4 2 2 74 6 1 1 5 1 2 4 1 2 97 0 4 0 3 4 3 95 0 0 0 7 91 8 1 7 7 42 0 76 0 0 0 32 0 31 17 18 37 35 17 18 36 9 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 301;
}
);
note = florin;
unicode = 0192;
},
{
glyphname = rupeeIndian;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"777 704 LINE",
"777 758 LINE",
"103 758 LINE",
"103 704 LINE",
"372 704 LINE",
"409.333 661.333 OFFCURVE",
"433 626.333 OFFCURVE",
"443 599 CURVE",
"103 599 LINE",
"103 543 LINE",
"458 543 LINE",
"460.667 530.333 OFFCURVE",
"462 517 OFFCURVE",
"462 503 CURVE SMOOTH",
"462 451 OFFCURVE",
"436.333 413.333 OFFCURVE",
"385 390 CURVE",
"361 452.667 OFFCURVE",
"308 496 OFFCURVE",
"252 496 CURVE SMOOTH",
"206.667 496 OFFCURVE",
"171 465 OFFCURVE",
"171 425 CURVE SMOOTH",
"171 381 OFFCURVE",
"198.333 323.667 OFFCURVE",
"253 253 CURVE SMOOTH",
"362.333 111.667 OFFCURVE",
"538.667 -11 OFFCURVE",
"684 -11 CURVE SMOOTH",
"724 -11 OFFCURVE",
"757.333 1.333 OFFCURVE",
"776 20 CURVE",
"699 74 LINE",
"681.667 51.333 OFFCURVE",
"653.667 40 OFFCURVE",
"623 40 CURVE SMOOTH",
"531 40 OFFCURVE",
"401.333 129.333 OFFCURVE",
"304 272 CURVE",
"352.667 274.667 OFFCURVE",
"394.833 285.167 OFFCURVE",
"430.5 303.5 CURVE SMOOTH",
"501.833 340.167 OFFCURVE",
"540 401.333 OFFCURVE",
"540 476 CURVE SMOOTH",
"540 498.667 OFFCURVE",
"536.667 521 OFFCURVE",
"530 543 CURVE",
"777 543 LINE",
"777 599 LINE",
"505 599 LINE",
"489.667 631.667 OFFCURVE",
"465.667 666.667 OFFCURVE",
"433 704 CURVE"
);
},
{
closed = 1;
nodes = (
"319 423 OFFCURVE",
"343.333 402.667 OFFCURVE",
"354 372 CURVE",
"320.667 356 OFFCURVE",
"290.667 348 OFFCURVE",
"264 348 CURVE SMOOTH",
"248 348 OFFCURVE",
"233 364.667 OFFCURVE",
"233 382 CURVE SMOOTH",
"233 404.667 OFFCURVE",
"260.333 423 OFFCURVE",
"295 423 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */\01252 32 2 11 12 18 1 4 3 19 1 5 4 3 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 56 values pushed */\0120 11 12 3 12 11 3 112 0 3 4 12 3 4 110 8 1 1 7 1 2 6 1 2 97 0 6 13 1 12 11 6 12 99 0 10 10 0 89 9 1 0 0 25 75 0 4 4 5 91 0 5 5 26 5 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 54 values pushed */\0120 11 12 3 12 11 3 112 0 3 4 12 3 4 110 0 10 9 1 0 1 10 0 97 8 1 1 7 1 2 6 1 2 97 0 6 13 1 12 11 6 12 99 0 4 4 5 91 0 5 5 26 5 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 59 values pushed */\0120 11 12 3 12 11 3 112 0 3 4 12 3 4 110 0 10 9 1 0 1 10 0 97 8 1 1 7 1 2 6 1 2 97 0 6 13 1 12 11 6 12 99 0 4 5 5 4 87 0 4 4 5 91 0 5 4 5 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 24 values pushed */\01245 45 45 55 45 54 51 49 44 43 42 41 17 22 37 37 34 21 17 18 16 14 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 879;
}
);
note = uni20B9;
unicode = 20B9;
},
{
glyphname = sterling;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"542 144 LINE",
"524 156 LINE",
"496 118.667 OFFCURVE",
"454.333 92 OFFCURVE",
"409 92 CURVE SMOOTH",
"370.333 92 OFFCURVE",
"332 97.667 OFFCURVE",
"324 99 CURVE SMOOTH",
"294.667 103.667 OFFCURVE",
"266.667 106 OFFCURVE",
"240 106 CURVE SMOOTH",
"201.333 106 OFFCURVE",
"175 94 OFFCURVE",
"143 70 CURVE",
"138 73 LINE",
"164.667 105 OFFCURVE",
"177 131.667 OFFCURVE",
"177 173 CURVE SMOOTH",
"177 280 LINE",
"342 280 LINE",
"367 331 LINE",
"177 331 LINE",
"177 483 LINE SMOOTH",
"177 587 OFFCURVE",
"229.667 674 OFFCURVE",
"339 674 CURVE SMOOTH",
"384.333 674 OFFCURVE",
"414 649.667 OFFCURVE",
"414 607 CURVE SMOOTH",
"414 549.667 OFFCURVE",
"360 491.667 OFFCURVE",
"288 469 CURVE",
"297 450 LINE",
"333 454.667 OFFCURVE",
"367.833 466.333 OFFCURVE",
"401.5 485 CURVE SMOOTH",
"468.833 522.333 OFFCURVE",
"515 579.667 OFFCURVE",
"515 633 CURVE SMOOTH",
"515 693 OFFCURVE",
"466 730 OFFCURVE",
"394 730 CURVE SMOOTH",
"333.333 730 OFFCURVE",
"279.5 715.5 OFFCURVE",
"232.5 686.5 CURVE SMOOTH",
"138.5 628.5 OFFCURVE",
"84 523.667 OFFCURVE",
"84 401 CURVE SMOOTH",
"84 331 LINE",
"28 331 LINE",
"3 280 LINE",
"84 280 LINE",
"84 119 LINE SMOOTH",
"84 73 OFFCURVE",
"67.333 37 OFFCURVE",
"34 11 CURVE",
"57 -8 LINE",
"90.333 17.333 OFFCURVE",
"138.333 31 OFFCURVE",
"177 31 CURVE SMOOTH",
"237 31 OFFCURVE",
"278.667 24 OFFCURVE",
"360 8 CURVE SMOOTH",
"400.667 -1.333 OFFCURVE",
"436.667 -7.667 OFFCURVE",
"468 -11 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */\01229 28 2 2 4 58 1 7 1 46 1 0 8 3 74 10 9 1 3 0 71 0 8 7 0 7 8 0 112 5 1 2 6 1 1 7 2 1 97 0 7 0 0 7 0 95 0 4 4 3 91 0 3 3 42 4 76 35 39 17 19 44 36 17 22 37 9 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 561;
}
);
note = sterling;
unicode = 00A3;
},
{
glyphname = yen;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"319 270 LINE",
"377 367 LINE",
"484 367 LINE",
"510 418 LINE",
"407 418 LINE",
"409 421 LINE SMOOTH",
"454.333 493 OFFCURVE",
"472 547 OFFCURVE",
"472 615 CURVE SMOOTH",
"472 668.333 OFFCURVE",
"438.333 728 OFFCURVE",
"389 760 CURVE",
"319 681 LINE",
"371.667 639 OFFCURVE",
"398 590.333 OFFCURVE",
"398 535 CURVE SMOOTH",
"398 495 OFFCURVE",
"382.333 454.333 OFFCURVE",
"345 393 CURVE SMOOTH",
"291 302 LINE",
"90 700 LINE",
"2 665 LINE",
"132 418 LINE",
"40 418 LINE",
"15 367 LINE",
"159 367 LINE",
"210 270 LINE",
"41 270 LINE",
"17 217 LINE",
"225 217 LINE",
"225 -16 LINE",
"318 22 LINE",
"318 217 LINE",
"483 217 LINE",
"508 270 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */\01216 1 0 4 1 74 23 22 15 14 4 5 72 5 4 2 1 71 6 1 5 7 1 4 0 5 4 97 3 1 0 1 1 0 85 3 1 0 0 1 89 2 1 1 0 1 77 33 32 31 29 17 17 17 19 17 16 8 7 26 \012CALL[ ]	/* CallFunction */";
};
width = 545;
}
);
note = yen;
unicode = 00A5;
},
{
glyphname = plus;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"381 335 LINE",
"268 335 LINE",
"268 221 LINE",
"187 189 LINE",
"187 335 LINE",
"42 335 LINE",
"75 414 LINE",
"187 414 LINE",
"187 527 LINE",
"268 559 LINE",
"268 414 LINE",
"411 414 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */\0124 3 2 0 72 10 9 2 2 71 1 1 0 2 2 0 85 1 1 0 0 2 89 4 3 2 2 0 2 77 0 0 0 11 0 11 17 19 17 5 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 455;
}
);
leftKerningGroup = plus;
note = plus;
rightKerningGroup = plus;
unicode = 002B;
},
{
glyphname = minus;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"69 335 LINE",
"103 414 LINE",
"439 414 LINE",
"409 335 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0122 0 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 500;
}
);
leftKerningGroup = minus;
note = minus;
rightKerningGroup = minus;
unicode = 2212;
},
{
glyphname = multiply;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"221 436 LINE",
"300 553 LINE",
"379 518 LINE",
"262 375 LINE",
"379 231 LINE",
"300 197 LINE",
"221 315 LINE",
"140 197 LINE",
"60 231 LINE",
"177 375 LINE",
"60 518 LINE",
"140 553 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0125 1 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 439;
}
);
note = multiply;
unicode = 00D7;
},
{
glyphname = divide;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"260 544 OFFCURVE",
"283 521.333 OFFCURVE",
"283 496 CURVE SMOOTH",
"283 469.333 OFFCURVE",
"261.333 451 OFFCURVE",
"236 451 CURVE SMOOTH",
"210.667 451 OFFCURVE",
"189 469.333 OFFCURVE",
"189 496 CURVE SMOOTH",
"189 521.333 OFFCURVE",
"210.667 544 OFFCURVE",
"236 544 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"49 335 LINE",
"80 414 LINE",
"418 414 LINE",
"386 335 LINE"
);
},
{
closed = 1;
nodes = (
"260 299 OFFCURVE",
"283 277 OFFCURVE",
"283 253 CURVE SMOOTH",
"283 227.667 OFFCURVE",
"260 207 OFFCURVE",
"236 207 CURVE SMOOTH",
"210.667 207 OFFCURVE",
"189 227.667 OFFCURVE",
"189 253 CURVE SMOOTH",
"189 278.333 OFFCURVE",
"210.667 299 OFFCURVE",
"236 299 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01222 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 28 values pushed */\0120 3 0 2 5 3 2 97 7 1 5 0 4 5 4 95 0 0 0 1 91 6 1 1 1 53 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 35 values pushed */\0126 1 1 0 0 3 1 0 99 0 3 0 2 5 3 2 97 7 1 5 4 4 5 87 7 1 5 5 4 91 0 4 5 4 79 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 22 values pushed */\01216 16 0 0 16 27 16 26 22 20 15 14 13 12 0 11 0 10 36 8 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 465;
}
);
note = divide;
unicode = 00F7;
},
{
glyphname = equal;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"69 416 LINE",
"103 496 LINE",
"439 496 LINE",
"409 416 LINE"
);
},
{
closed = 1;
nodes = (
"69 253 LINE",
"103 334 LINE",
"439 334 LINE",
"409 253 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 18 values pushed */\0120 3 0 2 3 2 93 0 0 0 1 89 0 1 1 45 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 24 values pushed */\0120 1 0 0 3 1 0 97 0 3 2 2 3 85 0 3 3 2 89 0 2 3 2 77 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 7 values pushed */\01217 17 17 16 4 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 509;
}
);
leftKerningGroup = equal;
note = equal;
rightKerningGroup = equal;
unicode = 003D;
},
{
glyphname = notequal;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"316 416 LINE",
"409 416 LINE",
"439 496 LINE",
"366 496 LINE",
"460 648 LINE",
"418 678 LINE",
"303 496 LINE",
"103 496 LINE",
"69 416 LINE",
"252 416 LINE",
"200 334 LINE",
"103 334 LINE",
"69 253 LINE",
"149 253 LINE",
"50 96 LINE",
"97 64 LINE",
"214 253 LINE",
"409 253 LINE",
"439 334 LINE",
"265 334 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\01215 5 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 509;
}
);
leftKerningGroup = equal;
note = notequal;
rightKerningGroup = equal;
unicode = 2260;
},
{
glyphname = greater;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"62 528 LINE",
"80 544 LINE",
"319 349 LINE",
"80 171 LINE",
"62 192 LINE",
"194 349 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0125 3 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 374;
}
);
note = greater;
unicode = 003E;
},
{
glyphname = less;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"311 528 LINE",
"179 349 LINE",
"311 192 LINE",
"294 171 LINE",
"54 349 LINE",
"294 544 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0123 1 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 374;
}
);
note = less;
unicode = 003C;
},
{
glyphname = greaterequal;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"69 528 LINE",
"86 544 LINE",
"328 349 LINE",
"86 171 LINE",
"69 192 LINE",
"193 349 LINE"
);
},
{
closed = 1;
nodes = (
"60 60 LINE",
"91 140 LINE",
"328 140 LINE",
"297 60 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\0128 6 5 3 2 48 \012CALL[ ]	/* CallFunction */";
};
width = 377;
}
);
note = greaterequal;
unicode = 2265;
},
{
glyphname = lessequal;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"309 528 LINE",
"185 349 LINE",
"309 192 LINE",
"291 171 LINE",
"50 349 LINE",
"291 544 LINE"
);
},
{
closed = 1;
nodes = (
"50 60 LINE",
"81 140 LINE",
"319 140 LINE",
"288 60 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\0128 6 3 1 2 48 \012CALL[ ]	/* CallFunction */";
};
width = 375;
}
);
note = lessequal;
unicode = 2264;
},
{
glyphname = plusminus;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"277 559 LINE",
"277 414 LINE",
"421 414 LINE",
"392 335 LINE",
"277 335 LINE",
"277 221 LINE",
"197 189 LINE",
"197 335 LINE",
"51 335 LINE",
"83 414 LINE",
"197 414 LINE",
"197 527 LINE"
);
},
{
closed = 1;
nodes = (
"51 60 LINE",
"83 140 LINE",
"421 140 LINE",
"392 60 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */\0127 6 2 5 1 1 74 1 0 2 0 72 3 1 0 2 1 1 5 0 1 97 0 5 4 4 5 85 0 5 5 4 89 0 4 5 4 77 17 17 17 19 17 18 6 7 26 \012CALL[ ]	/* CallFunction */";
};
width = 473;
}
);
note = plusminus;
unicode = 00B1;
},
{
glyphname = approxequal;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"103 496 LINE",
"122.333 486 OFFCURVE",
"144 481 OFFCURVE",
"168 481 CURVE SMOOTH",
"204.444 481 OFFCURVE",
"237.737 492.147 OFFCURVE",
"267 498 CURVE",
"307 509.333 OFFCURVE",
"339.333 515 OFFCURVE",
"364 515 CURVE SMOOTH",
"390.667 515 OFFCURVE",
"415.667 508.667 OFFCURVE",
"439 496 CURVE",
"409 416 LINE",
"389.667 425.333 OFFCURVE",
"367 430 OFFCURVE",
"341 430 CURVE SMOOTH",
"304.974 430 OFFCURVE",
"273.996 418.799 OFFCURVE",
"245 413 CURVE",
"201 401 OFFCURVE",
"175.333 395 OFFCURVE",
"146 395 CURVE SMOOTH",
"119.333 395 OFFCURVE",
"93.667 402 OFFCURVE",
"69 416 CURVE"
);
},
{
closed = 1;
nodes = (
"103 334 LINE",
"120.333 324 OFFCURVE",
"142 319 OFFCURVE",
"168 319 CURVE SMOOTH",
"204.444 319 OFFCURVE",
"237.737 330.147 OFFCURVE",
"267 336 CURVE",
"307 347.333 OFFCURVE",
"339.333 353 OFFCURVE",
"364 353 CURVE SMOOTH",
"388.667 353 OFFCURVE",
"413.667 346.667 OFFCURVE",
"439 334 CURVE",
"409 253 LINE",
"389.667 262.333 OFFCURVE",
"367 267 OFFCURVE",
"341 267 CURVE SMOOTH",
"304.974 267 OFFCURVE",
"273.996 255.799 OFFCURVE",
"245 250 CURVE",
"201 238 OFFCURVE",
"175.333 232 OFFCURVE",
"146 232 CURVE SMOOTH",
"119.333 232 OFFCURVE",
"93.667 239 OFFCURVE",
"69 253 CURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\01236 24 13 1 2 48 \012CALL[ ]	/* CallFunction */";
};
width = 509;
}
);
note = approxequal;
unicode = 2248;
},
{
glyphname = asciitilde;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"154 431 OFFCURVE",
"174 418 OFFCURVE",
"202 394 CURVE SMOOTH",
"220.667 378 OFFCURVE",
"231 370 OFFCURVE",
"243 370 CURVE SMOOTH",
"261.667 370 OFFCURVE",
"271 379 OFFCURVE",
"271 397 CURVE SMOOTH",
"271 403 OFFCURVE",
"267.333 412.667 OFFCURVE",
"260 426 CURVE",
"281 436 LINE",
"297.667 419.333 OFFCURVE",
"306 399.667 OFFCURVE",
"306 377 CURVE SMOOTH",
"306 335.667 OFFCURVE",
"278.333 306 OFFCURVE",
"229 306 CURVE SMOOTH",
"202.333 306 OFFCURVE",
"182.333 319.667 OFFCURVE",
"153 345 CURVE SMOOTH",
"133 362.333 OFFCURVE",
"122.667 370 OFFCURVE",
"112 370 CURVE SMOOTH",
"97.333 370 OFFCURVE",
"86 361 OFFCURVE",
"86 341 CURVE SMOOTH",
"86 332.333 OFFCURVE",
"89.333 323 OFFCURVE",
"96 313 CURVE",
"75 303 LINE",
"58.333 319 OFFCURVE",
"50 338 OFFCURVE",
"50 360 CURVE SMOOTH",
"50 402.667 OFFCURVE",
"78 431 OFFCURVE",
"126 431 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */\01222 1 0 3 5 1 1 2 2 74 21 1 3 72 4 1 1 71 4 1 3 0 0 2 3 0 99 0 2 1 1 2 87 0 2 2 1 91 0 1 2 1 79 0 0 0 32 0 31 40 37 25 5 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 353;
}
);
note = asciitilde;
unicode = 007E;
},
{
glyphname = logicalnot;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"413 234 LINE",
"353 183 LINE",
"353 335 LINE",
"44 335 LINE",
"76 414 LINE",
"413 414 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */\0125 0 2 1 71 0 0 1 1 0 85 0 0 0 1 89 0 1 0 1 77 17 17 2 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 472;
}
);
note = logicalnot;
unicode = 00AC;
},
{
glyphname = asciicircum;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"248 399 LINE",
"301 456 LINE",
"140 620 LINE",
"0 414 LINE",
"27 392 LINE",
"121 530 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0124 2 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 301;
}
);
note = asciicircum;
unicode = 005E;
},
{
glyphname = infinity;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"356 229 OFFCURVE",
"311.667 256 OFFCURVE",
"281 300 CURVE",
"247.667 258.667 OFFCURVE",
"212 232 OFFCURVE",
"168 232 CURVE SMOOTH",
"105.333 232 OFFCURVE",
"53 272.333 OFFCURVE",
"53 335 CURVE SMOOTH",
"53 406.332 OFFCURVE",
"108.075 471 OFFCURVE",
"179 471 CURVE SMOOTH",
"231 471 OFFCURVE",
"275.333 443.667 OFFCURVE",
"306 401 CURVE",
"342 445.667 OFFCURVE",
"380 468 OFFCURVE",
"420 468 CURVE SMOOTH",
"482.667 468 OFFCURVE",
"535 427.667 OFFCURVE",
"535 365 CURVE SMOOTH",
"535 293.229 OFFCURVE",
"480.323 229 OFFCURVE",
"408 229 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"117 418 OFFCURVE",
"91 394.333 OFFCURVE",
"91 361 CURVE SMOOTH",
"91 322.333 OFFCURVE",
"139 293 OFFCURVE",
"183 293 CURVE SMOOTH",
"209.667 293 OFFCURVE",
"236 308.333 OFFCURVE",
"262 339 CURVE",
"235.333 384.333 OFFCURVE",
"194.333 418 OFFCURVE",
"149 418 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"377.667 406 OFFCURVE",
"351 391 OFFCURVE",
"325 361 CURVE",
"350.333 317 OFFCURVE",
"393.667 284 OFFCURVE",
"439 284 CURVE SMOOTH",
"471 284 OFFCURVE",
"496 307 OFFCURVE",
"496 339 CURVE SMOOTH",
"496 377.667 OFFCURVE",
"447.667 406 OFFCURVE",
"405 406 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */\01240 36 28 25 10 0 3 48 \012CALL[ ]	/* CallFunction */";
};
width = 589;
}
);
note = infinity;
unicode = 221E;
},
{
glyphname = integral;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"122.667 835 OFFCURVE",
"71 742.667 OFFCURVE",
"71 608 CURVE SMOOTH",
"71 508 OFFCURVE",
"107 419.667 OFFCURVE",
"179 273 CURVE SMOOTH",
"251 122.333 OFFCURVE",
"287 37.667 OFFCURVE",
"287 -61 CURVE SMOOTH",
"287 -115.667 OFFCURVE",
"261 -165 OFFCURVE",
"205 -165 CURVE SMOOTH",
"162.333 -165 OFFCURVE",
"143.667 -139.333 OFFCURVE",
"121 -90 CURVE",
"64 -129 LINE",
"93.333 -174.333 OFFCURVE",
"152 -202 OFFCURVE",
"200 -202 CURVE SMOOTH",
"320 -202 OFFCURVE",
"372 -108 OFFCURVE",
"372 28 CURVE SMOOTH",
"372 126.667 OFFCURVE",
"335.667 215 OFFCURVE",
"265 359 CURVE SMOOTH",
"193 507 OFFCURVE",
"157 594 OFFCURVE",
"157 694 CURVE SMOOTH",
"157 750 OFFCURVE",
"183.333 800 OFFCURVE",
"238 800 CURVE SMOOTH",
"280.667 800 OFFCURVE",
"303 773 OFFCURVE",
"323 725 CURVE",
"380 763 LINE",
"349.333 807 OFFCURVE",
"292 835 OFFCURVE",
"244 835 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\01217 0 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 406;
}
);
note = integral;
unicode = 222B;
},
{
glyphname = increment;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"375 725 LINE",
"334 725 LINE",
"55 11 LINE",
"60 0 LINE",
"663 0 LINE",
"670 13 LINE"
);
},
{
closed = 1;
nodes = (
"323 584 LINE",
"543 40 LINE",
"118 40 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\0127 6 2 0 2 48 \012CALL[ ]	/* CallFunction */";
};
width = 728;
}
);
note = uni2206;
unicode = 2206;
},
{
glyphname = product;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"149 648 LINE",
"149 -112 LINE",
"242 -112 LINE",
"242 648 LINE",
"535 648 LINE",
"535 -112 LINE",
"628 -112 LINE",
"628 648 LINE",
"737 648 LINE",
"737 711 LINE",
"39 711 LINE",
"39 648 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0126 2 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 777;
}
);
note = product;
unicode = 220F;
},
{
glyphname = summation;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"156 39 LINE",
"442 39 LINE",
"442 0 LINE",
"42 0 LINE",
"42 36 LINE",
"242 353 LINE",
"42 674 LINE",
"42 711 LINE",
"442 711 LINE",
"442 672 LINE",
"156 672 LINE",
"356 354 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0129 4 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 486;
}
);
note = summation;
unicode = 2211;
},
{
glyphname = radical;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"622 936 LINE",
"571 936 LINE",
"323 43 LINE",
"166 427 LINE",
"67 392 LINE",
"286 -138 LINE",
"329 -138 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0121 0 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 622;
}
);
note = radical;
unicode = 221A;
},
{
glyphname = micro;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"530 514 LINE",
"439 469 LINE",
"415.667 373 OFFCURVE",
"388.833 287.167 OFFCURVE",
"358.5 211.5 CURVE SMOOTH",
"328.167 135.833 OFFCURVE",
"296 98 OFFCURVE",
"262 98 CURVE SMOOTH",
"248 98 OFFCURVE",
"241 110.333 OFFCURVE",
"241 135 CURVE SMOOTH",
"241 408 LINE SMOOTH",
"241 470.541 OFFCURVE",
"204.205 508 OFFCURVE",
"165 508 CURVE SMOOTH",
"131.667 508 OFFCURVE",
"80.667 483 OFFCURVE",
"50 427 CURVE",
"65 411 LINE",
"75.667 424.333 OFFCURVE",
"85.667 434.5 OFFCURVE",
"95 441.5 CURVE SMOOTH",
"104.333 448.5 OFFCURVE",
"111.667 452 OFFCURVE",
"117 452 CURVE SMOOTH",
"138.333 452 OFFCURVE",
"152 436.667 OFFCURVE",
"152 414 CURVE SMOOTH",
"152 -240 LINE",
"241 -193 LINE",
"241 -13 LINE",
"350.333 29.667 OFFCURVE",
"401.667 193.333 OFFCURVE",
"439 360 CURVE",
"441 360 LINE",
"441 70 LINE SMOOTH",
"441 15.333 OFFCURVE",
"476.333 -5 OFFCURVE",
"515 -5 CURVE SMOOTH",
"551 -5 OFFCURVE",
"599.333 19.667 OFFCURVE",
"630 77 CURVE",
"617 92 LINE",
"597 64 OFFCURVE",
"575.667 53 OFFCURVE",
"561 53 CURVE SMOOTH",
"546.333 53 OFFCURVE",
"530 69.667 OFFCURVE",
"530 87 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */\01228 27 14 3 4 2 7 6 2 0 4 2 74 42 1 3 72 20 19 18 3 1 71 0 2 3 4 3 2 4 112 0 4 0 3 4 0 110 0 0 1 3 0 1 110 0 3 3 45 75 0 1 1 46 1 76 37 38 28 37 34 5 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 671;
}
);
leftKerningGroup = p;
note = mu;
rightKerningGroup = u;
unicode = 00B5;
},
{
glyphname = partialdiff;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"424 175.333 OFFCURVE",
"415.167 138.667 OFFCURVE",
"397.5 104 CURVE SMOOTH",
"362.167 34.667 OFFCURVE",
"298.667 -11 OFFCURVE",
"228 -11 CURVE SMOOTH",
"193.333 -11 OFFCURVE",
"162.167 -2.5 OFFCURVE",
"134.5 14.5 CURVE SMOOTH",
"79.167 48.5 OFFCURVE",
"46 115.667 OFFCURVE",
"46 205 CURVE SMOOTH",
"46 236.333 OFFCURVE",
"53.667 266.333 OFFCURVE",
"69 295 CURVE SMOOTH",
"99.667 352.333 OFFCURVE",
"155.667 392.333 OFFCURVE",
"221 399 CURVE",
"250.333 377.667 OFFCURVE",
"279.333 353.667 OFFCURVE",
"302 331 CURVE",
"262.667 331 OFFCURVE",
"228.167 321.333 OFFCURVE",
"198.5 302 CURVE SMOOTH",
"139.167 263.333 OFFCURVE",
"108 200.667 OFFCURVE",
"108 150 CURVE SMOOTH",
"108 84.667 OFFCURVE",
"143.333 37 OFFCURVE",
"210 37 CURVE SMOOTH",
"273.537 37 OFFCURVE",
"338 150.953 OFFCURVE",
"338 227 CURVE SMOOTH",
"338 405.667 OFFCURVE",
"240.667 561.667 OFFCURVE",
"86 655 CURVE",
"100 672 LINE",
"164 648.667 OFFCURVE",
"220.333 615.167 OFFCURVE",
"269 571.5 CURVE SMOOTH",
"366.333 484.167 OFFCURVE",
"424 359.333 OFFCURVE",
"424 214 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\01228 3 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 475;
}
);
note = partialdiff;
unicode = 2202;
},
{
glyphname = percent;
layers = (
{
components = (
{
alignment = -1;
name = zero.numr;
transform = "{1, 0, 0, 1, 55, 0}";
},
{
alignment = -1;
name = fraction;
transform = "{1, 0, 0, 1, 316, 0}";
},
{
alignment = -1;
name = zero.dnom;
transform = "{1, 0, 0, 1, 589, 0}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 1054;
}
);
note = percent;
unicode = 0025;
},
{
glyphname = perthousand;
layers = (
{
components = (
{
alignment = -1;
name = zero.numr;
transform = "{1, 0, 0, 1, 55, 0}";
},
{
alignment = -1;
name = fraction;
transform = "{1, 0, 0, 1, 316, 0}";
},
{
alignment = -1;
name = zero.dnom;
transform = "{1, 0, 0, 1, 589, 0}";
},
{
alignment = -1;
name = zero.dnom;
transform = "{1, 0, 0, 1, 945, 0}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 1410;
}
);
note = perthousand;
unicode = 2030;
},
{
glyphname = dottedCircle;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"422 655 OFFCURVE",
"427.333 643 OFFCURVE",
"438 633 CURVE SMOOTH",
"448 623 OFFCURVE",
"460 618 OFFCURVE",
"474 618 CURVE SMOOTH",
"488 618 OFFCURVE",
"500 623 OFFCURVE",
"510 633 CURVE SMOOTH",
"520.667 643.667 OFFCURVE",
"526 655.667 OFFCURVE",
"526 669 CURVE SMOOTH",
"526 683.667 OFFCURVE",
"520.667 695.667 OFFCURVE",
"510 705 CURVE",
"498.667 716.333 OFFCURVE",
"486.667 722 OFFCURVE",
"474 722 CURVE SMOOTH",
"461.333 722 OFFCURVE",
"449.333 716.333 OFFCURVE",
"438 705 CURVE",
"427.333 696.333 OFFCURVE",
"422 684.333 OFFCURVE",
"422 669 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"262 612.667 OFFCURVE",
"267.333 601 OFFCURVE",
"278 591 CURVE",
"288 580.333 OFFCURVE",
"300 575 OFFCURVE",
"314 575 CURVE SMOOTH",
"328.667 575 OFFCURVE",
"341 580.333 OFFCURVE",
"351 591 CURVE SMOOTH",
"361.667 601.667 OFFCURVE",
"367 613.333 OFFCURVE",
"367 626 CURVE SMOOTH",
"367 640 OFFCURVE",
"361.667 652.333 OFFCURVE",
"351 663 CURVE SMOOTH",
"341 673.667 OFFCURVE",
"328.667 679 OFFCURVE",
"314 679 CURVE SMOOTH",
"300 679 OFFCURVE",
"288 673.667 OFFCURVE",
"278 663 CURVE",
"267.333 653 OFFCURVE",
"262 640.667 OFFCURVE",
"262 626 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"581 613.333 OFFCURVE",
"586.333 601.667 OFFCURVE",
"597 591 CURVE SMOOTH",
"607 580.333 OFFCURVE",
"619 575 OFFCURVE",
"633 575 CURVE SMOOTH",
"647.667 575 OFFCURVE",
"660 580.333 OFFCURVE",
"670 591 CURVE SMOOTH",
"680.667 601.667 OFFCURVE",
"686 613.333 OFFCURVE",
"686 626 CURVE SMOOTH",
"686 640 OFFCURVE",
"680.667 652.333 OFFCURVE",
"670 663 CURVE SMOOTH",
"660 673.667 OFFCURVE",
"647.667 679 OFFCURVE",
"633 679 CURVE SMOOTH",
"619 679 OFFCURVE",
"607 673.667 OFFCURVE",
"597 663 CURVE SMOOTH",
"586.333 652.333 OFFCURVE",
"581 640 OFFCURVE",
"581 626 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"146 496 OFFCURVE",
"151.333 483.667 OFFCURVE",
"162 473 CURVE SMOOTH",
"172 463 OFFCURVE",
"184 458 OFFCURVE",
"198 458 CURVE SMOOTH",
"212.667 458 OFFCURVE",
"225 463 OFFCURVE",
"235 473 CURVE SMOOTH",
"246.333 484.333 OFFCURVE",
"252 496.667 OFFCURVE",
"252 510 CURVE SMOOTH",
"252 522.667 OFFCURVE",
"246.333 534.667 OFFCURVE",
"235 546 CURVE SMOOTH",
"223.667 557.333 OFFCURVE",
"211.333 563 OFFCURVE",
"198 563 CURVE SMOOTH",
"185.333 563 OFFCURVE",
"173.333 557.333 OFFCURVE",
"162 546 CURVE SMOOTH",
"151.333 535.333 OFFCURVE",
"146 523.333 OFFCURVE",
"146 510 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"699 495.333 OFFCURVE",
"704 483 OFFCURVE",
"714 473 CURVE SMOOTH",
"724.667 463 OFFCURVE",
"736.667 458 OFFCURVE",
"750 458 CURVE SMOOTH",
"764.667 458 OFFCURVE",
"777 463 OFFCURVE",
"787 473 CURVE SMOOTH",
"797.667 483.667 OFFCURVE",
"803 496 OFFCURVE",
"803 510 CURVE SMOOTH",
"803 523.333 OFFCURVE",
"797.667 535.333 OFFCURVE",
"787 546 CURVE SMOOTH",
"775.667 557.333 OFFCURVE",
"763.333 563 OFFCURVE",
"750 563 CURVE SMOOTH",
"738.667 563 OFFCURVE",
"726.667 557.333 OFFCURVE",
"714 546 CURVE",
"704 536 OFFCURVE",
"699 524 OFFCURVE",
"699 510 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"103 335.333 OFFCURVE",
"108 323.333 OFFCURVE",
"118 314 CURVE SMOOTH",
"128.667 303.333 OFFCURVE",
"141 298 OFFCURVE",
"155 298 CURVE SMOOTH",
"167 298 OFFCURVE",
"179 303.333 OFFCURVE",
"191 314 CURVE SMOOTH",
"202.333 324 OFFCURVE",
"208 336 OFFCURVE",
"208 350 CURVE SMOOTH",
"208 362.667 OFFCURVE",
"202.333 374.667 OFFCURVE",
"191 386 CURVE",
"178.333 397.333 OFFCURVE",
"166.333 403 OFFCURVE",
"155 403 CURVE SMOOTH",
"141.667 403 OFFCURVE",
"129.333 397.333 OFFCURVE",
"118 386 CURVE SMOOTH",
"108 376 OFFCURVE",
"103 364 OFFCURVE",
"103 350 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"740 334.667 OFFCURVE",
"745.667 322.667 OFFCURVE",
"757 314 CURVE",
"767.667 303.333 OFFCURVE",
"779.667 298 OFFCURVE",
"793 298 CURVE SMOOTH",
"807 298 OFFCURVE",
"819.333 303.333 OFFCURVE",
"830 314 CURVE SMOOTH",
"840 323.333 OFFCURVE",
"845 335.333 OFFCURVE",
"845 350 CURVE SMOOTH",
"845 364 OFFCURVE",
"840 376 OFFCURVE",
"830 386 CURVE SMOOTH",
"818.667 397.333 OFFCURVE",
"806.333 403 OFFCURVE",
"793 403 CURVE SMOOTH",
"780.333 403 OFFCURVE",
"768.333 397.333 OFFCURVE",
"757 386 CURVE",
"745.667 376.667 OFFCURVE",
"740 364.667 OFFCURVE",
"740 350 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"146 178.333 OFFCURVE",
"151.333 166 OFFCURVE",
"162 154 CURVE",
"172.667 143.333 OFFCURVE",
"184.667 138 OFFCURVE",
"198 138 CURVE SMOOTH",
"212 138 OFFCURVE",
"224.333 143.333 OFFCURVE",
"235 154 CURVE",
"246.333 166.667 OFFCURVE",
"252 179 OFFCURVE",
"252 191 CURVE SMOOTH",
"252 202.333 OFFCURVE",
"246.333 214.333 OFFCURVE",
"235 227 CURVE",
"225 237 OFFCURVE",
"212.667 242 OFFCURVE",
"198 242 CURVE SMOOTH",
"184 242 OFFCURVE",
"172 237 OFFCURVE",
"162 227 CURVE",
"151.333 215 OFFCURVE",
"146 203 OFFCURVE",
"146 191 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"699 177.667 OFFCURVE",
"704 165.333 OFFCURVE",
"714 154 CURVE",
"726 143.333 OFFCURVE",
"738 138 OFFCURVE",
"750 138 CURVE SMOOTH",
"764 138 OFFCURVE",
"776.333 143.333 OFFCURVE",
"787 154 CURVE",
"797.667 166 OFFCURVE",
"803 178.333 OFFCURVE",
"803 191 CURVE SMOOTH",
"803 203 OFFCURVE",
"797.667 215 OFFCURVE",
"787 227 CURVE",
"777 237 OFFCURVE",
"764.667 242 OFFCURVE",
"750 242 CURVE SMOOTH",
"737.333 242 OFFCURVE",
"725.333 237 OFFCURVE",
"714 227 CURVE",
"704 216.333 OFFCURVE",
"699 204.333 OFFCURVE",
"699 191 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"262 60.333 OFFCURVE",
"267.333 47.333 OFFCURVE",
"278 36 CURVE",
"288.667 26.667 OFFCURVE",
"300.667 22 OFFCURVE",
"314 22 CURVE SMOOTH",
"328 22 OFFCURVE",
"340.333 26.667 OFFCURVE",
"351 36 CURVE",
"361.667 48.667 OFFCURVE",
"367 61.667 OFFCURVE",
"367 75 CURVE SMOOTH",
"367 87 OFFCURVE",
"361.667 99.333 OFFCURVE",
"351 112 CURVE",
"339.667 122 OFFCURVE",
"327.333 127 OFFCURVE",
"314 127 CURVE SMOOTH",
"301.333 127 OFFCURVE",
"289.333 122 OFFCURVE",
"278 112 CURVE",
"267.333 100.667 OFFCURVE",
"262 88.333 OFFCURVE",
"262 75 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"581 61.667 OFFCURVE",
"586.333 48.667 OFFCURVE",
"597 36 CURVE",
"607.667 26.667 OFFCURVE",
"619.667 22 OFFCURVE",
"633 22 CURVE SMOOTH",
"647 22 OFFCURVE",
"659.333 26.667 OFFCURVE",
"670 36 CURVE",
"680.667 48.667 OFFCURVE",
"686 61.667 OFFCURVE",
"686 75 CURVE SMOOTH",
"686 87 OFFCURVE",
"680.667 99.333 OFFCURVE",
"670 112 CURVE",
"658.667 122 OFFCURVE",
"646.333 127 OFFCURVE",
"633 127 CURVE SMOOTH",
"620.333 127 OFFCURVE",
"608.333 122 OFFCURVE",
"597 112 CURVE",
"586.333 99.333 OFFCURVE",
"581 87 OFFCURVE",
"581 75 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"422 15.667 OFFCURVE",
"427.333 3.667 OFFCURVE",
"438 -5 CURVE",
"448 -16.333 OFFCURVE",
"460 -22 OFFCURVE",
"474 -22 CURVE SMOOTH",
"488 -22 OFFCURVE",
"500 -16.333 OFFCURVE",
"510 -5 CURVE",
"520.667 4.333 OFFCURVE",
"526 16.333 OFFCURVE",
"526 31 CURVE SMOOTH",
"526 45 OFFCURVE",
"520.667 57.333 OFFCURVE",
"510 68 CURVE SMOOTH",
"499.333 78.667 OFFCURVE",
"487.333 84 OFFCURVE",
"474 84 CURVE SMOOTH",
"460.667 84 OFFCURVE",
"448.667 78.667 OFFCURVE",
"438 68 CURVE SMOOTH",
"427.333 58 OFFCURVE",
"422 45.667 OFFCURVE",
"422 31 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */\012186 178 170 162 154 146 138 130 122 114 106 98 90 82 74 66 58 50 42 34 26 18 10 2 12 48 \012CALL[ ]	/* CallFunction */";
};
width = 947;
}
);
note = uni25CC;
unicode = 25CC;
},
{
glyphname = lozenge;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"55 377 LINE",
"55 353 LINE",
"283 0 LINE",
"368 0 LINE",
"598 345 LINE",
"598 369 LINE",
"372 723 LINE",
"286 723 LINE"
);
},
{
closed = 1;
nodes = (
"322 653 LINE",
"512 347 LINE",
"329 70 LINE",
"144 374 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\01210 8 5 1 2 48 \012CALL[ ]	/* CallFunction */";
};
width = 653;
}
);
note = lozenge;
unicode = 25CA;
},
{
glyphname = "avagraha-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"173 666 LINE SMOOTH",
"106.734 666 OFFCURVE",
"50 613.144 OFFCURVE",
"50 550 CURVE SMOOTH",
"50 502 OFFCURVE",
"96.333 445.667 OFFCURVE",
"171 403 CURVE SMOOTH",
"364 296 LINE SMOOTH",
"425.333 264 OFFCURVE",
"462 214.667 OFFCURVE",
"462 172 CURVE SMOOTH",
"462 112 OFFCURVE",
"402.667 65 OFFCURVE",
"328 65 CURVE SMOOTH",
"232 65 OFFCURVE",
"131.333 119.667 OFFCURVE",
"54 213 CURVE",
"31 190 LINE",
"141.667 54 OFFCURVE",
"263.667 -1 OFFCURVE",
"381 -1 CURVE SMOOTH",
"409 -1 OFFCURVE",
"434.833 5.5 OFFCURVE",
"458.5 18.5 CURVE SMOOTH",
"505.833 44.5 OFFCURVE",
"536 91.333 OFFCURVE",
"536 142 CURVE SMOOTH",
"536 202 OFFCURVE",
"483.667 269.333 OFFCURVE",
"401 312 CURVE SMOOTH",
"184 431 LINE SMOOTH",
"142.667 452.333 OFFCURVE",
"118 483.333 OFFCURVE",
"118 514 CURVE SMOOTH",
"118 555.333 OFFCURVE",
"159.333 587 OFFCURVE",
"210 587 CURVE SMOOTH",
"338 587 LINE SMOOTH",
"382 587 OFFCURVE",
"424 567.333 OFFCURVE",
"448 534 CURVE",
"470 555 LINE",
"423.333 621.667 OFFCURVE",
"371.667 666 OFFCURVE",
"333 666 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */\01225 24 3 2 4 2 0 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 22 values pushed */\0120 0 0 3 91 4 1 3 3 24 75 0 2 2 1 91 0 1 1 26 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 22 values pushed */\0120 0 0 3 91 4 1 3 3 25 75 0 2 2 1 91 0 1 1 26 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 20 values pushed */\0124 1 3 0 0 2 3 0 99 0 2 2 1 91 0 1 1 26 1 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 12 values pushed */\0120 0 0 43 0 41 37 44 53 5 6 23 \012CALL[ ]	/* CallFunction */";
};
width = 572;
}
);
note = uni093D;
unicode = 093D;
},
{
glyphname = "om-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"683 878 LINE",
"605 809 LINE",
"523 878 LINE",
"600 952 LINE"
);
},
{
closed = 1;
nodes = (
"549.333 636 OFFCURVE",
"445 719 OFFCURVE",
"385 851 CURVE",
"414 865 LINE",
"460.667 765 OFFCURVE",
"532.667 702 OFFCURVE",
"598 702 CURVE SMOOTH",
"667.333 702 OFFCURVE",
"741 766 OFFCURVE",
"789 866 CURVE",
"858 817 LINE",
"818 709 OFFCURVE",
"734.667 636 OFFCURVE",
"652 636 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"53 373 LINE",
"73 317 OFFCURVE",
"98.833 267.5 OFFCURVE",
"130.5 224.5 CURVE SMOOTH",
"193.833 138.5 OFFCURVE",
"272.667 90 OFFCURVE",
"350 90 CURVE SMOOTH",
"421.115 90 OFFCURVE",
"481 144.043 OFFCURVE",
"481 212 CURVE SMOOTH",
"481 252 OFFCURVE",
"460.333 297 OFFCURVE",
"423 333 CURVE",
"377.667 298.333 OFFCURVE",
"336.667 281 OFFCURVE",
"300 281 CURVE SMOOTH",
"242.201 281 OFFCURVE",
"164 344.191 OFFCURVE",
"164 396 CURVE SMOOTH",
"164 443.939 OFFCURVE",
"227.844 487 OFFCURVE",
"286 487 CURVE SMOOTH",
"318 487 OFFCURVE",
"359.333 460.333 OFFCURVE",
"398 415 CURVE",
"438.667 452.333 OFFCURVE",
"459 490.333 OFFCURVE",
"459 529 CURVE SMOOTH",
"459 582.333 OFFCURVE",
"407 624 OFFCURVE",
"343 624 CURVE SMOOTH",
"272.333 624 OFFCURVE",
"202.667 593.667 OFFCURVE",
"148 539 CURVE",
"81 605 LINE",
"142.333 654.333 OFFCURVE",
"215.333 682 OFFCURVE",
"286 682 CURVE SMOOTH",
"322 682 OFFCURVE",
"358.833 672.167 OFFCURVE",
"396.5 652.5 CURVE SMOOTH",
"471.833 613.167 OFFCURVE",
"526 547.333 OFFCURVE",
"526 490 CURVE SMOOTH",
"526 444.667 OFFCURVE",
"497.333 394 OFFCURVE",
"448 354 CURVE",
"483.333 313.333 OFFCURVE",
"505.667 284 OFFCURVE",
"515 266 CURVE",
"531.667 255.333 OFFCURVE",
"548.667 250 OFFCURVE",
"566 250 CURVE SMOOTH",
"627.333 250 OFFCURVE",
"681.333 317 OFFCURVE",
"700 425 CURVE SMOOTH",
"706 463.667 OFFCURVE",
"717.167 498.5 OFFCURVE",
"733.5 529.5 CURVE SMOOTH",
"766.167 591.5 OFFCURVE",
"813 628 OFFCURVE",
"861 628 CURVE SMOOTH",
"895.667 628 OFFCURVE",
"928.833 614.5 OFFCURVE",
"960.5 587.5 CURVE SMOOTH",
"1023.833 533.5 OFFCURVE",
"1066 438 OFFCURVE",
"1066 342 CURVE SMOOTH",
"1066 271.07 OFFCURVE",
"997.438 151 OFFCURVE",
"940 151 CURVE SMOOTH",
"898.667 151 OFFCURVE",
"843.667 188.667 OFFCURVE",
"789 254 CURVE",
"809 273 LINE",
"841.667 236.333 OFFCURVE",
"867.667 218 OFFCURVE",
"887 218 CURVE SMOOTH",
"943.734 218 OFFCURVE",
"1002 347.918 OFFCURVE",
"1002 429 CURVE SMOOTH",
"1002 501.209 OFFCURVE",
"960.369 568 OFFCURVE",
"903 568 CURVE SMOOTH",
"849.667 568 OFFCURVE",
"800.333 500 OFFCURVE",
"783 404 CURVE SMOOTH",
"766.792 318.542 OFFCURVE",
"696.325 201 OFFCURVE",
"640 201 CURVE SMOOTH",
"612 201 OFFCURVE",
"577 211 OFFCURVE",
"535 231 CURVE",
"549.667 209.667 OFFCURVE",
"557 187.333 OFFCURVE",
"557 164 CURVE SMOOTH",
"557 137.333 OFFCURVE",
"549.667 112.5 OFFCURVE",
"535 89.5 CURVE SMOOTH",
"505.667 43.5 OFFCURVE",
"452.333 15 OFFCURVE",
"391 15 CURVE SMOOTH",
"342.333 15 OFFCURVE",
"294.5 29.167 OFFCURVE",
"247.5 57.5 CURVE SMOOTH",
"153.5 114.167 OFFCURVE",
"72.333 222 OFFCURVE",
"23 358 CURVE"
);
},
{
closed = 1;
nodes = (
"287.667 330 OFFCURVE",
"327 350.667 OFFCURVE",
"375 392 CURVE",
"360.333 414.667 OFFCURVE",
"338 428 OFFCURVE",
"318 428 CURVE SMOOTH",
"283.98 428 OFFCURVE",
"226 389.559 OFFCURVE",
"226 362 CURVE SMOOTH",
"226 344.667 OFFCURVE",
"241 330 OFFCURVE",
"257 330 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */\01279 1 4 10 80 1 11 4 123 113 101 88 69 5 15 14 47 46 2 8 12 27 1 5 8 5 74 14 13 7 6 3 2 1 7 0 72 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 73 values pushed */\0120 7 0 4 11 7 4 99 0 11 0 14 15 11 14 99 17 1 15 0 12 8 15 12 99 0 8 0 3 6 8 3 99 0 5 0 6 13 5 6 99 16 1 1 1 0 91 0 0 0 24 75 0 10 10 9 91 0 9 9 24 75 0 13 13 2 91 0 2 2 26 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 73 values pushed */\0120 7 0 4 11 7 4 99 0 11 0 14 15 11 14 99 17 1 15 0 12 8 15 12 99 0 8 0 3 6 8 3 99 0 5 0 6 13 5 6 99 16 1 1 1 0 91 0 0 0 25 75 0 10 10 9 91 0 9 9 25 75 0 13 13 2 91 0 2 2 26 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01239 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 70 values pushed */\0120 7 0 4 11 7 4 99 0 11 0 14 15 11 14 99 17 1 15 0 12 8 15 12 99 0 8 0 3 6 8 3 99 0 5 0 6 13 5 6 99 0 13 0 2 13 2 95 16 1 1 1 0 91 0 0 0 25 75 0 10 10 9 91 0 9 9 25 10 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 68 values pushed */\0120 0 16 1 1 7 0 1 99 0 7 0 4 11 7 4 99 0 11 0 14 15 11 14 99 17 1 15 0 12 8 15 12 99 0 8 0 3 6 8 3 99 0 5 0 6 13 5 6 99 0 13 0 2 13 2 95 0 10 10 9 91 0 9 9 25 10 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 42 values pushed */\012114 114 4 4 114 125 114 124 121 119 109 107 100 98 92 90 84 82 77 75 66 64 59 57 51 49 45 43 37 35 30 28 22 20 4 17 4 16 41 18 6 21 \012CALL[ ]	/* CallFunction */";
};
width = 1118;
}
);
note = uni0950;
unicode = 0950;
},
{
glyphname = commaturnedabovecomb;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-47 631 LINE",
"-92.333 603 OFFCURVE",
"-124 564 OFFCURVE",
"-124 516 CURVE SMOOTH",
"-124 485.333 OFFCURVE",
"-99.667 461 OFFCURVE",
"-69 461 CURVE SMOOTH",
"-38.333 461 OFFCURVE",
"-14 485.333 OFFCURVE",
"-14 516 CURVE SMOOTH",
"-14 542.667 OFFCURVE",
"-29.667 564.667 OFFCURVE",
"-55 570 CURVE",
"-53.667 586 OFFCURVE",
"-41.333 603 OFFCURVE",
"-28 615 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */\01215 3 2 0 72 0 0 0 105 40 1 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0312;
unicode = 0312;
},
{
glyphname = commaaboverightcomb;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-10 519.333 OFFCURVE",
"-41.333 480 OFFCURVE",
"-88 452 CURVE",
"-105 467 LINE",
"-93 479 OFFCURVE",
"-80.333 497.667 OFFCURVE",
"-79 511 CURVE",
"-103 519 OFFCURVE",
"-122 542 OFFCURVE",
"-122 566 CURVE SMOOTH",
"-122 598 OFFCURVE",
"-97 624 OFFCURVE",
"-65 624 CURVE SMOOTH",
"-35.667 624 OFFCURVE",
"-10 596.667 OFFCURVE",
"-10 566 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */\01212 11 8 3 0 71 0 0 0 105 33 1 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0315;
unicode = 0315;
},
{
glyphname = commaaccentcomb;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-21 -145.667 OFFCURVE",
"-53.667 -187.333 OFFCURVE",
"-99 -214 CURVE",
"-117 -199 LINE",
"-103.667 -185.667 OFFCURVE",
"-94.667 -170.667 OFFCURVE",
"-90 -154 CURVE",
"-115.333 -147.333 OFFCURVE",
"-132 -124.333 OFFCURVE",
"-132 -99 CURVE SMOOTH",
"-132 -68.333 OFFCURVE",
"-106.333 -42 OFFCURVE",
"-77 -42 CURVE SMOOTH",
"-46.333 -42 OFFCURVE",
"-21 -68.333 OFFCURVE",
"-21 -99 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */\01211 10 8 3 0 71 0 0 0 105 33 1 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0326;
unicode = 0326;
},
{
glyphname = dieresis;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"28.333 606 OFFCURVE",
"1 577.667 OFFCURVE",
"1 547 CURVE SMOOTH",
"1 515 OFFCURVE",
"27 489 OFFCURVE",
"59 489 CURVE SMOOTH",
"92.333 489 OFFCURVE",
"118 513.667 OFFCURVE",
"118 547 CURVE SMOOTH",
"118 579 OFFCURVE",
"91 606 OFFCURVE",
"59 606 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"204 606 OFFCURVE",
"177 577.667 OFFCURVE",
"177 547 CURVE SMOOTH",
"177 515 OFFCURVE",
"204 489 OFFCURVE",
"236 489 CURVE SMOOTH",
"269.333 489 OFFCURVE",
"294 513.667 OFFCURVE",
"294 547 CURVE SMOOTH",
"294 579 OFFCURVE",
"268 606 OFFCURVE",
"236 606 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */\0125 3 4 3 1 0 0 1 87 5 3 4 3 1 1 0 91 2 1 0 1 0 79 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 296;
}
);
note = dieresis;
unicode = 00A8;
},
{
glyphname = dotaccent;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"27.667 608 OFFCURVE",
"1 581.667 OFFCURVE",
"1 547 CURVE SMOOTH",
"1 515 OFFCURVE",
"27.667 488 OFFCURVE",
"61 488 CURVE SMOOTH",
"91.667 488 OFFCURVE",
"120 515 OFFCURVE",
"120 547 CURVE SMOOTH",
"120 580.333 OFFCURVE",
"93 608 OFFCURVE",
"61 608 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */\0122 1 1 0 0 1 87 2 1 1 1 0 91 0 0 1 0 79 0 0 0 11 0 10 36 3 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 121;
}
);
note = dotaccent;
unicode = 02D9;
},
{
glyphname = grave;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"171 469 LINE",
"156 448 LINE",
"-12 536 LINE",
"48 609 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0123 1 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 182;
}
);
note = grave;
unicode = 0060;
},
{
glyphname = acute;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"123 609 LINE",
"184 536 LINE",
"16 449 LINE",
"1 469 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0122 0 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 182;
}
);
note = acute;
unicode = 00B4;
},
{
glyphname = hungarumlaut;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"117 609 LINE",
"177 536 LINE",
"16 449 LINE",
"0 469 LINE"
);
},
{
closed = 1;
nodes = (
"262 609 LINE",
"322 536 LINE",
"160 449 LINE",
"144 469 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\0126 4 2 0 2 48 \012CALL[ ]	/* CallFunction */";
};
width = 322;
}
);
note = hungarumlaut;
unicode = 02DD;
},
{
glyphname = circumflex;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"274 503 LINE",
"136 628 LINE",
"7 480 LINE",
"35 459 LINE",
"111 546 LINE",
"222 445 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0125 1 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 279;
}
);
note = circumflex;
unicode = 02C6;
},
{
glyphname = caron;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"170 537 LINE",
"60 637 LINE",
"7 579 LINE",
"145 455 LINE",
"274 602 LINE",
"247 624 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0125 3 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 279;
}
);
note = caron;
unicode = 02C7;
},
{
glyphname = breve;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"56 617 LINE",
"46.667 603.667 OFFCURVE",
"42 587.333 OFFCURVE",
"42 568 CURVE SMOOTH",
"42 525.333 OFFCURVE",
"65.333 476 OFFCURVE",
"104 476 CURVE SMOOTH",
"129.333 476 OFFCURVE",
"147 497.333 OFFCURVE",
"147 524 CURVE SMOOTH",
"147 548 OFFCURVE",
"134.333 574 OFFCURVE",
"117 590 CURVE",
"183 632 LINE",
"203 611.333 OFFCURVE",
"213 586 OFFCURVE",
"213 556 CURVE SMOOTH",
"213 489.333 OFFCURVE",
"163.333 446 OFFCURVE",
"94 446 CURVE SMOOTH",
"38 446 OFFCURVE",
"-2 481.333 OFFCURVE",
"-2 536 CURVE SMOOTH",
"-2 570.667 OFFCURVE",
"14.667 608.667 OFFCURVE",
"40 630 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */\01223 22 11 10 4 1 72 0 1 0 0 1 87 0 1 1 0 91 0 0 1 0 79 42 36 2 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 211;
}
);
note = breve;
unicode = 02D8;
},
{
glyphname = ring;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"44.667 666 OFFCURVE",
"0 622.333 OFFCURVE",
"0 569 CURVE SMOOTH",
"0 515.667 OFFCURVE",
"44.667 471 OFFCURVE",
"98 471 CURVE SMOOTH",
"152.667 471 OFFCURVE",
"198 515.667 OFFCURVE",
"198 569 CURVE SMOOTH",
"198 623.667 OFFCURVE",
"154 666 OFFCURVE",
"98 666 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"111.485 633 OFFCURVE",
"142 588.139 OFFCURVE",
"142 546 CURVE SMOOTH",
"142 524.667 OFFCURVE",
"132.333 506 OFFCURVE",
"115 506 CURVE SMOOTH",
"87 506 OFFCURVE",
"55 546.333 OFFCURVE",
"55 593 CURVE SMOOTH",
"55 615.667 OFFCURVE",
"64.667 633 OFFCURVE",
"82 633 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */\0124 1 1 5 1 3 2 1 3 99 0 0 0 2 91 0 2 2 45 0 76 12 12 0 0 12 24 12 23 18 16 0 11 0 10 36 6 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 198;
}
);
note = ring;
unicode = 02DA;
},
{
glyphname = tilde;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"176 608 LINE",
"180 600.667 OFFCURVE",
"182 592.333 OFFCURVE",
"182 583 CURVE SMOOTH",
"182 563.667 OFFCURVE",
"175.667 554 OFFCURVE",
"163 554 CURVE SMOOTH",
"152.333 554 OFFCURVE",
"145.667 560 OFFCURVE",
"131 576 CURVE SMOOTH",
"111 597.333 OFFCURVE",
"96.333 610 OFFCURVE",
"71 610 CURVE SMOOTH",
"27 610 OFFCURVE",
"1 577.333 OFFCURVE",
"1 536 CURVE SMOOTH",
"1 514 OFFCURVE",
"8.333 494 OFFCURVE",
"23 476 CURVE",
"53 486 LINE",
"48.333 494.667 OFFCURVE",
"46 503 OFFCURVE",
"46 511 CURVE SMOOTH",
"46 530.333 OFFCURVE",
"52.333 540 OFFCURVE",
"65 540 CURVE SMOOTH",
"73 540 OFFCURVE",
"83.333 533 OFFCURVE",
"96 519 CURVE SMOOTH",
"117.333 496.333 OFFCURVE",
"131.333 484 OFFCURVE",
"158 484 CURVE SMOOTH",
"202 484 OFFCURVE",
"228 515.333 OFFCURVE",
"228 558 CURVE SMOOTH",
"228 580 OFFCURVE",
"220.667 599.667 OFFCURVE",
"206 617 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */\01229 1 3 2 13 1 0 1 2 74 30 1 2 72 14 1 0 71 0 3 1 0 3 87 0 2 0 1 0 2 1 99 0 3 3 0 91 0 0 3 0 79 36 40 35 35 4 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 229;
}
);
note = tilde;
unicode = 02DC;
},
{
glyphname = macron;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"248 580 LINE",
"213 511 LINE",
"1 511 LINE",
"37 580 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */\0120 0 1 1 0 85 0 0 0 1 89 0 1 0 1 77 17 16 2 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 248;
}
);
note = macron;
unicode = 00AF;
},
{
glyphname = cedilla;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"68 9 LINE",
"43 9 LINE",
"-2 -66 LINE",
"16 -80 LINE",
"26 -73.333 OFFCURVE",
"36.333 -70 OFFCURVE",
"47 -70 CURVE SMOOTH",
"71 -70 OFFCURVE",
"90 -89.333 OFFCURVE",
"90 -116 CURVE SMOOTH",
"90 -141.333 OFFCURVE",
"73.667 -160 OFFCURVE",
"51 -160 CURVE SMOOTH",
"35.667 -160 OFFCURVE",
"23 -153 OFFCURVE",
"13 -139 CURVE",
"-6 -150 LINE",
"10 -180.667 OFFCURVE",
"41 -198 OFFCURVE",
"73 -198 CURVE SMOOTH",
"118.333 -198 OFFCURVE",
"160 -165.333 OFFCURVE",
"160 -116 CURVE SMOOTH",
"160 -66.667 OFFCURVE",
"126.667 -36 OFFCURVE",
"84 -36 CURVE SMOOTH",
"68 -36 OFFCURVE",
"51.333 -40.333 OFFCURVE",
"34 -49 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */\01223 1 3 0 22 12 11 3 2 3 2 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01228 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 31 values pushed */\0120 0 4 3 4 0 104 0 4 0 3 2 4 3 99 0 2 1 1 2 87 0 2 2 1 91 0 1 2 1 79 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 32 values pushed */\0120 0 4 3 4 0 3 112 0 4 0 3 2 4 3 99 0 2 1 1 2 87 0 2 2 1 91 0 1 2 1 79 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01219 36 36 36 33 5 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 152;
}
);
note = cedilla;
unicode = 00B8;
},
{
glyphname = ogonek;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"95 15 LINE",
"41.667 -18.333 OFFCURVE",
"0 -66 OFFCURVE",
"0 -122 CURVE SMOOTH",
"0 -171.333 OFFCURVE",
"39 -197 OFFCURVE",
"79 -197 CURVE SMOOTH",
"116.333 -197 OFFCURVE",
"149 -169.333 OFFCURVE",
"173 -128 CURVE",
"156 -113 LINE",
"142.667 -130.333 OFFCURVE",
"126.333 -139 OFFCURVE",
"107 -139 CURVE SMOOTH",
"76.333 -139 OFFCURVE",
"61 -120.333 OFFCURVE",
"61 -91 CURVE SMOOTH",
"61 -60.333 OFFCURVE",
"78.667 -24.667 OFFCURVE",
"108 2 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */\01218 9 8 3 0 72 0 0 1 1 0 87 0 0 0 1 91 0 1 0 1 79 36 37 2 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 172;
}
);
note = ogonek;
unicode = 02DB;
},
{
glyphname = "uMatra-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-526 -225 LINE",
"-403.333 -345.667 OFFCURVE",
"-274 -406 OFFCURVE",
"-138 -406 CURVE SMOOTH",
"-108 -406 OFFCURVE",
"-78 -398.5 OFFCURVE",
"-48 -383.5 CURVE SMOOTH",
"12 -353.5 OFFCURVE",
"54 -301 OFFCURVE",
"54 -249 CURVE SMOOTH",
"54 -222.333 OFFCURVE",
"43.167 -194.833 OFFCURVE",
"21.5 -166.5 CURVE SMOOTH",
"-21.833 -109.833 OFFCURVE",
"-93.333 -69 OFFCURVE",
"-156 -69 CURVE SMOOTH",
"-216.891 -69 OFFCURVE",
"-286 -116.891 OFFCURVE",
"-286 -169 CURVE SMOOTH",
"-286 -218.485 OFFCURVE",
"-198.237 -272 OFFCURVE",
"-134 -272 CURVE SMOOTH",
"-110 -272 OFFCURVE",
"-82.333 -254 OFFCURVE",
"-61 -226 CURVE",
"-114 -190 LINE",
"-138.667 -220.667 OFFCURVE",
"-157 -236 OFFCURVE",
"-169 -236 CURVE SMOOTH",
"-190.333 -236 OFFCURVE",
"-207 -222.667 OFFCURVE",
"-207 -204 CURVE SMOOTH",
"-207 -168.461 OFFCURVE",
"-151.232 -130 OFFCURVE",
"-107 -130 CURVE SMOOTH",
"-61.667 -130 OFFCURVE",
"-20 -166 OFFCURVE",
"-20 -210 CURVE SMOOTH",
"-20 -270.502 OFFCURVE",
"-129.718 -351 OFFCURVE",
"-196 -351 CURVE SMOOTH",
"-297.333 -351 OFFCURVE",
"-407.667 -290.667 OFFCURVE",
"-497 -196 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */\01241 40 19 18 4 2 1 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01224 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 26 values pushed */\0120 4 0 1 2 4 1 99 0 0 0 5 0 5 95 0 2 2 3 91 0 3 3 27 3 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 32 values pushed */\0120 4 0 1 2 4 1 99 0 2 0 3 0 2 3 99 0 0 5 5 0 87 0 0 0 5 91 0 5 0 5 79 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 9 values pushed */\01238 38 36 37 37 33 6 6 26 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0941;
unicode = 0941;
},
{
glyphname = "uuMatra-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-322 -228 OFFCURVE",
"-312.667 -251.5 OFFCURVE",
"-294 -274.5 CURVE SMOOTH",
"-256.667 -320.5 OFFCURVE",
"-194 -353 OFFCURVE",
"-142 -353 CURVE SMOOTH",
"-94.673 -353 OFFCURVE",
"-34 -302.647 OFFCURVE",
"-34 -258 CURVE SMOOTH",
"-34 -227.333 OFFCURVE",
"-68.333 -183.333 OFFCURVE",
"-123 -154 CURVE",
"-144 -170 LINE",
"-121.333 -187.333 OFFCURVE",
"-107 -205.333 OFFCURVE",
"-107 -220 CURVE SMOOTH",
"-107 -253.024 OFFCURVE",
"-156.569 -293 OFFCURVE",
"-193 -293 CURVE SMOOTH",
"-223.667 -293 OFFCURVE",
"-249 -271 OFFCURVE",
"-249 -243 CURVE SMOOTH",
"-249 -188.685 OFFCURVE",
"-171.67 -132 OFFCURVE",
"-112 -132 CURVE SMOOTH",
"-73.333 -132 OFFCURVE",
"-29.333 -157.667 OFFCURVE",
"8 -199 CURVE SMOOTH",
"138 -345 LINE SMOOTH",
"182 -397 OFFCURVE",
"233.667 -424 OFFCURVE",
"279 -424 CURVE SMOOTH",
"308.333 -424 OFFCURVE",
"337.333 -413.667 OFFCURVE",
"356 -391 CURVE",
"295 -329 LINE",
"278.333 -349.667 OFFCURVE",
"258.333 -360 OFFCURVE",
"235 -360 CURVE SMOOTH",
"211 -360 OFFCURVE",
"181 -341.667 OFFCURVE",
"157 -315 CURVE SMOOTH",
"20 -159 LINE SMOOTH",
"-33.333 -100.333 OFFCURVE",
"-86.667 -69 OFFCURVE",
"-156 -69 CURVE SMOOTH",
"-218.578 -69 OFFCURVE",
"-322 -143.656 OFFCURVE",
"-322 -204 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */\01238 37 2 4 3 12 1 5 4 13 1 2 1 3 74 0 0 0 3 4 0 3 99 0 4 0 5 1 4 5 99 0 1 2 2 1 87 0 1 1 2 91 0 2 1 2 79 45 37 37 36 37 34 6 6 26 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0942;
unicode = 0942;
},
{
glyphname = "rVocalicMatra-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-156 21 LINE",
"-241.333 10.333 OFFCURVE",
"-305 -41.333 OFFCURVE",
"-305 -100 CURVE SMOOTH",
"-305 -128 OFFCURVE",
"-293 -157.167 OFFCURVE",
"-269 -187.5 CURVE SMOOTH",
"-221 -248.167 OFFCURVE",
"-139.667 -293 OFFCURVE",
"-65 -293 CURVE SMOOTH",
"4.333 -293 OFFCURVE",
"58.333 -274.667 OFFCURVE",
"89 -240 CURVE",
"35 -180 LINE",
"-5.667 -218.667 OFFCURVE",
"-53.667 -238 OFFCURVE",
"-109 -238 CURVE SMOOTH",
"-181 -238 OFFCURVE",
"-240 -196.333 OFFCURVE",
"-240 -143 CURVE SMOOTH",
"-240 -87 OFFCURVE",
"-165 -38.333 OFFCURVE",
"-53 -29 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */\0129 1 1 0 1 74 19 8 2 0 72 0 0 0 1 91 0 1 1 27 1 76 36 37 2 6 22 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0943;
unicode = 0943;
},
{
glyphname = "rrVocalicMatra-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-315 -113.564 OFFCURVE",
"-257.562 -169 OFFCURVE",
"-183 -169 CURVE",
"-207 -183.667 OFFCURVE",
"-219 -201.333 OFFCURVE",
"-219 -222 CURVE SMOOTH",
"-219 -275.406 OFFCURVE",
"-89.689 -332 OFFCURVE",
"-18 -332 CURVE SMOOTH",
"52.667 -332 OFFCURVE",
"115.667 -306 OFFCURVE",
"157 -258 CURVE",
"95 -201 LINE",
"47 -258.333 OFFCURVE",
"-17 -291 OFFCURVE",
"-81 -291 CURVE SMOOTH",
"-117 -291 OFFCURVE",
"-148 -272.333 OFFCURVE",
"-148 -247 CURVE SMOOTH",
"-148 -234.333 OFFCURVE",
"-137.167 -220.167 OFFCURVE",
"-115.5 -204.5 CURVE SMOOTH",
"-93.833 -188.833 OFFCURVE",
"-65.333 -174 OFFCURVE",
"-30 -160 CURVE",
"-76 -100 LINE",
"-118.667 -125.333 OFFCURVE",
"-159.667 -138 OFFCURVE",
"-199 -138 CURVE SMOOTH",
"-223 -138 OFFCURVE",
"-245 -127.667 OFFCURVE",
"-245 -113 CURVE SMOOTH",
"-245 -96.333 OFFCURVE",
"-230.333 -78.667 OFFCURVE",
"-201 -60 CURVE SMOOTH",
"-171.667 -41.333 OFFCURVE",
"-134.333 -26.333 OFFCURVE",
"-89 -15 CURVE",
"-156 36 LINE",
"-249.333 12 OFFCURVE",
"-315 -33.667 OFFCURVE",
"-315 -71 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */\01212 1 3 0 22 21 2 1 3 2 74 11 3 2 3 0 72 0 0 0 3 1 0 3 99 0 1 2 2 1 87 0 1 1 2 91 0 2 1 2 79 21 37 39 40 4 6 24 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0944;
unicode = 0944;
},
{
glyphname = "lVocalicMatra-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"20 -395 LINE",
"-13.333 -424.333 OFFCURVE",
"-41.333 -439 OFFCURVE",
"-64 -439 CURVE SMOOTH",
"-101.333 -439 OFFCURVE",
"-131 -421.333 OFFCURVE",
"-131 -400 CURVE SMOOTH",
"-131 -380 OFFCURVE",
"-113.333 -367.333 OFFCURVE",
"-76 -350 CURVE SMOOTH",
"-20 -322 OFFCURVE",
"12 -300.667 OFFCURVE",
"12 -250 CURVE SMOOTH",
"12 -195.333 OFFCURVE",
"-47 -136 OFFCURVE",
"-115 -116 CURVE",
"-115 41 LINE",
"-198 41 LINE",
"-198 -118 LINE",
"-227.333 -128.667 OFFCURVE",
"-248.667 -149 OFFCURVE",
"-262 -179 CURVE",
"-302 -139 OFFCURVE",
"-346.333 -114 OFFCURVE",
"-381 -114 CURVE SMOOTH",
"-437.229 -114 OFFCURVE",
"-493 -166.528 OFFCURVE",
"-493 -220 CURVE SMOOTH",
"-493 -248 OFFCURVE",
"-481.333 -278.5 OFFCURVE",
"-458 -311.5 CURVE SMOOTH",
"-411.333 -377.5 OFFCURVE",
"-335.333 -430 OFFCURVE",
"-278 -430 CURVE SMOOTH",
"-258 -430 OFFCURVE",
"-239.667 -423 OFFCURVE",
"-223 -409 CURVE",
"-262 -364 LINE",
"-282 -378 OFFCURVE",
"-300.667 -385 OFFCURVE",
"-318 -385 CURVE SMOOTH",
"-360.894 -385 OFFCURVE",
"-432 -313.894 OFFCURVE",
"-432 -271 CURVE SMOOTH",
"-432 -218.863 OFFCURVE",
"-386.064 -169 OFFCURVE",
"-336 -169 CURVE SMOOTH",
"-314.667 -169 OFFCURVE",
"-295 -180.333 OFFCURVE",
"-277 -203 CURVE",
"-279.667 -224.333 OFFCURVE",
"-281 -240.667 OFFCURVE",
"-281 -252 CURVE",
"-205 -277 LINE",
"-205 -185 OFFCURVE",
"-172.667 -154 OFFCURVE",
"-118 -154 CURVE SMOOTH",
"-75.333 -154 OFFCURVE",
"-39 -185.333 OFFCURVE",
"-39 -224 CURVE SMOOTH",
"-39 -249.333 OFFCURVE",
"-61.333 -265.333 OFFCURVE",
"-108 -292 CURVE SMOOTH",
"-160 -321.333 OFFCURVE",
"-187 -341.667 OFFCURVE",
"-187 -375 CURVE SMOOTH",
"-187 -423.018 OFFCURVE",
"-92.034 -478 OFFCURVE",
"-27 -478 CURVE SMOOTH",
"9 -478 OFFCURVE",
"44 -464 OFFCURVE",
"72 -440 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 71 values pushed */\01253 50 2 1 5 48 34 22 20 19 5 3 2 67 35 2 4 3 3 74 0 6 0 1 2 6 1 99 0 5 0 2 3 5 2 99 0 3 0 4 7 3 4 99 0 7 0 0 7 87 0 7 7 0 91 0 0 7 0 79 44 21 38 35 38 38 43 34 8 6 28 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0962;
unicode = 0962;
},
{
glyphname = "llVocalicMatra-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"164 -435 LINE",
"127.333 -463.667 OFFCURVE",
"91.667 -478 OFFCURVE",
"57 -478 CURVE SMOOTH",
"38.333 -478 OFFCURVE",
"19 -471.667 OFFCURVE",
"19 -461 CURVE SMOOTH",
"19 -443.667 OFFCURVE",
"53.333 -421.667 OFFCURVE",
"88 -411 CURVE",
"63 -376 LINE",
"41 -388 OFFCURVE",
"19.333 -394 OFFCURVE",
"-2 -394 CURVE SMOOTH",
"-19.333 -394 OFFCURVE",
"-30 -388.333 OFFCURVE",
"-30 -379 CURVE SMOOTH",
"-30 -370.333 OFFCURVE",
"-24.833 -362.667 OFFCURVE",
"-14.5 -356 CURVE SMOOTH",
"-4.167 -349.333 OFFCURVE",
"12.333 -340.667 OFFCURVE",
"35 -330 CURVE SMOOTH",
"96.333 -302 OFFCURVE",
"130 -281.667 OFFCURVE",
"130 -247 CURVE SMOOTH",
"130 -187.88 OFFCURVE",
"22.93 -110 OFFCURVE",
"-40 -110 CURVE SMOOTH",
"-68 -110 OFFCURVE",
"-93 -119 OFFCURVE",
"-115 -137 CURVE",
"-115 41 LINE",
"-198 41 LINE",
"-198 -138 LINE",
"-222.667 -122 OFFCURVE",
"-245 -114 OFFCURVE",
"-265 -114 CURVE SMOOTH",
"-320.607 -114 OFFCURVE",
"-378 -166.839 OFFCURVE",
"-378 -220 CURVE SMOOTH",
"-378 -248 OFFCURVE",
"-366.333 -278.5 OFFCURVE",
"-343 -311.5 CURVE SMOOTH",
"-296.333 -377.5 OFFCURVE",
"-220.667 -430 OFFCURVE",
"-162 -430 CURVE SMOOTH",
"-142.667 -430 OFFCURVE",
"-125 -423 OFFCURVE",
"-109 -409 CURVE",
"-148 -364 LINE",
"-168.667 -378 OFFCURVE",
"-186.667 -385 OFFCURVE",
"-202 -385 CURVE SMOOTH",
"-244.894 -385 OFFCURVE",
"-316 -313.894 OFFCURVE",
"-316 -271 CURVE SMOOTH",
"-316 -217.667 OFFCURVE",
"-269.667 -170 OFFCURVE",
"-219 -170 CURVE SMOOTH",
"-199 -170 OFFCURVE",
"-177 -183 OFFCURVE",
"-161 -203 CURVE",
"-164.333 -224.333 OFFCURVE",
"-166 -240.667 OFFCURVE",
"-166 -252 CURVE",
"-89 -277 LINE",
"-89 -195.667 OFFCURVE",
"-52.667 -154 OFFCURVE",
"-2 -154 CURVE SMOOTH",
"43.333 -154 OFFCURVE",
"81 -183 OFFCURVE",
"81 -219 CURVE SMOOTH",
"81 -228.333 OFFCURVE",
"74.5 -237.5 OFFCURVE",
"61.5 -246.5 CURVE SMOOTH",
"48.5 -255.5 OFFCURVE",
"29.333 -266.667 OFFCURVE",
"4 -280 CURVE SMOOTH",
"-25.333 -296 OFFCURVE",
"-47.167 -309.167 OFFCURVE",
"-61.5 -319.5 CURVE SMOOTH",
"-75.833 -329.833 OFFCURVE",
"-83 -340.667 OFFCURVE",
"-83 -352 CURVE SMOOTH",
"-83 -385.333 OFFCURVE",
"-52 -412.667 OFFCURVE",
"-4 -414 CURVE",
"-26.667 -424 OFFCURVE",
"-38 -435 OFFCURVE",
"-38 -447 CURVE SMOOTH",
"-38 -482.117 OFFCURVE",
"40.237 -513 OFFCURVE",
"99 -513 CURVE SMOOTH",
"139 -513 OFFCURVE",
"178 -499.333 OFFCURVE",
"206 -474 CURVE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01212 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 26 values pushed */\01255 52 2 2 6 72 67 39 27 25 24 6 4 3 73 40 2 1 9 81 76 2 10 5 4 74 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 26 values pushed */\01255 52 2 2 6 72 67 39 27 25 24 6 4 3 73 40 2 1 4 81 76 2 10 5 4 74 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 26 values pushed */\01255 52 2 2 6 72 67 39 27 25 24 6 4 3 73 40 2 1 9 81 76 2 10 5 4 74 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01212 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 52 values pushed */\0120 7 6 7 114 0 2 3 6 2 87 8 1 6 0 3 4 6 3 99 0 9 0 1 5 9 1 99 0 4 0 5 10 4 5 99 0 10 0 0 10 87 0 10 10 0 91 0 0 10 0 79 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 51 values pushed */\0120 7 6 7 114 0 2 3 6 2 87 8 1 6 0 3 4 6 3 99 0 1 5 4 1 87 9 1 4 0 5 10 4 5 99 0 10 0 0 10 87 0 10 10 0 91 0 0 10 0 79 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 52 values pushed */\0120 7 6 7 114 0 2 3 6 2 87 8 1 6 0 3 4 6 3 99 0 9 0 1 5 9 1 99 0 4 0 5 10 4 5 99 0 10 0 0 10 87 0 10 10 0 91 0 0 10 0 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 16 values pushed */\01280 78 71 69 34 18 38 35 37 39 42 21 34 11 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0963;
unicode = 0963;
},
{
glyphname = "eCandraMatra-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-366 936 LINE",
"-322 828 OFFCURVE",
"-238.667 757 OFFCURVE",
"-156 757 CURVE SMOOTH",
"-65.333 757 OFFCURVE",
"17 819.667 OFFCURVE",
"49 913 CURVE",
"-16 957 LINE",
"-46.667 877 OFFCURVE",
"-111 826 OFFCURVE",
"-183 826 CURVE SMOOTH",
"-247 826 OFFCURVE",
"-306 875.333 OFFCURVE",
"-338 950 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */\01213 12 6 5 4 0 72 0 0 1 1 0 87 0 0 0 1 91 0 1 0 1 79 37 33 2 6 22 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0945;
unicode = 0945;
},
{
glyphname = "candraBindu-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-172 1038 LINE",
"-247 971 LINE",
"-172 906 LINE",
"-99 971 LINE"
);
},
{
closed = 1;
nodes = (
"-366 936 LINE",
"-322 828 OFFCURVE",
"-238.667 757 OFFCURVE",
"-156 757 CURVE SMOOTH",
"-65.333 757 OFFCURVE",
"17 819.667 OFFCURVE",
"49 913 CURVE",
"-16 957 LINE",
"-46.667 877 OFFCURVE",
"-111 826 OFFCURVE",
"-183 826 CURVE SMOOTH",
"-247 826 OFFCURVE",
"-306 875.333 OFFCURVE",
"-338 950 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */\01217 16 10 9 3 2 1 7 0 72 0 0 1 1 0 87 0 0 0 1 91 0 1 0 1 79 37 37 2 6 22 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0901;
unicode = 0901;
},
{
glyphname = "eShortMatra-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-629 1014 LINE",
"-623.667 973.333 OFFCURVE",
"-609 938.833 OFFCURVE",
"-585 910.5 CURVE SMOOTH",
"-537 853.833 OFFCURVE",
"-462.667 826 OFFCURVE",
"-384 826 CURVE SMOOTH",
"-344.667 826 OFFCURVE",
"-309 819.833 OFFCURVE",
"-277 807.5 CURVE SMOOTH",
"-213 782.833 OFFCURVE",
"-173 738.333 OFFCURVE",
"-173 689 CURVE",
"-140 689 LINE",
"-140 734.333 OFFCURVE",
"-151 773.333 OFFCURVE",
"-173 806 CURVE SMOOTH",
"-217 871.333 OFFCURVE",
"-296.667 906 OFFCURVE",
"-390 906 CURVE SMOOTH",
"-499.333 906 OFFCURVE",
"-586 950 OFFCURVE",
"-598 1014 CURVE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01245 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 19 values pushed */\0120 0 0 2 1 0 2 99 0 3 3 23 75 0 1 1 25 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 19 values pushed */\0120 3 0 3 114 0 0 0 2 1 0 2 99 0 1 1 25 1 76 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 7 values pushed */\01219 35 19 33 4 6 24 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0946;
unicode = 0946;
},
{
glyphname = "eMatra-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-605 982 LINE",
"-555.667 911.333 OFFCURVE",
"-506.333 868 OFFCURVE",
"-469 868 CURVE SMOOTH",
"-463 868 OFFCURVE",
"-448 872 OFFCURVE",
"-424 880 CURVE",
"-402 888.667 OFFCURVE",
"-386.333 893 OFFCURVE",
"-377 893 CURVE SMOOTH",
"-357 893 OFFCURVE",
"-328.333 870 OFFCURVE",
"-291 824 CURVE SMOOTH",
"-174 689 LINE",
"-136 689 LINE",
"-316 910 LINE SMOOTH",
"-353.333 955.333 OFFCURVE",
"-389.333 982 OFFCURVE",
"-416 982 CURVE SMOOTH",
"-427.333 982 OFFCURVE",
"-443 977 OFFCURVE",
"-463 967 CURVE",
"-487 956.333 OFFCURVE",
"-501.333 950 OFFCURVE",
"-520 950 CURVE SMOOTH",
"-540 950 OFFCURVE",
"-564.667 971 OFFCURVE",
"-582 1003 CURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 5 values pushed */\01223 22 2 1 72 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01224 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 33 values pushed */\0120 0 1 3 1 0 3 112 0 3 4 1 3 4 110 0 4 2 1 4 2 110 0 1 1 23 75 0 2 2 25 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 26 values pushed */\0120 1 0 1 114 0 0 3 0 114 0 3 4 3 114 0 4 2 4 114 0 2 2 25 2 76 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01234 34 19 35 33 5 6 25 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0947;
unicode = 0947;
},
{
glyphname = "eMatra_anusvara-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-156 1003 LINE",
"-231 936 LINE",
"-156 871 LINE",
"-82 936 LINE"
);
},
{
closed = 1;
nodes = (
"-605 982 LINE",
"-555.667 911.333 OFFCURVE",
"-506.333 868 OFFCURVE",
"-469 868 CURVE SMOOTH",
"-463 868 OFFCURVE",
"-448 872 OFFCURVE",
"-424 880 CURVE",
"-402 888.667 OFFCURVE",
"-386.333 893 OFFCURVE",
"-377 893 CURVE SMOOTH",
"-357 893 OFFCURVE",
"-328.333 870 OFFCURVE",
"-291 824 CURVE SMOOTH",
"-174 689 LINE",
"-136 689 LINE",
"-316 910 LINE SMOOTH",
"-353.333 955.333 OFFCURVE",
"-389.333 982 OFFCURVE",
"-416 982 CURVE SMOOTH",
"-427.333 982 OFFCURVE",
"-443 977 OFFCURVE",
"-463 967 CURVE",
"-487 956.333 OFFCURVE",
"-501.333 950 OFFCURVE",
"-520 950 CURVE SMOOTH",
"-540 950 OFFCURVE",
"-564.667 971 OFFCURVE",
"-582 1003 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */\0123 1 2 3 0 2 1 4 3 2 74 27 26 2 1 72 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01228 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 30 values pushed */\0120 1 0 1 114 0 3 0 4 0 3 4 112 0 4 2 0 4 2 110 0 2 2 113 0 0 0 52 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 24 values pushed */\0120 1 0 1 114 0 0 3 0 114 0 3 4 3 114 0 4 2 4 114 0 2 2 105 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01234 34 19 35 37 5 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni09470902;
},
{
glyphname = "eMatra_reph-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-234.929 1008 OFFCURVE",
"-297 937.61 OFFCURVE",
"-297 877 CURVE SMOOTH",
"-297 873 LINE",
"-327 910 LINE SMOOTH",
"-363 955.333 OFFCURVE",
"-398 982 OFFCURVE",
"-426 982 CURVE SMOOTH",
"-438 982 OFFCURVE",
"-453.333 977 OFFCURVE",
"-472 967 CURVE",
"-498.667 955 OFFCURVE",
"-511.333 950 OFFCURVE",
"-530 950 CURVE SMOOTH",
"-550 950 OFFCURVE",
"-574.667 971 OFFCURVE",
"-592 1003 CURVE",
"-616 982 LINE",
"-565.333 911.333 OFFCURVE",
"-516.667 868 OFFCURVE",
"-478 868 CURVE SMOOTH",
"-472 868 OFFCURVE",
"-457.667 872 OFFCURVE",
"-435 880 CURVE SMOOTH",
"-409 888.667 OFFCURVE",
"-392.667 893 OFFCURVE",
"-386 893 CURVE SMOOTH",
"-366.667 893 OFFCURVE",
"-338.333 870 OFFCURVE",
"-301 824 CURVE SMOOTH",
"-184 689 LINE",
"-128 689 LINE",
"-182.667 734.333 OFFCURVE",
"-213 783.667 OFFCURVE",
"-213 825 CURVE SMOOTH",
"-213 875.503 OFFCURVE",
"-171.043 931 OFFCURVE",
"-125 931 CURVE SMOOTH",
"-107.667 931 OFFCURVE",
"-92 923 OFFCURVE",
"-78 907 CURVE",
"-55 928 LINE",
"-96.333 978.667 OFFCURVE",
"-141.333 1008 OFFCURVE",
"-176 1008 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */\01224 1 5 6 3 2 2 2 0 36 1 3 2 3 74 23 1 5 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01228 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 44 values pushed */\0120 5 6 4 6 5 4 112 0 0 4 2 4 0 2 112 0 2 3 4 2 3 110 0 3 1 4 3 1 110 7 1 6 0 1 6 1 93 0 4 4 52 4 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 54 values pushed */\0120 5 6 4 6 5 4 112 0 4 0 6 4 0 110 0 0 2 6 0 2 110 0 2 3 6 2 3 110 0 3 1 6 3 1 110 7 1 6 5 1 6 87 7 1 6 6 1 89 0 1 6 1 77 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 15 values pushed */\0120 0 0 41 0 40 35 37 34 34 22 36 8 7 26 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni09470930094D;
},
{
glyphname = "eMatra_reph_anusvara-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-213 875.503 OFFCURVE",
"-171.043 931 OFFCURVE",
"-125 931 CURVE SMOOTH",
"-107.667 931 OFFCURVE",
"-92 923 OFFCURVE",
"-78 907 CURVE",
"-55 928 LINE",
"-96.333 978.667 OFFCURVE",
"-141.333 1008 OFFCURVE",
"-176 1008 CURVE SMOOTH",
"-234.929 1008 OFFCURVE",
"-297 937.61 OFFCURVE",
"-297 877 CURVE SMOOTH",
"-297 873 LINE",
"-327 910 LINE SMOOTH",
"-363 955.333 OFFCURVE",
"-398 982 OFFCURVE",
"-426 982 CURVE SMOOTH",
"-438 982 OFFCURVE",
"-453.333 977 OFFCURVE",
"-472 967 CURVE",
"-498.667 955 OFFCURVE",
"-511.333 950 OFFCURVE",
"-530 950 CURVE SMOOTH",
"-550 950 OFFCURVE",
"-574.667 971 OFFCURVE",
"-592 1003 CURVE",
"-616 982 LINE",
"-565.333 911.333 OFFCURVE",
"-516.667 868 OFFCURVE",
"-478 868 CURVE SMOOTH",
"-472 868 OFFCURVE",
"-457.667 872 OFFCURVE",
"-435 880 CURVE SMOOTH",
"-409 888.667 OFFCURVE",
"-392.667 893 OFFCURVE",
"-386 893 CURVE SMOOTH",
"-366.667 893 OFFCURVE",
"-338.333 870 OFFCURVE",
"-301 824 CURVE SMOOTH",
"-184 689 LINE",
"-128 689 LINE",
"-182.667 734.333 OFFCURVE",
"-213 783.667 OFFCURVE",
"-213 825 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"-10 810 LINE",
"-82 876 LINE",
"-155 810 LINE",
"-82 745 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */\01214 1 4 5 35 34 2 1 6 45 26 2 2 1 44 43 2 0 2 4 74 13 1 4 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01228 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 43 values pushed */\0120 4 5 3 5 4 3 112 0 6 3 1 3 6 1 112 0 1 2 3 1 2 110 0 2 0 3 2 0 110 0 5 0 0 5 0 93 0 3 3 52 3 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 52 values pushed */\0120 4 5 3 5 4 3 112 0 3 6 5 3 6 110 0 6 1 5 6 1 110 0 1 2 5 1 2 110 0 2 0 5 2 0 110 0 5 4 0 5 87 0 5 5 0 89 0 0 5 0 77 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 10 values pushed */\01236 39 35 37 34 34 18 7 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni09470930094D0902;
},
{
glyphname = "aiMatra-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-631 904 LINE",
"-585.667 850.667 OFFCURVE",
"-541.667 818 OFFCURVE",
"-511 818 CURVE SMOOTH",
"-505 818 OFFCURVE",
"-490.667 821.333 OFFCURVE",
"-468 828 CURVE",
"-450 834 OFFCURVE",
"-437.333 837 OFFCURVE",
"-430 837 CURVE SMOOTH",
"-407.333 837 OFFCURVE",
"-380.667 826.333 OFFCURVE",
"-350 805 CURVE SMOOTH",
"-184 689 LINE",
"-127 689 LINE",
"-214 924 LINE SMOOTH",
"-235.333 980 OFFCURVE",
"-272 1017 OFFCURVE",
"-308 1017 CURVE SMOOTH",
"-313.333 1017 OFFCURVE",
"-328 1015 OFFCURVE",
"-352 1011 CURVE SMOOTH",
"-376 1007 OFFCURVE",
"-391.333 1005 OFFCURVE",
"-398 1005 CURVE SMOOTH",
"-426 1005 OFFCURVE",
"-452.667 1016.333 OFFCURVE",
"-466 1035 CURVE",
"-491 1017 LINE",
"-452.333 959.667 OFFCURVE",
"-404.333 923 OFFCURVE",
"-371 923 CURVE SMOOTH",
"-365.667 923 OFFCURVE",
"-352.333 925 OFFCURVE",
"-331 929 CURVE",
"-325 929.667 OFFCURVE",
"-318.5 930.667 OFFCURVE",
"-311.5 932 CURVE SMOOTH",
"-304.5 933.333 OFFCURVE",
"-298.333 934 OFFCURVE",
"-293 934 CURVE SMOOTH",
"-269 934 OFFCURVE",
"-243.667 904.333 OFFCURVE",
"-229 863 CURVE",
"-170 714 LINE",
"-377 874 LINE SMOOTH",
"-417.667 904 OFFCURVE",
"-447.333 919 OFFCURVE",
"-466 919 CURVE SMOOTH",
"-472.667 919 OFFCURVE",
"-488.333 915.333 OFFCURVE",
"-513 908 CURVE SMOOTH",
"-539.667 900 OFFCURVE",
"-556.667 896 OFFCURVE",
"-564 896 CURVE SMOOTH",
"-577.333 896 OFFCURVE",
"-599 907.667 OFFCURVE",
"-611 925 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */\01245 1 3 2 44 1 0 1 9 1 6 8 3 74 22 21 2 5 72 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01211 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 50 values pushed */\0120 0 1 7 1 0 7 112 0 8 7 6 7 8 6 112 0 1 0 7 8 1 7 99 0 2 2 5 91 0 5 5 30 75 0 3 3 4 91 0 4 4 23 75 0 6 6 25 6 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01212 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 50 values pushed */\0120 0 1 7 1 0 7 112 0 8 7 6 7 8 6 112 0 1 0 7 8 1 7 99 0 2 2 5 91 0 5 5 23 75 0 3 3 4 91 0 4 4 23 75 0 6 6 25 6 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01239 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 50 values pushed */\0120 0 1 7 1 0 7 112 0 8 7 6 7 8 6 112 0 1 0 7 8 1 7 99 0 2 2 5 91 0 5 5 30 75 0 3 3 4 91 0 4 4 30 75 0 6 6 25 6 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 48 values pushed */\0120 0 1 7 1 0 7 112 0 8 7 6 7 8 6 112 0 5 0 2 3 5 2 99 0 1 0 7 8 1 7 99 0 3 3 4 91 0 4 4 30 75 0 6 6 25 6 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 12 values pushed */\01234 34 19 34 37 36 21 34 33 9 6 29 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0948;
unicode = 0948;
},
{
glyphname = "aiMatra_anusvara-deva";
layers = (
{
components = (
{
alignment = -1;
name = "aiMatra-deva";
},
{
alignment = -1;
name = "anusvara-deva";
transform = "{1, 0, 0, 1, 88, 0}";
}
);
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 0;
}
);
note = uni09480902;
},
{
glyphname = "aiMatra_reph-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-631 904 LINE",
"-585.667 850.667 OFFCURVE",
"-541.667 818 OFFCURVE",
"-511 818 CURVE SMOOTH",
"-504.333 818 OFFCURVE",
"-489 821.333 OFFCURVE",
"-465 828 CURVE SMOOTH",
"-444.333 834 OFFCURVE",
"-430.667 837 OFFCURVE",
"-424 837 CURVE SMOOTH",
"-405.333 837 OFFCURVE",
"-380.667 826.333 OFFCURVE",
"-350 805 CURVE SMOOTH",
"-185 689 LINE",
"-126 689 LINE",
"-152 773 LINE SMOOTH",
"-160 798.333 OFFCURVE",
"-164 817.667 OFFCURVE",
"-164 831 CURVE SMOOTH",
"-164 892.227 OFFCURVE",
"-97.9 959 OFFCURVE",
"-38 959 CURVE SMOOTH",
"-22 959 OFFCURVE",
"-4.667 949 OFFCURVE",
"10 933 CURVE",
"32 955 LINE",
"-5.333 999 OFFCURVE",
"-52.333 1026 OFFCURVE",
"-91 1026 CURVE SMOOTH",
"-147 1026 OFFCURVE",
"-198.667 988.333 OFFCURVE",
"-224 935 CURVE",
"-246.667 984.333 OFFCURVE",
"-280.333 1017 OFFCURVE",
"-307 1017 CURVE SMOOTH",
"-312.333 1017 OFFCURVE",
"-327.667 1015 OFFCURVE",
"-353 1011 CURVE SMOOTH",
"-377 1007 OFFCURVE",
"-392 1005 OFFCURVE",
"-398 1005 CURVE SMOOTH",
"-426 1005 OFFCURVE",
"-451.667 1016.333 OFFCURVE",
"-465 1035 CURVE",
"-490 1017 LINE",
"-451.333 959.667 OFFCURVE",
"-403.667 923 OFFCURVE",
"-369 923 CURVE SMOOTH",
"-363.667 923 OFFCURVE",
"-358 923.667 OFFCURVE",
"-352 925 CURVE SMOOTH",
"-346 926.333 OFFCURVE",
"-340.333 927.333 OFFCURVE",
"-335 928 CURVE",
"-315 932 OFFCURVE",
"-302.333 934 OFFCURVE",
"-297 934 CURVE SMOOTH",
"-273 934 OFFCURVE",
"-245.667 904.667 OFFCURVE",
"-227 858 CURVE SMOOTH",
"-169 714 LINE",
"-377 874 LINE SMOOTH",
"-417.667 904 OFFCURVE",
"-447.333 919 OFFCURVE",
"-466 919 CURVE SMOOTH",
"-472.667 919 OFFCURVE",
"-488.333 915.333 OFFCURVE",
"-513 908 CURVE SMOOTH",
"-539.667 900 OFFCURVE",
"-556.667 896 OFFCURVE",
"-564 896 CURVE SMOOTH",
"-577.333 896 OFFCURVE",
"-599 907.667 OFFCURVE",
"-611 925 CURVE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0129 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 25 values pushed */\01238 32 2 2 7 61 39 2 1 2 60 1 0 1 9 1 8 10 4 74 22 21 2 5 72 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 25 values pushed */\01238 32 2 2 7 61 39 2 3 2 60 1 0 1 9 1 8 10 4 74 22 21 2 5 72 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01222 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 25 values pushed */\01238 32 2 2 7 61 39 2 1 2 60 1 0 1 9 1 8 10 4 74 22 21 2 5 72 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 25 values pushed */\01238 32 2 2 7 61 39 2 3 2 60 1 0 1 9 1 8 10 4 74 22 21 2 5 72 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 29 values pushed */\01238 32 2 2 7 61 39 2 3 2 60 1 0 1 9 1 8 10 4 74 21 1 5 1 73 22 1 6 72 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0129 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 49 values pushed */\0120 0 1 9 1 0 9 112 0 9 10 2 9 102 0 10 8 1 10 8 110 0 8 8 113 6 1 5 0 7 2 5 7 99 0 4 3 1 2 1 4 2 99 0 1 1 44 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 54 values pushed */\0120 0 1 9 1 0 9 112 0 9 10 3 9 102 0 10 8 1 10 8 110 0 8 8 113 0 7 2 5 7 87 6 1 5 0 2 3 5 2 99 0 4 0 3 1 4 3 99 0 1 1 44 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01212 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 49 values pushed */\0120 0 1 9 1 0 9 112 0 9 10 2 9 102 0 10 8 1 10 8 110 0 8 8 113 6 1 5 0 7 2 5 7 99 0 4 3 1 2 1 4 2 99 0 1 1 44 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01222 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 50 values pushed */\0120 0 1 9 1 0 9 112 0 9 10 1 9 10 110 0 10 8 1 10 8 110 0 8 8 113 6 1 5 0 7 2 5 7 99 0 4 3 1 2 1 4 2 99 0 1 1 44 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 55 values pushed */\0120 0 1 9 1 0 9 112 0 9 10 1 9 10 110 0 10 8 1 10 8 110 0 8 8 113 0 7 2 5 7 87 6 1 5 0 2 3 5 2 99 0 4 0 3 1 4 3 99 0 1 1 44 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 56 values pushed */\0120 0 1 9 1 0 9 112 0 9 10 1 9 10 110 0 10 8 1 10 8 110 0 8 8 113 0 6 0 7 2 6 7 99 0 5 0 2 3 5 2 99 0 4 0 3 1 4 3 99 0 1 1 44 1 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 16 values pushed */\01258 56 54 52 22 37 36 34 37 36 21 34 33 11 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni09480930094D;
},
{
glyphname = "aiMatra_reph_anusvara-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-631 904 LINE",
"-585.667 850.667 OFFCURVE",
"-541.667 818 OFFCURVE",
"-511 818 CURVE SMOOTH",
"-504.333 818 OFFCURVE",
"-489 821.333 OFFCURVE",
"-465 828 CURVE SMOOTH",
"-444.333 834 OFFCURVE",
"-430.667 837 OFFCURVE",
"-424 837 CURVE SMOOTH",
"-405.333 837 OFFCURVE",
"-380.667 826.333 OFFCURVE",
"-350 805 CURVE SMOOTH",
"-185 689 LINE",
"-126 689 LINE",
"-152 773 LINE SMOOTH",
"-160 798.333 OFFCURVE",
"-164 817.667 OFFCURVE",
"-164 831 CURVE SMOOTH",
"-164 892.227 OFFCURVE",
"-97.9 959 OFFCURVE",
"-38 959 CURVE SMOOTH",
"-22 959 OFFCURVE",
"-4.667 949 OFFCURVE",
"10 933 CURVE",
"32 955 LINE",
"-5.333 999 OFFCURVE",
"-52.333 1026 OFFCURVE",
"-91 1026 CURVE SMOOTH",
"-147 1026 OFFCURVE",
"-198.667 988.333 OFFCURVE",
"-224 935 CURVE",
"-246.667 984.333 OFFCURVE",
"-280.333 1017 OFFCURVE",
"-307 1017 CURVE SMOOTH",
"-312.333 1017 OFFCURVE",
"-327.667 1015 OFFCURVE",
"-353 1011 CURVE SMOOTH",
"-377 1007 OFFCURVE",
"-392 1005 OFFCURVE",
"-398 1005 CURVE SMOOTH",
"-426 1005 OFFCURVE",
"-451.667 1016.333 OFFCURVE",
"-465 1035 CURVE",
"-490 1017 LINE",
"-451.333 959.667 OFFCURVE",
"-403.667 923 OFFCURVE",
"-369 923 CURVE SMOOTH",
"-363.667 923 OFFCURVE",
"-358 923.667 OFFCURVE",
"-352 925 CURVE SMOOTH",
"-346 926.333 OFFCURVE",
"-340.333 927.333 OFFCURVE",
"-335 928 CURVE",
"-315 932 OFFCURVE",
"-302.333 934 OFFCURVE",
"-297 934 CURVE SMOOTH",
"-273 934 OFFCURVE",
"-245.667 904.667 OFFCURVE",
"-227 858 CURVE SMOOTH",
"-169 714 LINE",
"-377 874 LINE SMOOTH",
"-417.667 904 OFFCURVE",
"-447.333 919 OFFCURVE",
"-466 919 CURVE SMOOTH",
"-472.667 919 OFFCURVE",
"-488.333 915.333 OFFCURVE",
"-513 908 CURVE SMOOTH",
"-539.667 900 OFFCURVE",
"-556.667 896 OFFCURVE",
"-564 896 CURVE SMOOTH",
"-577.333 896 OFFCURVE",
"-599 907.667 OFFCURVE",
"-611 925 CURVE"
);
},
{
closed = 1;
nodes = (
"-27 876 LINE",
"-100 810 LINE",
"-27 745 LINE",
"44 810 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0129 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 28 values pushed */\01238 32 2 2 7 61 39 2 1 2 60 1 0 1 65 64 63 9 4 8 10 4 74 22 21 2 5 72 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 28 values pushed */\01238 32 2 2 7 61 39 2 3 2 60 1 0 1 65 64 63 9 4 8 10 4 74 22 21 2 5 72 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01222 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 28 values pushed */\01238 32 2 2 7 61 39 2 1 2 60 1 0 1 65 64 63 9 4 8 10 4 74 22 21 2 5 72 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 28 values pushed */\01238 32 2 2 7 61 39 2 3 2 60 1 0 1 65 64 63 9 4 8 10 4 74 22 21 2 5 72 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 32 values pushed */\01238 32 2 2 7 61 39 2 3 2 60 1 0 1 65 64 63 9 4 8 10 4 74 21 1 5 1 73 22 1 6 72 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0129 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 49 values pushed */\0120 0 1 9 1 0 9 112 0 9 10 2 9 102 0 10 8 1 10 8 110 0 8 8 113 6 1 5 0 7 2 5 7 99 0 4 3 1 2 1 4 2 99 0 1 1 44 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 54 values pushed */\0120 0 1 9 1 0 9 112 0 9 10 3 9 102 0 10 8 1 10 8 110 0 8 8 113 0 7 2 5 7 87 6 1 5 0 2 3 5 2 99 0 4 0 3 1 4 3 99 0 1 1 44 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01212 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 49 values pushed */\0120 0 1 9 1 0 9 112 0 9 10 2 9 102 0 10 8 1 10 8 110 0 8 8 113 6 1 5 0 7 2 5 7 99 0 4 3 1 2 1 4 2 99 0 1 1 44 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01222 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 50 values pushed */\0120 0 1 9 1 0 9 112 0 9 10 1 9 10 110 0 10 8 1 10 8 110 0 8 8 113 6 1 5 0 7 2 5 7 99 0 4 3 1 2 1 4 2 99 0 1 1 44 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 55 values pushed */\0120 0 1 9 1 0 9 112 0 9 10 1 9 10 110 0 10 8 1 10 8 110 0 8 8 113 0 7 2 5 7 87 6 1 5 0 2 3 5 2 99 0 4 0 3 1 4 3 99 0 1 1 44 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 56 values pushed */\0120 0 1 9 1 0 9 112 0 9 10 1 9 10 110 0 10 8 1 10 8 110 0 8 8 113 0 6 0 7 2 6 7 99 0 5 0 2 3 5 2 99 0 4 0 3 1 4 3 99 0 1 1 44 1 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 16 values pushed */\01258 56 54 52 22 37 36 34 37 36 21 34 33 11 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni09480930094D0902;
},
{
glyphname = "anusvara-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-156 1003 LINE",
"-231 936 LINE",
"-156 871 LINE",
"-82 936 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0122 0 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0902;
unicode = 0902;
},
{
glyphname = "visarga-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"103 418 LINE",
"185 343 LINE",
"268 418 LINE",
"185 492 LINE"
);
},
{
closed = 1;
nodes = (
"185 236 LINE",
"103 163 LINE",
"183 87 LINE",
"268 163 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\0126 4 3 1 2 48 \012CALL[ ]	/* CallFunction */";
};
width = 370;
}
);
note = uni0903;
unicode = 0903;
},
{
glyphname = "halant-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"112 -287 LINE",
"-62 -136 LINE SMOOTH",
"-116.667 -91.333 OFFCURVE",
"-169 -69 OFFCURVE",
"-219 -69 CURVE SMOOTH",
"-248.333 -69 OFFCURVE",
"-274.167 -70.167 OFFCURVE",
"-296.5 -72.5 CURVE SMOOTH",
"-318.833 -74.833 OFFCURVE",
"-331.667 -76.333 OFFCURVE",
"-335 -77 CURVE",
"-283 -150 LINE",
"-232.333 -139.333 OFFCURVE",
"-190 -134 OFFCURVE",
"-156 -134 CURVE SMOOTH",
"-109.333 -134 OFFCURVE",
"-29.667 -192.333 OFFCURVE",
"83 -309 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */\0124 1 0 1 1 74 11 10 3 3 0 71 0 1 0 0 1 87 0 1 1 0 91 0 0 1 0 79 36 32 2 6 22 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni094D;
unicode = 094D;
},
{
glyphname = "nukta-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-156 72 LINE",
"-229 0 LINE",
"-156 -72 LINE",
"-84 0 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0122 0 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni093C;
unicode = 093C;
},
{
glyphname = "reph-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-302 825 OFFCURVE",
"-252.333 753 OFFCURVE",
"-175 689 CURVE",
"-138 689 LINE",
"-192.667 742.333 OFFCURVE",
"-219 783.667 OFFCURVE",
"-219 825 CURVE SMOOTH",
"-219 875.212 OFFCURVE",
"-175.41 931 OFFCURVE",
"-130 931 CURVE SMOOTH",
"-113.333 931 OFFCURVE",
"-97.667 923 OFFCURVE",
"-83 907 CURVE",
"-59 928 LINE",
"-100.333 978.667 OFFCURVE",
"-143.333 1008 OFFCURVE",
"-178 1008 CURVE SMOOTH",
"-237.52 1008 OFFCURVE",
"-302 937.701 OFFCURVE",
"-302 877 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */\0127 6 2 2 1 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0129 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 19 values pushed */\0120 1 0 2 0 1 2 112 0 2 2 0 91 0 0 0 30 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01211 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 19 values pushed */\0120 1 0 2 0 1 2 112 0 2 2 0 91 0 0 0 23 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 19 values pushed */\0120 1 0 2 0 1 2 112 0 2 2 0 91 0 0 0 30 2 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 6 values pushed */\01222 36 34 3 6 23 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0930094D;
},
{
glyphname = "reph_anusvara-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-302 825 OFFCURVE",
"-252.333 753 OFFCURVE",
"-175 689 CURVE",
"-138 689 LINE",
"-192.667 742.333 OFFCURVE",
"-219 783.667 OFFCURVE",
"-219 825 CURVE SMOOTH",
"-219 875.212 OFFCURVE",
"-175.41 931 OFFCURVE",
"-130 931 CURVE SMOOTH",
"-113.333 931 OFFCURVE",
"-97.667 923 OFFCURVE",
"-83 907 CURVE",
"-59 928 LINE",
"-100.333 978.667 OFFCURVE",
"-143.333 1008 OFFCURVE",
"-178 1008 CURVE SMOOTH",
"-237.52 1008 OFFCURVE",
"-302 937.701 OFFCURVE",
"-302 877 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"-84 873 LINE",
"-157 807 LINE",
"-84 743 LINE",
"-13 807 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */\01224 23 22 7 6 5 2 1 1 74 0 1 0 2 0 1 2 112 0 0 1 2 0 87 0 0 0 2 89 0 2 0 2 77 22 36 34 3 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0930094D0902;
},
{
glyphname = "rakar-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-88 -247 LINE",
"-261 -28 LINE",
"-300 -28 LINE",
"-411 -171 LINE SMOOTH",
"-428.333 -193.667 OFFCURVE",
"-442.333 -205 OFFCURVE",
"-453 -205 CURVE SMOOTH",
"-456.333 -205 OFFCURVE",
"-463 -202 OFFCURVE",
"-473 -196 CURVE",
"-499 -177 LINE",
"-514 -200 LINE",
"-476 -229 LINE",
"-454.667 -243.667 OFFCURVE",
"-438.667 -253.667 OFFCURVE",
"-428 -259 CURVE SMOOTH",
"-417.333 -264.333 OFFCURVE",
"-408 -266.667 OFFCURVE",
"-400 -266 CURVE",
"-386.667 -266 OFFCURVE",
"-370.333 -251.333 OFFCURVE",
"-349 -226 CURVE",
"-253 -103 LINE",
"-122 -271 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */\01211 10 2 3 1 2 1 74 1 1 0 71 0 2 1 2 114 0 1 0 1 114 0 0 0 105 18 39 21 3 6 23 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni094D0930;
},
{
glyphname = "rakar_uMatra-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-60 -247 LINE",
"-261 -28 LINE",
"-300 -28 LINE",
"-427 -171 LINE SMOOTH",
"-437.667 -183.667 OFFCURVE",
"-445.833 -192.5 OFFCURVE",
"-451.5 -197.5 CURVE SMOOTH",
"-457.167 -202.5 OFFCURVE",
"-463 -205 OFFCURVE",
"-469 -205 CURVE SMOOTH",
"-473.667 -205 OFFCURVE",
"-480.333 -202 OFFCURVE",
"-489 -196 CURVE SMOOTH",
"-515 -177 LINE",
"-530 -200 LINE",
"-491 -229 LINE SMOOTH",
"-470.333 -243.667 OFFCURVE",
"-454.667 -253.667 OFFCURVE",
"-444 -259 CURVE SMOOTH",
"-433.333 -264.333 OFFCURVE",
"-423.667 -266.667 OFFCURVE",
"-415 -266 CURVE",
"-409 -266 OFFCURVE",
"-402.333 -262.667 OFFCURVE",
"-395 -256 CURVE SMOOTH",
"-387.667 -249.333 OFFCURVE",
"-377.667 -239.333 OFFCURVE",
"-365 -226 CURVE SMOOTH",
"-253 -103 LINE",
"-95 -271 LINE"
);
},
{
closed = 1;
nodes = (
"-574 -464 LINE",
"-462 -574.667 OFFCURVE",
"-368.333 -619 OFFCURVE",
"-243 -619 CURVE SMOOTH",
"-208.333 -619 OFFCURVE",
"-175.333 -613.333 OFFCURVE",
"-144 -602 CURVE SMOOTH",
"-81.333 -579.333 OFFCURVE",
"-37 -530.333 OFFCURVE",
"-37 -457 CURVE SMOOTH",
"-37 -396.987 OFFCURVE",
"-143.858 -317 OFFCURVE",
"-229 -317 CURVE SMOOTH",
"-313 -317 OFFCURVE",
"-379.333 -365.667 OFFCURVE",
"-398 -443 CURVE",
"-320 -479 LINE",
"-300 -413.667 OFFCURVE",
"-256.333 -378 OFFCURVE",
"-199 -378 CURVE SMOOTH",
"-149.667 -378 OFFCURVE",
"-110 -417.333 OFFCURVE",
"-110 -460 CURVE SMOOTH",
"-110 -508.637 OFFCURVE",
"-204.823 -565 OFFCURVE",
"-287 -565 CURVE SMOOTH",
"-377.667 -565 OFFCURVE",
"-463.667 -521.333 OFFCURVE",
"-545 -434 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 68 values pushed */\01211 10 2 3 1 2 1 1 5 0 47 46 32 31 4 3 4 3 74 0 2 1 2 114 0 1 0 1 114 0 0 5 0 114 0 5 0 4 3 5 4 99 0 3 6 6 3 87 0 3 3 6 92 0 6 3 6 80 38 37 37 33 19 39 21 7 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni094D09300941;
},
{
glyphname = "rakar_uuMatra-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-60 -247 LINE",
"-261 -28 LINE",
"-300 -28 LINE",
"-427 -171 LINE SMOOTH",
"-437.667 -183.667 OFFCURVE",
"-445.833 -192.5 OFFCURVE",
"-451.5 -197.5 CURVE SMOOTH",
"-457.167 -202.5 OFFCURVE",
"-463 -205 OFFCURVE",
"-469 -205 CURVE SMOOTH",
"-473.667 -205 OFFCURVE",
"-480.333 -202 OFFCURVE",
"-489 -196 CURVE SMOOTH",
"-515 -177 LINE",
"-530 -200 LINE",
"-491 -229 LINE SMOOTH",
"-470.333 -243.667 OFFCURVE",
"-454.667 -253.667 OFFCURVE",
"-444 -259 CURVE SMOOTH",
"-433.333 -264.333 OFFCURVE",
"-423.667 -266.667 OFFCURVE",
"-415 -266 CURVE",
"-409 -266 OFFCURVE",
"-402.333 -262.667 OFFCURVE",
"-395 -256 CURVE SMOOTH",
"-387.667 -249.333 OFFCURVE",
"-377.667 -239.333 OFFCURVE",
"-365 -226 CURVE SMOOTH",
"-253 -103 LINE",
"-95 -271 LINE"
);
},
{
closed = 1;
nodes = (
"6 -472 LINE",
"-108.667 -360 OFFCURVE",
"-199 -317 OFFCURVE",
"-327 -317 CURVE SMOOTH",
"-361.667 -317 OFFCURVE",
"-394.667 -322.667 OFFCURVE",
"-426 -334 CURVE SMOOTH",
"-488.667 -356.667 OFFCURVE",
"-533 -404.667 OFFCURVE",
"-533 -478 CURVE SMOOTH",
"-533 -539.109 OFFCURVE",
"-426.035 -619 OFFCURVE",
"-340 -619 CURVE SMOOTH",
"-256 -619 OFFCURVE",
"-190 -569.333 OFFCURVE",
"-170 -492 CURVE",
"-250 -456 LINE",
"-267.333 -522.667 OFFCURVE",
"-311.333 -558 OFFCURVE",
"-370 -558 CURVE SMOOTH",
"-419.333 -558 OFFCURVE",
"-459 -517.333 OFFCURVE",
"-459 -476 CURVE SMOOTH",
"-459 -427.363 OFFCURVE",
"-364.177 -371 OFFCURVE",
"-282 -371 CURVE SMOOTH",
"-192 -371 OFFCURVE",
"-105.667 -414.333 OFFCURVE",
"-23 -501 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 68 values pushed */\01211 10 2 3 1 2 1 1 6 0 47 46 32 31 4 4 3 3 74 0 2 1 2 114 0 1 0 1 114 0 0 6 0 114 0 6 0 3 4 6 3 100 0 4 5 5 4 87 0 4 4 5 91 0 5 4 5 79 38 37 37 33 19 39 21 7 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni094D09300942;
},
{
glyphname = "oeMatra-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-198 948 LINE",
"-198 689 LINE",
"-115 689 LINE",
"-115 948 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */\0120 0 0 1 89 0 1 1 25 1 76 17 16 2 6 22 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni093A;
unicode = 093A;
},
{
glyphname = "ueMatra-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-374 -57 LINE",
"-312.667 -137 OFFCURVE",
"-216.333 -185 OFFCURVE",
"-123 -185 CURVE SMOOTH",
"-25.667 -185 OFFCURVE",
"62 -143 OFFCURVE",
"106 -75 CURVE",
"30 -29 LINE",
"-14 -90.333 OFFCURVE",
"-92.667 -127 OFFCURVE",
"-178 -127 CURVE SMOOTH",
"-248.667 -127 OFFCURVE",
"-311 -94.333 OFFCURVE",
"-351 -37 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */\01213 12 6 5 4 0 72 0 0 1 1 0 87 0 0 0 1 91 0 1 0 1 79 37 33 2 6 22 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0956;
unicode = 0956;
},
{
glyphname = "uueMatra-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-368 -49 LINE",
"-305.333 -122.333 OFFCURVE",
"-216.333 -167 OFFCURVE",
"-123 -167 CURVE SMOOTH",
"-15 -167 OFFCURVE",
"77.667 -124.667 OFFCURVE",
"111 -62 CURVE",
"29 -21 LINE",
"-7 -79.667 OFFCURVE",
"-81.333 -117 OFFCURVE",
"-160 -117 CURVE SMOOTH",
"-236 -117 OFFCURVE",
"-303.333 -87 OFFCURVE",
"-346 -35 CURVE"
);
},
{
closed = 1;
nodes = (
"-9 -303 OFFCURVE",
"81 -264.667 OFFCURVE",
"113 -206 CURVE",
"33 -165 LINE",
"-1.667 -221 OFFCURVE",
"-76.667 -253 OFFCURVE",
"-158 -253 CURVE SMOOTH",
"-235.333 -253 OFFCURVE",
"-303 -224.667 OFFCURVE",
"-343 -174 CURVE",
"-365 -188 LINE",
"-303.667 -261.333 OFFCURVE",
"-217 -303 OFFCURVE",
"-121 -303 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */\01223 1 1 0 24 17 16 3 2 1 2 74 13 12 6 5 4 0 72 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 20 values pushed */\0120 0 0 1 2 0 1 99 0 2 2 3 91 4 1 3 3 27 3 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 25 values pushed */\0120 0 0 1 2 0 1 99 0 2 3 3 2 87 0 2 2 3 91 4 1 3 2 3 79 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 12 values pushed */\01214 14 14 27 14 26 41 37 33 5 6 23 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0957;
unicode = 0957;
},
{
glyphname = "udatta-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-112 813 LINE",
"-112 1130 LINE",
"-200 1130 LINE",
"-200 813 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0122 0 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0951;
unicode = 0951;
},
{
glyphname = "anudatta-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-34 -78 LINE",
"-591 -78 LINE",
"-550 -139 LINE",
"13 -139 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0121 0 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0952;
unicode = 0952;
},
{
glyphname = "grave-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-113 949 LINE",
"-241 949 LINE",
"-94 678 LINE",
"-52 678 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01245 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 12 values pushed */\0122 1 1 0 1 114 0 0 0 25 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 10 values pushed */\0122 1 1 0 1 114 0 0 0 105 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 10 values pushed */\0120 0 0 3 0 3 17 3 6 21 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0953;
unicode = 0953;
},
{
glyphname = "acute-deva";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-180 960 LINE",
"-241 691 LINE",
"-200 691 LINE",
"-52 960 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */\0120 0 1 0 114 0 1 1 25 1 76 17 16 2 6 22 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0954;
unicode = 0954;
},
{
glyphname = "reph-deva.loclMAR";
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
paths = (
{
closed = 1;
nodes = (
"-434 689 LINE",
"-434 609 LINE",
"14 609 LINE",
"14 689 LINE"
);
},
{
closed = 1;
nodes = (
"-95.333 311 OFFCURVE",
"-28 337 OFFCURVE",
"28 385 CURVE",
"-27 449 LINE",
"-84.333 401 OFFCURVE",
"-155.333 374 OFFCURVE",
"-226 374 CURVE SMOOTH",
"-290 374 OFFCURVE",
"-351.333 396.333 OFFCURVE",
"-390 435 CURVE",
"-406 413 LINE",
"-343.333 346.333 OFFCURVE",
"-255.333 311 OFFCURVE",
"-162 311 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */\01214 13 7 6 4 2 1 1 74 0 0 0 1 2 0 1 97 0 2 3 3 2 87 0 2 2 3 91 4 1 3 2 3 79 4 4 4 17 4 16 38 17 16 5 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0930094D.loclMAR;
},
{
glyphname = uni0000;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 0;
}
);
note = uni0000;
unicode = 0000;
},
{
glyphname = uni0001;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 0;
}
);
note = uni0001;
unicode = 0001;
},
{
glyphname = uni0002;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 0;
}
);
note = uni0002;
unicode = 0002;
},
{
glyphname = uni0003;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 0;
}
);
note = uni0003;
unicode = 0003;
},
{
glyphname = uni0004;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 0;
}
);
note = uni0004;
unicode = 0004;
},
{
glyphname = uni0005;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 0;
}
);
note = uni0005;
unicode = 0005;
},
{
glyphname = uni0006;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 0;
}
);
note = uni0006;
unicode = 0006;
},
{
glyphname = uni0007;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 0;
}
);
note = uni0007;
unicode = 0007;
},
{
glyphname = uni0008;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 0;
}
);
note = uni0008;
unicode = 0008;
},
{
glyphname = uni0009;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 0;
}
);
note = uni0009;
unicode = 0009;
},
{
glyphname = uni000A;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 0;
}
);
note = uni000A;
unicode = 000A;
},
{
glyphname = uni000B;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 0;
}
);
note = uni000B;
unicode = 000B;
},
{
glyphname = uni000C;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 0;
}
);
note = uni000C;
unicode = 000C;
},
{
glyphname = uni000E;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 0;
}
);
note = uni000E;
unicode = 000E;
},
{
glyphname = uni000F;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 0;
}
);
note = uni000F;
unicode = 000F;
},
{
glyphname = uni0010;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 0;
}
);
note = uni0010;
unicode = 0010;
},
{
glyphname = uni0011;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 0;
}
);
note = uni0011;
unicode = 0011;
},
{
glyphname = uni0012;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 0;
}
);
note = uni0012;
unicode = 0012;
},
{
glyphname = uni0013;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 0;
}
);
note = uni0013;
unicode = 0013;
},
{
glyphname = uni0014;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 0;
}
);
note = uni0014;
unicode = 0014;
},
{
glyphname = uni0015;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 0;
}
);
note = uni0015;
unicode = 0015;
},
{
glyphname = uni0016;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 0;
}
);
note = uni0016;
unicode = 0016;
},
{
glyphname = uni0017;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 0;
}
);
note = uni0017;
unicode = 0017;
},
{
glyphname = uni0018;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 0;
}
);
note = uni0018;
unicode = 0018;
},
{
glyphname = uni0019;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 0;
}
);
note = uni0019;
unicode = 0019;
},
{
glyphname = uni001A;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 0;
}
);
note = uni001A;
unicode = 001A;
},
{
glyphname = uni001B;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 0;
}
);
note = uni001B;
unicode = 001B;
},
{
glyphname = uni001C;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 0;
}
);
note = uni001C;
unicode = 001C;
},
{
glyphname = uni001D;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 0;
}
);
note = uni001D;
unicode = 001D;
},
{
glyphname = uni001E;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 0;
}
);
note = uni001E;
unicode = 001E;
},
{
glyphname = uni001F;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 0;
}
);
note = uni001F;
unicode = 001F;
},
{
glyphname = NULL;
layers = (
{
layerId = "F9783665-9C0C-4F5A-9005-646D18F9330F";
width = 0;
}
);
note = NULL;
}
);
instances = (
{
name = Regular;
weightClass = Normal;
}
);
kerning = {
"F9783665-9C0C-4F5A-9005-646D18F9330F" = {
"@MMK_L_A" = {
"@MMK_R_V" = -5;
"@MMK_R_emdash" = -8;
"@MMK_R_v" = -19;
"@MMK_R_w" = -17;
};
"@MMK_L_AE" = {
"@MMK_R_J" = -18;
"@MMK_R_X" = -6;
"@MMK_R_b" = -6;
"@MMK_R_comma" = -14;
"@MMK_R_emdash" = -24;
"@MMK_R_f" = -10;
"@MMK_R_four" = 17;
"@MMK_R_i" = -7;
"@MMK_R_j" = -7;
"@MMK_R_lslash" = -7;
"@MMK_R_m" = -12;
"@MMK_R_p" = -12;
"@MMK_R_t" = -12;
"@MMK_R_u" = -10;
"@MMK_R_v" = -22;
"@MMK_R_w" = -24;
"@MMK_R_x" = -35;
"@MMK_R_y" = -10;
"@MMK_R_z" = -24;
};
"@MMK_L_B" = {
"@MMK_R_B" = -5;
"@MMK_R_Dcroat" = -5;
"@MMK_R_J" = -14;
"@MMK_R_M" = -5;
"@MMK_R_S" = -5;
"@MMK_R_T" = -13;
"@MMK_R_V" = -13;
"@MMK_R_W" = -12;
"@MMK_R_X" = -10;
"@MMK_R_Z" = -8;
"@MMK_R_a" = -5;
"@MMK_R_asterisk" = -17;
"@MMK_R_b" = -8;
"@MMK_R_backslash" = -13;
"@MMK_R_braceright" = -12;
"@MMK_R_comma" = -14;
"@MMK_R_f" = -10;
"@MMK_R_g" = -5;
"@MMK_R_i" = -10;
"@MMK_R_j" = -12;
"@MMK_R_lslash" = -12;
"@MMK_R_parenright" = -19;
"@MMK_R_quotedbl" = -17;
"@MMK_R_quotedblleft" = -17;
"@MMK_R_quotesingle" = -17;
"@MMK_R_s" = -8;
"@MMK_R_t" = -10;
"@MMK_R_trademark" = -17;
"@MMK_R_w" = -5;
"@MMK_R_x" = -18;
"@MMK_R_z" = -8;
};
"@MMK_L_C" = {
"@MMK_R_A" = -7;
"@MMK_R_B" = -6;
"@MMK_R_J" = -6;
"@MMK_R_a" = -25;
"@MMK_R_b" = -8;
"@MMK_R_c" = -26;
"@MMK_R_colon" = -14;
"@MMK_R_comma" = -25;
"@MMK_R_emdash" = -18;
"@MMK_R_eth" = -19;
"@MMK_R_f" = -17;
"@MMK_R_g" = -25;
"@MMK_R_guillemetleft" = -13;
"@MMK_R_guillemetright" = -16;
"@MMK_R_i" = -10;
"@MMK_R_j" = -12;
"@MMK_R_lslash" = -8;
"@MMK_R_m" = -50;
"@MMK_R_p" = -50;
"@MMK_R_s" = -46;
"@MMK_R_t" = -17;
"@MMK_R_u" = -47;
"@MMK_R_v" = -60;
"@MMK_R_w" = -58;
"@MMK_R_x" = -58;
"@MMK_R_y" = -47;
"@MMK_R_z" = -61;
};
"@MMK_L_D" = {
"@MMK_R_A" = -6;
"@MMK_R_B" = -6;
"@MMK_R_J" = -23;
"@MMK_R_M" = -5;
"@MMK_R_T" = -5;
"@MMK_R_V" = -8;
"@MMK_R_W" = -6;
"@MMK_R_X" = -19;
"@MMK_R_Z" = -5;
"@MMK_R_a" = -17;
"@MMK_R_ampersand" = -18;
"@MMK_R_at" = -17;
"@MMK_R_b" = -12;
"@MMK_R_backslash" = -14;
"@MMK_R_braceright" = -13;
"@MMK_R_bracketright" = -12;
"@MMK_R_c" = -16;
"@MMK_R_comma" = -31;
"@MMK_R_eth" = -12;
"@MMK_R_f" = -6;
"@MMK_R_g" = -17;
"@MMK_R_guillemetleft" = -26;
"@MMK_R_guillemetright" = -14;
"@MMK_R_i" = -14;
"@MMK_R_j" = -17;
"@MMK_R_lslash" = -12;
"@MMK_R_m" = -10;
"@MMK_R_p" = -10;
"@MMK_R_parenright" = -24;
"@MMK_R_s" = -20;
"@MMK_R_slash" = -16;
"@MMK_R_t" = -6;
"@MMK_R_u" = -8;
"@MMK_R_v" = -8;
"@MMK_R_w" = -8;
"@MMK_R_x" = -16;
"@MMK_R_y" = -8;
"@MMK_R_z" = -10;
};
"@MMK_L_Dcroat" = {
"@MMK_R_A" = -6;
"@MMK_R_B" = -6;
"@MMK_R_J" = -28;
"@MMK_R_M" = -5;
"@MMK_R_X" = -14;
"@MMK_R_a" = -48;
"@MMK_R_ampersand" = -18;
"@MMK_R_at" = -17;
"@MMK_R_b" = -12;
"@MMK_R_braceright" = -12;
"@MMK_R_bracketright" = -12;
"@MMK_R_c" = -43;
"@MMK_R_comma" = -70;
"@MMK_R_eth" = -31;
"@MMK_R_f" = -12;
"@MMK_R_g" = -48;
"@MMK_R_guillemetleft" = -26;
"@MMK_R_guillemetright" = -14;
"@MMK_R_i" = -17;
"@MMK_R_j" = -18;
"@MMK_R_lslash" = -14;
"@MMK_R_m" = -10;
"@MMK_R_p" = -10;
"@MMK_R_parenright" = -19;
"@MMK_R_s" = -47;
"@MMK_R_slash" = -37;
"@MMK_R_t" = -12;
"@MMK_R_u" = -8;
"@MMK_R_v" = -8;
"@MMK_R_w" = -8;
"@MMK_R_x" = -31;
"@MMK_R_y" = -8;
"@MMK_R_z" = -30;
};
"@MMK_L_F" = {
"@MMK_R_A" = -38;
"@MMK_R_B" = -6;
"@MMK_R_C" = -14;
"@MMK_R_Dcroat" = -17;
"@MMK_R_J" = -47;
"@MMK_R_M" = -5;
"@MMK_R_S" = -8;
"@MMK_R_Z" = -8;
"@MMK_R_a" = -89;
"@MMK_R_ampersand" = -43;
"@MMK_R_at" = -43;
"@MMK_R_b" = -17;
"@MMK_R_backslash" = 5;
"@MMK_R_braceright" = 38;
"@MMK_R_bracketright" = 36;
"@MMK_R_c" = -90;
"@MMK_R_colon" = -24;
"@MMK_R_comma" = -84;
"@MMK_R_eight" = -18;
"@MMK_R_emdash" = -17;
"@MMK_R_eth" = -47;
"@MMK_R_f" = -44;
"@MMK_R_four" = -31;
"@MMK_R_g" = -89;
"@MMK_R_guillemetleft" = -65;
"@MMK_R_guillemetright" = -43;
"@MMK_R_i" = -56;
"@MMK_R_j" = -56;
"@MMK_R_lslash" = -18;
"@MMK_R_m" = -62;
"@MMK_R_p" = -62;
"@MMK_R_parenright" = 49;
"@MMK_R_registered" = -16;
"@MMK_R_s" = -97;
"@MMK_R_six" = -18;
"@MMK_R_slash" = -60;
"@MMK_R_t" = -58;
"@MMK_R_two" = -12;
"@MMK_R_u" = -59;
"@MMK_R_v" = -62;
"@MMK_R_w" = -59;
"@MMK_R_x" = -74;
"@MMK_R_y" = -59;
"@MMK_R_z" = -83;
};
"@MMK_L_G" = {
"@MMK_R_a" = -8;
"@MMK_R_b" = -10;
"@MMK_R_c" = -8;
"@MMK_R_eth" = -8;
"@MMK_R_f" = -10;
"@MMK_R_g" = -8;
"@MMK_R_i" = -12;
"@MMK_R_j" = -13;
"@MMK_R_lslash" = -12;
"@MMK_R_s" = -6;
"@MMK_R_t" = -10;
"@MMK_R_v" = -5;
"@MMK_R_w" = -6;
"@MMK_R_z" = -6;
};
"@MMK_L_H" = {
"@MMK_R_A" = -5;
"@MMK_R_B" = -5;
"@MMK_R_Dcroat" = -5;
"@MMK_R_J" = -5;
"@MMK_R_a" = -19;
"@MMK_R_b" = -16;
"@MMK_R_c" = -22;
"@MMK_R_comma" = -13;
"@MMK_R_eth" = -22;
"@MMK_R_f" = -17;
"@MMK_R_g" = -19;
"@MMK_R_guillemetleft" = -10;
"@MMK_R_guillemetright" = -8;
"@MMK_R_i" = -16;
"@MMK_R_j" = -14;
"@MMK_R_lslash" = -14;
"@MMK_R_m" = -18;
"@MMK_R_p" = -18;
"@MMK_R_s" = -24;
"@MMK_R_t" = -18;
"@MMK_R_u" = -17;
"@MMK_R_v" = -19;
"@MMK_R_w" = -20;
"@MMK_R_x" = -17;
"@MMK_R_y" = -17;
"@MMK_R_z" = -25;
};
"@MMK_L_IJ" = {
"@MMK_R_A" = -18;
"@MMK_R_B" = -5;
"@MMK_R_C" = -12;
"@MMK_R_Dcroat" = -10;
"@MMK_R_J" = -8;
"@MMK_R_M" = -6;
"@MMK_R_a" = -32;
"@MMK_R_ampersand" = -17;
"@MMK_R_at" = -17;
"@MMK_R_b" = -20;
"@MMK_R_bracketright" = 8;
"@MMK_R_c" = -35;
"@MMK_R_colon" = -14;
"@MMK_R_comma" = -26;
"@MMK_R_emdash" = -17;
"@MMK_R_eth" = -34;
"@MMK_R_f" = -30;
"@MMK_R_g" = -32;
"@MMK_R_guillemetleft" = -20;
"@MMK_R_guillemetright" = -18;
"@MMK_R_i" = -29;
"@MMK_R_j" = -29;
"@MMK_R_lslash" = -23;
"@MMK_R_m" = -31;
"@MMK_R_p" = -31;
"@MMK_R_parenright" = 5;
"@MMK_R_registered" = -17;
"@MMK_R_s" = -43;
"@MMK_R_six" = -12;
"@MMK_R_slash" = -13;
"@MMK_R_t" = -31;
"@MMK_R_u" = -30;
"@MMK_R_v" = -37;
"@MMK_R_w" = -36;
"@MMK_R_x" = -30;
"@MMK_R_y" = -30;
"@MMK_R_z" = -37;
};
"@MMK_L_K" = {
"@MMK_R_A" = -12;
"@MMK_R_B" = -5;
"@MMK_R_C" = -36;
"@MMK_R_S" = -16;
"@MMK_R_b" = -6;
"@MMK_R_emdash" = -56;
"@MMK_R_f" = -6;
"@MMK_R_m" = -10;
"@MMK_R_p" = -10;
"@MMK_R_registered" = -16;
"@MMK_R_t" = -12;
"@MMK_R_u" = -12;
"@MMK_R_v" = -48;
"@MMK_R_w" = -43;
"@MMK_R_y" = -12;
"@MMK_R_z" = -10;
};
"@MMK_L_L" = {
"@MMK_R_C" = -7;
"@MMK_R_b" = -5;
"@MMK_R_emdash" = -35;
"@MMK_R_f" = -10;
"@MMK_R_i" = -7;
"@MMK_R_j" = -7;
"@MMK_R_lslash" = -7;
"@MMK_R_m" = -16;
"@MMK_R_p" = -16;
"@MMK_R_periodcentered" = -107;
"@MMK_R_t" = -13;
"@MMK_R_u" = -16;
"@MMK_R_v" = -44;
"@MMK_R_w" = -43;
"@MMK_R_x" = -16;
"@MMK_R_y" = -16;
"@MMK_R_z" = -17;
};
"@MMK_L_M" = {
"@MMK_R_V" = -6;
"@MMK_R_emdash" = -8;
"@MMK_R_v" = -18;
"@MMK_R_w" = -17;
};
"@MMK_L_P" = {
"@MMK_R_A" = -8;
"@MMK_R_B" = -5;
"@MMK_R_J" = -20;
"@MMK_R_a" = -80;
"@MMK_R_ampersand" = -23;
"@MMK_R_at" = -26;
"@MMK_R_b" = -5;
"@MMK_R_c" = -83;
"@MMK_R_colon" = -8;
"@MMK_R_comma" = -94;
"@MMK_R_eth" = -28;
"@MMK_R_f" = -8;
"@MMK_R_four" = -19;
"@MMK_R_g" = -80;
"@MMK_R_guillemetleft" = -50;
"@MMK_R_guillemetright" = -28;
"@MMK_R_i" = -8;
"@MMK_R_j" = -8;
"@MMK_R_lslash" = -6;
"@MMK_R_m" = -23;
"@MMK_R_p" = -23;
"@MMK_R_s" = -62;
"@MMK_R_seven" = 14;
"@MMK_R_slash" = -50;
"@MMK_R_t" = -8;
"@MMK_R_u" = -22;
"@MMK_R_v" = -22;
"@MMK_R_w" = -20;
"@MMK_R_x" = -47;
"@MMK_R_y" = -22;
"@MMK_R_z" = -58;
};
"@MMK_L_R" = {
"@MMK_R_A" = -7;
"@MMK_R_B" = -6;
"@MMK_R_C" = -6;
"@MMK_R_X" = -6;
"@MMK_R_a" = -6;
"@MMK_R_c" = -7;
"@MMK_R_eth" = -12;
"@MMK_R_g" = -6;
"@MMK_R_i" = -5;
"@MMK_R_j" = -5;
"@MMK_R_m" = -10;
"@MMK_R_p" = -10;
"@MMK_R_s" = -12;
"@MMK_R_t" = -7;
"@MMK_R_u" = -12;
"@MMK_R_v" = -26;
"@MMK_R_w" = -23;
"@MMK_R_x" = -20;
"@MMK_R_y" = -12;
"@MMK_R_z" = -17;
};
"@MMK_L_S" = {
"@MMK_R_B" = -6;
"@MMK_R_J" = -5;
"@MMK_R_a" = -16;
"@MMK_R_b" = -12;
"@MMK_R_c" = -16;
"@MMK_R_colon" = -8;
"@MMK_R_comma" = -17;
"@MMK_R_emdash" = -19;
"@MMK_R_eth" = -16;
"@MMK_R_f" = -22;
"@MMK_R_g" = -16;
"@MMK_R_guillemetright" = -8;
"@MMK_R_i" = -12;
"@MMK_R_j" = -13;
"@MMK_R_lslash" = -13;
"@MMK_R_m" = -29;
"@MMK_R_p" = -29;
"@MMK_R_s" = -20;
"@MMK_R_t" = -26;
"@MMK_R_u" = -28;
"@MMK_R_v" = -30;
"@MMK_R_w" = -37;
"@MMK_R_x" = -41;
"@MMK_R_y" = -28;
"@MMK_R_z" = -30;
};
"@MMK_L_T" = {
"@MMK_R_A" = -49;
"@MMK_R_B" = -6;
"@MMK_R_C" = -38;
"@MMK_R_Dcroat" = -30;
"@MMK_R_J" = -37;
"@MMK_R_S" = -12;
"@MMK_R_Z" = -6;
"@MMK_R_a" = -100;
"@MMK_R_ampersand" = -48;
"@MMK_R_at" = -55;
"@MMK_R_b" = -17;
"@MMK_R_backslash" = 19;
"@MMK_R_braceright" = 48;
"@MMK_R_bracketright" = 46;
"@MMK_R_c" = -97;
"@MMK_R_colon" = -54;
"@MMK_R_comma" = -68;
"@MMK_R_eight" = -18;
"@MMK_R_emdash" = -53;
"@MMK_R_eth" = -41;
"@MMK_R_f" = -58;
"@MMK_R_four" = -38;
"@MMK_R_g" = -100;
"@MMK_R_guillemetleft" = -58;
"@MMK_R_guillemetright" = -58;
"@MMK_R_i" = -64;
"@MMK_R_j" = -66;
"@MMK_R_lslash" = -18;
"@MMK_R_m" = -89;
"@MMK_R_nine" = -13;
"@MMK_R_p" = -89;
"@MMK_R_parenright" = 61;
"@MMK_R_registered" = -46;
"@MMK_R_s" = -103;
"@MMK_R_six" = -40;
"@MMK_R_slash" = -56;
"@MMK_R_t" = -83;
"@MMK_R_u" = -88;
"@MMK_R_v" = -83;
"@MMK_R_w" = -85;
"@MMK_R_x" = -83;
"@MMK_R_y" = -88;
"@MMK_R_z" = -92;
"@MMK_R_zero" = -23;
};
"@MMK_L_Thorn" = {
"@MMK_R_J" = -32;
"@MMK_R_X" = -23;
"@MMK_R_a" = -24;
"@MMK_R_b" = -5;
"@MMK_R_backslash" = -12;
"@MMK_R_c" = -20;
"@MMK_R_comma" = -62;
"@MMK_R_g" = -24;
"@MMK_R_guillemetleft" = -13;
"@MMK_R_i" = -8;
"@MMK_R_j" = -10;
"@MMK_R_lslash" = -6;
"@MMK_R_parenright" = -23;
"@MMK_R_s" = -20;
"@MMK_R_slash" = -25;
"@MMK_R_x" = -13;
"@MMK_R_z" = -8;
};
"@MMK_L_U" = {
"@MMK_R_C" = -8;
"@MMK_R_T" = -8;
"@MMK_R_V" = -13;
"@MMK_R_W" = -12;
"@MMK_R_asterisk" = -12;
"@MMK_R_b" = -7;
"@MMK_R_backslash" = -10;
"@MMK_R_c" = -6;
"@MMK_R_emdash" = -18;
"@MMK_R_eth" = -12;
"@MMK_R_f" = -10;
"@MMK_R_guillemetleft" = -13;
"@MMK_R_i" = -8;
"@MMK_R_j" = -8;
"@MMK_R_lslash" = -10;
"@MMK_R_m" = -10;
"@MMK_R_p" = -10;
"@MMK_R_quotedbl" = -12;
"@MMK_R_quotedblleft" = -12;
"@MMK_R_quotesingle" = -12;
"@MMK_R_registered" = -17;
"@MMK_R_t" = -12;
"@MMK_R_trademark" = -13;
"@MMK_R_u" = -8;
"@MMK_R_v" = -31;
"@MMK_R_w" = -29;
"@MMK_R_y" = -8;
};
"@MMK_L_V" = {
"@MMK_R_A" = -20;
"@MMK_R_B" = -10;
"@MMK_R_J" = -12;
"@MMK_R_a" = -68;
"@MMK_R_ampersand" = -24;
"@MMK_R_at" = -30;
"@MMK_R_b" = -6;
"@MMK_R_c" = -68;
"@MMK_R_colon" = -17;
"@MMK_R_comma" = -62;
"@MMK_R_emdash" = -8;
"@MMK_R_eth" = -24;
"@MMK_R_f" = -17;
"@MMK_R_four" = -18;
"@MMK_R_g" = -68;
"@MMK_R_guillemetleft" = -42;
"@MMK_R_guillemetright" = -30;
"@MMK_R_i" = -8;
"@MMK_R_j" = -10;
"@MMK_R_lslash" = -7;
"@MMK_R_m" = -48;
"@MMK_R_one" = 6;
"@MMK_R_p" = -48;
"@MMK_R_s" = -77;
"@MMK_R_slash" = -42;
"@MMK_R_t" = -18;
"@MMK_R_u" = -43;
"@MMK_R_v" = -48;
"@MMK_R_w" = -47;
"@MMK_R_x" = -50;
"@MMK_R_y" = -43;
"@MMK_R_z" = -64;
};
"@MMK_L_W" = {
"@MMK_R_A" = -25;
"@MMK_R_B" = -5;
"@MMK_R_J" = -17;
"@MMK_R_a" = -70;
"@MMK_R_ampersand" = -28;
"@MMK_R_at" = -32;
"@MMK_R_b" = -12;
"@MMK_R_c" = -68;
"@MMK_R_colon" = -20;
"@MMK_R_comma" = -65;
"@MMK_R_emdash" = -12;
"@MMK_R_eth" = -32;
"@MMK_R_f" = -23;
"@MMK_R_four" = -22;
"@MMK_R_g" = -70;
"@MMK_R_guillemetleft" = -43;
"@MMK_R_guillemetright" = -32;
"@MMK_R_i" = -14;
"@MMK_R_j" = -17;
"@MMK_R_lslash" = -13;
"@MMK_R_m" = -48;
"@MMK_R_p" = -48;
"@MMK_R_s" = -78;
"@MMK_R_six" = -12;
"@MMK_R_slash" = -43;
"@MMK_R_t" = -24;
"@MMK_R_u" = -44;
"@MMK_R_v" = -49;
"@MMK_R_w" = -48;
"@MMK_R_x" = -55;
"@MMK_R_y" = -44;
"@MMK_R_z" = -67;
};
"@MMK_L_X" = {
"@MMK_R_A" = -16;
"@MMK_R_C" = -22;
"@MMK_R_a" = -6;
"@MMK_R_b" = -5;
"@MMK_R_c" = -10;
"@MMK_R_emdash" = -37;
"@MMK_R_eth" = -14;
"@MMK_R_f" = -16;
"@MMK_R_g" = -6;
"@MMK_R_i" = -10;
"@MMK_R_j" = -8;
"@MMK_R_lslash" = -7;
"@MMK_R_m" = -23;
"@MMK_R_p" = -23;
"@MMK_R_registered" = -16;
"@MMK_R_t" = -23;
"@MMK_R_u" = -24;
"@MMK_R_v" = -37;
"@MMK_R_w" = -36;
"@MMK_R_y" = -24;
};
"@MMK_L_Y" = {
"@MMK_R_A" = -5;
"@MMK_R_B" = -6;
"@MMK_R_Dcroat" = -6;
"@MMK_R_a" = -17;
"@MMK_R_b" = -13;
"@MMK_R_c" = -19;
"@MMK_R_comma" = -13;
"@MMK_R_eth" = -19;
"@MMK_R_f" = -17;
"@MMK_R_g" = -17;
"@MMK_R_guillemetleft" = -10;
"@MMK_R_i" = -13;
"@MMK_R_j" = -13;
"@MMK_R_lslash" = -13;
"@MMK_R_m" = -17;
"@MMK_R_p" = -17;
"@MMK_R_s" = -23;
"@MMK_R_t" = -17;
"@MMK_R_u" = -16;
"@MMK_R_v" = -19;
"@MMK_R_w" = -20;
"@MMK_R_x" = -17;
"@MMK_R_y" = -16;
"@MMK_R_z" = -23;
};
"@MMK_L_Z" = {
"@MMK_R_C" = -7;
"@MMK_R_a" = -5;
"@MMK_R_b" = -14;
"@MMK_R_c" = -5;
"@MMK_R_emdash" = -44;
"@MMK_R_eth" = -7;
"@MMK_R_f" = -19;
"@MMK_R_g" = -5;
"@MMK_R_i" = -14;
"@MMK_R_j" = -17;
"@MMK_R_lslash" = -17;
"@MMK_R_m" = -25;
"@MMK_R_p" = -25;
"@MMK_R_registered" = -17;
"@MMK_R_s" = -12;
"@MMK_R_t" = -22;
"@MMK_R_u" = -23;
"@MMK_R_v" = -47;
"@MMK_R_w" = -44;
"@MMK_R_x" = -13;
"@MMK_R_y" = -23;
"@MMK_R_z" = -25;
};
"@MMK_L_a" = {
"@MMK_R_A" = -6;
"@MMK_R_B" = -8;
"@MMK_R_C" = -19;
"@MMK_R_Dcroat" = -17;
"@MMK_R_M" = -14;
"@MMK_R_S" = -12;
"@MMK_R_T" = -32;
"@MMK_R_U" = -14;
"@MMK_R_V" = -59;
"@MMK_R_W" = -46;
"@MMK_R_Y" = -20;
"@MMK_R_asterisk" = -8;
"@MMK_R_backslash" = -62;
"@MMK_R_braceright" = -10;
"@MMK_R_bracketright" = -12;
"@MMK_R_one" = -12;
"@MMK_R_parenright" = -18;
"@MMK_R_question" = -16;
"@MMK_R_quotedbl" = -12;
"@MMK_R_quotedblleft" = -37;
"@MMK_R_quotesingle" = -12;
"@MMK_R_seven" = -13;
"@MMK_R_three" = -13;
"@MMK_R_trademark" = -12;
};
"@MMK_L_ae" = {
"@MMK_R_B" = -7;
"@MMK_R_C" = -12;
"@MMK_R_Dcroat" = -22;
"@MMK_R_J" = -40;
"@MMK_R_M" = -20;
"@MMK_R_S" = -13;
"@MMK_R_T" = -54;
"@MMK_R_U" = -17;
"@MMK_R_V" = -68;
"@MMK_R_W" = -58;
"@MMK_R_X" = -6;
"@MMK_R_Y" = -28;
"@MMK_R_Z" = -20;
"@MMK_R_asterisk" = -12;
"@MMK_R_backslash" = -61;
"@MMK_R_braceright" = -18;
"@MMK_R_bracketright" = -18;
"@MMK_R_one" = -17;
"@MMK_R_parenright" = -30;
"@MMK_R_question" = -20;
"@MMK_R_quotedbl" = -16;
"@MMK_R_quotedblleft" = -38;
"@MMK_R_quotesingle" = -16;
"@MMK_R_seven" = -22;
"@MMK_R_three" = -18;
"@MMK_R_trademark" = -16;
"@MMK_R_two" = -10;
};
"@MMK_L_ampersand" = {
"@MMK_R_T" = -16;
"@MMK_R_V" = -23;
"@MMK_R_W" = -20;
"@MMK_R_quotedbl" = -16;
"@MMK_R_quotedblleft" = -17;
"@MMK_R_quotesingle" = -16;
"@MMK_R_v" = -10;
"@MMK_R_w" = -10;
};
"@MMK_L_asterisk" = {
"@MMK_R_A" = -16;
"@MMK_R_B" = -8;
"@MMK_R_J" = -8;
"@MMK_R_a" = -22;
"@MMK_R_c" = -20;
"@MMK_R_g" = -22;
"@MMK_R_s" = -13;
"@MMK_R_z" = -12;
};
"@MMK_L_at" = {
"@MMK_R_J" = -16;
"@MMK_R_T" = -35;
"@MMK_R_V" = -31;
"@MMK_R_W" = -26;
"@MMK_R_Z" = -12;
"@MMK_R_quotedbl" = -34;
"@MMK_R_quotedblleft" = -76;
"@MMK_R_quotesingle" = -34;
};
"@MMK_L_b" = {
"@MMK_R_B" = -7;
"@MMK_R_C" = -12;
"@MMK_R_Dcroat" = -20;
"@MMK_R_J" = -41;
"@MMK_R_M" = -18;
"@MMK_R_S" = -25;
"@MMK_R_T" = -52;
"@MMK_R_U" = -18;
"@MMK_R_V" = -74;
"@MMK_R_W" = -62;
"@MMK_R_X" = -24;
"@MMK_R_Y" = -23;
"@MMK_R_Z" = -37;
"@MMK_R_asterisk" = -17;
"@MMK_R_backslash" = -65;
"@MMK_R_braceright" = -20;
"@MMK_R_bracketright" = -19;
"@MMK_R_five" = -12;
"@MMK_R_nine" = -12;
"@MMK_R_one" = -19;
"@MMK_R_parenright" = -36;
"@MMK_R_question" = -25;
"@MMK_R_quotedbl" = -23;
"@MMK_R_quotedblleft" = -46;
"@MMK_R_quotesingle" = -23;
"@MMK_R_seven" = -26;
"@MMK_R_three" = -20;
"@MMK_R_trademark" = -23;
"@MMK_R_two" = -17;
"@MMK_R_x" = -4;
};
"@MMK_L_backslash" = {
"@MMK_R_C" = -17;
"@MMK_R_T" = -31;
"@MMK_R_V" = -48;
"@MMK_R_W" = -41;
"@MMK_R_quotedbl" = -77;
"@MMK_R_quotedblleft" = -85;
"@MMK_R_quotesingle" = -77;
"@MMK_R_v" = -19;
"@MMK_R_w" = -17;
"@MMK_R_zero" = -16;
};
"@MMK_L_bar" = {
"@MMK_R_J" = 43;
"@MMK_R_j" = 18;
};
"@MMK_L_braceleft" = {
"@MMK_R_A" = -16;
"@MMK_R_B" = -12;
"@MMK_R_C" = -14;
"@MMK_R_Dcroat" = -12;
"@MMK_R_J" = 67;
"@MMK_R_a" = -19;
"@MMK_R_braceleft" = -13;
"@MMK_R_c" = -19;
"@MMK_R_eth" = -12;
"@MMK_R_four" = -12;
"@MMK_R_g" = -19;
"@MMK_R_i" = -12;
"@MMK_R_j" = 108;
"@MMK_R_m" = -17;
"@MMK_R_p" = -17;
"@MMK_R_parenleft" = -12;
"@MMK_R_s" = -16;
"@MMK_R_six" = -16;
"@MMK_R_t" = -16;
"@MMK_R_u" = -18;
"@MMK_R_v" = -28;
"@MMK_R_w" = -26;
"@MMK_R_x" = -12;
"@MMK_R_y" = -18;
"@MMK_R_z" = -17;
"@MMK_R_zero" = -12;
};
"@MMK_L_braceright" = {
"@MMK_R_braceright" = -13;
"@MMK_R_parenright" = -17;
};
"@MMK_L_bracketleft" = {
"@MMK_R_A" = -14;
"@MMK_R_B" = -12;
"@MMK_R_C" = -13;
"@MMK_R_Dcroat" = -12;
"@MMK_R_J" = 71;
"@MMK_R_a" = -19;
"@MMK_R_c" = -19;
"@MMK_R_eight" = -10;
"@MMK_R_eth" = -12;
"@MMK_R_four" = -10;
"@MMK_R_g" = -19;
"@MMK_R_i" = -12;
"@MMK_R_j" = 104;
"@MMK_R_m" = -12;
"@MMK_R_p" = -12;
"@MMK_R_parenleft" = -10;
"@MMK_R_s" = -17;
"@MMK_R_six" = -13;
"@MMK_R_t" = -14;
"@MMK_R_u" = -12;
"@MMK_R_v" = -17;
"@MMK_R_w" = -17;
"@MMK_R_x" = -10;
"@MMK_R_y" = -12;
"@MMK_R_z" = -17;
"@MMK_R_zero" = -10;
};
"@MMK_L_c" = {
"@MMK_R_B" = -8;
"@MMK_R_C" = -8;
"@MMK_R_Dcroat" = -19;
"@MMK_R_J" = -43;
"@MMK_R_M" = -17;
"@MMK_R_S" = -12;
"@MMK_R_T" = -71;
"@MMK_R_U" = -13;
"@MMK_R_V" = -79;
"@MMK_R_W" = -62;
"@MMK_R_X" = -7;
"@MMK_R_Y" = -26;
"@MMK_R_Z" = -19;
"@MMK_R_asterisk" = -12;
"@MMK_R_backslash" = -60;
"@MMK_R_braceright" = -17;
"@MMK_R_bracketright" = -17;
"@MMK_R_one" = -16;
"@MMK_R_parenright" = -29;
"@MMK_R_question" = -19;
"@MMK_R_quotedbl" = -16;
"@MMK_R_quotedblleft" = -38;
"@MMK_R_quotesingle" = -16;
"@MMK_R_seven" = -20;
"@MMK_R_three" = -17;
"@MMK_R_trademark" = -16;
"@MMK_R_two" = -10;
};
"@MMK_L_colon" = {
"@MMK_R_T" = -30;
"@MMK_R_V" = -25;
"@MMK_R_W" = -22;
};
"@MMK_L_comma" = {
"@MMK_R_A" = -10;
"@MMK_R_B" = -17;
"@MMK_R_C" = -31;
"@MMK_R_Dcroat" = -14;
"@MMK_R_M" = -12;
"@MMK_R_S" = -8;
"@MMK_R_T" = -41;
"@MMK_R_U" = -16;
"@MMK_R_V" = -68;
"@MMK_R_W" = -62;
"@MMK_R_Y" = -19;
"@MMK_R_five" = -12;
"@MMK_R_four" = -14;
"@MMK_R_nine" = -23;
"@MMK_R_one" = -22;
"@MMK_R_quotedbl" = -108;
"@MMK_R_quotedblleft" = -108;
"@MMK_R_quotesingle" = -94;
"@MMK_R_seven" = -20;
"@MMK_R_six" = -16;
"@MMK_R_three" = -13;
"@MMK_R_v" = -35;
"@MMK_R_w" = -29;
"@MMK_R_zero" = -29;
};
"@MMK_L_d" = {
"@MMK_R_A" = -6;
"@MMK_R_B" = -10;
"@MMK_R_C" = -17;
"@MMK_R_Dcroat" = -14;
"@MMK_R_M" = -14;
"@MMK_R_S" = -6;
"@MMK_R_T" = -16;
"@MMK_R_U" = -13;
"@MMK_R_V" = -12;
"@MMK_R_W" = -12;
"@MMK_R_Y" = -6;
"@MMK_R_periodcentered" = -53;
};
"@MMK_L_degree" = {
"@MMK_R_four" = -36;
"@MMK_R_six" = -23;
};
"@MMK_L_eight" = {
"@MMK_R_parenright" = -16;
};
"@MMK_L_emdash" = {
"@MMK_R_J" = -38;
"@MMK_R_T" = -31;
"@MMK_R_V" = -8;
"@MMK_R_X" = -23;
"@MMK_R_Z" = -28;
"@MMK_R_a" = -14;
"@MMK_R_c" = -13;
"@MMK_R_four" = -10;
"@MMK_R_g" = -14;
"@MMK_R_one" = -10;
"@MMK_R_s" = -8;
"@MMK_R_seven" = -18;
"@MMK_R_two" = -28;
};
"@MMK_L_equal" = {
"@MMK_R_two" = -18;
};
"@MMK_L_eth" = {
"@MMK_R_b" = -4;
"@MMK_R_backslash" = -14;
"@MMK_R_braceright" = -17;
"@MMK_R_bracketright" = -17;
"@MMK_R_comma" = -12;
"@MMK_R_i" = -5;
"@MMK_R_j" = -5;
"@MMK_R_lslash" = -5;
"@MMK_R_parenright" = -25;
"@MMK_R_x" = -4;
};
"@MMK_L_exclamdown" = {
"@MMK_R_J" = 59;
"@MMK_R_T" = -22;
"@MMK_R_V" = -17;
"@MMK_R_W" = -13;
"@MMK_R_j" = 108;
};
"@MMK_L_f" = {
"@MMK_R_B" = -5;
"@MMK_R_Dcroat" = -5;
"@MMK_R_J" = -31;
"@MMK_R_M" = 6;
"@MMK_R_T" = 17;
"@MMK_R_U" = 16;
"@MMK_R_V" = 92;
"@MMK_R_W" = 89;
"@MMK_R_X" = 44;
"@MMK_R_Y" = 82;
"@MMK_R_a" = -17;
"@MMK_R_ampersand" = -12;
"@MMK_R_asterisk" = 35;
"@MMK_R_backslash" = 58;
"@MMK_R_bar" = 28;
"@MMK_R_braceright" = 29;
"@MMK_R_bracketright" = 37;
"@MMK_R_c" = -16;
"@MMK_R_comma" = -23;
"@MMK_R_eth" = -8;
"@MMK_R_exclam" = 50;
"@MMK_R_g" = -17;
"@MMK_R_guillemetleft" = -18;
"@MMK_R_j" = -4;
"@MMK_R_one" = 20;
"@MMK_R_parenright" = 37;
"@MMK_R_quotedbl" = 61;
"@MMK_R_quotedblleft" = 42;
"@MMK_R_quotesingle" = 61;
"@MMK_R_s" = -5;
"@MMK_R_seven" = 26;
"@MMK_R_slash" = -17;
"@MMK_R_trademark" = 77;
};
"@MMK_L_five" = {
"@MMK_R_comma" = -13;
};
"@MMK_L_four" = {
"@MMK_R_comma" = -19;
"@MMK_R_parenright" = -12;
};
"@MMK_L_fraction" = {
"@MMK_R_four" = -38;
"@MMK_R_six" = -28;
};
"@MMK_L_g" = {
"@MMK_R_A" = -6;
"@MMK_R_B" = -8;
"@MMK_R_C" = -16;
"@MMK_R_Dcroat" = -17;
"@MMK_R_J" = 29;
"@MMK_R_M" = -16;
"@MMK_R_S" = -24;
"@MMK_R_T" = -50;
"@MMK_R_U" = -16;
"@MMK_R_V" = -76;
"@MMK_R_W" = -60;
"@MMK_R_X" = -6;
"@MMK_R_Y" = -20;
"@MMK_R_Z" = -18;
"@MMK_R_asterisk" = -12;
"@MMK_R_backslash" = -62;
"@MMK_R_one" = -17;
"@MMK_R_parenright" = -12;
"@MMK_R_question" = -20;
"@MMK_R_quotedbl" = -17;
"@MMK_R_quotedblleft" = -41;
"@MMK_R_quotesingle" = -17;
"@MMK_R_seven" = -22;
"@MMK_R_trademark" = -17;
};
"@MMK_L_germandbls" = {
"@MMK_R_asterisk" = -12;
"@MMK_R_b" = -5;
"@MMK_R_backslash" = -22;
"@MMK_R_braceright" = -16;
"@MMK_R_bracketright" = -17;
"@MMK_R_emdash" = -28;
"@MMK_R_f" = -5;
"@MMK_R_m" = -5;
"@MMK_R_p" = -5;
"@MMK_R_parenright" = -23;
"@MMK_R_question" = -17;
"@MMK_R_quotedbl" = -12;
"@MMK_R_quotedblleft" = -12;
"@MMK_R_quotesingle" = -12;
"@MMK_R_registered" = -16;
"@MMK_R_t" = -6;
"@MMK_R_trademark" = -12;
"@MMK_R_u" = -5;
"@MMK_R_v" = -20;
"@MMK_R_w" = -23;
"@MMK_R_x" = -5;
"@MMK_R_y" = -5;
"@MMK_R_z" = -5;
};
"@MMK_L_guillemetleft" = {
"@MMK_R_B" = -8;
"@MMK_R_Dcroat" = -8;
"@MMK_R_J" = -29;
"@MMK_R_T" = -38;
"@MMK_R_V" = -37;
"@MMK_R_W" = -31;
"@MMK_R_Y" = -8;
"@MMK_R_Z" = -10;
"@MMK_R_quotedbl" = -62;
"@MMK_R_quotedblleft" = -86;
"@MMK_R_quotesingle" = -62;
};
"@MMK_L_guillemetright" = {
"@MMK_R_B" = -12;
"@MMK_R_Dcroat" = -12;
"@MMK_R_J" = -42;
"@MMK_R_M" = -10;
"@MMK_R_S" = -17;
"@MMK_R_T" = -43;
"@MMK_R_V" = -48;
"@MMK_R_W" = -41;
"@MMK_R_X" = -17;
"@MMK_R_Y" = -10;
"@MMK_R_Z" = -23;
"@MMK_R_quotedbl" = -85;
"@MMK_R_quotedblleft" = -92;
"@MMK_R_quotesingle" = -85;
"@MMK_R_v" = -8;
"@MMK_R_w" = -12;
"@MMK_R_x" = -8;
"@MMK_R_z" = -12;
};
"@MMK_L_i" = {
"@MMK_R_A" = -6;
"@MMK_R_B" = -10;
"@MMK_R_C" = -18;
"@MMK_R_Dcroat" = -16;
"@MMK_R_M" = -13;
"@MMK_R_S" = -10;
"@MMK_R_T" = -19;
"@MMK_R_U" = -13;
"@MMK_R_V" = -19;
"@MMK_R_W" = -19;
"@MMK_R_Y" = -8;
};
"@MMK_L_ij" = {
"@MMK_R_A" = -7;
"@MMK_R_B" = -12;
"@MMK_R_C" = -13;
"@MMK_R_Dcroat" = -14;
"@MMK_R_J" = 23;
"@MMK_R_M" = -12;
"@MMK_R_S" = -10;
"@MMK_R_T" = -10;
"@MMK_R_U" = -12;
"@MMK_R_V" = -8;
"@MMK_R_W" = -8;
"@MMK_R_X" = -7;
"@MMK_R_Z" = -12;
};
"@MMK_L_k" = {
"@MMK_R_A" = -17;
"@MMK_R_B" = -12;
"@MMK_R_C" = -24;
"@MMK_R_Dcroat" = -22;
"@MMK_R_J" = -8;
"@MMK_R_M" = -19;
"@MMK_R_S" = -25;
"@MMK_R_T" = -56;
"@MMK_R_U" = -19;
"@MMK_R_V" = -83;
"@MMK_R_W" = -71;
"@MMK_R_X" = -5;
"@MMK_R_Y" = -29;
"@MMK_R_Z" = -5;
"@MMK_R_a" = -5;
"@MMK_R_asterisk" = -12;
"@MMK_R_backslash" = -52;
"@MMK_R_braceright" = -12;
"@MMK_R_bracketright" = -12;
"@MMK_R_c" = -6;
"@MMK_R_eth" = -7;
"@MMK_R_g" = -5;
"@MMK_R_one" = -12;
"@MMK_R_parenright" = -18;
"@MMK_R_question" = -16;
"@MMK_R_quotedbl" = -24;
"@MMK_R_quotedblleft" = -30;
"@MMK_R_quotesingle" = -24;
"@MMK_R_seven" = -16;
"@MMK_R_three" = -12;
"@MMK_R_trademark" = -23;
};
"@MMK_L_lslash" = {
"@MMK_R_A" = -6;
"@MMK_R_B" = -10;
"@MMK_R_C" = -17;
"@MMK_R_Dcroat" = -14;
"@MMK_R_M" = -14;
"@MMK_R_S" = -6;
"@MMK_R_T" = -16;
"@MMK_R_U" = -13;
"@MMK_R_V" = -12;
"@MMK_R_W" = -12;
"@MMK_R_Y" = -6;
"@MMK_R_periodcentered" = -53;
};
"@MMK_L_minus" = {
"@MMK_R_four" = -12;
"@MMK_R_one" = -12;
"@MMK_R_seven" = -20;
"@MMK_R_two" = -28;
};
"@MMK_L_nine" = {
"@MMK_R_J" = -18;
"@MMK_R_a" = -17;
"@MMK_R_braceright" = -12;
"@MMK_R_bracketright" = -12;
"@MMK_R_c" = -14;
"@MMK_R_comma" = -60;
"@MMK_R_fraction" = -24;
"@MMK_R_g" = -17;
"@MMK_R_parenright" = -23;
"@MMK_R_s" = -13;
"@MMK_R_slash" = -31;
};
"@MMK_L_numbersign" = {
"@MMK_R_two" = -12;
};
"@MMK_L_one" = {
"@MMK_R_comma" = -12;
};
"@MMK_L_parenleft" = {
"@MMK_R_A" = -28;
"@MMK_R_B" = -13;
"@MMK_R_C" = -24;
"@MMK_R_Dcroat" = -16;
"@MMK_R_J" = 72;
"@MMK_R_M" = -12;
"@MMK_R_S" = -13;
"@MMK_R_U" = -13;
"@MMK_R_a" = -32;
"@MMK_R_b" = -10;
"@MMK_R_braceleft" = -17;
"@MMK_R_c" = -35;
"@MMK_R_eight" = -19;
"@MMK_R_eth" = -18;
"@MMK_R_four" = -28;
"@MMK_R_g" = -32;
"@MMK_R_i" = -17;
"@MMK_R_j" = 116;
"@MMK_R_lslash" = -10;
"@MMK_R_m" = -25;
"@MMK_R_nine" = -13;
"@MMK_R_p" = -25;
"@MMK_R_parenleft" = -23;
"@MMK_R_s" = -23;
"@MMK_R_six" = -29;
"@MMK_R_t" = -25;
"@MMK_R_u" = -29;
"@MMK_R_v" = -38;
"@MMK_R_w" = -38;
"@MMK_R_x" = -17;
"@MMK_R_y" = -29;
"@MMK_R_z" = -20;
"@MMK_R_zero" = -24;
};
"@MMK_L_parenright" = {
"@MMK_R_braceright" = -12;
"@MMK_R_parenright" = -22;
};
"@MMK_L_periodcentered" = {
"@MMK_R_eight" = -10;
"@MMK_R_lslash" = -53;
"@MMK_R_one" = -17;
"@MMK_R_seven" = -28;
"@MMK_R_two" = -37;
};
"@MMK_L_plus" = {
"@MMK_R_two" = -18;
};
"@MMK_L_q" = {
"@MMK_R_A" = -6;
"@MMK_R_B" = -8;
"@MMK_R_C" = -16;
"@MMK_R_Dcroat" = -17;
"@MMK_R_J" = 58;
"@MMK_R_M" = -16;
"@MMK_R_S" = -24;
"@MMK_R_T" = -50;
"@MMK_R_U" = -16;
"@MMK_R_V" = -76;
"@MMK_R_W" = -60;
"@MMK_R_X" = -6;
"@MMK_R_Y" = -20;
"@MMK_R_Z" = -18;
"@MMK_R_asterisk" = -12;
"@MMK_R_backslash" = -62;
"@MMK_R_j" = 162;
"@MMK_R_one" = -17;
"@MMK_R_parenright" = 22;
"@MMK_R_question" = -20;
"@MMK_R_quotedbl" = -17;
"@MMK_R_quotedblleft" = -41;
"@MMK_R_quotesingle" = -17;
"@MMK_R_seven" = -22;
"@MMK_R_trademark" = -17;
};
"@MMK_L_questiondown" = {
"@MMK_R_C" = -17;
"@MMK_R_J" = 70;
"@MMK_R_T" = -23;
"@MMK_R_V" = -32;
"@MMK_R_W" = -29;
"@MMK_R_j" = 58;
"@MMK_R_v" = -23;
"@MMK_R_w" = -20;
};
"@MMK_L_quotedbl" = {
"@MMK_R_A" = -23;
"@MMK_R_B" = -13;
"@MMK_R_a" = -35;
"@MMK_R_ampersand" = -29;
"@MMK_R_at" = -58;
"@MMK_R_c" = -31;
"@MMK_R_comma" = -108;
"@MMK_R_four" = -34;
"@MMK_R_g" = -35;
"@MMK_R_guillemetleft" = -94;
"@MMK_R_guillemetright" = -67;
"@MMK_R_m" = -12;
"@MMK_R_p" = -12;
"@MMK_R_s" = -17;
"@MMK_R_six" = -18;
"@MMK_R_slash" = -77;
"@MMK_R_u" = -10;
"@MMK_R_v" = -18;
"@MMK_R_w" = -16;
"@MMK_R_x" = -10;
"@MMK_R_y" = -10;
"@MMK_R_z" = -19;
};
"@MMK_L_quotedblleft" = {
"@MMK_R_A" = -30;
"@MMK_R_B" = -14;
"@MMK_R_C" = -12;
"@MMK_R_Y" = 6;
"@MMK_R_a" = -53;
"@MMK_R_ampersand" = -34;
"@MMK_R_at" = -92;
"@MMK_R_b" = 8;
"@MMK_R_c" = -52;
"@MMK_R_comma" = -108;
"@MMK_R_g" = -53;
"@MMK_R_guillemetleft" = -92;
"@MMK_R_guillemetright" = -91;
"@MMK_R_m" = -30;
"@MMK_R_p" = -30;
"@MMK_R_s" = -40;
"@MMK_R_slash" = -88;
"@MMK_R_u" = -30;
"@MMK_R_v" = -36;
"@MMK_R_w" = -36;
"@MMK_R_x" = -32;
"@MMK_R_y" = -30;
"@MMK_R_z" = -40;
};
"@MMK_L_quotesingle" = {
"@MMK_R_A" = -23;
"@MMK_R_B" = -13;
"@MMK_R_a" = -35;
"@MMK_R_ampersand" = -29;
"@MMK_R_at" = -58;
"@MMK_R_c" = -31;
"@MMK_R_comma" = -94;
"@MMK_R_four" = -34;
"@MMK_R_g" = -35;
"@MMK_R_guillemetleft" = -94;
"@MMK_R_guillemetright" = -67;
"@MMK_R_m" = -12;
"@MMK_R_p" = -12;
"@MMK_R_s" = -17;
"@MMK_R_six" = -18;
"@MMK_R_slash" = -77;
"@MMK_R_u" = -10;
"@MMK_R_v" = -18;
"@MMK_R_w" = -16;
"@MMK_R_x" = -10;
"@MMK_R_y" = -10;
"@MMK_R_z" = -19;
};
"@MMK_L_r" = {
"@MMK_R_A" = -10;
"@MMK_R_B" = -12;
"@MMK_R_C" = -14;
"@MMK_R_Dcroat" = -23;
"@MMK_R_J" = -8;
"@MMK_R_M" = -22;
"@MMK_R_S" = -16;
"@MMK_R_T" = -49;
"@MMK_R_U" = -20;
"@MMK_R_V" = -59;
"@MMK_R_W" = -53;
"@MMK_R_Y" = -28;
"@MMK_R_Z" = -8;
"@MMK_R_asterisk" = -8;
"@MMK_R_backslash" = -60;
"@MMK_R_braceright" = -17;
"@MMK_R_bracketright" = -17;
"@MMK_R_eth" = -5;
"@MMK_R_guillemetleft" = -17;
"@MMK_R_one" = -17;
"@MMK_R_parenright" = -24;
"@MMK_R_question" = -17;
"@MMK_R_quotedbl" = -23;
"@MMK_R_quotedblleft" = -38;
"@MMK_R_quotesingle" = -23;
"@MMK_R_seven" = -19;
"@MMK_R_three" = -14;
"@MMK_R_trademark" = -16;
};
"@MMK_L_registered" = {
"@MMK_R_J" = -31;
"@MMK_R_T" = -17;
"@MMK_R_V" = -17;
"@MMK_R_W" = -14;
"@MMK_R_X" = -18;
"@MMK_R_Z" = -17;
};
"@MMK_L_s" = {
"@MMK_R_A" = -6;
"@MMK_R_B" = -19;
"@MMK_R_C" = -22;
"@MMK_R_Dcroat" = -26;
"@MMK_R_J" = -29;
"@MMK_R_M" = -24;
"@MMK_R_S" = -17;
"@MMK_R_T" = -59;
"@MMK_R_U" = -23;
"@MMK_R_V" = -89;
"@MMK_R_W" = -72;
"@MMK_R_X" = -8;
"@MMK_R_Y" = -30;
"@MMK_R_Z" = -20;
"@MMK_R_asterisk" = -16;
"@MMK_R_b" = -4;
"@MMK_R_backslash" = -68;
"@MMK_R_braceright" = -18;
"@MMK_R_bracketright" = -19;
"@MMK_R_emdash" = -18;
"@MMK_R_f" = -4;
"@MMK_R_five" = -19;
"@MMK_R_nine" = -17;
"@MMK_R_one" = -19;
"@MMK_R_parenright" = -30;
"@MMK_R_question" = -23;
"@MMK_R_quotedbl" = -17;
"@MMK_R_quotedblleft" = -42;
"@MMK_R_quotesingle" = -17;
"@MMK_R_registered" = -12;
"@MMK_R_seven" = -23;
"@MMK_R_t" = -5;
"@MMK_R_three" = -28;
"@MMK_R_trademark" = -19;
"@MMK_R_v" = -16;
"@MMK_R_w" = -17;
"@MMK_R_x" = -5;
"@MMK_R_z" = -5;
};
"@MMK_L_seven" = {
"@MMK_R_A" = -37;
"@MMK_R_B" = -25;
"@MMK_R_C" = -20;
"@MMK_R_Dcroat" = -12;
"@MMK_R_J" = -22;
"@MMK_R_a" = -62;
"@MMK_R_b" = -17;
"@MMK_R_backslash" = 12;
"@MMK_R_braceright" = 30;
"@MMK_R_bracketright" = 35;
"@MMK_R_c" = -61;
"@MMK_R_comma" = -68;
"@MMK_R_eight" = -18;
"@MMK_R_emdash" = -40;
"@MMK_R_equal" = -34;
"@MMK_R_f" = -17;
"@MMK_R_four" = -41;
"@MMK_R_fraction" = -53;
"@MMK_R_g" = -62;
"@MMK_R_i" = -12;
"@MMK_R_j" = -13;
"@MMK_R_m" = -43;
"@MMK_R_minus" = -38;
"@MMK_R_numbersign" = -40;
"@MMK_R_p" = -43;
"@MMK_R_parenright" = 35;
"@MMK_R_periodcentered" = -38;
"@MMK_R_plus" = -31;
"@MMK_R_s" = -58;
"@MMK_R_six" = -36;
"@MMK_R_slash" = -55;
"@MMK_R_t" = -28;
"@MMK_R_u" = -43;
"@MMK_R_v" = -46;
"@MMK_R_w" = -44;
"@MMK_R_x" = -46;
"@MMK_R_y" = -43;
"@MMK_R_z" = -55;
"@MMK_R_zero" = -19;
};
"@MMK_L_six" = {
"@MMK_R_J" = -13;
"@MMK_R_T" = -17;
"@MMK_R_V" = -12;
"@MMK_R_comma" = -10;
"@MMK_R_degree" = -22;
"@MMK_R_four" = 5;
"@MMK_R_parenright" = -13;
"@MMK_R_quotedbl" = -13;
"@MMK_R_quotesingle" = -13;
};
"@MMK_L_slash" = {
"@MMK_R_A" = -36;
"@MMK_R_B" = -24;
"@MMK_R_C" = -16;
"@MMK_R_J" = -24;
"@MMK_R_a" = -71;
"@MMK_R_b" = -12;
"@MMK_R_c" = -70;
"@MMK_R_eight" = -13;
"@MMK_R_f" = -12;
"@MMK_R_four" = -43;
"@MMK_R_g" = -71;
"@MMK_R_m" = -47;
"@MMK_R_p" = -47;
"@MMK_R_s" = -64;
"@MMK_R_six" = -34;
"@MMK_R_slash" = -259;
"@MMK_R_t" = -20;
"@MMK_R_u" = -46;
"@MMK_R_v" = -48;
"@MMK_R_w" = -47;
"@MMK_R_x" = -50;
"@MMK_R_y" = -46;
"@MMK_R_z" = -61;
"@MMK_R_zero" = -13;
};
"@MMK_L_space" = {
"@MMK_R_T" = -12;
};
"@MMK_L_t" = {
"@MMK_R_A" = -5;
"@MMK_R_B" = -8;
"@MMK_R_Dcroat" = -17;
"@MMK_R_J" = -19;
"@MMK_R_M" = -16;
"@MMK_R_S" = -10;
"@MMK_R_T" = -36;
"@MMK_R_U" = -12;
"@MMK_R_V" = -37;
"@MMK_R_W" = -30;
"@MMK_R_X" = -8;
"@MMK_R_Y" = -24;
"@MMK_R_Z" = -17;
"@MMK_R_backslash" = -23;
"@MMK_R_braceright" = -13;
"@MMK_R_bracketright" = -12;
"@MMK_R_c" = -4;
"@MMK_R_guillemetleft" = -12;
"@MMK_R_parenright" = -22;
};
"@MMK_L_three" = {
"@MMK_R_V" = -10;
"@MMK_R_backslash" = -12;
"@MMK_R_braceright" = -10;
"@MMK_R_comma" = -10;
"@MMK_R_degree" = -12;
"@MMK_R_parenright" = -18;
"@MMK_R_quotedbl" = -13;
"@MMK_R_quotesingle" = -13;
};
"@MMK_L_trademark" = {
"@MMK_R_A" = -17;
"@MMK_R_B" = -8;
"@MMK_R_J" = -10;
"@MMK_R_a" = -31;
"@MMK_R_c" = -29;
"@MMK_R_g" = -31;
"@MMK_R_m" = -8;
"@MMK_R_p" = -8;
"@MMK_R_s" = -16;
"@MMK_R_v" = -14;
"@MMK_R_w" = -12;
"@MMK_R_x" = -8;
"@MMK_R_z" = -17;
};
"@MMK_L_two" = {
"@MMK_R_comma" = -12;
"@MMK_R_parenright" = -12;
};
"@MMK_L_u" = {
"@MMK_R_A" = -6;
"@MMK_R_B" = -10;
"@MMK_R_C" = -19;
"@MMK_R_Dcroat" = -17;
"@MMK_R_M" = -16;
"@MMK_R_S" = -12;
"@MMK_R_T" = -34;
"@MMK_R_U" = -14;
"@MMK_R_V" = -46;
"@MMK_R_W" = -37;
"@MMK_R_Y" = -20;
"@MMK_R_backslash" = -58;
"@MMK_R_braceright" = -10;
"@MMK_R_bracketright" = -12;
"@MMK_R_one" = -12;
"@MMK_R_parenright" = -18;
"@MMK_R_question" = -12;
"@MMK_R_quotedblleft" = -31;
"@MMK_R_seven" = -13;
"@MMK_R_three" = -13;
};
"@MMK_L_v" = {
"@MMK_R_A" = -6;
"@MMK_R_B" = -18;
"@MMK_R_C" = -5;
"@MMK_R_Dcroat" = -26;
"@MMK_R_J" = -59;
"@MMK_R_M" = -24;
"@MMK_R_S" = -28;
"@MMK_R_T" = -56;
"@MMK_R_U" = -22;
"@MMK_R_V" = -58;
"@MMK_R_W" = -47;
"@MMK_R_X" = -48;
"@MMK_R_Y" = -29;
"@MMK_R_Z" = -48;
"@MMK_R_a" = -5;
"@MMK_R_backslash" = -48;
"@MMK_R_braceright" = -24;
"@MMK_R_bracketright" = -19;
"@MMK_R_c" = -4;
"@MMK_R_comma" = -24;
"@MMK_R_g" = -5;
"@MMK_R_j" = -4;
"@MMK_R_one" = -18;
"@MMK_R_parenright" = -38;
"@MMK_R_question" = -14;
"@MMK_R_quotedbl" = -8;
"@MMK_R_quotedblleft" = -31;
"@MMK_R_quotesingle" = -8;
"@MMK_R_s" = -6;
"@MMK_R_seven" = -30;
"@MMK_R_slash" = -14;
"@MMK_R_trademark" = -8;
"@MMK_R_two" = -26;
};
"@MMK_L_w" = {
"@MMK_R_A" = -6;
"@MMK_R_B" = -24;
"@MMK_R_C" = -6;
"@MMK_R_Dcroat" = -24;
"@MMK_R_J" = -55;
"@MMK_R_M" = -23;
"@MMK_R_S" = -29;
"@MMK_R_T" = -53;
"@MMK_R_U" = -20;
"@MMK_R_V" = -58;
"@MMK_R_W" = -44;
"@MMK_R_X" = -48;
"@MMK_R_Y" = -28;
"@MMK_R_Z" = -47;
"@MMK_R_a" = -5;
"@MMK_R_backslash" = -48;
"@MMK_R_braceright" = -24;
"@MMK_R_bracketright" = -19;
"@MMK_R_c" = -4;
"@MMK_R_comma" = -23;
"@MMK_R_g" = -5;
"@MMK_R_j" = -4;
"@MMK_R_one" = -18;
"@MMK_R_parenright" = -38;
"@MMK_R_question" = -14;
"@MMK_R_quotedblleft" = -31;
"@MMK_R_s" = -6;
"@MMK_R_seven" = -30;
"@MMK_R_slash" = -14;
"@MMK_R_trademark" = -8;
"@MMK_R_two" = -26;
};
"@MMK_L_x" = {
"@MMK_R_A" = -14;
"@MMK_R_B" = -8;
"@MMK_R_C" = -14;
"@MMK_R_Dcroat" = -17;
"@MMK_R_M" = -14;
"@MMK_R_S" = -19;
"@MMK_R_T" = -50;
"@MMK_R_U" = -12;
"@MMK_R_V" = -59;
"@MMK_R_W" = -43;
"@MMK_R_Y" = -23;
"@MMK_R_Z" = -6;
"@MMK_R_backslash" = -44;
"@MMK_R_braceright" = -10;
"@MMK_R_bracketright" = -10;
"@MMK_R_c" = -4;
"@MMK_R_eth" = -5;
"@MMK_R_guillemetleft" = -8;
"@MMK_R_parenright" = -19;
"@MMK_R_quotedblleft" = -26;
"@MMK_R_seven" = -13;
};
"@MMK_L_y" = {
"@MMK_R_A" = -8;
"@MMK_R_B" = -10;
"@MMK_R_C" = -13;
"@MMK_R_Dcroat" = -14;
"@MMK_R_J" = -7;
"@MMK_R_M" = -12;
"@MMK_R_S" = -22;
"@MMK_R_T" = -54;
"@MMK_R_U" = -12;
"@MMK_R_V" = -66;
"@MMK_R_W" = -55;
"@MMK_R_X" = -8;
"@MMK_R_Y" = -17;
"@MMK_R_Z" = -23;
"@MMK_R_backslash" = -55;
"@MMK_R_braceright" = -10;
"@MMK_R_one" = -17;
"@MMK_R_parenright" = -13;
"@MMK_R_question" = -16;
"@MMK_R_quotedbl" = -8;
"@MMK_R_quotedblleft" = -32;
"@MMK_R_quotesingle" = -8;
"@MMK_R_seven" = -23;
"@MMK_R_trademark" = -8;
};
"@MMK_L_z" = {
"@MMK_R_A" = -7;
"@MMK_R_B" = -14;
"@MMK_R_C" = -8;
"@MMK_R_Dcroat" = -23;
"@MMK_R_J" = -17;
"@MMK_R_M" = -22;
"@MMK_R_S" = -8;
"@MMK_R_T" = -61;
"@MMK_R_U" = -17;
"@MMK_R_V" = -61;
"@MMK_R_W" = -46;
"@MMK_R_X" = -8;
"@MMK_R_Y" = -28;
"@MMK_R_Z" = -19;
"@MMK_R_backslash" = -48;
"@MMK_R_braceright" = -17;
"@MMK_R_bracketright" = -17;
"@MMK_R_guillemetleft" = -8;
"@MMK_R_one" = -16;
"@MMK_R_parenright" = -26;
"@MMK_R_question" = -10;
"@MMK_R_quotedblleft" = -30;
"@MMK_R_seven" = -19;
"@MMK_R_three" = -14;
"@MMK_R_trademark" = -8;
};
"@MMK_L_zero" = {
"@MMK_R_J" = -16;
"@MMK_R_backslash" = -13;
"@MMK_R_braceright" = -12;
"@MMK_R_bracketright" = -12;
"@MMK_R_comma" = -29;
"@MMK_R_parenright" = -23;
"@MMK_R_slash" = -16;
};
C = {
germandbls = -17;
thorn = 1;
};
Cacute = {
germandbls = -17;
thorn = 1;
};
Ccaron = {
germandbls = -17;
thorn = 1;
};
Ccedilla = {
germandbls = -17;
thorn = 1;
};
Ccircumflex = {
germandbls = -17;
thorn = 1;
};
Cdotaccent = {
germandbls = -17;
thorn = 1;
};
D = {
eth = -31;
germandbls = -6;
parenright = -19;
slash = -38;
};
Dcaron = {
eth = -31;
germandbls = -6;
parenright = -19;
slash = -38;
};
Eth = {
J = -27;
Jcircumflex = -27;
X = -14;
a = -48;
aacute = -48;
abreve = -48;
acircumflex = -48;
adieresis = -48;
ae = -48;
aeacute = -48;
agrave = -48;
amacron = -48;
aogonek = -48;
aring = -48;
atilde = -48;
c = -43;
cacute = -43;
ccaron = -43;
ccedilla = -43;
ccircumflex = -43;
cdotaccent = -43;
cent = -43;
comma = -70;
d = -43;
dcaron = -43;
dcroat = -43;
e = -43;
eacute = -43;
ebreve = -43;
ecaron = -43;
ecircumflex = -43;
edieresis = -43;
edotaccent = -43;
egrave = -43;
ellipsis = -70;
emacron = -43;
eogonek = -43;
eth = -31;
f = -11;
f_f = -11;
fi = -11;
fl = -11;
g = -48;
gbreve = -48;
gcircumflex = -48;
gcommaaccent = -48;
gdotaccent = -48;
germandbls = -6;
o = -43;
oacute = -43;
obreve = -43;
ocircumflex = -43;
odieresis = -43;
oe = -43;
ograve = -43;
ohungarumlaut = -43;
omacron = -43;
oslash = -43;
oslashacute = -43;
otilde = -43;
parenright = -19;
period = -70;
q = -43;
quotedblbase = -70;
quotesinglbase = -70;
s = -47;
sacute = -47;
scaron = -47;
scedilla = -47;
scircumflex = -47;
scommaaccent = -47;
slash = -38;
t = -11;
tbar = -11;
tcaron = -11;
tcommaaccent = -11;
x = -31;
z = -30;
zacute = -30;
zcaron = -30;
zdotaccent = -30;
};
F = {
B = -37;
Eth = -17;
Lslash = -33;
germandbls = -45;
};
IJ = {
B = -12;
Eth = -10;
Lslash = -11;
germandbls = -30;
};
J = {
B = -12;
Eth = -10;
Lslash = -11;
germandbls = -30;
};
Jcircumflex = {
B = -12;
Eth = -10;
Lslash = -11;
germandbls = -30;
};
L = {
germandbls = -10;
};
Lacute = {
germandbls = -10;
};
Lcaron = {
germandbls = -10;
};
Lcommaaccent = {
germandbls = -10;
};
Ldot = {
germandbls = -10;
};
Lslash = {
germandbls = -10;
};
O = {
eth = -31;
germandbls = -6;
parenright = -19;
slash = -38;
};
Oacute = {
eth = -31;
germandbls = -6;
parenright = -19;
slash = -38;
};
Obreve = {
eth = -31;
germandbls = -6;
parenright = -19;
slash = -38;
};
Ocircumflex = {
eth = -31;
germandbls = -6;
parenright = -19;
slash = -38;
};
Odieresis = {
eth = -31;
germandbls = -6;
parenright = -19;
slash = -38;
};
Ograve = {
eth = -31;
germandbls = -6;
parenright = -19;
slash = -38;
};
Ohungarumlaut = {
eth = -31;
germandbls = -6;
parenright = -19;
slash = -38;
};
Omacron = {
eth = -31;
germandbls = -6;
parenright = -19;
slash = -38;
};
Oslash = {
eth = -31;
germandbls = -6;
parenright = -19;
slash = -38;
};
Oslashacute = {
eth = -31;
germandbls = -6;
parenright = -19;
slash = -38;
};
Otilde = {
eth = -31;
germandbls = -6;
parenright = -19;
slash = -38;
};
Q = {
J = -15;
Jcircumflex = -15;
eth = -31;
germandbls = -6;
parenright = -19;
slash = -38;
};
S = {
germandbls = -21;
thorn = 2;
};
Sacute = {
germandbls = -21;
thorn = 2;
};
Scaron = {
germandbls = -21;
thorn = 2;
};
Scedilla = {
germandbls = -21;
thorn = 2;
};
Scircumflex = {
germandbls = -21;
thorn = 2;
};
Scommaaccent = {
germandbls = -21;
thorn = 2;
};
T = {
B = -41;
Eth = -30;
Lslash = -40;
germandbls = -58;
thorn = -8;
};
Tbar = {
B = -41;
Eth = -30;
Lslash = -40;
germandbls = -58;
thorn = -8;
};
Tcaron = {
B = -41;
Eth = -30;
Lslash = -40;
germandbls = -58;
thorn = -8;
};
Tcommaaccent = {
B = -41;
Eth = -30;
Lslash = -40;
germandbls = -58;
thorn = -8;
};
U = {
b = -12;
};
Uacute = {
b = -12;
};
Ubreve = {
b = -12;
};
Ucircumflex = {
b = -12;
};
Udieresis = {
b = -12;
};
Ugrave = {
b = -12;
};
Uhungarumlaut = {
b = -12;
};
Umacron = {
b = -12;
};
Uogonek = {
b = -12;
};
Uring = {
b = -12;
};
Utilde = {
b = -12;
};
V = {
germandbls = -16;
thorn = 20;
};
W = {
B = -18;
Lslash = -15;
germandbls = -23;
thorn = 7;
};
Wacute = {
B = -18;
Lslash = -15;
germandbls = -23;
thorn = 7;
};
Wcircumflex = {
B = -18;
Lslash = -15;
germandbls = -23;
thorn = 7;
};
Wdieresis = {
B = -18;
Lslash = -15;
germandbls = -23;
thorn = 7;
};
Wgrave = {
B = -18;
Lslash = -15;
germandbls = -23;
thorn = 7;
};
X = {
germandbls = -15;
thorn = 1;
};
Z = {
germandbls = -19;
};
Zacute = {
germandbls = -19;
};
Zcaron = {
germandbls = -19;
};
Zdotaccent = {
germandbls = -19;
};
a = {
Eth = -16;
};
aacute = {
Eth = -16;
};
abreve = {
Eth = -16;
};
acircumflex = {
Eth = -16;
};
adieresis = {
Eth = -16;
};
ae = {
Eth = -21;
Lslash = -11;
};
aeacute = {
Eth = -21;
Lslash = -11;
};
agrave = {
Eth = -16;
};
amacron = {
Eth = -16;
};
aogonek = {
Eth = -16;
};
aring = {
Eth = -16;
};
atilde = {
Eth = -16;
};
b = {
B = -13;
Eth = -20;
Lslash = -14;
};
c = {
Eth = -19;
};
cacute = {
Eth = -19;
};
ccaron = {
Eth = -19;
};
ccedilla = {
Eth = -19;
};
ccircumflex = {
Eth = -19;
};
cdotaccent = {
Eth = -19;
};
cent = {
Eth = -19;
};
comma = {
quoteleft = -94;
};
d = {
Eth = -14;
};
dcaron = {
Eth = -14;
};
dcroat = {
Eth = -14;
};
e = {
Eth = -21;
Lslash = -11;
};
eacute = {
Eth = -21;
Lslash = -11;
};
ebreve = {
Eth = -21;
Lslash = -11;
};
ecaron = {
Eth = -21;
Lslash = -11;
};
ecircumflex = {
Eth = -21;
Lslash = -11;
};
edieresis = {
Eth = -21;
Lslash = -11;
};
edotaccent = {
Eth = -21;
Lslash = -11;
};
egrave = {
Eth = -21;
Lslash = -11;
};
ellipsis = {
quoteleft = -94;
};
emacron = {
Eth = -21;
Lslash = -11;
};
eng = {
B = -7;
};
eogonek = {
Eth = -21;
Lslash = -11;
};
f = {
quotedblright = 58;
};
f_f = {
quotedblright = 58;
};
fi = {
Eth = -15;
Lslash = -5;
};
fl = {
Eth = -14;
};
g = {
Eth = -17;
};
gbreve = {
Eth = -17;
};
gcircumflex = {
Eth = -17;
};
gcommaaccent = {
Eth = -17;
};
gdotaccent = {
Eth = -17;
};
h = {
Eth = -16;
};
hbar = {
Eth = -16;
};
hcircumflex = {
Eth = -16;
};
i = {
Eth = -15;
Lslash = -5;
};
iacute = {
Eth = -15;
Lslash = -5;
};
ibreve = {
Eth = -15;
Lslash = -5;
};
icircumflex = {
Eth = -15;
Lslash = -5;
};
idieresis = {
Eth = -15;
Lslash = -5;
};
idotless = {
Eth = -15;
Lslash = -5;
};
igrave = {
Eth = -15;
Lslash = -5;
};
ij = {
B = -7;
};
imacron = {
Eth = -15;
Lslash = -5;
};
iogonek = {
Eth = -15;
Lslash = -5;
};
itilde = {
Eth = -15;
Lslash = -5;
};
j = {
B = -7;
};
jcircumflex = {
B = -7;
};
jdotless = {
B = -7;
};
k = {
Eth = -21;
Lslash = -5;
};
kcommaaccent = {
Eth = -21;
Lslash = -5;
};
kgreenlandic = {
Eth = -21;
Lslash = -5;
};
l = {
Eth = -14;
};
lacute = {
Eth = -14;
};
lcaron = {
Eth = -14;
};
lcommaaccent = {
Eth = -14;
};
ldot = {
Eth = -14;
};
lslash = {
Eth = -14;
};
m = {
Eth = -16;
};
n = {
Eth = -16;
};
nacute = {
Eth = -16;
};
napostrophe = {
Eth = -16;
};
ncaron = {
Eth = -16;
};
ncommaaccent = {
Eth = -16;
};
ntilde = {
Eth = -16;
};
o = {
B = -13;
Eth = -20;
Lslash = -14;
};
oacute = {
B = -13;
Eth = -20;
Lslash = -14;
};
obreve = {
B = -13;
Eth = -20;
Lslash = -14;
};
ocircumflex = {
B = -13;
Eth = -20;
Lslash = -14;
};
odieresis = {
B = -13;
Eth = -20;
Lslash = -14;
};
oe = {
Eth = -21;
Lslash = -11;
};
ograve = {
B = -13;
Eth = -20;
Lslash = -14;
};
ohungarumlaut = {
B = -13;
Eth = -20;
Lslash = -14;
};
omacron = {
B = -13;
Eth = -20;
Lslash = -14;
};
oslash = {
B = -13;
Eth = -20;
Lslash = -14;
};
oslashacute = {
B = -13;
Eth = -20;
Lslash = -14;
};
otilde = {
B = -13;
Eth = -20;
Lslash = -14;
};
p = {
B = -13;
Eth = -20;
Lslash = -14;
};
parenleft = {
B = -19;
};
period = {
quoteleft = -94;
};
q = {
Eth = -17;
};
quotedbl = {
quotedblbase = -130;
};
quotedblbase = {
quotedbl = -127;
quoteleft = -94;
};
quotedblright = {
A = -37;
AE = -37;
AEacute = -37;
Aacute = -37;
Abreve = -37;
Acircumflex = -37;
Adieresis = -37;
Agrave = -37;
Amacron = -37;
Aogonek = -37;
Aring = -37;
Atilde = -37;
a = -57;
aacute = -57;
abreve = -57;
acircumflex = -57;
adieresis = -57;
ae = -57;
aeacute = -57;
agrave = -57;
amacron = -57;
aogonek = -57;
aring = -57;
atilde = -57;
c = -57;
cacute = -57;
ccaron = -57;
ccedilla = -57;
ccircumflex = -57;
cdotaccent = -57;
cent = -57;
d = -57;
dcaron = -57;
dcroat = -57;
e = -57;
eacute = -57;
ebreve = -57;
ecaron = -57;
ecircumflex = -57;
edieresis = -57;
edotaccent = -57;
egrave = -57;
emacron = -57;
eng = -36;
eogonek = -57;
g = -57;
gbreve = -57;
gcircumflex = -57;
gcommaaccent = -57;
gdotaccent = -57;
m = -36;
n = -36;
nacute = -36;
napostrophe = -36;
ncaron = -36;
ncommaaccent = -36;
ntilde = -36;
o = -57;
oacute = -57;
obreve = -57;
ocircumflex = -57;
odieresis = -57;
oe = -57;
ograve = -57;
ohungarumlaut = -57;
omacron = -57;
oslash = -57;
oslashacute = -57;
otilde = -57;
p = -36;
q = -57;
r = -36;
racute = -36;
rcaron = -36;
rcommaaccent = -36;
u = -35;
uacute = -35;
ubreve = -35;
ucircumflex = -35;
udieresis = -35;
ugrave = -35;
uhungarumlaut = -35;
umacron = -35;
uogonek = -35;
uring = -35;
utilde = -35;
y = -35;
yacute = -35;
ycircumflex = -35;
ydieresis = -35;
ygrave = -35;
z = -45;
zacute = -45;
zcaron = -45;
zdotaccent = -45;
};
quoteright = {
A = -37;
AE = -37;
AEacute = -37;
Aacute = -37;
Abreve = -37;
Acircumflex = -37;
Adieresis = -37;
Agrave = -37;
Amacron = -37;
Aogonek = -37;
Aring = -37;
Atilde = -37;
a = -57;
aacute = -57;
abreve = -57;
acircumflex = -57;
adieresis = -57;
ae = -57;
aeacute = -57;
agrave = -57;
amacron = -57;
aogonek = -57;
aring = -57;
atilde = -57;
c = -57;
cacute = -57;
ccaron = -57;
ccedilla = -57;
ccircumflex = -57;
cdotaccent = -57;
cent = -57;
comma = -92;
d = -57;
dcaron = -57;
dcroat = -57;
e = -57;
eacute = -57;
ebreve = -57;
ecaron = -57;
ecircumflex = -57;
edieresis = -57;
edotaccent = -57;
egrave = -57;
ellipsis = -92;
emacron = -57;
eng = -36;
eogonek = -57;
g = -57;
gbreve = -57;
gcircumflex = -57;
gcommaaccent = -57;
gdotaccent = -57;
m = -36;
n = -36;
nacute = -36;
napostrophe = -36;
ncaron = -36;
ncommaaccent = -36;
ntilde = -36;
o = -57;
oacute = -57;
obreve = -57;
ocircumflex = -57;
odieresis = -57;
oe = -57;
ograve = -57;
ohungarumlaut = -57;
omacron = -57;
oslash = -57;
oslashacute = -57;
otilde = -57;
p = -36;
period = -92;
q = -57;
quotedblbase = -92;
quotesinglbase = -92;
r = -36;
racute = -36;
rcaron = -36;
rcommaaccent = -36;
u = -35;
uacute = -35;
ubreve = -35;
ucircumflex = -35;
udieresis = -35;
ugrave = -35;
uhungarumlaut = -35;
umacron = -35;
uogonek = -35;
uring = -35;
utilde = -35;
y = -35;
yacute = -35;
ycircumflex = -35;
ydieresis = -35;
ygrave = -35;
z = -45;
zacute = -45;
zcaron = -45;
zdotaccent = -45;
};
quotesinglbase = {
quoteleft = -94;
};
r = {
Eth = -23;
Lslash = -8;
};
racute = {
Eth = -23;
Lslash = -8;
};
rcaron = {
Eth = -23;
Lslash = -8;
};
rcommaaccent = {
Eth = -23;
Lslash = -8;
};
s = {
Eth = -26;
};
sacute = {
Eth = -26;
};
scaron = {
Eth = -26;
};
scedilla = {
Eth = -26;
};
scircumflex = {
Eth = -26;
};
scommaaccent = {
Eth = -26;
};
seven = {
Eth = -12;
cent = -23;
};
t = {
Eth = -17;
};
tbar = {
Eth = -17;
};
tcaron = {
Eth = -17;
};
tcommaaccent = {
Eth = -17;
};
thorn = {
B = -13;
Eth = -20;
Lslash = -14;
};
u = {
Eth = -17;
Lslash = -5;
};
uacute = {
Eth = -17;
Lslash = -5;
};
ubreve = {
Eth = -17;
Lslash = -5;
};
ucircumflex = {
Eth = -17;
Lslash = -5;
};
udieresis = {
Eth = -17;
Lslash = -5;
};
ugrave = {
Eth = -17;
Lslash = -5;
};
uhungarumlaut = {
Eth = -17;
Lslash = -5;
};
umacron = {
Eth = -17;
Lslash = -5;
};
uogonek = {
Eth = -17;
Lslash = -5;
};
uring = {
Eth = -17;
Lslash = -5;
};
utilde = {
Eth = -17;
Lslash = -5;
};
v = {
Eth = -26;
};
w = {
B = -16;
Lslash = -17;
};
wacute = {
B = -16;
Lslash = -17;
};
wcircumflex = {
B = -16;
Lslash = -17;
};
wdieresis = {
B = -16;
Lslash = -17;
};
wgrave = {
B = -16;
Lslash = -17;
};
x = {
Eth = -16;
};
y = {
Eth = -14;
};
yacute = {
Eth = -14;
};
ycircumflex = {
Eth = -14;
};
ydieresis = {
Eth = -14;
};
ygrave = {
Eth = -14;
};
z = {
Eth = -23;
};
zacute = {
Eth = -23;
};
zcaron = {
Eth = -23;
};
zdotaccent = {
Eth = -23;
};
};
};
manufacturer = "Eduardo Rodriguez Tunni, Modular Infotech, Brian J. Bonislawsky";
manufacturerURL = "http://www.tipo.net.ar";
unitsPerEm = 1000;
versionMajor = 1;
versionMinor = 4;
}
