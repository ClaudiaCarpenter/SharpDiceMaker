{
.appVersion = "113";
DisplayStrings = (
"1"
);
copyright = "Copyright (c) 2015 CJ Type. All rights reserved.";
date = "2016-10-14 02:40:29 +0000";
designer = "CJ Dunn";
designerURL = "http://cjtype.com";
familyName = DunbarTall;
featurePrefixes = (
{
automatic = 1;
code = "languagesystem DFLT dflt;\012languagesystem latn dflt;\012languagesystem latn ROM;\012languagesystem latn NLD;\012languagesystem latn MOL;\012languagesystem latn CAT;\012";
name = Languagesystems;
}
);
features = (
{
automatic = 1;
code = "feature locl;\012feature frac;\012feature ordn;\012";
name = aalt;
},
{
automatic = 1;
code = "script latn;\012language ROM;\012sub Scedilla by Scommaaccent;\012sub scedilla by scommaaccent;\012language NLD;\012sub iacute j' by jacute;\012sub Iacute J' by Jacute;\012language MOL;\012sub Scedilla by Scommaaccent;\012sub scedilla by scommaaccent;\012language CAT;\012sub  l' periodcentered' l by ldot;\012sub  L' periodcentered' L by Ldot;\012";
name = locl;
},
{
automatic = 1;
code = "lookup FRAC {\012	sub slash by fraction;\012} FRAC;\012lookup UP {\012	sub [zero one two three four five six seven eight nine] by [zero.numr one.numr two.numr three.numr four.numr five.numr six.numr seven.numr eight.numr nine.numr];\012} UP;\012lookup DOWN {\012	sub fraction [zero.numr one.numr two.numr three.numr four.numr five.numr six.numr seven.numr eight.numr nine.numr]' by [zero.dnom one.dnom two.dnom three.dnom four.dnom five.dnom six.dnom seven.dnom eight.dnom nine.dnom];\012	sub [zero.dnom one.dnom two.dnom three.dnom four.dnom five.dnom six.dnom seven.dnom eight.dnom nine.dnom] [zero.numr one.numr two.numr three.numr four.numr five.numr six.numr seven.numr eight.numr nine.numr]' by [zero.dnom one.dnom two.dnom three.dnom four.dnom five.dnom six.dnom seven.dnom eight.dnom nine.dnom];\012} DOWN;\012";
name = frac;
},
{
automatic = 1;
code = "sub [zero one two three four five six seven eight nine] [A a]' by ordfeminine;\012sub [zero one two three four five six seven eight nine] [O o]' by ordmasculine;\012";
name = ordn;
},
{
automatic = 1;
code = "sub I Jacute by I_Jacute;\012sub c h by c_h;\012sub c k by c_k;\012sub i jacute by i_jacute;\012";
name = dlig;
},
{
automatic = 1;
code = "sub f f i by f_f_i;\012sub f f l by f_f_l;\012sub f f by f_f;\012sub f i by f_i;\012sub f l by f_l;\012";
name = liga;
}
);
fontMaster = (
{
ascender = 780;
capHeight = 746;
customParameters = (
{
name = "Prep Table Assembly";
value = "SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\012200 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 1 \012INSTCTRL[ ]	/* SetInstrExecControl */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012WCVTF[ ]	/* WriteCVTInFUnits */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 5 values pushed */\0120 0 31 3 0 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 8 values pushed */\01250 4 38 4 18 8 3 8 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 8 values pushed */\01256 2 44 2 28 6 3 8 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 10 \012WS[ ]	/* WriteStore */\012PUSHW[ ]	/* 5 values pushed */\0123264 2496 1216 3 9 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 13 \012WS[ ]	/* WriteStore */\012PUSHW[ ]	/* 5 values pushed */\01264 64 64 3 9 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01236 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GETINFO[ ]	/* GetInfo */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0123 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01238 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 3 values pushed */\0122176 1 1088 \012GETINFO[ ]	/* GetInfo */\012MUL[ ]	/* Multiply */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01252 4 40 4 20 8 3 12 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHW[ ]	/* 1 value pushed */\012511 \012SCANCTRL[ ]	/* ScanConversionControl */\012PUSHB[ ]	/* 1 value pushed */\0124 \012SCANTYPE[ ]	/* ScanType */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 4 values pushed */\0125 100 6 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */";
},
{
name = "Fpgm Table Assembly";
value = "PUSHB[ ]	/* 1 value pushed */\0120 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012RCVT[ ]	/* ReadCVT */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\01214 \012LTEQ[ ]	/* LessThenOrEqual */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0126 \012GTEQ[ ]	/* GreaterThanOrEqual */\012AND[ ]	/* LogicalAnd */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01252 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01240 \012EIF[ ]	/* EndIf */\012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012AND[ ]	/* LogicalAnd */\012PUSHB[ ]	/* 3 values pushed */\01240 1 10 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012EIF[ ]	/* EndIf */\012GT[ ]	/* GreaterThan */\012OR[ ]	/* LogicalOr */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012ROLL[ ]	/* RollTopThreeStack */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01280 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 10 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01240 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 10 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0125 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0124 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 2 values pushed */\0125 98 \012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 10 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 2 values pushed */\0121 10 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0123 \012ADD[ ]	/* Add */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0123 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\01248 5 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012SUB[ ]	/* Subtract */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012EIF[ ]	/* EndIf */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0125 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0127 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 3 values pushed */\0120 2 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0126 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0127 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0125 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0127 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0128 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0127 11 0 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01211 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01236 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01212 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01211 10 3 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01213 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 2 \012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\012100 \012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01214 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01213 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01213 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01215 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012MUL[ ]	/* Multiply */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01216 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01213 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01217 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01219 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01218 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 15 \012RS[ ]	/* ReadStore */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01215 15 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01215 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01212 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01213 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01213 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\0120 0 \012SZP0[ ]	/* SetZonePointer0 */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MIAP[0]	/* MoveIndirectAbsPt */\012PUSHB[ ]	/* 3 values pushed */\0121 1 1 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01219 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01215 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01211 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 6 values pushed */\01216 16 1 0 14 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\01218 6 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012117 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01220 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 19 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01221 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 19 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01222 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 19 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01223 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 19 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01224 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 19 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01225 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 19 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01226 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 19 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01227 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 19 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01228 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 19 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01229 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 19 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01241 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0126 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP1[ ]	/* DeltaExceptionP1 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01242 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01222 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP2[ ]	/* DeltaExceptionP2 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01243 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01238 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP3[ ]	/* DeltaExceptionP3 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01230 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01213 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01215 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01211 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 6 values pushed */\01216 16 1 0 14 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\01218 6 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012117 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01231 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 30 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 30 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01233 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 30 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01234 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 30 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01235 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 30 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01236 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 30 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01237 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 30 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01238 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 30 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01239 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 30 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01240 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 30 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01244 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01245 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01216 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01244 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01246 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01245 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01245 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01248 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01247 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01249 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01213 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01247 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01250 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012SHC[1]	/* ShiftContourByLastPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01251 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 5 values pushed */\0120 0 0 0 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012MIAP[0]	/* MoveIndirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01250 1 \012SZP2[ ]	/* SetZonePointer2 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01252 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01253 \012FDEF[ ]	/* FunctionDefinition */\012MDAP[0]	/* MoveDirectAbsPt */\012SLOOP[ ]	/* SetLoopVariable */\012ALIGNRP[ ]	/* AlignRelativePt */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01254 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01255 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012SZPS[ ]	/* SetZonePointerS */\012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01254 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01256 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0129 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012NEG[ ]	/* Negate */\012ROLL[ ]	/* RollTopThreeStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0129 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0122 32 3 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0122 38 3 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0123 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012RS[ ]	/* ReadStore */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01260 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01261 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01262 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01246 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01263 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01246 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01264 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01246 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01265 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01256 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01246 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01266 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012CALL[ ]	/* CallFunction */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0124 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01246 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01246 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01267 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0129 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01246 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01268 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 4 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0129 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0122 32 3 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0122 38 3 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0123 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\01246 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01269 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01256 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01246 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01270 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012CALL[ ]	/* CallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0124 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01246 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01246 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01271 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01252 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01272 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01252 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01273 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 1 \012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012PUSHB[ ]	/* 1 value pushed */\01253 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01274 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01255 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01275 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012RCVT[ ]	/* ReadCVT */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01246 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01276 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01275 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01277 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01278 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01279 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01280 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01281 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01282 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01283 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01284 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01285 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 65 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01286 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 65 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01287 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 65 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01288 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 65 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01289 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01290 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01291 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01292 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01293 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01294 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01295 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01296 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01297 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 66 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01298 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 66 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01299 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 66 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012100 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 66 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012101 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01246 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012102 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01262 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012103 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01263 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012104 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01258 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012105 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01246 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012106 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01262 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012107 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01263 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012108 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012109 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01260 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01246 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012110 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01260 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01262 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012111 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01260 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01263 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012112 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01260 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012113 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01261 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01246 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012114 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01261 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01262 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012115 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01261 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01263 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012116 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01261 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012117 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0129 4 2 3 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0128 \012NEG[ ]	/* Negate */\012PUSHB[ ]	/* 1 value pushed */\0123 \012DEPTH[ ]	/* GetDepthStack */\012LT[ ]	/* LessThan */\012JROT[ ]	/* JumpRelativeOnTrue */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = (
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
116,
116,
95,
95,
746,
0,
780,
574,
0,
-220,
1071,
-221,
770,
-24,
792,
603,
-18,
-222,
1071,
-221,
88,
88,
75,
75,
267,
-200,
1071,
-221,
282,
-215,
1071,
-221,
88,
88,
75,
75,
746,
279,
1071,
-221,
762,
264,
1071,
-221
);
}
);
descender = -220;
id = "952C609B-CA64-4350-B6E7-D316939CE488";
weightValue = 400;
widthValue = 5;
xHeight = 574;
}
);
glyphs = (
{
glyphname = A;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"491 239 LINE",
"216 239 LINE",
"354 597 LINE"
);
},
{
closed = 1;
nodes = (
"583 0 LINE",
"708 0 LINE",
"414 746 LINE",
"297 746 LINE",
"2 0 LINE",
"124 0 LINE",
"178 141 LINE",
"529 141 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\0121 1 0 3 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 22 values pushed */\0125 1 0 0 1 2 0 1 98 0 3 3 20 75 6 4 2 2 2 21 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 22 values pushed */\0120 3 0 3 114 5 1 0 0 1 2 0 1 98 6 4 2 2 2 24 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 30 values pushed */\0120 3 0 3 114 6 4 2 2 1 2 115 5 1 0 1 1 0 85 5 1 0 0 1 90 0 1 0 1 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 21 values pushed */\0123 3 0 0 3 10 3 10 9 8 7 6 5 4 0 2 0 2 7 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 710;
}
);
leftKerningGroup = A;
note = A;
rightKerningGroup = A;
unicode = 0041;
},
{
glyphname = Aacute;
layers = (
{
components = (
{
alignment = -1;
name = A;
},
{
alignment = -1;
name = acute.cmb;
transform = "{1, 0, 0, 1, 394, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 710;
}
);
leftKerningGroup = A;
note = Aacute;
rightKerningGroup = A;
unicode = 00C1;
},
{
glyphname = Abreve;
layers = (
{
components = (
{
alignment = -1;
name = A;
},
{
alignment = -1;
name = breve.cmb;
transform = "{1, 0, 0, 1, 354, 163}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 710;
}
);
leftKerningGroup = A;
note = Abreve;
rightKerningGroup = A;
unicode = 0102;
},
{
glyphname = Acircumflex;
layers = (
{
components = (
{
alignment = -1;
name = A;
},
{
alignment = -1;
name = circumflex.cmb;
transform = "{1, 0, 0, 1, 356, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 710;
}
);
leftKerningGroup = A;
note = Acircumflex;
rightKerningGroup = A;
unicode = 00C2;
},
{
glyphname = Adieresis;
layers = (
{
components = (
{
alignment = -1;
name = A;
},
{
alignment = -1;
name = dieresis.cmb;
transform = "{1, 0, 0, 1, 354, 132}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 710;
}
);
leftKerningGroup = A;
note = Adieresis;
rightKerningGroup = A;
unicode = 00C4;
},
{
glyphname = Agrave;
layers = (
{
components = (
{
alignment = -1;
name = A;
},
{
alignment = -1;
name = grave.cmb;
transform = "{1, 0, 0, 1, 308, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 710;
}
);
leftKerningGroup = A;
note = Agrave;
rightKerningGroup = A;
unicode = 00C0;
},
{
glyphname = Amacron;
layers = (
{
components = (
{
alignment = -1;
name = A;
},
{
alignment = -1;
name = macron.cmb;
transform = "{1, 0, 0, 1, 354, 140}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 710;
}
);
leftKerningGroup = A;
note = Amacron;
rightKerningGroup = A;
unicode = 0100;
},
{
glyphname = Aogonek;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"668.333 -174.667 OFFCURVE",
"702.667 -157.333 OFFCURVE",
"720 -140 CURVE",
"685 -96 LINE",
"677 -102.667 OFFCURVE",
"665 -110 OFFCURVE",
"649 -110 CURVE SMOOTH",
"630.333 -110 OFFCURVE",
"618 -97 OFFCURVE",
"618 -81 CURVE SMOOTH",
"618 -65 OFFCURVE",
"628.667 -51.667 OFFCURVE",
"658 -33 CURVE SMOOTH",
"708 0 LINE",
"414 746 LINE",
"297 746 LINE",
"2 0 LINE",
"124 0 LINE",
"178 141 LINE",
"529 141 LINE",
"587 -9 LINE",
"555 -30.333 OFFCURVE",
"529 -61.333 OFFCURVE",
"529 -100 CURVE SMOOTH",
"529 -138.667 OFFCURVE",
"557.667 -176 OFFCURVE",
"623 -176 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"492 239 LINE",
"216 239 LINE",
"354 597 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */\01228 1 5 3 23 6 2 4 2 24 1 0 4 3 74 13 1 2 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 28 values pushed */\0127 1 5 0 1 2 5 1 98 0 4 6 1 0 4 0 95 0 3 3 20 75 0 2 2 21 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 28 values pushed */\0120 3 5 3 114 7 1 5 0 1 2 5 1 98 0 4 6 1 0 4 0 95 0 2 2 24 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 39 values pushed */\0120 3 5 3 114 0 2 1 4 1 2 4 112 7 1 5 0 1 2 5 1 98 0 4 0 0 4 87 0 4 4 0 91 6 1 0 4 0 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 23 values pushed */\01227 27 1 0 27 29 27 29 21 19 12 11 10 9 8 7 0 26 1 26 8 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 710;
}
);
leftKerningGroup = A;
note = Aogonek;
rightKerningGroup = A;
unicode = 0104;
},
{
glyphname = Aring;
layers = (
{
components = (
{
alignment = -1;
name = A;
},
{
alignment = -1;
name = ring.cmb;
transform = "{1, 0, 0, 1, 354, 55}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 710;
}
);
leftKerningGroup = A;
note = Aring;
rightKerningGroup = A;
unicode = 00C5;
},
{
glyphname = Aringacute;
layers = (
{
components = (
{
alignment = -1;
name = A;
},
{
alignment = -1;
name = ring.cmb;
transform = "{1, 0, 0, 1, 354, 55}";
},
{
alignment = -1;
name = acute.cmb;
transform = "{1, 0, 0, 1, 394, 307}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 710;
}
);
leftKerningGroup = A;
note = Aringacute;
rightKerningGroup = A;
unicode = 01FA;
},
{
glyphname = Atilde;
layers = (
{
components = (
{
alignment = -1;
name = A;
},
{
alignment = -1;
name = tilde.cmb;
transform = "{1, 0, 0, 1, 354, 165}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 710;
}
);
leftKerningGroup = A;
note = Atilde;
rightKerningGroup = A;
unicode = 00C3;
},
{
glyphname = AE;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"480 239 LINE",
"209 239 LINE",
"344 622 LINE"
);
},
{
closed = 1;
nodes = (
"565 0 LINE",
"945 0 LINE",
"945 102 LINE",
"651 102 LINE",
"561 338 LINE",
"818 338 LINE",
"818 440 LINE",
"522 440 LINE",
"444 644 LINE",
"729 644 LINE",
"729 746 LINE",
"288 746 LINE",
"2 0 LINE",
"125 0 LINE",
"175 141 LINE",
"515 141 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\0121 1 5 4 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 40 values pushed */\0120 5 0 6 0 5 6 97 9 1 0 0 1 7 0 1 97 0 4 4 3 89 0 3 3 20 75 0 7 7 2 89 10 8 2 2 2 21 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 38 values pushed */\0120 3 0 4 5 3 4 97 0 5 0 6 0 5 6 97 9 1 0 0 1 7 0 1 97 0 7 7 2 89 10 8 2 2 2 24 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 43 values pushed */\0120 3 0 4 5 3 4 97 0 5 0 6 0 5 6 97 9 1 0 0 1 7 0 1 97 0 7 2 2 7 85 0 7 7 2 89 10 8 2 2 7 2 77 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 29 values pushed */\0123 3 0 0 3 18 3 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 0 2 0 2 11 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 947;
}
);
leftKerningGroup = A;
note = AE;
rightKerningGroup = AE;
unicode = 00C6;
},
{
glyphname = AEacute;
layers = (
{
components = (
{
alignment = -1;
name = AE;
},
{
alignment = -1;
name = acute.cmb;
transform = "{1, 0, 0, 1, 408, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 947;
}
);
leftKerningGroup = A;
note = AEacute;
rightKerningGroup = AE;
unicode = 01FC;
},
{
glyphname = B;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"434.183 0 OFFCURVE",
"517 88.335 OFFCURVE",
"517 201 CURVE SMOOTH",
"517 283.667 OFFCURVE",
"473 355.667 OFFCURVE",
"397 393 CURVE",
"455.667 430.333 OFFCURVE",
"489 491.667 OFFCURVE",
"489 557 CURVE SMOOTH",
"489 673.672 OFFCURVE",
"415.873 746 OFFCURVE",
"259 746 CURVE SMOOTH",
"51 746 LINE",
"51 0 LINE",
"280 0 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"347 646 OFFCURVE",
"380 601.333 OFFCURVE",
"380 544 CURVE SMOOTH",
"380 478.667 OFFCURVE",
"325.667 431 OFFCURVE",
"235 431 CURVE SMOOTH",
"169 431 LINE",
"169 646 LINE",
"239 646 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"342 336 OFFCURVE",
"398 288.667 OFFCURVE",
"398 214 CURVE SMOOTH",
"396.667 155.333 OFFCURVE",
"364.667 100 OFFCURVE",
"254 100 CURVE SMOOTH",
"169 100 LINE",
"169 336 LINE",
"250 336 LINE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\01211 1 4 3 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 32 values pushed */\0120 3 8 1 4 5 3 4 97 7 1 2 2 1 89 0 1 1 20 75 0 5 5 0 89 6 1 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 30 values pushed */\0120 1 7 1 2 3 1 2 99 0 3 8 1 4 5 3 4 97 0 5 5 0 89 6 1 0 0 24 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 35 values pushed */\0120 1 7 1 2 3 1 2 99 0 3 8 1 4 5 3 4 97 0 5 0 0 5 85 0 5 5 0 89 6 1 0 5 0 77 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 27 values pushed */\01229 28 20 19 1 0 32 30 28 36 29 36 23 21 19 27 20 27 4 2 0 18 1 18 9 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 547;
}
);
leftKerningGroup = B;
note = B;
rightKerningGroup = B;
unicode = 0042;
},
{
glyphname = C;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"552 757.333 OFFCURVE",
"495.333 770 OFFCURVE",
"434 770 CURVE SMOOTH",
"319.333 770 OFFCURVE",
"216.167 725.833 OFFCURVE",
"143.5 654.5 CURVE SMOOTH",
"70.833 583.167 OFFCURVE",
"26 483.333 OFFCURVE",
"26 374 CURVE SMOOTH",
"26 264.667 OFFCURVE",
"70.833 163.833 OFFCURVE",
"143.5 92.5 CURVE SMOOTH",
"216.167 21.167 OFFCURVE",
"319.333 -24 OFFCURVE",
"434 -24 CURVE SMOOTH",
"495.333 -24 OFFCURVE",
"553.333 -11.333 OFFCURVE",
"604 14 CURVE",
"604 131 LINE",
"556 101.667 OFFCURVE",
"500 84 OFFCURVE",
"440 84 CURVE SMOOTH",
"277.012 84 OFFCURVE",
"145 217.15 OFFCURVE",
"145 375 CURVE SMOOTH",
"145 529.569 OFFCURVE",
"277.72 662 OFFCURVE",
"440 662 CURVE SMOOTH",
"500 662 OFFCURVE",
"556 645.667 OFFCURVE",
"604 615 CURVE",
"604 732 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */\0120 1 0 3 17 1 2 1 0 18 1 2 1 3 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 21 values pushed */\0120 0 0 3 91 0 3 3 28 75 0 1 1 2 91 0 2 2 29 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 21 values pushed */\0120 0 0 3 91 0 3 3 22 75 0 1 1 2 91 0 2 2 32 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 18 values pushed */\0120 1 0 2 1 2 95 0 0 0 3 91 0 3 3 22 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 24 values pushed */\0120 3 0 0 1 3 0 99 0 1 2 2 1 87 0 1 1 2 91 0 2 1 2 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 7 values pushed */\01240 37 40 35 4 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 639;
}
);
leftKerningGroup = C;
note = C;
rightKerningGroup = C;
unicode = 0043;
},
{
glyphname = Cacute;
layers = (
{
components = (
{
alignment = -1;
name = C;
},
{
alignment = -1;
name = acute.cmb;
transform = "{1, 0, 0, 1, 447, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 639;
}
);
leftKerningGroup = C;
note = Cacute;
rightKerningGroup = C;
unicode = 0106;
},
{
glyphname = Ccaron;
layers = (
{
components = (
{
alignment = -1;
name = C;
},
{
alignment = -1;
name = caron.cmb;
transform = "{1, 0, 0, 1, 410, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 639;
}
);
leftKerningGroup = C;
note = Ccaron;
rightKerningGroup = C;
unicode = 010C;
},
{
glyphname = Ccedilla;
layers = (
{
components = (
{
alignment = -1;
name = C;
},
{
alignment = -1;
name = cedilla.cmb;
transform = "{1, 0, 0, 1, 415, -24}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 639;
}
);
leftKerningGroup = C;
note = Ccedilla;
rightKerningGroup = C;
unicode = 00C7;
},
{
glyphname = Ccircumflex;
layers = (
{
components = (
{
alignment = -1;
name = C;
},
{
alignment = -1;
name = circumflex.cmb;
transform = "{1, 0, 0, 1, 409, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 639;
}
);
leftKerningGroup = C;
note = Ccircumflex;
rightKerningGroup = C;
unicode = 0108;
},
{
glyphname = Cdotaccent;
layers = (
{
components = (
{
alignment = -1;
name = C;
},
{
alignment = -1;
name = dotaccent.cmb;
transform = "{1, 0, 0, 1, 407, 173}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 639;
}
);
leftKerningGroup = C;
note = Cdotaccent;
rightKerningGroup = C;
unicode = 010A;
},
{
glyphname = D;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"51 0 LINE",
"247 0 LINE SMOOTH",
"345.667 0 OFFCURVE",
"440.5 32.333 OFFCURVE",
"510.5 95 CURVE SMOOTH",
"580.5 157.667 OFFCURVE",
"627 251.333 OFFCURVE",
"627 374 CURVE SMOOTH",
"627 495.333 OFFCURVE",
"580.5 588.333 OFFCURVE",
"510.5 651 CURVE SMOOTH",
"440.5 713.667 OFFCURVE",
"344.333 746 OFFCURVE",
"247 746 CURVE SMOOTH",
"51 746 LINE"
);
},
{
closed = 1;
nodes = (
"169 640 LINE",
"247 640 LINE SMOOTH",
"391.492 640 OFFCURVE",
"508 540.154 OFFCURVE",
"508 374 CURVE SMOOTH",
"508 205.836 OFFCURVE",
"391.565 106 OFFCURVE",
"247 106 CURVE SMOOTH",
"169 106 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 23 values pushed */\0125 1 3 3 0 89 0 0 0 20 75 0 2 2 1 89 4 1 1 1 21 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 21 values pushed */\0120 0 5 1 3 2 0 3 97 0 2 2 1 89 4 1 1 1 24 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 26 values pushed */\0120 0 5 1 3 2 0 3 97 0 2 1 1 2 85 0 2 2 1 89 4 1 1 2 1 77 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 18 values pushed */\01213 13 0 0 13 25 13 24 16 14 0 12 0 11 33 6 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 657;
}
);
leftKerningGroup = B;
note = D;
rightKerningGroup = D;
unicode = 0044;
},
{
glyphname = Eth;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"351.667 0 OFFCURVE",
"447.5 32.333 OFFCURVE",
"517.5 95 CURVE SMOOTH",
"587.5 157.667 OFFCURVE",
"633 251.333 OFFCURVE",
"633 374 CURVE SMOOTH",
"633 495.333 OFFCURVE",
"586.5 588.333 OFFCURVE",
"516.5 651 CURVE SMOOTH",
"446.5 713.667 OFFCURVE",
"351.667 746 OFFCURVE",
"253 746 CURVE SMOOTH",
"57 746 LINE",
"57 428 LINE",
"6 428 LINE",
"6 333 LINE",
"57 333 LINE",
"57 0 LINE",
"253 0 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"175 106 LINE",
"175 333 LINE",
"309 333 LINE",
"309 428 LINE",
"175 428 LINE",
"175 640 LINE",
"253 640 LINE SMOOTH",
"398.079 640 OFFCURVE",
"514 541.1 OFFCURVE",
"514 374 CURVE SMOOTH",
"514 205.305 OFFCURVE",
"397.712 106 OFFCURVE",
"253 106 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 32 values pushed */\0126 1 2 7 1 1 4 2 1 97 0 5 5 3 89 0 3 3 20 75 0 4 4 0 89 8 1 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 30 values pushed */\0120 3 0 5 2 3 5 97 6 1 2 7 1 1 4 2 1 97 0 4 4 0 89 8 1 0 0 24 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 35 values pushed */\0120 3 0 5 2 3 5 97 6 1 2 7 1 1 4 2 1 97 0 4 0 0 4 85 0 4 4 0 89 8 1 0 4 0 77 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 23 values pushed */\0121 0 33 32 31 30 29 27 19 17 8 6 5 4 3 2 0 16 1 16 9 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 663;
}
);
note = Eth;
rightKerningGroup = D;
unicode = 00D0;
},
{
glyphname = Dcaron;
layers = (
{
components = (
{
alignment = -1;
name = D;
},
{
alignment = -1;
name = caron.cmb;
transform = "{1, 0, 0, 1, 301, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 657;
}
);
leftKerningGroup = B;
note = Dcaron;
rightKerningGroup = D;
unicode = 010E;
},
{
glyphname = Dcroat;
layers = (
{
components = (
{
alignment = -1;
name = Eth;
transform = "{1, 0, 0, 1, 4, 0}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 667;
}
);
note = Dcroat;
rightKerningGroup = D;
unicode = 0110;
},
{
glyphname = E;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"51 0 LINE",
"448 0 LINE",
"448 102 LINE",
"169 102 LINE",
"169 338 LINE",
"417 338 LINE",
"417 440 LINE",
"169 440 LINE",
"169 644 LINE",
"440 644 LINE",
"440 746 LINE",
"51 746 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 30 values pushed */\0120 2 0 3 4 2 3 97 0 1 1 0 89 0 0 0 20 75 0 4 4 5 89 6 1 5 5 21 5 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 28 values pushed */\0120 0 0 1 2 0 1 97 0 2 0 3 4 2 3 97 0 4 4 5 89 6 1 5 5 24 5 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 33 values pushed */\0120 0 0 1 2 0 1 97 0 2 0 3 4 2 3 97 0 4 5 5 4 85 0 4 4 5 89 6 1 5 4 5 77 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\0120 0 0 11 0 11 17 17 17 17 17 7 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 490;
}
);
leftKerningGroup = B;
note = E;
rightKerningGroup = E;
unicode = 0045;
},
{
glyphname = Eacute;
layers = (
{
components = (
{
alignment = -1;
name = E;
},
{
alignment = -1;
name = acute.cmb;
transform = "{1, 0, 0, 1, 295, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 490;
}
);
leftKerningGroup = B;
note = Eacute;
rightKerningGroup = E;
unicode = 00C9;
},
{
glyphname = Ebreve;
layers = (
{
components = (
{
alignment = -1;
name = E;
},
{
alignment = -1;
name = breve.cmb;
transform = "{1, 0, 0, 1, 255, 163}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 490;
}
);
leftKerningGroup = B;
note = Ebreve;
rightKerningGroup = E;
unicode = 0114;
},
{
glyphname = Ecaron;
layers = (
{
components = (
{
alignment = -1;
name = E;
},
{
alignment = -1;
name = caron.cmb;
transform = "{1, 0, 0, 1, 258, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 490;
}
);
leftKerningGroup = B;
note = Ecaron;
rightKerningGroup = E;
unicode = 011A;
},
{
glyphname = Ecircumflex;
layers = (
{
components = (
{
alignment = -1;
name = E;
},
{
alignment = -1;
name = circumflex.cmb;
transform = "{1, 0, 0, 1, 257, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 490;
}
);
leftKerningGroup = B;
note = Ecircumflex;
rightKerningGroup = E;
unicode = 00CA;
},
{
glyphname = Edieresis;
layers = (
{
components = (
{
alignment = -1;
name = E;
},
{
alignment = -1;
name = dieresis.cmb;
transform = "{1, 0, 0, 1, 255, 132}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 490;
}
);
leftKerningGroup = B;
note = Edieresis;
rightKerningGroup = E;
unicode = 00CB;
},
{
glyphname = Edotaccent;
layers = (
{
components = (
{
alignment = -1;
name = E;
},
{
alignment = -1;
name = dotaccent.cmb;
transform = "{1, 0, 0, 1, 255, 173}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 490;
}
);
leftKerningGroup = B;
note = Edotaccent;
rightKerningGroup = E;
unicode = 0116;
},
{
glyphname = Egrave;
layers = (
{
components = (
{
alignment = -1;
name = E;
},
{
alignment = -1;
name = grave.cmb;
transform = "{1, 0, 0, 1, 209, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 490;
}
);
leftKerningGroup = B;
note = Egrave;
rightKerningGroup = E;
unicode = 00C8;
},
{
glyphname = Emacron;
layers = (
{
components = (
{
alignment = -1;
name = E;
},
{
alignment = -1;
name = macron.cmb;
transform = "{1, 0, 0, 1, 255, 140}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 490;
}
);
leftKerningGroup = B;
note = Emacron;
rightKerningGroup = E;
unicode = 0112;
},
{
glyphname = Eogonek;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"425 -96 LINE",
"417 -102.667 OFFCURVE",
"405 -110 OFFCURVE",
"389 -110 CURVE SMOOTH",
"370.333 -110 OFFCURVE",
"358 -97 OFFCURVE",
"358 -81 CURVE SMOOTH",
"358 -65 OFFCURVE",
"368.667 -51.667 OFFCURVE",
"398 -33 CURVE SMOOTH",
"448 0 LINE",
"448 102 LINE",
"169 102 LINE",
"169 338 LINE",
"417 338 LINE",
"417 440 LINE",
"169 440 LINE",
"169 644 LINE",
"440 644 LINE",
"440 746 LINE",
"51 746 LINE",
"51 0 LINE",
"347 0 LINE",
"326 -15 LINE",
"292.667 -36.333 OFFCURVE",
"268 -64 OFFCURVE",
"268 -100 CURVE SMOOTH",
"268 -138.667 OFFCURVE",
"297.667 -176 OFFCURVE",
"363 -176 CURVE SMOOTH",
"408.333 -174.667 OFFCURVE",
"442.667 -157.333 OFFCURVE",
"460 -140 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */\01232 1 7 1 1 74 22 1 1 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 36 values pushed */\0120 4 0 5 6 4 5 97 0 7 0 0 7 0 95 0 3 3 2 89 0 2 2 20 75 0 6 6 1 89 0 1 1 21 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 34 values pushed */\0120 2 0 3 4 2 3 97 0 4 0 5 6 4 5 97 0 7 0 0 7 0 95 0 6 6 1 89 0 1 1 24 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 40 values pushed */\0120 2 0 3 4 2 3 97 0 4 0 5 6 4 5 97 0 6 0 1 7 6 1 97 0 7 0 0 7 87 0 7 7 0 91 0 0 7 0 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 11 values pushed */\01239 17 17 17 17 17 22 34 8 7 28 \012CALL[ ]	/* CallFunction */";
};
width = 490;
}
);
leftKerningGroup = B;
note = Eogonek;
rightKerningGroup = E;
unicode = 0118;
},
{
glyphname = F;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"51 0 LINE",
"169 0 LINE",
"169 320 LINE",
"437 320 LINE",
"437 422 LINE",
"169 422 LINE",
"169 644 LINE",
"468 644 LINE",
"468 746 LINE",
"51 746 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 25 values pushed */\0120 2 0 3 4 2 3 97 0 1 1 0 89 0 0 0 20 75 5 1 4 4 21 4 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 23 values pushed */\0120 0 0 1 2 0 1 97 0 2 0 3 4 2 3 97 5 1 4 4 24 4 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 30 values pushed */\0125 1 4 3 4 115 0 0 0 1 2 0 1 97 0 2 3 3 2 85 0 2 2 3 89 0 3 2 3 77 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 13 values pushed */\0120 0 0 9 0 9 17 17 17 17 6 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 499;
}
);
leftKerningGroup = B;
note = F;
rightKerningGroup = F;
unicode = 0046;
},
{
glyphname = G;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"812 413 LINE",
"501 413 LINE",
"455 308 LINE",
"690 309 LINE",
"671.121 182.239 OFFCURVE",
"565.72 84 OFFCURVE",
"434 84 CURVE SMOOTH",
"273.719 84 OFFCURVE",
"145 217.188 OFFCURVE",
"145 375 CURVE SMOOTH",
"145 529.159 OFFCURVE",
"274.135 662 OFFCURVE",
"434 662 CURVE SMOOTH",
"510 662 OFFCURVE",
"577.667 635.333 OFFCURVE",
"635 582 CURVE",
"716 662 LINE",
"646.667 727.333 OFFCURVE",
"543.333 770 OFFCURVE",
"434 770 CURVE SMOOTH",
"320.667 770 OFFCURVE",
"217.333 725.833 OFFCURVE",
"144 654.5 CURVE SMOOTH",
"70.667 583.167 OFFCURVE",
"26 483.333 OFFCURVE",
"26 374 CURVE SMOOTH",
"26 264.667 OFFCURVE",
"70.667 163.833 OFFCURVE",
"144 92.5 CURVE SMOOTH",
"217.333 21.167 OFFCURVE",
"320.667 -24 OFFCURVE",
"434 -24 CURVE SMOOTH",
"539.333 -24 OFFCURVE",
"635.167 21.333 OFFCURVE",
"702.5 92 CURVE SMOOTH",
"769.833 162.667 OFFCURVE",
"812 262 OFFCURVE",
"812 370 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */\01219 1 5 2 1 74 18 1 2 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 29 values pushed */\0120 5 0 4 3 5 4 97 0 2 2 1 91 0 1 1 28 75 0 3 3 0 91 0 0 0 29 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 29 values pushed */\0120 5 0 4 3 5 4 97 0 2 2 1 91 0 1 1 22 75 0 3 3 0 91 0 0 0 32 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 26 values pushed */\0120 5 0 4 3 5 4 97 0 3 0 0 3 0 95 0 2 2 1 91 0 1 1 22 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 32 values pushed */\0120 1 0 2 5 1 2 99 0 5 0 4 3 5 4 97 0 3 0 0 3 87 0 3 3 0 91 0 0 3 0 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 9 values pushed */\01217 20 40 37 40 36 6 7 26 \012CALL[ ]	/* CallFunction */";
};
width = 837;
}
);
leftKerningGroup = C;
note = G;
rightKerningGroup = G;
unicode = 0047;
},
{
glyphname = Gbreve;
layers = (
{
components = (
{
alignment = -1;
name = G;
},
{
alignment = -1;
name = breve.cmb;
transform = "{1, 0, 0, 1, 434, 163}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 837;
}
);
leftKerningGroup = C;
note = Gbreve;
rightKerningGroup = G;
unicode = 011E;
},
{
glyphname = Gcircumflex;
layers = (
{
components = (
{
alignment = -1;
name = G;
},
{
alignment = -1;
name = circumflex.cmb;
transform = "{1, 0, 0, 1, 436, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 837;
}
);
leftKerningGroup = C;
note = Gcircumflex;
rightKerningGroup = G;
unicode = 011C;
},
{
glyphname = Gcommaaccent;
layers = (
{
components = (
{
alignment = -1;
name = G;
},
{
alignment = -1;
name = commaaccentcomb.cmb;
transform = "{1, 0, 0, 1, 430, -44}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 837;
}
);
leftKerningGroup = C;
note = Gcommaaccent;
rightKerningGroup = G;
unicode = 0122;
},
{
glyphname = Gdotaccent;
layers = (
{
components = (
{
alignment = -1;
name = G;
},
{
alignment = -1;
name = dotaccent.cmb;
transform = "{1, 0, 0, 1, 434, 173}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 837;
}
);
leftKerningGroup = C;
note = Gdotaccent;
rightKerningGroup = G;
unicode = 0120;
},
{
glyphname = H;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"51 0 LINE",
"169 0 LINE",
"169 345 LINE",
"494 345 LINE",
"494 0 LINE",
"612 0 LINE",
"612 746 LINE",
"494 746 LINE",
"494 450 LINE",
"169 450 LINE",
"169 746 LINE",
"51 746 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 22 values pushed */\0120 1 0 4 3 1 4 97 2 1 0 0 20 75 6 5 2 3 3 21 3 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 22 values pushed */\0120 1 0 4 3 1 4 97 2 1 0 0 3 89 6 5 2 3 3 24 3 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 28 values pushed */\0122 1 0 1 3 0 85 0 1 0 4 3 1 4 97 2 1 0 0 3 89 6 5 2 3 0 3 77 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\0120 0 0 11 0 11 17 17 17 17 17 7 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 662;
}
);
leftKerningGroup = B;
note = H;
unicode = 0048;
},
{
glyphname = Hbar;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"172 450 LINE",
"172 545 LINE",
"497 545 LINE",
"497 450 LINE"
);
},
{
closed = 1;
nodes = (
"172 345 LINE",
"497 345 LINE",
"497 0 LINE",
"615 0 LINE",
"615 545 LINE",
"662 545 LINE",
"662 640 LINE",
"615 640 LINE",
"615 746 LINE",
"497 746 LINE",
"497 640 LINE",
"172 640 LINE",
"172 746 LINE",
"54 746 LINE",
"54 640 LINE",
"7 640 LINE",
"7 545 LINE",
"54 545 LINE",
"54 0 LINE",
"172 0 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 34 values pushed */\0128 6 2 4 9 3 2 1 0 4 1 97 0 0 12 1 11 2 0 11 97 7 1 5 5 20 75 10 1 2 2 21 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 34 values pushed */\0128 6 2 4 9 3 2 1 0 4 1 97 0 0 12 1 11 2 0 11 97 7 1 5 5 2 89 10 1 2 2 24 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 40 values pushed */\0127 1 5 4 2 5 85 8 6 2 4 9 3 2 1 0 4 1 97 0 0 12 1 11 2 0 11 97 7 1 5 5 2 89 10 1 2 5 2 77 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 22 values pushed */\0124 4 4 23 4 23 22 21 20 19 17 17 17 17 17 17 18 17 16 13 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 670;
}
);
leftKerningGroup = Hbar;
note = Hbar;
rightKerningGroup = Hbar;
unicode = 0126;
},
{
glyphname = Hcircumflex;
layers = (
{
components = (
{
alignment = -1;
name = H;
},
{
alignment = -1;
name = circumflex.cmb;
transform = "{1, 0, 0, 1, 334, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 662;
}
);
leftKerningGroup = B;
note = Hcircumflex;
unicode = 0124;
},
{
glyphname = I;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"52 0 LINE",
"170 0 LINE",
"170 746 LINE",
"52 746 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 12 values pushed */\0120 0 0 20 75 2 1 1 1 21 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 12 values pushed */\0120 0 0 1 89 2 1 1 1 24 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 17 values pushed */\0120 0 1 1 0 85 0 0 0 1 89 2 1 1 0 1 77 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 10 values pushed */\0120 0 0 3 0 3 17 3 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 221;
}
);
note = I;
rightKerningGroup = I;
unicode = 0049;
},
{
glyphname = IJ;
layers = (
{
components = (
{
alignment = -1;
name = I;
},
{
alignment = -1;
name = J;
transform = "{1, 0, 0, 1, 221, 0}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 555;
}
);
note = IJ;
rightKerningGroup = J;
unicode = 0132;
},
{
glyphname = Iacute;
layers = (
{
components = (
{
alignment = -1;
name = I;
},
{
alignment = -1;
name = acute.cmb;
transform = "{1, 0, 0, 1, 151, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 221;
}
);
note = Iacute;
rightKerningGroup = I;
unicode = 00CD;
},
{
glyphname = Ibreve;
layers = (
{
components = (
{
alignment = -1;
name = I;
},
{
alignment = -1;
name = breve.cmb;
transform = "{1, 0, 0, 1, 111, 163}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 221;
}
);
note = Ibreve;
rightKerningGroup = I;
unicode = 012C;
},
{
glyphname = Icircumflex;
layers = (
{
components = (
{
alignment = -1;
name = I;
},
{
alignment = -1;
name = circumflex.cmb;
transform = "{1, 0, 0, 1, 113, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 221;
}
);
note = Icircumflex;
rightKerningGroup = I;
unicode = 00CE;
},
{
glyphname = Idieresis;
layers = (
{
components = (
{
alignment = -1;
name = I;
},
{
alignment = -1;
name = dieresis.cmb;
transform = "{1, 0, 0, 1, 111, 132}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 221;
}
);
note = Idieresis;
rightKerningGroup = I;
unicode = 00CF;
},
{
glyphname = Idotaccent;
layers = (
{
components = (
{
alignment = -1;
name = I;
},
{
alignment = -1;
name = dotaccent.cmb;
transform = "{1, 0, 0, 1, 111, 173}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 221;
}
);
note = Idotaccent;
rightKerningGroup = I;
unicode = 0130;
},
{
glyphname = Igrave;
layers = (
{
components = (
{
alignment = -1;
name = I;
},
{
alignment = -1;
name = grave.cmb;
transform = "{1, 0, 0, 1, 65, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 221;
}
);
note = Igrave;
rightKerningGroup = I;
unicode = 00CC;
},
{
glyphname = Imacron;
layers = (
{
components = (
{
alignment = -1;
name = I;
},
{
alignment = -1;
name = macron.cmb;
transform = "{1, 0, 0, 1, 111, 140}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 221;
}
);
note = Imacron;
rightKerningGroup = I;
unicode = 012A;
},
{
glyphname = Iogonek;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"129.333 -174.667 OFFCURVE",
"163.333 -157.333 OFFCURVE",
"182 -140 CURVE",
"147 -96 LINE",
"137.667 -102.667 OFFCURVE",
"126 -110 OFFCURVE",
"110 -110 CURVE SMOOTH",
"91.333 -110 OFFCURVE",
"80 -97 OFFCURVE",
"80 -81 CURVE SMOOTH",
"80 -65 OFFCURVE",
"91 -51.667 OFFCURVE",
"119 -33 CURVE SMOOTH",
"170 0 LINE",
"170 746 LINE",
"52 746 LINE",
"52 -4 LINE",
"44 -8 LINE",
"13.333 -32 OFFCURVE",
"-10 -61.333 OFFCURVE",
"-10 -100 CURVE SMOOTH",
"-10 -138.667 OFFCURVE",
"18.667 -176 OFFCURVE",
"84 -176 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */\01220 10 7 3 2 1 21 1 0 2 2 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 14 values pushed */\0120 2 3 1 0 2 0 96 0 1 1 20 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 22 values pushed */\0120 1 2 1 114 0 2 0 0 2 87 0 2 2 0 92 3 1 0 2 0 80 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 13 values pushed */\0121 0 18 16 9 8 0 23 1 23 4 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 221;
}
);
note = Iogonek;
rightKerningGroup = I;
unicode = 012E;
},
{
glyphname = Itilde;
layers = (
{
components = (
{
alignment = -1;
name = I;
},
{
alignment = -1;
name = tilde.cmb;
transform = "{1, 0, 0, 1, 111, 165}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 221;
}
);
note = Itilde;
rightKerningGroup = I;
unicode = 0128;
},
{
glyphname = J;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"32 -9.333 OFFCURVE",
"59.333 -15 OFFCURVE",
"90 -15 CURVE SMOOTH",
"228.667 -13.667 OFFCURVE",
"283 54.667 OFFCURVE",
"283 212 CURVE SMOOTH",
"283 746 LINE",
"165 746 LINE",
"165 245 LINE SMOOTH",
"165 135.584 OFFCURVE",
"137.368 93 OFFCURVE",
"76 93 CURVE SMOOTH",
"52 93 OFFCURVE",
"29.333 99.667 OFFCURVE",
"8 109 CURVE",
"8 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */\0121 1 0 1 0 1 2 0 2 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 16 values pushed */\0120 1 1 20 75 0 0 0 2 92 0 2 2 32 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 16 values pushed */\0120 1 0 1 114 0 0 0 2 92 0 2 2 32 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 21 values pushed */\0120 1 0 1 114 0 0 2 2 0 87 0 0 0 2 92 0 2 0 2 80 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 6 values pushed */\01235 21 35 3 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 334;
}
);
leftKerningGroup = J;
note = J;
rightKerningGroup = J;
unicode = 004A;
},
{
glyphname = Jacute;
layers = (
{
components = (
{
alignment = -1;
name = J;
},
{
alignment = -1;
name = acute.cmb;
transform = "{1, 0, 0, 1, 263, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 334;
}
);
leftKerningGroup = J;
note = Jacute;
rightKerningGroup = J;
},
{
glyphname = Jcircumflex;
layers = (
{
components = (
{
alignment = -1;
name = J;
},
{
alignment = -1;
name = circumflex.cmb;
transform = "{1, 0, 0, 1, 226, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 334;
}
);
leftKerningGroup = J;
note = Jcircumflex;
rightKerningGroup = J;
unicode = 0134;
},
{
glyphname = K;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"464 0 LINE",
"616 0 LINE",
"288 386 LINE",
"590 746 LINE",
"451 746 LINE",
"169 401 LINE",
"169 746 LINE",
"51 746 LINE",
"51 0 LINE",
"169 0 LINE",
"169 355 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */\0129 6 1 3 0 1 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 14 values pushed */\0122 1 1 1 20 75 4 3 2 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 14 values pushed */\0122 1 1 1 0 89 4 3 2 0 0 24 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 20 values pushed */\0122 1 1 0 0 1 85 2 1 1 1 0 89 4 3 2 0 1 0 77 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 12 values pushed */\0120 0 0 10 0 10 18 17 18 5 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 638;
}
);
leftKerningGroup = B;
note = K;
rightKerningGroup = K;
unicode = 004B;
},
{
glyphname = Kcommaaccent;
layers = (
{
components = (
{
alignment = -1;
name = K;
},
{
alignment = -1;
name = commaaccentcomb.cmb;
transform = "{1, 0, 0, 1, 311, -27}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 638;
}
);
leftKerningGroup = B;
note = Kcommaaccent;
rightKerningGroup = K;
unicode = 0136;
},
{
glyphname = L;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"51 746 LINE",
"51 0 LINE",
"435 0 LINE",
"435 106 LINE",
"169 106 LINE",
"169 746 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 16 values pushed */\0120 0 0 20 75 0 1 1 2 90 0 2 2 21 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 16 values pushed */\0120 0 1 0 114 0 1 1 2 90 0 2 2 24 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 21 values pushed */\0120 0 1 0 114 0 1 2 2 1 85 0 1 1 2 90 0 2 1 2 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 6 values pushed */\01217 17 16 3 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 447;
}
);
leftKerningGroup = B;
note = L;
rightKerningGroup = L;
unicode = 004C;
},
{
glyphname = Lacute;
layers = (
{
components = (
{
alignment = -1;
name = L;
},
{
alignment = -1;
name = acute.cmb;
transform = "{1, 0, 0, 1, 150, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 447;
}
);
leftKerningGroup = B;
note = Lacute;
rightKerningGroup = L;
unicode = 0139;
},
{
glyphname = Lcaron;
layers = (
{
components = (
{
alignment = -1;
name = L;
},
{
alignment = -1;
name = caron.vertical;
transform = "{1, 0, 0, 1, 353, 810}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 447;
}
);
leftKerningGroup = B;
note = Lcaron;
rightKerningGroup = L;
unicode = 013D;
},
{
glyphname = Lcommaaccent;
layers = (
{
components = (
{
alignment = -1;
name = L;
},
{
alignment = -1;
name = commaaccentcomb.cmb;
transform = "{1, 0, 0, 1, 268, -27}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 447;
}
);
leftKerningGroup = B;
note = Lcommaaccent;
rightKerningGroup = L;
unicode = 013B;
},
{
glyphname = Ldot;
layers = (
{
components = (
{
alignment = -1;
name = L;
},
{
alignment = -1;
name = dotaccent.cmb;
transform = "{1, 0, 0, 1, 313, -287}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 447;
}
);
note = Ldot;
rightKerningGroup = L;
unicode = 013F;
},
{
glyphname = Lslash;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"435 0 LINE",
"435 106 LINE",
"169 106 LINE",
"169 357 LINE",
"344 444 LINE",
"343 548 LINE",
"169 461 LINE",
"169 746 LINE",
"51 746 LINE",
"51 402 LINE",
"4 378 LINE",
"4 274 LINE",
"51 298 LINE",
"51 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */\01211 10 9 8 5 4 3 2 8 2 1 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 16 values pushed */\0120 1 1 20 75 0 2 2 0 90 0 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 16 values pushed */\0120 1 2 1 114 0 2 2 0 90 0 0 0 24 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 21 values pushed */\0120 1 2 1 114 0 2 0 0 2 85 0 2 2 0 90 0 0 2 0 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 6 values pushed */\01221 21 16 3 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 454;
}
);
leftKerningGroup = Lslash;
note = Lslash;
rightKerningGroup = L;
unicode = 0141;
},
{
glyphname = M;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"417 135 LINE",
"436 135 LINE",
"675 527 LINE",
"675 0 LINE",
"793 0 LINE",
"793 746 LINE",
"675 746 LINE",
"428 335 LINE",
"170 746 LINE",
"51 746 LINE",
"51 0 LINE",
"169 0 LINE",
"169 529 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */\01211 6 1 3 4 1 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 22 values pushed */\0125 1 4 1 0 1 4 0 112 2 1 1 1 20 75 3 1 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 22 values pushed */\0125 1 4 1 0 1 4 0 112 2 1 1 1 0 89 3 1 0 0 24 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 28 values pushed */\0125 1 4 1 0 1 4 0 112 2 1 1 4 0 1 85 2 1 1 1 0 89 3 1 0 1 0 77 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 13 values pushed */\0120 0 0 12 0 12 17 18 17 18 6 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 844;
}
);
leftKerningGroup = B;
note = M;
unicode = 004D;
},
{
glyphname = N;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"560 0 LINE",
"675 0 LINE",
"675 746 LINE",
"557 746 LINE",
"557 199 LINE",
"169 746 LINE",
"51 746 LINE",
"51 0 LINE",
"169 0 LINE",
"169 548 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */\0126 1 2 0 1 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 14 values pushed */\0122 1 1 1 20 75 4 3 2 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 14 values pushed */\0122 1 1 1 0 89 4 3 2 0 0 24 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 20 values pushed */\0122 1 1 0 0 1 85 2 1 1 1 0 89 4 3 2 0 1 0 77 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 12 values pushed */\0120 0 0 9 0 9 18 17 18 5 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 726;
}
);
leftKerningGroup = B;
note = N;
unicode = 004E;
},
{
glyphname = Nacute;
layers = (
{
components = (
{
alignment = -1;
name = N;
},
{
alignment = -1;
name = acute.cmb;
transform = "{1, 0, 0, 1, 396, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 726;
}
);
leftKerningGroup = B;
note = Nacute;
unicode = 0143;
},
{
glyphname = Ncaron;
layers = (
{
components = (
{
alignment = -1;
name = N;
},
{
alignment = -1;
name = caron.cmb;
transform = "{1, 0, 0, 1, 359, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 726;
}
);
leftKerningGroup = B;
note = Ncaron;
unicode = 0147;
},
{
glyphname = Ncommaaccent;
layers = (
{
components = (
{
alignment = -1;
name = N;
},
{
alignment = -1;
name = commaaccentcomb.cmb;
transform = "{1, 0, 0, 1, 352, -27}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 726;
}
);
leftKerningGroup = B;
note = Ncommaaccent;
unicode = 0145;
},
{
glyphname = Eng;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"600 -226 OFFCURVE",
"675 -155.667 OFFCURVE",
"675 -1 CURVE SMOOTH",
"675 746 LINE",
"557 746 LINE",
"557 199 LINE",
"169 746 LINE",
"51 746 LINE",
"51 0 LINE",
"169 0 LINE",
"169 548 LINE",
"560 -1 LINE",
"560 -81 OFFCURVE",
"525 -129 OFFCURVE",
"469 -129 CURVE SMOOTH",
"452 -129 LINE",
"452 -226 LINE",
"472 -226 LINE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */\01212 7 2 2 3 6 1 1 2 2 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 23 values pushed */\0124 1 3 3 20 75 0 2 2 21 75 0 1 1 0 92 5 1 0 0 33 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 23 values pushed */\0124 1 3 3 2 89 0 2 2 24 75 0 1 1 0 92 5 1 0 0 33 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 21 values pushed */\0124 1 3 0 2 1 3 2 97 0 1 1 0 92 5 1 0 0 33 0 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 17 values pushed */\0121 0 14 13 11 10 9 8 4 2 0 17 1 17 6 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 726;
}
);
leftKerningGroup = B;
note = Eng;
unicode = 014A;
},
{
glyphname = Ntilde;
layers = (
{
components = (
{
alignment = -1;
name = N;
},
{
alignment = -1;
name = tilde.cmb;
transform = "{1, 0, 0, 1, 356, 165}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 726;
}
);
leftKerningGroup = B;
note = Ntilde;
unicode = 00D1;
},
{
glyphname = O;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"320.667 770 OFFCURVE",
"217.333 725.833 OFFCURVE",
"144 654.5 CURVE SMOOTH",
"70.667 583.167 OFFCURVE",
"26 483.333 OFFCURVE",
"26 374 CURVE SMOOTH",
"26 264.667 OFFCURVE",
"70.667 163.833 OFFCURVE",
"144 92.5 CURVE SMOOTH",
"217.333 21.167 OFFCURVE",
"320.667 -24 OFFCURVE",
"434 -24 CURVE SMOOTH",
"547.333 -24 OFFCURVE",
"649.667 21.167 OFFCURVE",
"723 92.5 CURVE SMOOTH",
"796.333 163.833 OFFCURVE",
"841 264.667 OFFCURVE",
"841 374 CURVE SMOOTH",
"841 483.333 OFFCURVE",
"796.333 583.167 OFFCURVE",
"723 654.5 CURVE SMOOTH",
"649.667 725.833 OFFCURVE",
"547.333 770 OFFCURVE",
"434 770 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"593.717 662 OFFCURVE",
"722 529.887 OFFCURVE",
"722 374 CURVE SMOOTH",
"722 214.547 OFFCURVE",
"593.945 84 OFFCURVE",
"434 84 CURVE SMOOTH",
"274.196 84 OFFCURVE",
"145 217.041 OFFCURVE",
"145 374 CURVE SMOOTH",
"145 529.389 OFFCURVE",
"273.942 662 OFFCURVE",
"434 662 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 23 values pushed */\0125 1 2 2 0 91 4 1 0 0 28 75 0 3 3 1 91 0 1 1 29 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 23 values pushed */\0125 1 2 2 0 91 4 1 0 0 22 75 0 3 3 1 91 0 1 1 32 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 20 values pushed */\0120 3 0 1 3 1 95 5 1 2 2 0 91 4 1 0 0 22 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 26 values pushed */\0124 1 0 5 1 2 3 0 2 99 0 3 1 1 3 87 0 3 3 1 91 0 1 3 1 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 19 values pushed */\01221 20 1 0 31 29 20 39 21 39 11 9 0 19 1 19 6 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 868;
}
);
leftKerningGroup = C;
note = O;
rightKerningGroup = O;
unicode = 004F;
},
{
glyphname = Oacute;
layers = (
{
components = (
{
alignment = -1;
name = O;
},
{
alignment = -1;
name = acute.cmb;
transform = "{1, 0, 0, 1, 474, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 868;
}
);
leftKerningGroup = C;
note = Oacute;
rightKerningGroup = O;
unicode = 00D3;
},
{
glyphname = Obreve;
layers = (
{
components = (
{
alignment = -1;
name = O;
},
{
alignment = -1;
name = breve.cmb;
transform = "{1, 0, 0, 1, 434, 163}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 868;
}
);
leftKerningGroup = C;
note = Obreve;
rightKerningGroup = O;
unicode = 014E;
},
{
glyphname = Ocircumflex;
layers = (
{
components = (
{
alignment = -1;
name = O;
},
{
alignment = -1;
name = circumflex.cmb;
transform = "{1, 0, 0, 1, 436, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 868;
}
);
leftKerningGroup = C;
note = Ocircumflex;
rightKerningGroup = O;
unicode = 00D4;
},
{
glyphname = Odieresis;
layers = (
{
components = (
{
alignment = -1;
name = O;
},
{
alignment = -1;
name = dieresis.cmb;
transform = "{1, 0, 0, 1, 434, 132}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 868;
}
);
leftKerningGroup = C;
note = Odieresis;
rightKerningGroup = O;
unicode = 00D6;
},
{
glyphname = Ograve;
layers = (
{
components = (
{
alignment = -1;
name = O;
},
{
alignment = -1;
name = grave.cmb;
transform = "{1, 0, 0, 1, 389, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 868;
}
);
leftKerningGroup = C;
note = Ograve;
rightKerningGroup = O;
unicode = 00D2;
},
{
glyphname = Ohungarumlaut;
layers = (
{
components = (
{
alignment = -1;
name = O;
},
{
alignment = -1;
name = hungarumlaut.cmb;
transform = "{1, 0, 0, 1, 442, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 868;
}
);
leftKerningGroup = C;
note = Ohungarumlaut;
rightKerningGroup = O;
unicode = 0150;
},
{
glyphname = Omacron;
layers = (
{
components = (
{
alignment = -1;
name = O;
},
{
alignment = -1;
name = macron.cmb;
transform = "{1, 0, 0, 1, 434, 140}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 868;
}
);
leftKerningGroup = C;
note = Omacron;
rightKerningGroup = O;
unicode = 014C;
},
{
glyphname = Oslash;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"145 529.389 OFFCURVE",
"273.942 662 OFFCURVE",
"434 662 CURVE SMOOTH",
"478 662 OFFCURVE",
"519.667 651.333 OFFCURVE",
"557 634 CURVE",
"233 166 LINE",
"178.333 219.333 OFFCURVE",
"145 294 OFFCURVE",
"145 374 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"388.667 84 OFFCURVE",
"347.333 94.667 OFFCURVE",
"310 112 CURVE",
"635 580 LINE",
"688.333 526.667 OFFCURVE",
"722 452.667 OFFCURVE",
"722 374 CURVE SMOOTH",
"722 214.547 OFFCURVE",
"593.945 84 OFFCURVE",
"434 84 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"547.333 -24 OFFCURVE",
"649.667 21.167 OFFCURVE",
"723 92.5 CURVE SMOOTH",
"796.333 163.833 OFFCURVE",
"841 264.667 OFFCURVE",
"841 374 CURVE SMOOTH",
"841 494 OFFCURVE",
"786.667 603 OFFCURVE",
"700 675 CURVE",
"783 794 LINE",
"668 794 LINE",
"621 726 LINE",
"565 754 OFFCURVE",
"502 770 OFFCURVE",
"434 770 CURVE SMOOTH",
"320.667 770 OFFCURVE",
"217.333 725.833 OFFCURVE",
"144 654.5 CURVE SMOOTH",
"70.667 583.167 OFFCURVE",
"26 483.333 OFFCURVE",
"26 374 CURVE SMOOTH",
"26 254 OFFCURVE",
"80.333 144 OFFCURVE",
"167 72 CURVE",
"84 -48 LINE",
"199 -48 LINE",
"246 20 LINE",
"302 -8 OFFCURVE",
"366 -24 OFFCURVE",
"434 -24 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */\01244 41 2 0 4 21 20 4 3 4 1 0 30 27 2 2 1 3 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 33 values pushed */\0120 3 2 3 115 0 5 5 22 75 0 0 0 4 91 0 4 4 28 75 6 1 1 1 2 91 7 1 2 2 29 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01236 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 33 values pushed */\0120 3 2 3 115 0 5 5 22 75 0 0 0 4 91 0 4 4 22 75 6 1 1 1 2 91 7 1 2 2 32 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 33 values pushed */\0120 5 4 5 114 0 3 2 3 115 0 0 0 4 91 0 4 4 22 75 6 1 1 1 2 91 7 1 2 2 32 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 31 values pushed */\0120 5 4 5 114 0 3 2 3 115 6 1 1 7 1 2 3 1 2 99 0 0 0 4 91 0 4 4 22 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 37 values pushed */\0120 5 4 5 114 0 3 2 3 115 0 4 0 0 1 4 0 99 6 1 1 2 2 1 87 6 1 1 1 2 91 7 1 2 1 2 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 22 values pushed */\01225 24 13 12 43 42 39 37 29 28 24 51 25 51 12 23 13 23 38 8 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 881;
}
);
leftKerningGroup = C;
note = Oslash;
rightKerningGroup = O;
unicode = 00D8;
},
{
glyphname = Oslashacute;
layers = (
{
components = (
{
alignment = -1;
name = Oslash;
},
{
alignment = -1;
name = acute.cmb;
transform = "{1, 0, 0, 1, 474, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 881;
}
);
leftKerningGroup = C;
note = Oslashacute;
rightKerningGroup = O;
unicode = 01FE;
},
{
glyphname = Otilde;
layers = (
{
components = (
{
alignment = -1;
name = O;
},
{
alignment = -1;
name = tilde.cmb;
transform = "{1, 0, 0, 1, 434, 165}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 868;
}
);
leftKerningGroup = C;
note = Otilde;
rightKerningGroup = O;
unicode = 00D5;
},
{
glyphname = OE;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"284.209 106 OFFCURVE",
"148 202.4 OFFCURVE",
"148 374 CURVE SMOOTH",
"148 543.608 OFFCURVE",
"284.239 640 OFFCURVE",
"444 640 CURVE SMOOTH",
"510 640 LINE",
"510 106 LINE",
"444 106 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"908 0 LINE",
"908 102 LINE",
"628 102 LINE",
"628 338 LINE",
"884 338 LINE",
"884 440 LINE",
"628 440 LINE",
"628 644 LINE",
"900 644 LINE",
"900 746 LINE",
"444 746 LINE SMOOTH",
"337.333 746 OFFCURVE",
"233.167 713.667 OFFCURVE",
"156.5 651 CURVE SMOOTH",
"79.833 588.333 OFFCURVE",
"29 495.333 OFFCURVE",
"29 374 CURVE SMOOTH",
"29 251.333 OFFCURVE",
"80 157.667 OFFCURVE",
"156 95 CURVE SMOOTH",
"232 32.333 OFFCURVE",
"337 0 OFFCURVE",
"445 0 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 33 values pushed */\0120 5 0 6 0 5 6 97 4 1 1 1 3 89 0 3 3 20 75 7 8 2 0 0 2 89 9 1 2 2 21 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 31 values pushed */\0120 3 4 1 1 5 3 1 99 0 5 0 6 0 5 6 97 7 8 2 0 0 2 89 9 1 2 2 24 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 38 values pushed */\0120 3 4 1 1 5 3 1 99 0 5 0 6 0 5 6 97 7 8 2 0 2 2 0 87 7 8 2 0 0 2 89 9 1 2 0 2 77 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 27 values pushed */\01214 13 1 0 32 31 30 29 28 27 26 25 24 22 13 33 14 33 4 2 0 12 1 12 10 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 956;
}
);
leftKerningGroup = C;
note = OE;
rightKerningGroup = E;
unicode = 0152;
},
{
glyphname = P;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"384.567 246 OFFCURVE",
"519 342.241 OFFCURVE",
"519 505 CURVE SMOOTH",
"519 666.803 OFFCURVE",
"404.336 746 OFFCURVE",
"235 746 CURVE SMOOTH",
"51 746 LINE",
"51 0 LINE",
"169 0 LINE",
"169 246 LINE",
"229 246 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"352 636 OFFCURVE",
"396.667 579.667 OFFCURVE",
"398 505 CURVE SMOOTH",
"398 415.667 OFFCURVE",
"328 355 OFFCURVE",
"228 355 CURVE SMOOTH",
"169 355 LINE",
"169 636 LINE",
"228 636 LINE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 26 values pushed */\0120 4 5 1 0 1 4 0 99 6 1 3 3 2 89 0 2 2 20 75 0 1 1 21 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 24 values pushed */\0120 2 6 1 3 4 2 3 99 0 4 5 1 0 1 4 0 99 0 1 1 24 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 31 values pushed */\0120 1 0 1 115 0 2 6 1 3 4 2 3 99 0 4 0 0 4 87 0 4 4 0 91 5 1 0 4 0 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 21 values pushed */\01216 15 1 0 19 17 15 23 16 23 6 4 3 2 0 14 1 14 7 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 535;
}
);
leftKerningGroup = B;
note = P;
rightKerningGroup = P;
unicode = 0050;
},
{
glyphname = Thorn;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"351 530 OFFCURVE",
"388.667 476.667 OFFCURVE",
"390 406 CURVE SMOOTH",
"390 332.667 OFFCURVE",
"331 282 OFFCURVE",
"247 282 CURVE SMOOTH",
"169 282 LINE",
"169 530 LINE",
"247 530 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"380.762 172 OFFCURVE",
"509 253.196 OFFCURVE",
"509 406 CURVE SMOOTH",
"509 574 OFFCURVE",
"400.333 640 OFFCURVE",
"239 640 CURVE SMOOTH",
"169 640 LINE",
"169 746 LINE",
"51 746 LINE",
"51 0 LINE",
"169 0 LINE",
"169 172 LINE",
"233 172 LINE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 29 values pushed */\0120 5 6 1 0 1 5 0 97 0 1 7 1 2 3 1 2 99 0 4 4 20 75 0 3 3 21 3 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 29 values pushed */\0120 5 6 1 0 1 5 0 97 0 1 7 1 2 3 1 2 99 0 4 4 3 89 0 3 3 24 3 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 34 values pushed */\0120 4 5 3 4 85 0 5 6 1 0 1 5 0 97 0 1 7 1 2 3 1 2 99 0 4 4 3 89 0 3 4 3 77 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 23 values pushed */\01210 9 1 0 17 15 14 13 12 11 9 23 10 23 4 2 0 8 1 8 8 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 523;
}
);
leftKerningGroup = B;
note = Thorn;
rightKerningGroup = Thorn;
unicode = 00DE;
},
{
glyphname = Q;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"593.717 662 OFFCURVE",
"722 529.887 OFFCURVE",
"722 374 CURVE SMOOTH",
"722 214.547 OFFCURVE",
"593.945 84 OFFCURVE",
"434 84 CURVE SMOOTH",
"274.196 84 OFFCURVE",
"145 217.041 OFFCURVE",
"145 374 CURVE SMOOTH",
"145 529.389 OFFCURVE",
"273.942 662 OFFCURVE",
"434 662 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"832 -23 LINE",
"852 79 LINE",
"659 64 LINE",
"764.333 126.667 OFFCURVE",
"841 243.333 OFFCURVE",
"841 374 CURVE SMOOTH",
"841 483.333 OFFCURVE",
"796.333 583.167 OFFCURVE",
"723 654.5 CURVE SMOOTH",
"649.667 725.833 OFFCURVE",
"547.333 770 OFFCURVE",
"434 770 CURVE SMOOTH",
"320.667 770 OFFCURVE",
"217.333 725.833 OFFCURVE",
"144 654.5 CURVE SMOOTH",
"70.667 583.167 OFFCURVE",
"26 483.333 OFFCURVE",
"26 374 CURVE SMOOTH",
"26 264.667 OFFCURVE",
"70.667 163.833 OFFCURVE",
"144 92.5 CURVE SMOOTH",
"217.333 21.167 OFFCURVE",
"320.667 -24 OFFCURVE",
"434 -24 CURVE SMOOTH",
"438.667 -24 OFFCURVE",
"443.333 -24 OFFCURVE",
"448 -24 CURVE SMOOTH",
"452.667 -24 OFFCURVE",
"457.333 -23.667 OFFCURVE",
"462 -23 CURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */\01243 42 2 2 1 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0129 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 19 values pushed */\0120 1 0 2 1 2 93 4 1 0 0 3 91 0 3 3 28 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 22 values pushed */\0124 1 0 0 3 91 0 3 3 28 75 0 1 1 2 89 0 2 2 21 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 19 values pushed */\0120 1 0 2 1 2 93 4 1 0 0 3 91 0 3 3 28 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 19 values pushed */\0120 1 0 2 1 2 93 4 1 0 0 3 91 0 3 3 22 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 25 values pushed */\0120 3 4 1 0 1 3 0 99 0 1 2 2 1 87 0 1 1 2 89 0 2 1 2 77 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 15 values pushed */\0121 0 35 33 25 20 11 9 0 19 1 19 5 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 868;
}
);
leftKerningGroup = C;
note = Q;
rightKerningGroup = O;
unicode = 0051;
},
{
glyphname = R;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"351.667 636 OFFCURVE",
"400 580.667 OFFCURVE",
"400 514 CURVE SMOOTH",
"400 432.667 OFFCURVE",
"330.333 375 OFFCURVE",
"233 375 CURVE SMOOTH",
"169 375 LINE",
"169 636 LINE",
"233 636 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"396 0 LINE",
"541 0 LINE",
"309 281 LINE",
"427.712 307.98 OFFCURVE",
"519 391.601 OFFCURVE",
"519 514 CURVE SMOOTH",
"519 588.667 OFFCURVE",
"488.833 647.167 OFFCURVE",
"437.5 686.5 CURVE SMOOTH",
"386.167 725.833 OFFCURVE",
"311 746 OFFCURVE",
"223 746 CURVE SMOOTH",
"51 746 LINE",
"51 0 LINE",
"169 0 LINE",
"169 269 LINE",
"170 269 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */\01225 10 2 2 1 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 27 values pushed */\0120 1 0 2 0 1 2 112 5 1 0 0 3 89 0 3 3 20 75 6 4 2 2 2 21 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 25 values pushed */\0120 1 0 2 0 1 2 112 0 3 5 1 0 1 3 0 99 6 4 2 2 2 24 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 31 values pushed */\0120 1 0 2 0 1 2 112 6 4 2 2 2 113 0 3 0 0 3 85 0 3 3 0 91 5 1 0 3 0 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 21 values pushed */\0129 9 1 0 9 26 9 26 16 14 13 12 4 2 0 8 1 8 7 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 560;
}
);
leftKerningGroup = B;
note = R;
rightKerningGroup = R;
unicode = 0052;
},
{
glyphname = Racute;
layers = (
{
components = (
{
alignment = -1;
name = R;
},
{
alignment = -1;
name = acute.cmb;
transform = "{1, 0, 0, 1, 305, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 560;
}
);
leftKerningGroup = B;
note = Racute;
rightKerningGroup = R;
unicode = 0154;
},
{
glyphname = Rcaron;
layers = (
{
components = (
{
alignment = -1;
name = R;
},
{
alignment = -1;
name = caron.cmb;
transform = "{1, 0, 0, 1, 268, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 560;
}
);
leftKerningGroup = B;
note = Rcaron;
rightKerningGroup = R;
unicode = 0158;
},
{
glyphname = Rcommaaccent;
layers = (
{
components = (
{
alignment = -1;
name = R;
},
{
alignment = -1;
name = commaaccentcomb.cmb;
transform = "{1, 0, 0, 1, 272, -27}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 560;
}
);
leftKerningGroup = B;
note = Rcommaaccent;
rightKerningGroup = R;
unicode = 0156;
},
{
glyphname = S;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"382 751.333 OFFCURVE",
"325.333 761 OFFCURVE",
"280 761 CURVE SMOOTH",
"125.336 761 OFFCURVE",
"38 681.709 OFFCURVE",
"38 575 CURVE SMOOTH",
"38 492.333 OFFCURVE",
"82 431 OFFCURVE",
"214 347 CURVE SMOOTH",
"264.667 315 OFFCURVE",
"301.333 287.5 OFFCURVE",
"324 264.5 CURVE SMOOTH",
"346.667 241.5 OFFCURVE",
"358 217.667 OFFCURVE",
"358 193 CURVE SMOOTH",
"358 141 OFFCURVE",
"314.667 89 OFFCURVE",
"224 89 CURVE SMOOTH",
"156 89 OFFCURVE",
"83.667 108.667 OFFCURVE",
"41 130 CURVE",
"39 20 LINE",
"73.333 2.834 OFFCURVE",
"169.626 -12 OFFCURVE",
"216 -12 CURVE SMOOTH",
"364.254 -12 OFFCURVE",
"478 68.072 OFFCURVE",
"478 198 CURVE SMOOTH",
"478 288.667 OFFCURVE",
"413 355 OFFCURVE",
"293 431 CURVE SMOOTH",
"243.667 462.333 OFFCURVE",
"208.5 488.833 OFFCURVE",
"187.5 510.5 CURVE SMOOTH",
"166.5 532.167 OFFCURVE",
"156 554.333 OFFCURVE",
"156 577 CURVE SMOOTH",
"156 618.333 OFFCURVE",
"189 660 OFFCURVE",
"281 660 CURVE SMOOTH",
"329 660 OFFCURVE",
"382.667 646.333 OFFCURVE",
"420 629 CURVE",
"422 738 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */\0120 1 0 3 24 1 2 2 0 23 1 1 2 3 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 21 values pushed */\0120 0 0 3 91 0 3 3 28 75 0 2 2 1 91 0 1 1 32 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 19 values pushed */\0120 3 0 0 2 3 0 99 0 2 2 1 91 0 1 1 32 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 24 values pushed */\0120 3 0 0 2 3 0 99 0 2 1 1 2 87 0 2 2 1 91 0 1 2 1 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 7 values pushed */\01244 39 44 35 4 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 506;
}
);
leftKerningGroup = S;
note = S;
rightKerningGroup = S;
unicode = 0053;
},
{
glyphname = Sacute;
layers = (
{
components = (
{
alignment = -1;
name = S;
},
{
alignment = -1;
name = acute.cmb;
transform = "{1, 0, 0, 1, 313, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 506;
}
);
leftKerningGroup = S;
note = Sacute;
rightKerningGroup = S;
unicode = 015A;
},
{
glyphname = Scaron;
layers = (
{
components = (
{
alignment = -1;
name = S;
},
{
alignment = -1;
name = caron.cmb;
transform = "{1, 0, 0, 1, 275, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 506;
}
);
leftKerningGroup = S;
note = Scaron;
rightKerningGroup = S;
unicode = 0160;
},
{
glyphname = Scedilla;
layers = (
{
components = (
{
alignment = -1;
name = S;
},
{
alignment = -1;
name = cedilla.cmb;
transform = "{1, 0, 0, 1, 233, -12}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 506;
}
);
leftKerningGroup = S;
note = Scedilla;
rightKerningGroup = S;
unicode = 015E;
},
{
glyphname = Scircumflex;
layers = (
{
components = (
{
alignment = -1;
name = S;
},
{
alignment = -1;
name = circumflex.cmb;
transform = "{1, 0, 0, 1, 275, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 506;
}
);
leftKerningGroup = S;
note = Scircumflex;
rightKerningGroup = S;
unicode = 015C;
},
{
glyphname = Scommaaccent;
layers = (
{
components = (
{
alignment = -1;
name = S;
},
{
alignment = -1;
name = commaaccentcomb.cmb;
transform = "{1, 0, 0, 1, 227, -39}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 506;
}
);
leftKerningGroup = S;
note = Scommaaccent;
rightKerningGroup = S;
unicode = 0218;
},
{
glyphname = T;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"166 0 LINE",
"284 0 LINE",
"284 641 LINE",
"440 641 LINE",
"440 746 LINE",
"9 746 LINE",
"9 641 LINE",
"166 641 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 18 values pushed */\0122 1 0 0 1 89 0 1 1 20 75 4 1 3 3 21 3 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 16 values pushed */\0120 1 2 1 0 3 1 0 97 4 1 3 3 24 3 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 23 values pushed */\0124 1 3 0 3 115 0 1 0 0 1 85 0 1 1 0 89 2 1 0 1 0 77 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 12 values pushed */\0120 0 0 7 0 7 17 17 17 5 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 449;
}
);
leftKerningGroup = T;
note = T;
rightKerningGroup = T;
unicode = 0054;
},
{
glyphname = Tbar;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"362 315 LINE",
"362 410 LINE",
"284 410 LINE",
"284 641 LINE",
"440 641 LINE",
"440 746 LINE",
"9 746 LINE",
"9 641 LINE",
"166 641 LINE",
"166 410 LINE",
"88 410 LINE",
"88 315 LINE",
"166 315 LINE",
"166 0 LINE",
"284 0 LINE",
"284 315 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 27 values pushed */\0127 1 3 2 1 0 1 3 0 97 6 1 4 4 5 89 0 5 5 20 75 0 1 1 21 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 25 values pushed */\0120 5 6 1 4 3 5 4 97 7 1 3 2 1 0 1 3 0 97 0 1 1 24 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 33 values pushed */\0120 1 0 1 115 0 5 6 1 4 3 5 4 97 7 1 3 0 0 3 85 7 1 3 3 0 89 2 1 0 3 0 77 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 11 values pushed */\01217 17 17 17 17 17 17 16 8 7 28 \012CALL[ ]	/* CallFunction */";
};
width = 449;
}
);
leftKerningGroup = T;
note = Tbar;
rightKerningGroup = T;
unicode = 0166;
},
{
glyphname = Tcaron;
layers = (
{
components = (
{
alignment = -1;
name = T;
},
{
alignment = -1;
name = caron.cmb;
transform = "{1, 0, 0, 1, 228, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 449;
}
);
leftKerningGroup = T;
note = Tcaron;
rightKerningGroup = T;
unicode = 0164;
},
{
glyphname = Tcommaaccent;
layers = (
{
components = (
{
alignment = -1;
name = T;
},
{
alignment = -1;
name = commaaccentcomb.cmb;
transform = "{1, 0, 0, 1, 225, -27}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 449;
}
);
leftKerningGroup = T;
note = Tcommaaccent;
rightKerningGroup = T;
unicode = 021A;
},
{
glyphname = U;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"615 746 LINE",
"497 746 LINE",
"497 270 LINE SMOOTH",
"497 153.474 OFFCURVE",
"425.315 84 OFFCURVE",
"332 84 CURVE SMOOTH",
"240.793 84 OFFCURVE",
"169 154.168 OFFCURVE",
"169 270 CURVE SMOOTH",
"169 746 LINE",
"51 746 LINE",
"51 299 LINE SMOOTH",
"51 99 OFFCURVE",
"149.333 -24 OFFCURVE",
"332 -24 CURVE SMOOTH",
"516 -24 OFFCURVE",
"615 99 OFFCURVE",
"615 299 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 17 values pushed */\0123 1 1 1 20 75 0 2 2 0 91 0 0 0 29 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 17 values pushed */\0123 1 1 2 1 114 0 2 2 0 91 0 0 0 32 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 22 values pushed */\0123 1 1 2 1 114 0 2 0 0 2 87 0 2 2 0 91 0 0 2 0 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 7 values pushed */\01221 37 19 34 4 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 665;
}
);
leftKerningGroup = U;
note = U;
rightKerningGroup = U;
unicode = 0055;
},
{
glyphname = Uacute;
layers = (
{
components = (
{
alignment = -1;
name = U;
},
{
alignment = -1;
name = acute.cmb;
transform = "{1, 0, 0, 1, 373, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 665;
}
);
leftKerningGroup = U;
note = Uacute;
rightKerningGroup = U;
unicode = 00DA;
},
{
glyphname = Ubreve;
layers = (
{
components = (
{
alignment = -1;
name = U;
},
{
alignment = -1;
name = breve.cmb;
transform = "{1, 0, 0, 1, 333, 163}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 665;
}
);
leftKerningGroup = U;
note = Ubreve;
rightKerningGroup = U;
unicode = 016C;
},
{
glyphname = Ucircumflex;
layers = (
{
components = (
{
alignment = -1;
name = U;
},
{
alignment = -1;
name = circumflex.cmb;
transform = "{1, 0, 0, 1, 335, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 665;
}
);
leftKerningGroup = U;
note = Ucircumflex;
rightKerningGroup = U;
unicode = 00DB;
},
{
glyphname = Udieresis;
layers = (
{
components = (
{
alignment = -1;
name = U;
},
{
alignment = -1;
name = dieresis.cmb;
transform = "{1, 0, 0, 1, 333, 132}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 665;
}
);
leftKerningGroup = U;
note = Udieresis;
rightKerningGroup = U;
unicode = 00DC;
},
{
glyphname = Ugrave;
layers = (
{
components = (
{
alignment = -1;
name = U;
},
{
alignment = -1;
name = grave.cmb;
transform = "{1, 0, 0, 1, 287, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 665;
}
);
leftKerningGroup = U;
note = Ugrave;
rightKerningGroup = U;
unicode = 00D9;
},
{
glyphname = Uhungarumlaut;
layers = (
{
components = (
{
alignment = -1;
name = U;
},
{
alignment = -1;
name = hungarumlaut.cmb;
transform = "{1, 0, 0, 1, 341, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 665;
}
);
leftKerningGroup = U;
note = Uhungarumlaut;
rightKerningGroup = U;
unicode = 0170;
},
{
glyphname = Umacron;
layers = (
{
components = (
{
alignment = -1;
name = U;
},
{
alignment = -1;
name = macron.cmb;
transform = "{1, 0, 0, 1, 333, 140}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 665;
}
);
leftKerningGroup = U;
note = Umacron;
rightKerningGroup = U;
unicode = 016A;
},
{
glyphname = Uogonek;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"446.333 -174.667 OFFCURVE",
"480.333 -157.333 OFFCURVE",
"499 -140 CURVE",
"464 -96 LINE",
"456 -102.667 OFFCURVE",
"444 -110 OFFCURVE",
"428 -110 CURVE SMOOTH",
"408 -110 OFFCURVE",
"397 -96 OFFCURVE",
"397 -80 CURVE SMOOTH",
"397 -60 OFFCURVE",
"407.333 -43.667 OFFCURVE",
"438 -21 CURVE SMOOTH",
"483 12 LINE",
"483 12 LINE",
"569.667 61.333 OFFCURVE",
"615 163 OFFCURVE",
"615 299 CURVE SMOOTH",
"615 746 LINE",
"497 746 LINE",
"497 270 LINE SMOOTH",
"497 153.474 OFFCURVE",
"425.315 84 OFFCURVE",
"332 84 CURVE SMOOTH",
"240.793 84 OFFCURVE",
"169 154.168 OFFCURVE",
"169 270 CURVE SMOOTH",
"169 746 LINE",
"51 746 LINE",
"51 299 LINE SMOOTH",
"51 99 OFFCURVE",
"149.333 -24 OFFCURVE",
"332 -24 CURVE SMOOTH",
"333.333 -24 OFFCURVE",
"335 -24 OFFCURVE",
"337 -24 CURVE SMOOTH",
"339 -24 OFFCURVE",
"340.667 -24 OFFCURVE",
"342 -24 CURVE",
"320.667 -45.333 OFFCURVE",
"307 -69.667 OFFCURVE",
"307 -99 CURVE SMOOTH",
"307 -137.667 OFFCURVE",
"335.667 -176 OFFCURVE",
"401 -176 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */\01242 1 5 1 43 1 0 5 2 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 25 values pushed */\0120 5 6 1 0 5 0 95 4 1 2 2 20 75 0 3 3 1 91 0 1 1 29 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 25 values pushed */\0124 1 2 3 2 114 0 5 6 1 0 5 0 95 0 3 3 1 91 0 1 1 32 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 31 values pushed */\0124 1 2 3 2 114 0 3 0 1 5 3 1 99 0 5 0 0 5 87 0 5 5 0 91 6 1 0 5 0 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 19 values pushed */\0121 0 40 38 27 26 21 19 14 13 10 6 0 45 1 45 7 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 665;
}
);
leftKerningGroup = U;
note = Uogonek;
rightKerningGroup = U;
unicode = 0172;
},
{
glyphname = Uring;
layers = (
{
components = (
{
alignment = -1;
name = U;
},
{
alignment = -1;
name = ring.cmb;
transform = "{1, 0, 0, 1, 333, 162}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 665;
}
);
leftKerningGroup = U;
note = Uring;
rightKerningGroup = U;
unicode = 016E;
},
{
glyphname = Utilde;
layers = (
{
components = (
{
alignment = -1;
name = U;
},
{
alignment = -1;
name = tilde.cmb;
transform = "{1, 0, 0, 1, 333, 165}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 665;
}
);
leftKerningGroup = U;
note = Utilde;
rightKerningGroup = U;
unicode = 0168;
},
{
glyphname = V;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"412 0 LINE",
"696 746 LINE",
"574 746 LINE",
"351 148 LINE",
"128 746 LINE",
"2 746 LINE",
"285 0 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\0124 1 0 1 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 12 values pushed */\0122 1 1 1 20 75 0 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 12 values pushed */\0122 1 1 0 1 114 0 0 0 24 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 10 values pushed */\0122 1 1 0 1 114 0 0 0 105 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 6 values pushed */\01218 17 16 3 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 698;
}
);
leftKerningGroup = V;
note = V;
rightKerningGroup = V;
unicode = 0056;
},
{
glyphname = W;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"647 0 LINE",
"773 0 LINE",
"985 746 LINE",
"869 746 LINE",
"712 168 LINE",
"560 746 LINE",
"436 746 LINE",
"283 168 LINE",
"127 746 LINE",
"3 746 LINE",
"214 0 LINE",
"340 0 LINE",
"495 563 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */\0129 6 1 3 0 1 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 15 values pushed */\0123 2 2 1 1 20 75 5 4 2 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 15 values pushed */\0123 2 2 1 0 1 114 5 4 2 0 0 24 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 13 values pushed */\0123 2 2 1 0 1 114 5 4 2 0 0 105 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 13 values pushed */\0120 0 0 12 0 12 18 18 17 18 6 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 988;
}
);
leftKerningGroup = W;
note = W;
rightKerningGroup = W;
unicode = 0057;
},
{
glyphname = Wacute;
layers = (
{
components = (
{
alignment = -1;
name = W;
},
{
alignment = -1;
name = acute.cmb;
transform = "{1, 0, 0, 1, 535, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 988;
}
);
leftKerningGroup = W;
note = Wacute;
rightKerningGroup = W;
unicode = 1E82;
},
{
glyphname = Wcircumflex;
layers = (
{
components = (
{
alignment = -1;
name = W;
},
{
alignment = -1;
name = circumflex.cmb;
transform = "{1, 0, 0, 1, 497, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 988;
}
);
leftKerningGroup = W;
note = Wcircumflex;
rightKerningGroup = W;
unicode = 0174;
},
{
glyphname = Wdieresis;
layers = (
{
components = (
{
alignment = -1;
name = W;
},
{
alignment = -1;
name = dieresis.cmb;
transform = "{1, 0, 0, 1, 495, 132}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 988;
}
);
leftKerningGroup = W;
note = Wdieresis;
rightKerningGroup = W;
unicode = 1E84;
},
{
glyphname = Wgrave;
layers = (
{
components = (
{
alignment = -1;
name = W;
},
{
alignment = -1;
name = grave.cmb;
transform = "{1, 0, 0, 1, 449, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 988;
}
);
leftKerningGroup = W;
note = Wgrave;
rightKerningGroup = W;
unicode = 1E80;
},
{
glyphname = X;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"509 0 LINE",
"638 0 LINE",
"397 396 LINE",
"611 746 LINE",
"484 746 LINE",
"322 478 LINE",
"161 746 LINE",
"28 746 LINE",
"242 394 LINE",
"6 0 LINE",
"137 0 LINE",
"321 314 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */\01210 7 4 1 4 0 1 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 14 values pushed */\0122 1 1 1 20 75 4 3 2 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 14 values pushed */\0122 1 1 1 0 89 4 3 2 0 0 24 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 20 values pushed */\0122 1 1 0 0 1 85 2 1 1 1 0 89 4 3 2 0 1 0 77 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 12 values pushed */\0120 0 0 11 0 11 18 18 18 5 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 644;
}
);
leftKerningGroup = X;
note = X;
rightKerningGroup = X;
unicode = 0058;
},
{
glyphname = Y;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"375 0 LINE",
"375 234 LINE",
"630 746 LINE",
"509 746 LINE",
"318 351 LINE",
"131 746 LINE",
"2 746 LINE",
"257 232 LINE",
"257 0 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */\0128 5 2 3 0 1 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 12 values pushed */\0122 1 1 1 20 75 0 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 12 values pushed */\0122 1 1 0 1 114 0 0 0 24 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 10 values pushed */\0122 1 1 0 1 114 0 0 0 105 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 6 values pushed */\01218 18 16 3 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 632;
}
);
leftKerningGroup = Y;
note = Y;
rightKerningGroup = Y;
unicode = 0059;
},
{
glyphname = Yacute;
layers = (
{
components = (
{
alignment = -1;
name = Y;
},
{
alignment = -1;
name = acute.cmb;
transform = "{1, 0, 0, 1, 356, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 632;
}
);
leftKerningGroup = Y;
note = Yacute;
rightKerningGroup = Y;
unicode = 00DD;
},
{
glyphname = Ycircumflex;
layers = (
{
components = (
{
alignment = -1;
name = Y;
},
{
alignment = -1;
name = circumflex.cmb;
transform = "{1, 0, 0, 1, 318, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 632;
}
);
leftKerningGroup = Y;
note = Ycircumflex;
rightKerningGroup = Y;
unicode = 0176;
},
{
glyphname = Ydieresis;
layers = (
{
components = (
{
alignment = -1;
name = Y;
},
{
alignment = -1;
name = dieresis.cmb;
transform = "{1, 0, 0, 1, 316, 132}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 632;
}
);
leftKerningGroup = Y;
note = Ydieresis;
rightKerningGroup = Y;
unicode = 0178;
},
{
glyphname = Ygrave;
layers = (
{
components = (
{
alignment = -1;
name = Y;
},
{
alignment = -1;
name = grave.cmb;
transform = "{1, 0, 0, 1, 270, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 632;
}
);
leftKerningGroup = Y;
note = Ygrave;
rightKerningGroup = Y;
unicode = 1EF2;
},
{
glyphname = Z;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"551 0 LINE",
"598 100 LINE",
"198 100 LINE",
"579 736 LINE",
"577 746 LINE",
"111 746 LINE",
"64 646 LINE",
"393 646 LINE",
"13 10 LINE",
"15 0 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 21 values pushed */\0120 1 1 2 89 0 2 2 20 75 0 3 3 0 89 0 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 19 values pushed */\0120 2 0 1 3 2 1 97 0 3 3 0 89 0 0 0 24 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 24 values pushed */\0120 2 0 1 3 2 1 97 0 3 0 0 3 85 0 3 3 0 89 0 0 3 0 77 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 7 values pushed */\01218 17 18 16 4 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 609;
}
);
leftKerningGroup = Z;
note = Z;
rightKerningGroup = Z;
unicode = 005A;
},
{
glyphname = Zacute;
layers = (
{
components = (
{
alignment = -1;
name = Z;
},
{
alignment = -1;
name = acute.cmb;
transform = "{1, 0, 0, 1, 355, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 609;
}
);
leftKerningGroup = Z;
note = Zacute;
rightKerningGroup = Z;
unicode = 0179;
},
{
glyphname = Zcaron;
layers = (
{
components = (
{
alignment = -1;
name = Z;
},
{
alignment = -1;
name = caron.cmb;
transform = "{1, 0, 0, 1, 317, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 609;
}
);
leftKerningGroup = Z;
note = Zcaron;
rightKerningGroup = Z;
unicode = 017D;
},
{
glyphname = Zdotaccent;
layers = (
{
components = (
{
alignment = -1;
name = Z;
},
{
alignment = -1;
name = dotaccent.cmb;
transform = "{1, 0, 0, 1, 315, 173}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 609;
}
);
leftKerningGroup = Z;
note = Zdotaccent;
rightKerningGroup = Z;
unicode = 017B;
},
{
glyphname = Adieresis.salt;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"609 746 LINE",
"490 746 LINE",
"490 637 LINE",
"609 637 LINE"
);
},
{
closed = 1;
nodes = (
"221 746 LINE",
"102 746 LINE",
"102 637 LINE",
"221 637 LINE"
);
},
{
closed = 1;
nodes = (
"491 239 LINE",
"216 239 LINE",
"354 597 LINE"
);
},
{
closed = 1;
nodes = (
"583 0 LINE",
"708 0 LINE",
"414 746 LINE",
"297 746 LINE",
"2 0 LINE",
"124 0 LINE",
"178 141 LINE",
"529 141 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\0129 1 4 0 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 32 values pushed */\01211 1 4 0 5 6 4 5 98 2 1 0 0 1 89 7 10 3 9 4 1 1 20 75 12 8 2 6 6 21 6 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 30 values pushed */\0127 10 3 9 4 1 2 1 0 4 1 0 97 11 1 4 0 5 6 4 5 98 12 8 2 6 6 24 6 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 38 values pushed */\01212 8 2 6 5 6 115 7 10 3 9 4 1 2 1 0 4 1 0 97 11 1 4 5 5 4 85 11 1 4 4 5 90 0 5 4 5 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 36 values pushed */\01211 11 8 8 4 4 0 0 11 18 11 18 17 16 15 14 13 12 8 10 8 10 4 7 4 7 6 5 0 3 0 3 17 13 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 710;
}
);
leftKerningGroup = A;
note = Adieresis.salt;
rightKerningGroup = A;
},
{
glyphname = C.salt_low;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"581 752.333 OFFCURVE",
"512.333 770 OFFCURVE",
"431 770 CURVE SMOOTH",
"311 770 OFFCURVE",
"208.667 725.833 OFFCURVE",
"138 654.5 CURVE SMOOTH",
"67.333 583.167 OFFCURVE",
"26 483.333 OFFCURVE",
"26 374 CURVE SMOOTH",
"26 264.667 OFFCURVE",
"67.333 163.833 OFFCURVE",
"138 92.5 CURVE SMOOTH",
"208.667 21.167 OFFCURVE",
"311 -24 OFFCURVE",
"431 -24 CURVE SMOOTH",
"512.333 -24 OFFCURVE",
"583.667 -5 OFFCURVE",
"661 43 CURVE",
"607 133 LINE",
"553.667 99.667 OFFCURVE",
"494.333 84 OFFCURVE",
"433 84 CURVE SMOOTH",
"264.432 84 OFFCURVE",
"145 215.819 OFFCURVE",
"145 375 CURVE SMOOTH",
"145 530.896 OFFCURVE",
"265.145 662 OFFCURVE",
"433 662 CURVE SMOOTH",
"498.333 662 OFFCURVE",
"557.667 644 OFFCURVE",
"607 612 CURVE",
"661 703 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */\01217 1 2 1 0 18 1 2 1 2 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 21 values pushed */\0120 0 0 3 91 0 3 3 28 75 0 1 1 2 91 0 2 2 29 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 21 values pushed */\0120 0 0 3 91 0 3 3 22 75 0 1 1 2 91 0 2 2 32 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 18 values pushed */\0120 1 0 2 1 2 95 0 0 0 3 91 0 3 3 22 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 24 values pushed */\0120 3 0 0 1 3 0 99 0 1 2 2 1 87 0 1 1 2 91 0 2 1 2 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 7 values pushed */\01240 37 40 35 4 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 691;
}
);
leftKerningGroup = C;
note = C.salt_low;
rightKerningGroup = C;
},
{
glyphname = Cacute.salt_low;
layers = (
{
components = (
{
alignment = -1;
name = C.salt_low;
},
{
alignment = -1;
name = acute.cmb;
transform = "{1, 0, 0, 1, 458, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 691;
}
);
leftKerningGroup = C;
note = Cacute.salt_low;
rightKerningGroup = C;
},
{
glyphname = Ccaron.salt_low;
layers = (
{
components = (
{
alignment = -1;
name = C.salt_low;
},
{
alignment = -1;
name = caron.cmb;
transform = "{1, 0, 0, 1, 421, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 691;
}
);
leftKerningGroup = C;
note = Ccaron.salt_low;
rightKerningGroup = C;
},
{
glyphname = Ccedilla.salt_low;
layers = (
{
components = (
{
alignment = -1;
name = C.salt_low;
},
{
alignment = -1;
name = cedilla.cmb;
transform = "{1, 0, 0, 1, 426, -24}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 691;
}
);
leftKerningGroup = C;
note = Ccedilla.salt_low;
rightKerningGroup = C;
},
{
glyphname = Ccircumflex.salt_low;
layers = (
{
components = (
{
alignment = -1;
name = C.salt_low;
},
{
alignment = -1;
name = circumflex.cmb;
transform = "{1, 0, 0, 1, 420, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 691;
}
);
leftKerningGroup = C;
note = Ccircumflex.salt_low;
rightKerningGroup = C;
},
{
glyphname = Cdotaccent.salt_low;
layers = (
{
components = (
{
alignment = -1;
name = C.salt_low;
},
{
alignment = -1;
name = dotaccent.cmb;
transform = "{1, 0, 0, 1, 418, 173}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 691;
}
);
leftKerningGroup = C;
note = Cdotaccent.salt_low;
rightKerningGroup = C;
},
{
glyphname = K.salt_tall;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"494 0 LINE",
"640 0 LINE",
"305 424 LINE",
"585 746 LINE",
"441 746 LINE",
"169 434 LINE",
"169 746 LINE",
"51 746 LINE",
"51 0 LINE",
"169 0 LINE",
"169 268 LINE",
"228 336 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */\01210 7 2 1 4 0 1 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 14 values pushed */\0122 1 1 1 20 75 4 3 2 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 14 values pushed */\0122 1 1 1 0 89 4 3 2 0 0 24 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 20 values pushed */\0122 1 1 0 0 1 85 2 1 1 1 0 89 4 3 2 0 1 0 77 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 12 values pushed */\0120 0 0 11 0 11 18 17 19 5 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 647;
}
);
leftKerningGroup = B;
note = K.salt_tall;
rightKerningGroup = K.salt_tall;
},
{
glyphname = Kcommaaccent.salt_tall;
layers = (
{
components = (
{
alignment = -1;
name = K.salt_tall;
},
{
alignment = -1;
name = commaaccentcomb.cmb;
transform = "{1, 0, 0, 1, 316, -27}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 647;
}
);
leftKerningGroup = B;
note = Kcommaaccent.salt_tall;
rightKerningGroup = K.salt_tall;
},
{
glyphname = Odieresis.salt;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"593.717 662 OFFCURVE",
"722 529.887 OFFCURVE",
"722 374 CURVE SMOOTH",
"722 214.547 OFFCURVE",
"593.945 84 OFFCURVE",
"434 84 CURVE SMOOTH",
"274.196 84 OFFCURVE",
"145 217.041 OFFCURVE",
"145 374 CURVE SMOOTH",
"145 529.389 OFFCURVE",
"273.942 662 OFFCURVE",
"434 662 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"841 474 OFFCURVE",
"803 567.667 OFFCURVE",
"739 637 CURVE",
"824 637 LINE",
"824 746 LINE",
"704 746 LINE",
"704 672 LINE",
"633.333 733.333 OFFCURVE",
"538 770 OFFCURVE",
"434 770 CURVE SMOOTH",
"330 770 OFFCURVE",
"235 732.333 OFFCURVE",
"163 671 CURVE",
"163 746 LINE",
"44 746 LINE",
"44 637 LINE",
"128 637 LINE",
"64 567.667 OFFCURVE",
"26 474 OFFCURVE",
"26 374 CURVE SMOOTH",
"26 264.667 OFFCURVE",
"70.667 163.833 OFFCURVE",
"144 92.5 CURVE SMOOTH",
"217.333 21.167 OFFCURVE",
"320.667 -24 OFFCURVE",
"434 -24 CURVE SMOOTH",
"547.333 -24 OFFCURVE",
"649.667 21.167 OFFCURVE",
"723 92.5 CURVE SMOOTH",
"796.333 163.833 OFFCURVE",
"841 264.667 OFFCURVE",
"841 374 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */\01243 37 2 0 4 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 34 values pushed */\0128 1 0 0 5 91 0 5 5 28 75 7 1 3 3 4 89 6 1 4 4 20 75 0 1 1 2 91 0 2 2 29 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 32 values pushed */\0126 1 4 7 1 3 1 4 3 97 8 1 0 0 5 91 0 5 5 22 75 0 1 1 2 91 0 2 2 32 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 29 values pushed */\0126 1 4 7 1 3 1 4 3 97 0 1 0 2 1 2 95 8 1 0 0 5 91 0 5 5 22 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 35 values pushed */\0120 5 8 1 0 3 5 0 99 6 1 4 7 1 3 1 4 3 97 0 1 2 2 1 87 0 1 1 2 91 0 2 1 2 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 23 values pushed */\0121 0 47 46 45 44 41 39 36 35 34 33 26 24 11 9 0 19 1 19 9 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 868;
}
);
leftKerningGroup = C;
note = Odieresis.salt;
rightKerningGroup = O;
},
{
glyphname = P.salt_tall;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"380.538 279 OFFCURVE",
"509 360.42 OFFCURVE",
"509 513 CURVE",
"507.667 679.667 OFFCURVE",
"400.333 746 OFFCURVE",
"239 746 CURVE SMOOTH",
"51 746 LINE",
"51 0 LINE",
"169 0 LINE",
"169 279 LINE",
"234 279 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"351 636 OFFCURVE",
"388.667 582.333 OFFCURVE",
"390 513 CURVE SMOOTH",
"390 438.333 OFFCURVE",
"331 388 OFFCURVE",
"247 388 CURVE SMOOTH",
"169 388 LINE",
"169 636 LINE",
"247 636 LINE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 26 values pushed */\0120 4 5 1 0 1 4 0 99 6 1 3 3 2 89 0 2 2 20 75 0 1 1 21 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 24 values pushed */\0120 2 6 1 3 4 2 3 97 0 4 5 1 0 1 4 0 99 0 1 1 24 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 31 values pushed */\0120 1 0 1 115 0 2 6 1 3 4 2 3 97 0 4 0 0 4 85 0 4 4 0 91 5 1 0 4 0 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 21 values pushed */\01214 13 1 0 17 15 13 21 14 21 6 4 3 2 0 12 1 12 7 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 531;
}
);
leftKerningGroup = B;
note = P.salt_tall;
rightKerningGroup = P.salt_tall;
},
{
glyphname = R.salt_tall;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"322.333 636 OFFCURVE",
"368.667 582.667 OFFCURVE",
"370 516 CURVE SMOOTH",
"370 442.667 OFFCURVE",
"314.667 391 OFFCURVE",
"228 391 CURVE SMOOTH",
"169 391 LINE",
"169 636 LINE",
"229 636 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"418 0 LINE",
"562 0 LINE",
"316 299 LINE",
"412 328.333 OFFCURVE",
"489 402.667 OFFCURVE",
"489 516 CURVE SMOOTH",
"489 665.333 OFFCURVE",
"383.667 746 OFFCURVE",
"229 746 CURVE SMOOTH",
"51 746 LINE",
"51 0 LINE",
"169 0 LINE",
"169 285 LINE",
"177 285 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */\01221 10 2 2 1 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 27 values pushed */\0120 1 0 2 0 1 2 112 5 1 0 0 3 89 0 3 3 20 75 6 4 2 2 2 21 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 25 values pushed */\0120 1 0 2 0 1 2 112 0 3 5 1 0 1 3 0 99 6 4 2 2 2 24 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 31 values pushed */\0120 1 0 2 0 1 2 112 6 4 2 2 2 113 0 3 0 0 3 85 0 3 3 0 91 5 1 0 3 0 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 21 values pushed */\0129 9 1 0 9 22 9 22 16 14 13 12 4 2 0 8 1 8 7 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 575;
}
);
leftKerningGroup = B;
note = R.salt_tall;
rightKerningGroup = R.salt_tall;
},
{
glyphname = Racute.salt_tall;
layers = (
{
components = (
{
alignment = -1;
name = R.salt_tall;
},
{
alignment = -1;
name = acute.cmb;
transform = "{1, 0, 0, 1, 290, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 575;
}
);
leftKerningGroup = B;
note = Racute.salt_tall;
rightKerningGroup = R.salt_tall;
},
{
glyphname = Rcaron.salt_tall;
layers = (
{
components = (
{
alignment = -1;
name = R.salt_tall;
},
{
alignment = -1;
name = caron.cmb;
transform = "{1, 0, 0, 1, 252, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 575;
}
);
leftKerningGroup = B;
note = Rcaron.salt_tall;
rightKerningGroup = R.salt_tall;
},
{
glyphname = Rcommaaccent.salt_tall;
layers = (
{
components = (
{
alignment = -1;
name = R.salt_tall;
},
{
alignment = -1;
name = commaaccentcomb.cmb;
transform = "{1, 0, 0, 1, 279, -27}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 575;
}
);
leftKerningGroup = B;
note = Rcommaaccent.salt_tall;
rightKerningGroup = R.salt_tall;
},
{
glyphname = S.salt_low;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"382.667 738.667 OFFCURVE",
"320 761 OFFCURVE",
"264 761 CURVE SMOOTH",
"120.406 761 OFFCURVE",
"40 685.362 OFFCURVE",
"40 583 CURVE SMOOTH",
"40 492.125 OFFCURVE",
"101.772 435.487 OFFCURVE",
"207 347 CURVE SMOOTH",
"296.333 275 OFFCURVE",
"332 234.333 OFFCURVE",
"332 185 CURVE SMOOTH",
"332 137 OFFCURVE",
"294.667 89 OFFCURVE",
"220 89 CURVE SMOOTH",
"161.333 89 OFFCURVE",
"107.667 114.667 OFFCURVE",
"61 144 CURVE",
"12 46 LINE",
"69.333 11.333 OFFCURVE",
"154 -12 OFFCURVE",
"214 -12 CURVE SMOOTH",
"348.828 -12 OFFCURVE",
"450 66.996 OFFCURVE",
"450 191 CURVE SMOOTH",
"450 264.333 OFFCURVE",
"403.333 334 OFFCURVE",
"282 434 CURVE SMOOTH",
"198 504.667 OFFCURVE",
"159 536.667 OFFCURVE",
"159 586 CURVE SMOOTH",
"159 623.333 OFFCURVE",
"184.667 660 OFFCURVE",
"258 660 CURVE SMOOTH",
"299.333 660 OFFCURVE",
"345.667 640.667 OFFCURVE",
"379 614 CURVE",
"428 712 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */\01222 1 2 2 0 21 1 1 2 2 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 21 values pushed */\0120 0 0 3 91 0 3 3 28 75 0 2 2 1 91 0 1 1 32 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 19 values pushed */\0120 3 0 0 2 3 0 99 0 2 2 1 91 0 1 1 32 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 24 values pushed */\0120 3 0 0 2 3 0 99 0 2 1 1 2 87 0 2 2 1 91 0 1 2 1 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 7 values pushed */\01246 37 44 35 4 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 478;
}
);
leftKerningGroup = S;
note = S.salt_low;
rightKerningGroup = S;
},
{
glyphname = S.salt_tall;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"366.333 752.333 OFFCURVE",
"315 761 OFFCURVE",
"271 761 CURVE SMOOTH",
"124.877 761 OFFCURVE",
"40 685.93 OFFCURVE",
"40 583 CURVE SMOOTH",
"40 492.125 OFFCURVE",
"101.772 435.487 OFFCURVE",
"207 347 CURVE SMOOTH",
"296.333 275 OFFCURVE",
"332 234.333 OFFCURVE",
"332 185 CURVE SMOOTH",
"332 137 OFFCURVE",
"291.333 89 OFFCURVE",
"210 89 CURVE SMOOTH",
"150 89 OFFCURVE",
"76.333 107.333 OFFCURVE",
"35 130 CURVE",
"33 19 LINE",
"71.483 3.607 OFFCURVE",
"155.379 -12 OFFCURVE",
"203 -12 CURVE SMOOTH",
"342.938 -12 OFFCURVE",
"450 65.73 OFFCURVE",
"450 191 CURVE SMOOTH",
"450 264.333 OFFCURVE",
"403.333 334 OFFCURVE",
"282 434 CURVE SMOOTH",
"198 504.667 OFFCURVE",
"159 536.667 OFFCURVE",
"159 586 CURVE SMOOTH",
"159 623.333 OFFCURVE",
"189.333 660 OFFCURVE",
"272 660 CURVE SMOOTH",
"317.333 660 OFFCURVE",
"368.667 646.333 OFFCURVE",
"402 629 CURVE",
"405 739 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */\0120 1 0 3 24 1 2 2 0 23 1 1 2 3 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 21 values pushed */\0120 0 0 3 91 0 3 3 28 75 0 2 2 1 91 0 1 1 32 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 19 values pushed */\0120 3 0 0 2 3 0 99 0 2 2 1 91 0 1 1 32 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 24 values pushed */\0120 3 0 0 2 3 0 99 0 2 1 1 2 87 0 2 2 1 91 0 1 2 1 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 7 values pushed */\01246 39 44 35 4 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 476;
}
);
leftKerningGroup = S;
note = S.salt_tall;
rightKerningGroup = S;
},
{
glyphname = Sacute.salt_low;
layers = (
{
components = (
{
alignment = -1;
name = S.salt_low;
},
{
alignment = -1;
name = acute.cmb;
transform = "{1, 0, 0, 1, 300, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 478;
}
);
leftKerningGroup = S;
note = Sacute.salt_low;
rightKerningGroup = S;
},
{
glyphname = Sacute.salt_tall;
layers = (
{
components = (
{
alignment = -1;
name = S.salt_tall;
},
{
alignment = -1;
name = acute.cmb;
transform = "{1, 0, 0, 1, 307, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 476;
}
);
leftKerningGroup = S;
note = Sacute.salt_tall;
rightKerningGroup = S;
},
{
glyphname = Scaron.salt_low;
layers = (
{
components = (
{
alignment = -1;
name = S.salt_low;
},
{
alignment = -1;
name = caron.cmb;
transform = "{1, 0, 0, 1, 263, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 478;
}
);
leftKerningGroup = S;
note = Scaron.salt_low;
rightKerningGroup = S;
},
{
glyphname = Scaron.salt_tall;
layers = (
{
components = (
{
alignment = -1;
name = S.salt_tall;
},
{
alignment = -1;
name = caron.cmb;
transform = "{1, 0, 0, 1, 270, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 476;
}
);
leftKerningGroup = S;
note = Scaron.salt_tall;
rightKerningGroup = S;
},
{
glyphname = Scedilla.salt_low;
layers = (
{
components = (
{
alignment = -1;
name = S.salt_low;
},
{
alignment = -1;
name = cedilla.cmb;
transform = "{1, 0, 0, 1, 219, -12}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 478;
}
);
leftKerningGroup = S;
note = Scedilla.salt_low;
rightKerningGroup = S;
},
{
glyphname = Scedilla.salt_tall;
layers = (
{
components = (
{
alignment = -1;
name = S.salt_tall;
},
{
alignment = -1;
name = cedilla.cmb;
transform = "{1, 0, 0, 1, 212, -12}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 476;
}
);
leftKerningGroup = S;
note = Scedilla.salt_tall;
rightKerningGroup = S;
},
{
glyphname = Scircumflex.salt_low;
layers = (
{
components = (
{
alignment = -1;
name = S.salt_low;
},
{
alignment = -1;
name = circumflex.cmb;
transform = "{1, 0, 0, 1, 262, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 478;
}
);
leftKerningGroup = S;
note = Scircumflex.salt_low;
rightKerningGroup = S;
},
{
glyphname = Scircumflex.salt_tall;
layers = (
{
components = (
{
alignment = -1;
name = S.salt_tall;
},
{
alignment = -1;
name = circumflex.cmb;
transform = "{1, 0, 0, 1, 269, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 476;
}
);
leftKerningGroup = S;
note = Scircumflex.salt_tall;
rightKerningGroup = S;
},
{
glyphname = Scommaaccent.salt_low;
layers = (
{
components = (
{
alignment = -1;
name = S.salt_low;
},
{
alignment = -1;
name = commaaccentcomb.cmb;
transform = "{1, 0, 0, 1, 213, -27}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 478;
}
);
leftKerningGroup = S;
note = Scommaaccent.salt_low;
rightKerningGroup = S;
},
{
glyphname = Scommaaccent.salt_tall;
layers = (
{
components = (
{
alignment = -1;
name = S.salt_tall;
},
{
alignment = -1;
name = commaaccentcomb.cmb;
transform = "{1, 0, 0, 1, 205, -27}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 476;
}
);
leftKerningGroup = S;
note = Scommaaccent.salt_tall;
rightKerningGroup = S;
},
{
glyphname = T.salt_tall;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"146 0 LINE",
"264 0 LINE",
"264 641 LINE",
"401 641 LINE",
"401 746 LINE",
"10 746 LINE",
"10 641 LINE",
"146 641 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 18 values pushed */\0122 1 0 0 1 89 0 1 1 20 75 4 1 3 3 21 3 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 16 values pushed */\0120 1 2 1 0 3 1 0 97 4 1 3 3 24 3 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 23 values pushed */\0124 1 3 0 3 115 0 1 0 0 1 85 0 1 1 0 89 2 1 0 1 0 77 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 12 values pushed */\0120 0 0 7 0 7 17 17 17 5 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 410;
}
);
leftKerningGroup = T.salt_tall;
note = T.salt_tall;
rightKerningGroup = T.salt_tall;
},
{
glyphname = Tbar.salt_tall;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"342 315 LINE",
"342 410 LINE",
"264 410 LINE",
"264 641 LINE",
"401 641 LINE",
"401 746 LINE",
"10 746 LINE",
"10 641 LINE",
"146 641 LINE",
"146 410 LINE",
"68 410 LINE",
"68 315 LINE",
"146 315 LINE",
"146 0 LINE",
"264 0 LINE",
"264 315 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 27 values pushed */\0127 1 3 2 1 0 1 3 0 97 6 1 4 4 5 89 0 5 5 20 75 0 1 1 21 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 25 values pushed */\0120 5 6 1 4 3 5 4 97 7 1 3 2 1 0 1 3 0 97 0 1 1 24 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 33 values pushed */\0120 1 0 1 115 0 5 6 1 4 3 5 4 97 7 1 3 0 0 3 85 7 1 3 3 0 89 2 1 0 3 0 77 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 11 values pushed */\01217 17 17 17 17 17 17 16 8 7 28 \012CALL[ ]	/* CallFunction */";
};
width = 410;
}
);
leftKerningGroup = T.salt_tall;
note = Tbar.salt_tall;
rightKerningGroup = T.salt_tall;
},
{
glyphname = Tcaron.salt_tall;
layers = (
{
components = (
{
alignment = -1;
name = T.salt_tall;
},
{
alignment = -1;
name = caron.cmb;
transform = "{1, 0, 0, 1, 208, 164}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 410;
}
);
leftKerningGroup = T.salt_tall;
note = Tcaron.salt_tall;
rightKerningGroup = T.salt_tall;
},
{
glyphname = Tcommaaccent.salt_tall;
layers = (
{
components = (
{
alignment = -1;
name = T.salt_tall;
},
{
alignment = -1;
name = commaaccentcomb.cmb;
transform = "{1, 0, 0, 1, 206, -27}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 410;
}
);
leftKerningGroup = T.salt_tall;
note = Tcommaaccent.salt_tall;
rightKerningGroup = T.salt_tall;
},
{
glyphname = Udieresis.salt;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"615 746 LINE",
"497 746 LINE",
"497 270 LINE SMOOTH",
"497 153.474 OFFCURVE",
"425.315 84 OFFCURVE",
"332 84 CURVE SMOOTH",
"240.793 84 OFFCURVE",
"169 154.168 OFFCURVE",
"169 270 CURVE SMOOTH",
"169 746 LINE",
"51 746 LINE",
"51 299 LINE SMOOTH",
"51 99 OFFCURVE",
"149.333 -24 OFFCURVE",
"332 -24 CURVE SMOOTH",
"516 -24 OFFCURVE",
"615 99 OFFCURVE",
"615 299 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"470 746 LINE",
"350 746 LINE",
"350 637 LINE",
"470 637 LINE"
);
},
{
closed = 1;
nodes = (
"315 746 LINE",
"196 746 LINE",
"196 637 LINE",
"315 637 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 27 values pushed */\0126 1 4 4 1 89 9 7 8 5 3 5 1 1 20 75 0 2 2 0 91 0 0 0 29 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 25 values pushed */\0129 7 8 5 3 5 1 6 1 4 2 1 4 97 0 2 2 0 91 0 0 0 32 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 30 values pushed */\0129 7 8 5 3 5 1 6 1 4 2 1 4 97 0 2 0 0 2 87 0 2 2 0 91 0 0 2 0 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 22 values pushed */\01226 26 22 22 26 29 26 29 28 27 22 25 22 25 18 21 37 19 34 10 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 665;
}
);
leftKerningGroup = U;
note = Udieresis.salt;
rightKerningGroup = U;
},
{
glyphname = I_Jacute;
layers = (
{
components = (
{
alignment = -1;
name = Iacute;
},
{
alignment = -1;
name = Jacute;
transform = "{1, 0, 0, 1, 221, 0}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 555;
}
);
note = I_Jacute;
rightKerningGroup = J;
},
{
glyphname = a;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"182.667 53 OFFCURVE",
"136 107.667 OFFCURVE",
"136 173 CURVE SMOOTH",
"136 234.333 OFFCURVE",
"182.667 287 OFFCURVE",
"252 287 CURVE SMOOTH",
"324 287 OFFCURVE",
"373 234.333 OFFCURVE",
"373 173 CURVE SMOOTH",
"373 106.333 OFFCURVE",
"321.333 53 OFFCURVE",
"252 53 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"381 0 LINE",
"482 0 LINE",
"482 388 LINE SMOOTH",
"482 512 OFFCURVE",
"410.667 590 OFFCURVE",
"256 590 CURVE SMOOTH",
"202.667 590 OFFCURVE",
"167 585.333 OFFCURVE",
"99 572 CURVE",
"104 479 LINE",
"174.667 492.333 OFFCURVE",
"206.333 496 OFFCURVE",
"245 496 CURVE SMOOTH",
"325 497.333 OFFCURVE",
"372 463.667 OFFCURVE",
"372 353 CURVE SMOOTH",
"372 314 LINE",
"337.333 340.667 OFFCURVE",
"288.333 360 OFFCURVE",
"227 360 CURVE SMOOTH",
"107.195 360 OFFCURVE",
"21 278.633 OFFCURVE",
"21 170 CURVE SMOOTH",
"21 61.093 OFFCURVE",
"105.092 -20 OFFCURVE",
"213 -20 CURVE SMOOTH",
"285 -20 OFFCURVE",
"343.667 12 OFFCURVE",
"381 52 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */\01237 1 4 5 36 1 3 4 29 1 1 3 13 1 6 0 4 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 36 values pushed */\0120 3 0 1 0 3 1 99 0 4 4 5 91 0 5 5 31 75 8 1 6 6 21 75 7 1 0 0 2 91 0 2 2 32 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 34 values pushed */\0120 5 0 4 3 5 4 99 0 3 0 1 0 3 1 99 8 1 6 6 21 75 7 1 0 0 2 91 0 2 2 32 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 34 values pushed */\0120 5 0 4 3 5 4 99 0 3 0 1 0 3 1 99 8 1 6 6 24 75 7 1 0 0 2 91 0 2 2 32 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 43 values pushed */\0128 1 6 0 2 0 6 2 112 0 5 0 4 3 5 4 99 0 3 0 1 0 3 1 99 7 1 0 6 2 0 87 7 1 0 0 2 91 0 2 0 2 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 25 values pushed */\01212 12 1 0 12 44 12 44 41 39 34 32 27 25 17 15 7 5 0 11 1 11 9 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 528;
}
);
leftKerningGroup = a;
note = a;
rightKerningGroup = a;
unicode = 0061;
},
{
glyphname = aacute;
layers = (
{
components = (
{
alignment = -1;
name = a;
},
{
alignment = -1;
name = acute.lc;
transform = "{1, 0, 0, 1, 305, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 528;
}
);
leftKerningGroup = a;
note = aacute;
rightKerningGroup = a;
unicode = 00E1;
},
{
glyphname = abreve;
layers = (
{
components = (
{
alignment = -1;
name = a;
},
{
alignment = -1;
name = breve.lc;
transform = "{1, 0, 0, 1, 265, 7}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 528;
}
);
leftKerningGroup = a;
note = abreve;
rightKerningGroup = a;
unicode = 0103;
},
{
glyphname = acircumflex;
layers = (
{
components = (
{
alignment = -1;
name = a;
},
{
alignment = -1;
name = circumflex.lc;
transform = "{1, 0, 0, 1, 267, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 528;
}
);
leftKerningGroup = a;
note = acircumflex;
rightKerningGroup = a;
unicode = 00E2;
},
{
glyphname = adieresis;
layers = (
{
components = (
{
alignment = -1;
name = a;
},
{
alignment = -1;
name = dieresis.lc;
transform = "{1, 0, 0, 1, 265, -24}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 528;
}
);
leftKerningGroup = a;
note = adieresis;
rightKerningGroup = a;
unicode = 00E4;
},
{
glyphname = agrave;
layers = (
{
components = (
{
alignment = -1;
name = a;
},
{
alignment = -1;
name = grave.lc;
transform = "{1, 0, 0, 1, 220, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 528;
}
);
leftKerningGroup = a;
note = agrave;
rightKerningGroup = a;
unicode = 00E0;
},
{
glyphname = amacron;
layers = (
{
components = (
{
alignment = -1;
name = a;
},
{
alignment = -1;
name = macron.lc;
transform = "{1, 0, 0, 1, 265, -16}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 528;
}
);
leftKerningGroup = a;
note = amacron;
rightKerningGroup = a;
unicode = 0101;
},
{
glyphname = aogonek;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"182.667 53 OFFCURVE",
"136 107.667 OFFCURVE",
"136 173 CURVE SMOOTH",
"136 234.333 OFFCURVE",
"182.667 287 OFFCURVE",
"252 287 CURVE SMOOTH",
"324 287 OFFCURVE",
"373 234.333 OFFCURVE",
"373 173 CURVE SMOOTH",
"373 106.333 OFFCURVE",
"321.333 53 OFFCURVE",
"252 53 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"459 -96 LINE",
"451 -102.667 OFFCURVE",
"439 -110 OFFCURVE",
"423 -110 CURVE SMOOTH",
"403 -110 OFFCURVE",
"392 -97 OFFCURVE",
"392 -81 CURVE SMOOTH",
"392 -65 OFFCURVE",
"404 -51.667 OFFCURVE",
"432 -33 CURVE SMOOTH",
"482 0 LINE",
"482 388 LINE SMOOTH",
"482 512 OFFCURVE",
"410.667 590 OFFCURVE",
"256 590 CURVE SMOOTH",
"202.667 590 OFFCURVE",
"167 585.333 OFFCURVE",
"99 572 CURVE",
"104 479 LINE",
"174.667 492.333 OFFCURVE",
"206.333 496 OFFCURVE",
"245 496 CURVE SMOOTH",
"325 497.333 OFFCURVE",
"372 463.667 OFFCURVE",
"372 353 CURVE SMOOTH",
"372 314 LINE",
"337.333 340.667 OFFCURVE",
"288.333 360 OFFCURVE",
"227 360 CURVE SMOOTH",
"107.195 360 OFFCURVE",
"21 278.633 OFFCURVE",
"21 170 CURVE SMOOTH",
"21 61.093 OFFCURVE",
"105.092 -20 OFFCURVE",
"213 -20 CURVE SMOOTH",
"285 -20 OFFCURVE",
"343.667 12 OFFCURVE",
"381 52 CURVE",
"381 1 LINE",
"359 -15 LINE",
"325.667 -36.333 OFFCURVE",
"302 -64 OFFCURVE",
"302 -100 CURVE SMOOTH",
"302 -138.667 OFFCURVE",
"330.667 -176 OFFCURVE",
"396 -176 CURVE SMOOTH",
"442.667 -174.667 OFFCURVE",
"476.667 -157.333 OFFCURVE",
"494 -140 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */\01247 1 5 6 46 1 4 5 39 1 1 4 54 23 22 3 3 0 64 1 7 3 5 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 37 values pushed */\0120 4 0 1 0 4 1 99 0 7 0 2 7 2 95 0 5 5 6 91 0 6 6 31 75 8 1 0 0 3 91 0 3 3 32 3 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 35 values pushed */\0120 6 0 5 4 6 5 99 0 4 0 1 0 4 1 99 0 7 0 2 7 2 95 8 1 0 0 3 91 0 3 3 32 3 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 41 values pushed */\0120 6 0 5 4 6 5 99 0 4 0 1 0 4 1 99 8 1 0 0 3 7 0 3 99 0 7 2 2 7 87 0 7 7 2 91 0 2 7 2 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 23 values pushed */\0121 0 62 60 51 49 44 42 37 35 27 25 16 14 7 5 0 11 1 11 9 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 528;
}
);
leftKerningGroup = a;
note = aogonek;
rightKerningGroup = a;
unicode = 0105;
},
{
glyphname = aring;
layers = (
{
components = (
{
alignment = -1;
name = a;
},
{
alignment = -1;
name = ring.lc;
transform = "{1, 0, 0, 1, 265, 6}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 528;
}
);
leftKerningGroup = a;
note = aring;
rightKerningGroup = a;
unicode = 00E5;
},
{
glyphname = aringacute;
layers = (
{
components = (
{
alignment = -1;
name = a;
},
{
alignment = -1;
name = ring.lc;
transform = "{1, 0, 0, 1, 265, 6}";
},
{
alignment = -1;
name = acute.lc;
transform = "{1, 0, 0, 1, 305, 259}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 528;
}
);
leftKerningGroup = a;
note = aringacute;
rightKerningGroup = a;
unicode = 01FB;
},
{
glyphname = atilde;
layers = (
{
components = (
{
alignment = -1;
name = a;
},
{
alignment = -1;
name = tilde.lc;
transform = "{1, 0, 0, 1, 265, 9}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 528;
}
);
leftKerningGroup = a;
note = atilde;
rightKerningGroup = a;
unicode = 00E3;
},
{
glyphname = ae;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"756.333 508 OFFCURVE",
"826.667 445 OFFCURVE",
"848 353 CURVE",
"478 353 LINE",
"499.333 446.333 OFFCURVE",
"569.667 508 OFFCURVE",
"663 508 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"182.667 44 OFFCURVE",
"136 97 OFFCURVE",
"136 169 CURVE SMOOTH",
"136 231.667 OFFCURVE",
"182.667 287 OFFCURVE",
"252 287 CURVE SMOOTH",
"324 287 OFFCURVE",
"373 233 OFFCURVE",
"373 169 CURVE SMOOTH",
"373 94.333 OFFCURVE",
"321.333 44 OFFCURVE",
"252 44 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"893 150 LINE",
"843.667 100.667 OFFCURVE",
"775.333 66 OFFCURVE",
"686 66 CURVE SMOOTH",
"560.667 66 OFFCURVE",
"480 147 OFFCURVE",
"472 267 CURVE",
"970 267 LINE",
"970 293 LINE SMOOTH",
"970 379.667 OFFCURVE",
"936.833 458.167 OFFCURVE",
"881.5 513.5 CURVE SMOOTH",
"826.167 568.833 OFFCURVE",
"749.667 603 OFFCURVE",
"663 603 CURVE SMOOTH",
"575 603 OFFCURVE",
"497.333 564.333 OFFCURVE",
"444 503 CURVE",
"412 559 OFFCURVE",
"349.333 590 OFFCURVE",
"252 590 CURVE SMOOTH",
"198.667 590 OFFCURVE",
"167 585.333 OFFCURVE",
"99 572 CURVE",
"104 479 LINE",
"174.667 492.333 OFFCURVE",
"201.333 496 OFFCURVE",
"240 496 CURVE SMOOTH",
"320 497.333 OFFCURVE",
"361 463.667 OFFCURVE",
"361 353 CURVE SMOOTH",
"361 322 LINE",
"327.667 344.667 OFFCURVE",
"281.667 360 OFFCURVE",
"227 360 CURVE SMOOTH",
"107.001 360 OFFCURVE",
"21 275.908 OFFCURVE",
"21 166 CURVE SMOOTH",
"21 54 OFFCURVE",
"108 -29 OFFCURVE",
"232 -29 CURVE SMOOTH",
"344 -29 OFFCURVE",
"408.333 28.333 OFFCURVE",
"431 91 CURVE",
"485.667 17.667 OFFCURVE",
"575.333 -29 OFFCURVE",
"686 -29 CURVE SMOOTH",
"812.667 -29 OFFCURVE",
"900 19 OFFCURVE",
"960 79 CURVE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 20 values pushed */\01247 1 0 8 53 46 2 1 0 39 1 3 1 69 25 2 11 10 4 74 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01234 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 23 values pushed */\01247 1 0 8 53 1 7 0 46 1 1 7 39 1 3 1 69 25 2 11 10 5 74 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 23 values pushed */\01247 1 0 8 53 1 7 0 46 1 6 7 39 1 3 1 69 25 2 11 10 5 74 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01219 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 52 values pushed */\0120 3 10 1 3 87 6 1 1 0 10 11 1 10 97 7 12 2 0 0 8 91 9 1 8 8 31 75 0 11 11 4 91 5 1 4 4 29 75 13 1 2 2 4 91 5 1 4 4 29 4 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 63 values pushed */\0120 3 10 1 3 87 6 1 1 0 10 11 1 10 97 7 12 2 0 0 9 91 0 9 9 31 75 7 12 2 0 0 8 91 0 8 8 31 75 0 11 11 4 91 5 1 4 4 29 75 13 1 2 2 4 91 5 1 4 4 29 4 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 60 values pushed */\0120 3 10 1 3 87 6 1 1 0 10 11 1 10 97 12 1 0 0 9 91 0 9 9 31 75 0 7 7 8 91 0 8 8 31 75 0 11 11 4 91 5 1 4 4 29 75 13 1 2 2 4 91 5 1 4 4 29 4 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 56 values pushed */\0120 9 12 1 0 7 9 0 99 0 8 0 7 1 8 7 99 0 3 10 1 3 87 6 1 1 0 10 11 1 10 97 0 11 11 4 91 5 1 4 4 29 75 13 1 2 2 4 91 5 1 4 4 29 4 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01234 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 56 values pushed */\0120 9 12 1 0 7 9 0 99 0 8 0 7 1 8 7 99 0 3 10 1 3 87 6 1 1 0 10 11 1 10 97 0 11 11 4 91 5 1 4 4 32 75 13 1 2 2 4 91 5 1 4 4 32 4 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 57 values pushed */\0120 9 12 1 0 7 9 0 99 0 8 0 7 6 8 7 99 0 6 0 3 10 6 3 99 0 1 0 10 11 1 10 97 0 11 11 4 91 5 1 4 4 32 75 13 1 2 2 4 91 5 1 4 4 32 4 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 58 values pushed */\0120 9 12 1 0 7 9 0 99 0 8 0 7 6 8 7 99 0 6 0 3 10 6 3 99 0 1 0 10 11 1 10 97 0 11 2 4 11 87 13 1 2 4 4 2 87 13 1 2 2 4 91 5 1 4 2 4 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 35 values pushed */\0128 7 1 0 67 65 63 62 57 55 51 49 44 42 37 35 29 27 23 21 14 12 7 18 8 18 4 3 0 6 1 6 14 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 991;
}
);
leftKerningGroup = a;
note = ae;
rightKerningGroup = e;
unicode = 00E6;
},
{
glyphname = aeacute;
layers = (
{
components = (
{
alignment = -1;
name = ae;
},
{
alignment = -1;
name = acute.lc;
transform = "{1, 0, 0, 1, 511, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 991;
}
);
leftKerningGroup = a;
note = aeacute;
rightKerningGroup = e;
unicode = 01FD;
},
{
glyphname = b;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"474 -22 OFFCURVE",
"549.833 13.167 OFFCURVE",
"602.5 68.5 CURVE SMOOTH",
"655.167 123.833 OFFCURVE",
"688 202 OFFCURVE",
"688 286 CURVE SMOOTH",
"688 370 OFFCURVE",
"655.167 448 OFFCURVE",
"602.5 504 CURVE SMOOTH",
"549.833 560 OFFCURVE",
"474 596 OFFCURVE",
"390 596 CURVE SMOOTH",
"295.333 596 OFFCURVE",
"210.667 553.333 OFFCURVE",
"156 488 CURVE",
"156 780 LINE",
"46 780 LINE",
"46 0 LINE",
"151 0 LINE",
"151 89 LINE",
"205.667 21 OFFCURVE",
"291.333 -22 OFFCURVE",
"390 -22 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"153 400.716 OFFCURVE",
"245.114 499 OFFCURVE",
"364 499 CURVE SMOOTH",
"483.249 499 OFFCURVE",
"572 403.268 OFFCURVE",
"572 288 CURVE SMOOTH",
"572 173.436 OFFCURVE",
"483.332 75 OFFCURVE",
"364 75 CURVE SMOOTH",
"245.114 75 OFFCURVE",
"153 173.284 OFFCURVE",
"153 287 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */\0128 3 2 4 5 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 32 values pushed */\0120 2 2 22 75 0 5 5 3 91 0 3 3 31 75 0 1 1 21 75 0 4 4 0 91 6 1 0 0 29 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 30 values pushed */\0120 3 0 5 4 3 5 99 0 2 2 22 75 0 1 1 21 75 0 4 4 0 91 6 1 0 0 29 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 30 values pushed */\0120 3 0 5 4 3 5 99 0 2 2 22 75 0 1 1 24 75 0 4 4 0 91 6 1 0 0 32 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 27 values pushed */\0120 3 0 5 4 3 5 99 0 4 6 1 0 4 0 95 0 1 1 2 89 0 2 2 22 1 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 19 values pushed */\0121 0 37 35 27 25 12 10 7 6 5 4 0 20 1 20 7 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 712;
}
);
leftKerningGroup = b;
note = b;
rightKerningGroup = b;
unicode = 0062;
},
{
glyphname = c;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"492 111 LINE",
"489 111 LINE",
"442.333 81.667 OFFCURVE",
"391.333 76 OFFCURVE",
"354 76 CURVE SMOOTH",
"232.74 76 OFFCURVE",
"140 168.646 OFFCURVE",
"140 287 CURVE SMOOTH",
"140 404.815 OFFCURVE",
"233.775 498 OFFCURVE",
"354 498 CURVE SMOOTH",
"391.333 498 OFFCURVE",
"446.333 491.667 OFFCURVE",
"489 461 CURVE",
"492 461 LINE",
"492 562 LINE",
"456 583.333 OFFCURVE",
"394 592 OFFCURVE",
"354 592 CURVE SMOOTH",
"260.667 592 OFFCURVE",
"177.667 557.667 OFFCURVE",
"119 503 CURVE SMOOTH",
"60.333 448.333 OFFCURVE",
"24 371 OFFCURVE",
"24 287 CURVE SMOOTH",
"24 203 OFFCURVE",
"60.333 125.667 OFFCURVE",
"119 71 CURVE SMOOTH",
"177.667 16.333 OFFCURVE",
"260.667 -18 OFFCURVE",
"354 -18 CURVE SMOOTH",
"394 -18 OFFCURVE",
"458.667 -10 OFFCURVE",
"492 10 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */\01217 1 2 1 35 18 2 3 2 1 1 0 3 3 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 21 values pushed */\0120 2 2 1 91 0 1 1 31 75 0 3 3 0 91 0 0 0 32 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 19 values pushed */\0120 1 0 2 3 1 2 99 0 3 3 0 91 0 0 0 32 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 24 values pushed */\0120 1 0 2 3 1 2 99 0 3 0 0 3 87 0 3 3 0 91 0 0 3 0 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 7 values pushed */\01240 38 40 35 4 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 530;
}
);
leftKerningGroup = c;
note = c;
rightKerningGroup = c;
unicode = 0063;
},
{
glyphname = cacute;
layers = (
{
components = (
{
alignment = -1;
name = c;
},
{
alignment = -1;
name = acute.lc;
transform = "{1, 0, 0, 1, 374, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 530;
}
);
leftKerningGroup = c;
note = cacute;
rightKerningGroup = c;
unicode = 0107;
},
{
glyphname = ccaron;
layers = (
{
components = (
{
alignment = -1;
name = c;
},
{
alignment = -1;
name = caron.lc;
transform = "{1, 0, 0, 1, 337, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 530;
}
);
leftKerningGroup = c;
note = ccaron;
rightKerningGroup = c;
unicode = 010D;
},
{
glyphname = ccedilla;
layers = (
{
components = (
{
alignment = -1;
name = c;
},
{
alignment = -1;
name = cedilla.lc;
transform = "{1, 0, 0, 1, 333, -18}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 530;
}
);
leftKerningGroup = c;
note = ccedilla;
rightKerningGroup = c;
unicode = 00E7;
},
{
glyphname = ccircumflex;
layers = (
{
components = (
{
alignment = -1;
name = c;
},
{
alignment = -1;
name = circumflex.lc;
transform = "{1, 0, 0, 1, 336, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 530;
}
);
leftKerningGroup = c;
note = ccircumflex;
rightKerningGroup = c;
unicode = 0109;
},
{
glyphname = cdotaccent;
layers = (
{
components = (
{
alignment = -1;
name = c;
},
{
alignment = -1;
name = dotaccent.lc;
transform = "{1, 0, 0, 1, 334, 27}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 530;
}
);
leftKerningGroup = c;
note = cdotaccent;
rightKerningGroup = c;
unicode = 010B;
},
{
glyphname = d;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"559 173.284 OFFCURVE",
"466.886 75 OFFCURVE",
"348 75 CURVE SMOOTH",
"228.668 75 OFFCURVE",
"140 173.436 OFFCURVE",
"140 288 CURVE SMOOTH",
"140 403.268 OFFCURVE",
"228.751 499 OFFCURVE",
"348 499 CURVE SMOOTH",
"466.886 499 OFFCURVE",
"559 400.716 OFFCURVE",
"559 287 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"561 0 LINE",
"666 0 LINE",
"666 780 LINE",
"556 780 LINE",
"556 488 LINE",
"501.333 553.333 OFFCURVE",
"417 596 OFFCURVE",
"321 596 CURVE SMOOTH",
"237 596 OFFCURVE",
"162.333 560 OFFCURVE",
"109 504 CURVE SMOOTH",
"55.667 448 OFFCURVE",
"24 370 OFFCURVE",
"24 286 CURVE SMOOTH",
"24 202 OFFCURVE",
"55.667 123.833 OFFCURVE",
"109 68.5 CURVE SMOOTH",
"162.333 13.167 OFFCURVE",
"237 -22 OFFCURVE",
"321 -22 CURVE SMOOTH",
"421 -22 OFFCURVE",
"506.333 21 OFFCURVE",
"561 89 CURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */\01237 21 2 1 0 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 32 values pushed */\0120 4 4 22 75 0 0 0 3 91 0 3 3 31 75 6 1 5 5 21 75 0 1 1 2 91 0 2 2 29 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 30 values pushed */\0120 3 0 0 1 3 0 99 0 4 4 22 75 6 1 5 5 21 75 0 1 1 2 91 0 2 2 29 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 30 values pushed */\0120 3 0 0 1 3 0 99 0 4 4 22 75 6 1 5 5 24 75 0 1 1 2 91 0 2 2 32 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 27 values pushed */\0120 3 0 0 1 3 0 99 0 1 0 2 1 2 95 6 1 5 5 4 89 0 4 4 22 5 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\01220 20 20 40 20 40 19 40 39 40 36 7 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 712;
}
);
leftKerningGroup = d;
note = d;
rightKerningGroup = d;
unicode = 0064;
},
{
glyphname = eth;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"441 -28 OFFCURVE",
"523.5 8.667 OFFCURVE",
"581.5 66 CURVE SMOOTH",
"639.5 123.333 OFFCURVE",
"674 203 OFFCURVE",
"674 287 CURVE",
"673 287 LINE",
"673.667 289 OFFCURVE",
"674 291 OFFCURVE",
"674 293 CURVE SMOOTH",
"674 295 OFFCURVE",
"674 297.333 OFFCURVE",
"674 300 CURVE SMOOTH",
"674 432 OFFCURVE",
"605 565 OFFCURVE",
"485 677 CURVE",
"602 709 LINE",
"565 770 LINE",
"421 731 LINE",
"399.667 748.333 OFFCURVE",
"376.333 764 OFFCURVE",
"351 780 CURVE",
"189 780 LINE",
"230.333 754.667 OFFCURVE",
"269.667 726.667 OFFCURVE",
"307 700 CURVE",
"178 665 LINE",
"215 604 LINE",
"372 647 LINE",
"398.667 623 OFFCURVE",
"424.667 599 OFFCURVE",
"446 575 CURVE",
"416.667 584.333 OFFCURVE",
"382.333 589 OFFCURVE",
"349 589 CURVE SMOOTH",
"255.667 589 OFFCURVE",
"174.5 553.667 OFFCURVE",
"116.5 499 CURVE SMOOTH",
"58.5 444.333 OFFCURVE",
"24 367 OFFCURVE",
"24 287 CURVE SMOOTH",
"24 203 OFFCURVE",
"58.5 123.333 OFFCURVE",
"116.5 66 CURVE SMOOTH",
"174.5 8.667 OFFCURVE",
"255.667 -28 OFFCURVE",
"349 -28 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"469.424 505 OFFCURVE",
"558 403.209 OFFCURVE",
"558 287 CURVE SMOOTH",
"558 168.515 OFFCURVE",
"469.074 69 OFFCURVE",
"349 69 CURVE SMOOTH",
"230.043 69 OFFCURVE",
"139 168.515 OFFCURVE",
"139 287 CURVE SMOOTH",
"139 403.209 OFFCURVE",
"229.719 505 OFFCURVE",
"349 505 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */\01229 28 27 26 19 18 17 16 8 1 2 13 1 3 1 2 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 28 values pushed */\0120 2 2 22 75 6 1 3 3 1 91 0 1 1 31 75 0 4 4 0 91 5 1 0 0 29 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 26 values pushed */\0120 1 6 1 3 4 1 3 100 0 2 2 22 75 0 4 4 0 91 5 1 0 0 29 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 26 values pushed */\0120 1 6 1 3 4 1 3 100 0 2 2 22 75 0 4 4 0 91 5 1 0 0 32 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 23 values pushed */\0120 1 6 1 3 4 1 3 100 0 4 5 1 0 4 0 95 0 2 2 22 2 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 21 values pushed */\01242 41 1 0 52 50 41 60 42 60 23 22 11 9 0 40 1 40 7 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 698;
}
);
leftKerningGroup = c;
note = eth;
rightKerningGroup = eth;
unicode = 00F0;
},
{
glyphname = dcaron;
layers = (
{
components = (
{
alignment = -1;
name = d;
},
{
alignment = -1;
name = caron.vertical;
transform = "{1, 0, 0, 1, 790, 810}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 712;
}
);
leftKerningGroup = d;
note = dcaron;
rightKerningGroup = d;
unicode = 010F;
},
{
glyphname = dcroat;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"559 173.284 OFFCURVE",
"466.886 75 OFFCURVE",
"348 75 CURVE SMOOTH",
"228.668 75 OFFCURVE",
"140 173.436 OFFCURVE",
"140 288 CURVE SMOOTH",
"140 403.268 OFFCURVE",
"228.751 499 OFFCURVE",
"348 499 CURVE SMOOTH",
"466.886 499 OFFCURVE",
"559 400.716 OFFCURVE",
"559 287 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"561 0 LINE",
"666 0 LINE",
"666 613 LINE",
"713 613 LINE",
"713 689 LINE",
"666 689 LINE",
"666 780 LINE",
"556 780 LINE",
"556 689 LINE",
"468 689 LINE",
"468 613 LINE",
"556 613 LINE",
"556 488 LINE",
"501.333 553.333 OFFCURVE",
"417 596 OFFCURVE",
"321 596 CURVE SMOOTH",
"237 596 OFFCURVE",
"162.333 560 OFFCURVE",
"109 504 CURVE SMOOTH",
"55.667 448 OFFCURVE",
"24 370 OFFCURVE",
"24 286 CURVE SMOOTH",
"24 202 OFFCURVE",
"55.667 123.833 OFFCURVE",
"109 68.5 CURVE SMOOTH",
"162.333 13.167 OFFCURVE",
"237 -22 OFFCURVE",
"321 -22 CURVE SMOOTH",
"421 -22 OFFCURVE",
"506.333 21 OFFCURVE",
"561 89 CURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */\01237 21 2 1 0 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 42 values pushed */\0127 1 5 8 1 4 3 5 4 97 0 6 6 22 75 0 0 0 3 91 0 3 3 31 75 10 1 9 9 21 75 0 1 1 2 91 0 2 2 29 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 40 values pushed */\0127 1 5 8 1 4 3 5 4 97 0 3 0 0 1 3 0 99 0 6 6 22 75 10 1 9 9 21 75 0 1 1 2 91 0 2 2 29 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 40 values pushed */\0127 1 5 8 1 4 3 5 4 97 0 3 0 0 1 3 0 99 0 6 6 22 75 10 1 9 9 24 75 0 1 1 2 91 0 2 2 32 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 37 values pushed */\0127 1 5 8 1 4 3 5 4 97 0 3 0 0 1 3 0 99 0 1 0 2 1 2 95 10 1 9 9 6 89 0 6 6 22 9 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 18 values pushed */\01220 20 20 48 20 48 17 17 17 17 19 40 39 40 36 11 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 712;
}
);
leftKerningGroup = d;
note = dcroat;
rightKerningGroup = d;
unicode = 0111;
},
{
glyphname = e;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"425 508 OFFCURVE",
"495.667 445 OFFCURVE",
"517 353 CURVE",
"147 353 LINE",
"168.333 446.333 OFFCURVE",
"238.333 508 OFFCURVE",
"333 508 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"563 150 LINE",
"513.667 100.667 OFFCURVE",
"445.333 66 OFFCURVE",
"356 66 CURVE SMOOTH",
"230.667 66 OFFCURVE",
"149 147 OFFCURVE",
"141 267 CURVE",
"639 267 LINE",
"639 293 LINE SMOOTH",
"639 379.667 OFFCURVE",
"605.833 458.167 OFFCURVE",
"550.5 513.5 CURVE SMOOTH",
"495.167 568.833 OFFCURVE",
"418.333 603 OFFCURVE",
"333 603 CURVE SMOOTH",
"243.667 603 OFFCURVE",
"165.667 568.167 OFFCURVE",
"111 511.5 CURVE SMOOTH",
"56.333 454.833 OFFCURVE",
"24 375 OFFCURVE",
"24 287 CURVE SMOOTH",
"24 199 OFFCURVE",
"57.667 118.167 OFFCURVE",
"115 61.5 CURVE SMOOTH",
"172.333 4.833 OFFCURVE",
"256 -30 OFFCURVE",
"356 -30 CURVE SMOOTH",
"481.333 -30 OFFCURVE",
"569 19 OFFCURVE",
"629 79 CURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\01233 1 5 4 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 30 values pushed */\0120 1 0 4 5 1 4 97 6 1 0 0 3 91 0 3 3 31 75 0 5 5 2 91 0 2 2 29 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 28 values pushed */\0120 3 6 1 0 1 3 0 99 0 1 0 4 5 1 4 97 0 5 5 2 91 0 2 2 29 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01241 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 28 values pushed */\0120 3 6 1 0 1 3 0 99 0 1 0 4 5 1 4 97 0 5 5 2 91 0 2 2 32 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 33 values pushed */\0120 3 6 1 0 1 3 0 99 0 1 0 4 5 1 4 97 0 5 2 2 5 87 0 5 5 2 91 0 2 5 2 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 19 values pushed */\0121 0 31 29 27 26 21 19 11 9 4 3 0 6 1 6 7 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 660;
}
);
leftKerningGroup = c;
note = e;
rightKerningGroup = e;
unicode = 0065;
},
{
glyphname = eacute;
layers = (
{
components = (
{
alignment = -1;
name = e;
},
{
alignment = -1;
name = acute.lc;
transform = "{1, 0, 0, 1, 373, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 660;
}
);
leftKerningGroup = c;
note = eacute;
rightKerningGroup = e;
unicode = 00E9;
},
{
glyphname = ebreve;
layers = (
{
components = (
{
alignment = -1;
name = e;
},
{
alignment = -1;
name = breve.lc;
transform = "{1, 0, 0, 1, 333, 7}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 660;
}
);
leftKerningGroup = c;
note = ebreve;
rightKerningGroup = e;
unicode = 0115;
},
{
glyphname = ecaron;
layers = (
{
components = (
{
alignment = -1;
name = e;
},
{
alignment = -1;
name = caron.lc;
transform = "{1, 0, 0, 1, 336, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 660;
}
);
leftKerningGroup = c;
note = ecaron;
rightKerningGroup = e;
unicode = 011B;
},
{
glyphname = ecircumflex;
layers = (
{
components = (
{
alignment = -1;
name = e;
},
{
alignment = -1;
name = circumflex.lc;
transform = "{1, 0, 0, 1, 335, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 660;
}
);
leftKerningGroup = c;
note = ecircumflex;
rightKerningGroup = e;
unicode = 00EA;
},
{
glyphname = edieresis;
layers = (
{
components = (
{
alignment = -1;
name = e;
},
{
alignment = -1;
name = dieresis.lc;
transform = "{1, 0, 0, 1, 333, -24}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 660;
}
);
leftKerningGroup = c;
note = edieresis;
rightKerningGroup = e;
unicode = 00EB;
},
{
glyphname = edotaccent;
layers = (
{
components = (
{
alignment = -1;
name = e;
},
{
alignment = -1;
name = dotaccent.lc;
transform = "{1, 0, 0, 1, 333, 27}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 660;
}
);
leftKerningGroup = c;
note = edotaccent;
rightKerningGroup = e;
unicode = 0117;
},
{
glyphname = egrave;
layers = (
{
components = (
{
alignment = -1;
name = e;
},
{
alignment = -1;
name = grave.lc;
transform = "{1, 0, 0, 1, 287, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 660;
}
);
leftKerningGroup = c;
note = egrave;
rightKerningGroup = e;
unicode = 00E8;
},
{
glyphname = emacron;
layers = (
{
components = (
{
alignment = -1;
name = e;
},
{
alignment = -1;
name = macron.lc;
transform = "{1, 0, 0, 1, 333, -16}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 660;
}
);
leftKerningGroup = c;
note = emacron;
rightKerningGroup = e;
unicode = 0113;
},
{
glyphname = eogonek;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"425 508 OFFCURVE",
"495.667 445 OFFCURVE",
"517 353 CURVE",
"147 353 LINE",
"168.333 446.333 OFFCURVE",
"238.333 508 OFFCURVE",
"333 508 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"592 -96 LINE",
"584 -102.667 OFFCURVE",
"572 -110 OFFCURVE",
"556 -110 CURVE SMOOTH",
"537.333 -110 OFFCURVE",
"525 -96.667 OFFCURVE",
"525 -78 CURVE SMOOTH",
"525 -60.667 OFFCURVE",
"532 -40.333 OFFCURVE",
"556 -11 CURVE SMOOTH",
"629 79 LINE",
"563 150 LINE",
"513.667 100.667 OFFCURVE",
"445.333 66 OFFCURVE",
"356 66 CURVE SMOOTH",
"230.667 66 OFFCURVE",
"149 147 OFFCURVE",
"141 267 CURVE",
"639 267 LINE",
"639 293 LINE SMOOTH",
"639 379.667 OFFCURVE",
"605.833 458.167 OFFCURVE",
"550.5 513.5 CURVE SMOOTH",
"495.167 568.833 OFFCURVE",
"418.333 603 OFFCURVE",
"333 603 CURVE SMOOTH",
"243.667 603 OFFCURVE",
"165.667 568.167 OFFCURVE",
"111 511.5 CURVE SMOOTH",
"56.333 454.833 OFFCURVE",
"24 375 OFFCURVE",
"24 287 CURVE SMOOTH",
"24 199 OFFCURVE",
"57.667 118.167 OFFCURVE",
"115 61.5 CURVE SMOOTH",
"172.333 4.833 OFFCURVE",
"256 -30 OFFCURVE",
"356 -30 CURVE SMOOTH",
"397.333 -30 OFFCURVE",
"434.667 -24.333 OFFCURVE",
"468 -15 CURVE",
"448 -40.333 OFFCURVE",
"435 -67.667 OFFCURVE",
"435 -97 CURVE SMOOTH",
"435 -138.333 OFFCURVE",
"464.667 -176 OFFCURVE",
"530 -176 CURVE SMOOTH",
"575.333 -174.667 OFFCURVE",
"609.667 -157.333 OFFCURVE",
"627 -140 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */\01243 42 2 6 5 16 1 3 6 53 1 7 3 3 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 37 values pushed */\0120 1 0 5 6 1 5 97 0 7 0 2 7 2 95 8 1 0 0 4 91 0 4 4 31 75 0 6 6 3 91 0 3 3 29 3 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 35 values pushed */\0120 4 8 1 0 1 4 0 99 0 1 0 5 6 1 5 97 0 7 0 2 7 2 95 0 6 6 3 91 0 3 3 29 3 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01241 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 35 values pushed */\0120 4 8 1 0 1 4 0 99 0 1 0 5 6 1 5 97 0 7 0 2 7 2 95 0 6 6 3 91 0 3 3 32 3 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 41 values pushed */\0120 4 8 1 0 1 4 0 99 0 1 0 5 6 1 5 97 0 6 0 3 7 6 3 99 0 7 2 2 7 87 0 7 7 2 91 0 2 7 2 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 23 values pushed */\0121 0 51 49 40 38 36 35 30 28 20 18 11 9 4 3 0 6 1 6 9 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 660;
}
);
leftKerningGroup = c;
note = eogonek;
rightKerningGroup = e;
unicode = 0119;
},
{
glyphname = schwa;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"417.333 -29 OFFCURVE",
"494.333 5.833 OFFCURVE",
"549 62.5 CURVE SMOOTH",
"603.667 119.167 OFFCURVE",
"636 199 OFFCURVE",
"636 287 CURVE SMOOTH",
"636 375 OFFCURVE",
"602.333 454.833 OFFCURVE",
"545 511.5 CURVE SMOOTH",
"487.667 568.167 OFFCURVE",
"403.667 603 OFFCURVE",
"305 603 CURVE SMOOTH",
"178.333 603 OFFCURVE",
"92.333 555 OFFCURVE",
"31 495 CURVE",
"98 424 LINE",
"147.333 473.333 OFFCURVE",
"215.667 508 OFFCURVE",
"305 508 CURVE SMOOTH",
"430.333 508 OFFCURVE",
"512 427 OFFCURVE",
"520 307 CURVE",
"21 307 LINE",
"21 281 LINE SMOOTH",
"21 194.333 OFFCURVE",
"54.167 115.833 OFFCURVE",
"109.5 60.5 CURVE SMOOTH",
"164.833 5.167 OFFCURVE",
"241.333 -29 OFFCURVE",
"328 -29 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"234.667 66 OFFCURVE",
"164.333 129 OFFCURVE",
"143 221 CURVE",
"514 221 LINE",
"492.667 127.667 OFFCURVE",
"421.333 66 OFFCURVE",
"328 66 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */\01214 13 2 1 2 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 31 values pushed */\0120 1 0 5 4 1 5 97 0 2 2 3 91 0 3 3 31 75 7 1 4 4 0 91 6 1 0 0 29 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 29 values pushed */\0120 3 0 2 1 3 2 99 0 1 0 5 4 1 5 97 7 1 4 4 0 91 6 1 0 0 29 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 29 values pushed */\0120 3 0 2 1 3 2 99 0 1 0 5 4 1 5 97 7 1 4 4 0 91 6 1 0 0 32 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 35 values pushed */\0120 3 0 2 1 3 2 99 0 1 0 5 4 1 5 97 7 1 4 0 0 4 87 7 1 4 4 0 91 6 1 0 4 0 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 23 values pushed */\01228 27 1 0 31 30 27 33 28 33 18 16 11 9 7 6 0 26 1 26 8 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 660;
}
);
note = schwa;
rightKerningGroup = o;
unicode = 0259;
},
{
glyphname = f;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"274 480 LINE",
"274 574 LINE",
"197 574 LINE",
"197 598 LINE SMOOTH",
"197 683.333 OFFCURVE",
"242 695 OFFCURVE",
"286 695 CURVE",
"286 792 LINE",
"174.55 792 OFFCURVE",
"87 754.038 OFFCURVE",
"87 606 CURVE SMOOTH",
"87 574 LINE",
"12 574 LINE",
"12 480 LINE",
"87 480 LINE",
"87 0 LINE",
"197 0 LINE",
"197 480 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 28 values pushed */\0120 5 5 4 91 0 4 4 30 75 2 1 0 0 3 89 6 1 3 3 23 75 0 1 1 21 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 26 values pushed */\0126 1 3 2 1 0 1 3 0 97 0 5 5 4 91 0 4 4 30 75 0 1 1 21 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 26 values pushed */\0126 1 3 2 1 0 1 3 0 97 0 5 5 4 91 0 4 4 30 75 0 1 1 24 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 26 values pushed */\0120 1 0 1 115 6 1 3 2 1 0 1 3 0 97 0 5 5 4 91 0 4 4 30 5 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 10 values pushed */\01219 17 21 17 17 17 16 7 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 289;
}
);
leftKerningGroup = f;
note = f;
rightKerningGroup = f;
unicode = 0066;
},
{
glyphname = g;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"225.692 121 OFFCURVE",
"140 206.486 OFFCURVE",
"140 310 CURVE SMOOTH",
"140 415.937 OFFCURVE",
"225.462 502 OFFCURVE",
"330 502 CURVE SMOOTH",
"434.623 502 OFFCURVE",
"520 416.489 OFFCURVE",
"520 310 CURVE SMOOTH",
"520 205.952 OFFCURVE",
"434.385 121 OFFCURVE",
"330 121 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"412.667 -222 OFFCURVE",
"490.667 -203 OFFCURVE",
"544 -155 CURVE SMOOTH",
"597.333 -107 OFFCURVE",
"629 -29.667 OFFCURVE",
"629 85 CURVE SMOOTH",
"629 574 LINE",
"521 574 LINE",
"521 500 LINE",
"463.667 562.667 OFFCURVE",
"382 600.333 OFFCURVE",
"310 599 CURVE SMOOTH",
"235.333 599 OFFCURVE",
"163 570.5 OFFCURVE",
"111 520.5 CURVE SMOOTH",
"59 470.5 OFFCURVE",
"25 396.667 OFFCURVE",
"25 310 CURVE SMOOTH",
"25 223.333 OFFCURVE",
"59 151.333 OFFCURVE",
"111 102 CURVE SMOOTH",
"163 52.667 OFFCURVE",
"235.333 24 OFFCURVE",
"310 24 CURVE SMOOTH",
"382 24 OFFCURVE",
"461.667 59 OFFCURVE",
"519 119 CURVE",
"519 82 LINE SMOOTH",
"519 -72.607 OFFCURVE",
"440.131 -128 OFFCURVE",
"319 -128 CURVE SMOOTH",
"271 -128 OFFCURVE",
"214.667 -123.333 OFFCURVE",
"128 -106 CURVE",
"128 -201 LINE",
"202.667 -217 OFFCURVE",
"266 -222 OFFCURVE",
"322 -222 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */\01249 1 0 1 33 1 4 0 24 1 3 4 23 1 2 3 4 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0129 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 36 values pushed */\0127 1 0 0 4 3 0 4 99 0 6 6 23 75 0 1 1 5 91 0 5 5 31 75 0 3 3 2 91 8 1 2 2 33 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 38 values pushed */\0120 6 6 23 75 0 1 1 5 91 0 5 5 31 75 7 1 0 0 4 91 0 4 4 21 75 0 3 3 2 91 8 1 2 2 33 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 36 values pushed */\0127 1 0 0 4 3 0 4 99 0 6 6 23 75 0 1 1 5 91 0 5 5 31 75 0 3 3 2 91 8 1 2 2 33 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 37 values pushed */\0120 6 5 1 5 6 1 112 0 5 0 1 0 5 1 99 7 1 0 0 4 3 0 4 99 0 3 3 2 91 8 1 2 2 33 2 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 25 values pushed */\01221 20 1 0 51 50 47 45 37 35 28 26 20 56 21 56 11 9 0 19 1 19 9 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 675;
}
);
leftKerningGroup = g;
note = g;
rightKerningGroup = g;
unicode = 0067;
},
{
glyphname = gbreve;
layers = (
{
components = (
{
alignment = -1;
name = g;
},
{
alignment = -1;
name = breve.lc;
transform = "{1, 0, 0, 1, 330, 7}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 675;
}
);
leftKerningGroup = g;
note = gbreve;
rightKerningGroup = g;
unicode = 011F;
},
{
glyphname = gcircumflex;
layers = (
{
components = (
{
alignment = -1;
name = g;
},
{
alignment = -1;
name = circumflex.lc;
transform = "{1, 0, 0, 1, 333, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 675;
}
);
leftKerningGroup = g;
note = gcircumflex;
rightKerningGroup = g;
unicode = 011D;
},
{
glyphname = gcommaaccent;
layers = (
{
components = (
{
alignment = -1;
name = g;
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 675;
}
);
leftKerningGroup = g;
note = gcommaaccent;
rightKerningGroup = g;
unicode = 0123;
},
{
glyphname = gdotaccent;
layers = (
{
components = (
{
alignment = -1;
name = g;
},
{
alignment = -1;
name = dotaccent.lc;
transform = "{1, 0, 0, 1, 330, 27}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 675;
}
);
leftKerningGroup = g;
note = gdotaccent;
rightKerningGroup = g;
unicode = 0121;
},
{
glyphname = h;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"156 438.707 OFFCURVE",
"228.36 492 OFFCURVE",
"298 492 CURVE SMOOTH",
"370 492 OFFCURVE",
"437 455 OFFCURVE",
"437 343 CURVE SMOOTH",
"437 0 LINE",
"547 0 LINE",
"547 376 LINE SMOOTH",
"547 508 OFFCURVE",
"464 589 OFFCURVE",
"340 589 CURVE SMOOTH",
"256 589 OFFCURVE",
"189.333 549.667 OFFCURVE",
"152 507 CURVE",
"152 780 LINE",
"46 780 LINE",
"46 0 LINE",
"156 0 LINE",
"156 353 LINE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\0125 1 4 2 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 22 values pushed */\0120 1 1 22 75 0 4 4 2 91 0 2 2 31 75 3 1 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 20 values pushed */\0120 2 0 4 0 2 4 99 0 1 1 22 75 3 1 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 20 values pushed */\0120 2 0 4 0 2 4 99 0 1 1 22 75 3 1 0 0 24 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 20 values pushed */\0120 2 0 4 0 2 4 99 3 1 0 0 1 89 0 1 1 22 0 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01235 19 35 17 17 5 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 591;
}
);
leftKerningGroup = b;
note = h;
rightKerningGroup = h;
unicode = 0068;
},
{
glyphname = hbar;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"156 438.707 OFFCURVE",
"228.36 492 OFFCURVE",
"298 492 CURVE SMOOTH",
"370 492 OFFCURVE",
"437 455 OFFCURVE",
"437 343 CURVE SMOOTH",
"437 0 LINE",
"547 0 LINE",
"547 376 LINE SMOOTH",
"547 508 OFFCURVE",
"464 589 OFFCURVE",
"340 589 CURVE SMOOTH",
"256 589 OFFCURVE",
"189.333 549.667 OFFCURVE",
"152 507 CURVE",
"152 613 LINE",
"244 613 LINE",
"244 689 LINE",
"152 689 LINE",
"152 780 LINE",
"46 780 LINE",
"46 689 LINE",
"-1 689 LINE",
"-1 613 LINE",
"46 613 LINE",
"46 0 LINE",
"156 0 LINE",
"156 353 LINE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\01213 1 8 6 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 32 values pushed */\0124 1 2 5 1 1 6 2 1 97 0 3 3 22 75 0 8 8 6 91 0 6 6 31 75 7 1 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 30 values pushed */\0124 1 2 5 1 1 6 2 1 97 0 6 0 8 0 6 8 99 0 3 3 22 75 7 1 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 30 values pushed */\0124 1 2 5 1 1 6 2 1 97 0 6 0 8 0 6 8 99 0 3 3 22 75 7 1 0 0 24 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 30 values pushed */\0127 1 0 8 0 115 4 1 2 5 1 1 6 2 1 97 0 6 0 8 0 6 8 99 0 3 3 22 3 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 12 values pushed */\01235 19 35 17 17 17 17 17 17 9 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 588;
}
);
note = hbar;
rightKerningGroup = h;
unicode = 0127;
},
{
glyphname = hcircumflex;
layers = (
{
components = (
{
alignment = -1;
name = h;
},
{
alignment = -1;
name = circumflex.lc;
transform = "{1, 0, 0, 1, 102, 197}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 591;
}
);
leftKerningGroup = b;
note = hcircumflex;
rightKerningGroup = h;
unicode = 0125;
},
{
glyphname = i;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"161 780 LINE",
"47 780 LINE",
"47 661 LINE",
"161 661 LINE"
);
},
{
closed = 1;
nodes = (
"159 574 LINE",
"49 574 LINE",
"49 0 LINE",
"159 0 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 23 values pushed */\0120 0 0 1 89 4 1 1 1 22 75 5 1 3 3 23 75 0 2 2 21 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 23 values pushed */\0120 0 0 1 89 4 1 1 1 22 75 5 1 3 3 2 89 0 2 2 21 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 23 values pushed */\0120 0 0 1 89 4 1 1 1 22 75 5 1 3 3 2 89 0 2 2 24 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 20 values pushed */\0125 1 3 0 2 3 2 93 0 0 0 1 89 4 1 1 1 22 0 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 18 values pushed */\0124 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 207;
}
);
leftKerningGroup = i;
note = i;
rightKerningGroup = i;
unicode = 0069;
},
{
glyphname = idotless;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"159 574 LINE",
"49 574 LINE",
"49 0 LINE",
"159 0 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 12 values pushed */\0122 1 1 1 23 75 0 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 12 values pushed */\0122 1 1 1 0 89 0 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 12 values pushed */\0122 1 1 1 0 89 0 0 0 24 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 18 values pushed */\0122 1 1 0 0 1 85 2 1 1 1 0 89 0 0 1 0 77 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 10 values pushed */\0120 0 0 3 0 3 17 3 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 207;
}
);
leftKerningGroup = m;
note = dotlessi;
rightKerningGroup = u;
unicode = 0131;
},
{
glyphname = iacute;
layers = (
{
components = (
{
alignment = -1;
name = idotless;
},
{
alignment = -1;
name = acute.lc;
transform = "{1, 0, 0, 1, 144, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 207;
}
);
leftKerningGroup = i;
note = iacute;
rightKerningGroup = i;
unicode = 00ED;
},
{
glyphname = ibreve;
layers = (
{
components = (
{
alignment = -1;
name = idotless;
},
{
alignment = -1;
name = breve.lc;
transform = "{1, 0, 0, 1, 104, 7}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 207;
}
);
leftKerningGroup = i;
note = ibreve;
rightKerningGroup = i;
unicode = 012D;
},
{
glyphname = icircumflex;
layers = (
{
components = (
{
alignment = -1;
name = idotless;
},
{
alignment = -1;
name = circumflex.lc;
transform = "{1, 0, 0, 1, 106, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 207;
}
);
leftKerningGroup = i;
note = icircumflex;
rightKerningGroup = i;
unicode = 00EE;
},
{
glyphname = idieresis;
layers = (
{
components = (
{
alignment = -1;
name = idotless;
},
{
alignment = -1;
name = dieresis.lc;
transform = "{1, 0, 0, 1, 104, -24}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 207;
}
);
leftKerningGroup = i;
note = idieresis;
rightKerningGroup = i;
unicode = 00EF;
},
{
glyphname = igrave;
layers = (
{
components = (
{
alignment = -1;
name = idotless;
},
{
alignment = -1;
name = grave.lc;
transform = "{1, 0, 0, 1, 58, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 207;
}
);
leftKerningGroup = i;
note = igrave;
rightKerningGroup = i;
unicode = 00EC;
},
{
glyphname = ij;
layers = (
{
components = (
{
alignment = -1;
name = i;
},
{
alignment = -1;
name = j;
transform = "{1, 0, 0, 1, 207, 0}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 414;
}
);
leftKerningGroup = i;
note = ij;
rightKerningGroup = j;
unicode = 0133;
},
{
glyphname = imacron;
layers = (
{
components = (
{
alignment = -1;
name = idotless;
},
{
alignment = -1;
name = macron.lc;
transform = "{1, 0, 0, 1, 104, -16}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 207;
}
);
leftKerningGroup = i;
note = imacron;
rightKerningGroup = i;
unicode = 012B;
},
{
glyphname = iogonek;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"161 780 LINE",
"47 780 LINE",
"47 661 LINE",
"161 661 LINE"
);
},
{
closed = 1;
nodes = (
"136 -96 LINE",
"126.667 -102.667 OFFCURVE",
"115 -110 OFFCURVE",
"99 -110 CURVE SMOOTH",
"80.333 -110 OFFCURVE",
"69 -97 OFFCURVE",
"69 -81 CURVE SMOOTH",
"69 -65 OFFCURVE",
"80 -51.667 OFFCURVE",
"108 -33 CURVE SMOOTH",
"159 0 LINE",
"159 574 LINE",
"49 574 LINE",
"49 0 LINE",
"50 0 LINE",
"36 -10 LINE",
"2.667 -31.333 OFFCURVE",
"-21 -64 OFFCURVE",
"-21 -100 CURVE SMOOTH",
"-21 -138.667 OFFCURVE",
"7.667 -176 OFFCURVE",
"73 -176 CURVE SMOOTH",
"118.333 -174.667 OFFCURVE",
"152.333 -157.333 OFFCURVE",
"171 -140 CURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */\01228 18 14 3 4 3 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 24 values pushed */\0120 4 0 2 4 2 96 0 0 0 1 89 5 1 1 1 22 75 0 3 3 23 3 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 27 values pushed */\0120 3 0 4 0 3 4 112 0 4 0 2 4 2 96 0 0 0 1 89 5 1 1 1 22 0 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 16 values pushed */\0120 0 26 24 17 16 8 6 0 3 0 3 17 6 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 207;
}
);
leftKerningGroup = i;
note = iogonek;
rightKerningGroup = i;
unicode = 012F;
},
{
glyphname = itilde;
layers = (
{
components = (
{
alignment = -1;
name = idotless;
},
{
alignment = -1;
name = tilde.lc;
transform = "{1, 0, 0, 1, 104, 9}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 207;
}
);
leftKerningGroup = i;
note = itilde;
rightKerningGroup = i;
unicode = 0129;
},
{
glyphname = j;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"161 780 LINE",
"47 780 LINE",
"47 661 LINE",
"161 661 LINE"
);
},
{
closed = 1;
nodes = (
"-69 -124 LINE",
"-69 -226 LINE",
"-54 -226 LINE SMOOTH",
"96.667 -224.667 OFFCURVE",
"159 -171.667 OFFCURVE",
"159 -5 CURVE SMOOTH",
"159 574 LINE",
"49 574 LINE",
"49 -5 LINE SMOOTH",
"49 -90.333 OFFCURVE",
"15 -124 OFFCURVE",
"-57 -124 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 27 values pushed */\0120 0 0 1 89 5 1 1 1 22 75 0 3 3 23 75 0 2 2 4 92 0 4 4 33 4 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 30 values pushed */\0120 3 0 2 0 3 2 112 0 0 0 1 89 5 1 1 1 22 75 0 2 2 4 92 0 4 4 33 4 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 16 values pushed */\0120 0 15 13 10 9 6 4 0 3 0 3 17 6 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 207;
}
);
leftKerningGroup = j;
note = j;
rightKerningGroup = j;
unicode = 006A;
},
{
glyphname = jdotless;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"-57 -129 LINE",
"-57 -226 LINE",
"-42 -226 LINE SMOOTH",
"83.333 -224.667 OFFCURVE",
"155 -151.667 OFFCURVE",
"155 -1 CURVE SMOOTH",
"155 574 LINE",
"46 574 LINE",
"46 0 LINE SMOOTH",
"46 -81.333 OFFCURVE",
"9.333 -127.667 OFFCURVE",
"-48 -129 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 16 values pushed */\0120 1 1 23 75 0 0 0 2 92 0 2 2 33 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 16 values pushed */\0120 1 0 1 114 0 0 0 2 92 0 2 2 33 2 76 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 6 values pushed */\01235 19 32 3 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 200;
}
);
note = dotlessj;
rightKerningGroup = j;
unicode = 0237;
},
{
glyphname = jacute;
layers = (
{
components = (
{
alignment = -1;
name = jdotless;
},
{
alignment = -1;
name = acute.cmb;
transform = "{1, 0, 0, 1, 140, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 200;
}
);
leftKerningGroup = j;
note = jacute;
rightKerningGroup = j;
},
{
glyphname = jcircumflex;
layers = (
{
components = (
{
alignment = -1;
name = jdotless;
},
{
alignment = -1;
name = circumflex.lc;
transform = "{1, 0, 0, 1, 102, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 200;
}
);
leftKerningGroup = j;
note = jcircumflex;
rightKerningGroup = j;
unicode = 0135;
},
{
glyphname = k;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"422 0 LINE",
"557 0 LINE",
"299 345 LINE",
"541 574 LINE",
"397 574 LINE",
"156 349 LINE",
"156 780 LINE",
"46 780 LINE",
"46 0 LINE",
"156 0 LINE",
"156 210 LINE",
"221 272 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */\01210 7 2 1 4 0 2 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 18 values pushed */\0120 1 1 22 75 0 2 2 23 75 4 3 2 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 18 values pushed */\0120 1 1 22 75 0 2 2 0 89 4 3 2 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 18 values pushed */\0120 1 1 22 75 0 2 2 0 89 4 3 2 0 0 24 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 19 values pushed */\0120 2 0 0 2 85 4 3 2 0 0 1 89 0 1 1 22 1 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 12 values pushed */\0120 0 0 11 0 11 18 17 19 5 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 558;
}
);
leftKerningGroup = b;
note = k;
rightKerningGroup = k;
unicode = 006B;
},
{
glyphname = kcommaaccent;
layers = (
{
components = (
{
alignment = -1;
name = k;
},
{
alignment = -1;
name = commaaccentcomb.lc;
transform = "{1, 0, 0, 1, 302, -27}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 558;
}
);
leftKerningGroup = b;
note = kcommaaccent;
rightKerningGroup = k;
unicode = 0137;
},
{
glyphname = kgreenlandic;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"422 0 LINE",
"557 0 LINE",
"299 345 LINE",
"541 574 LINE",
"397 574 LINE",
"156 349 LINE",
"156 574 LINE",
"46 574 LINE",
"46 0 LINE",
"156 0 LINE",
"156 209 LINE",
"222 271 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */\01210 7 2 1 4 0 1 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 14 values pushed */\0122 1 1 1 23 75 4 3 2 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 14 values pushed */\0122 1 1 1 0 89 4 3 2 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 14 values pushed */\0122 1 1 1 0 89 4 3 2 0 0 24 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 20 values pushed */\0122 1 1 0 0 1 85 2 1 1 1 0 89 4 3 2 0 1 0 77 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 12 values pushed */\0120 0 0 11 0 11 18 17 19 5 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 558;
}
);
leftKerningGroup = m;
note = kgreenlandic;
rightKerningGroup = k;
unicode = 0138;
},
{
glyphname = l;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"159 780 LINE",
"49 780 LINE",
"49 0 LINE",
"159 0 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 12 values pushed */\0122 1 1 1 22 75 0 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 12 values pushed */\0122 1 1 1 22 75 0 0 0 24 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 12 values pushed */\0120 0 0 1 89 2 1 1 1 22 0 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 10 values pushed */\0120 0 0 3 0 3 17 3 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 207;
}
);
leftKerningGroup = b;
note = l;
rightKerningGroup = d;
unicode = 006C;
},
{
glyphname = lacute;
layers = (
{
components = (
{
alignment = -1;
name = l;
},
{
alignment = -1;
name = acute.lc;
transform = "{1, 0, 0, 1, 144, 197}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 207;
}
);
leftKerningGroup = b;
note = lacute;
rightKerningGroup = d;
unicode = 013A;
},
{
glyphname = lcaron;
layers = (
{
components = (
{
alignment = -1;
name = l;
},
{
alignment = -1;
name = caron.vertical;
transform = "{1, 0, 0, 1, 283, 810}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 207;
}
);
leftKerningGroup = b;
note = lcaron;
rightKerningGroup = d;
unicode = 013E;
},
{
glyphname = lcommaaccent;
layers = (
{
components = (
{
alignment = -1;
name = l;
},
{
alignment = -1;
name = commaaccentcomb.lc;
transform = "{1, 0, 0, 1, 104, -30}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 207;
}
);
leftKerningGroup = b;
note = lcommaaccent;
rightKerningGroup = d;
unicode = 013C;
},
{
glyphname = ldot;
layers = (
{
components = (
{
alignment = -1;
name = l;
},
{
alignment = -1;
name = dotaccent.lc;
transform = "{1, 0, 0, 1, 232, -284}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 258;
}
);
leftKerningGroup = b;
note = ldot;
rightKerningGroup = d;
unicode = 0140;
},
{
glyphname = lslash;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"165 0 LINE",
"165 415 LINE",
"216 442 LINE",
"216 532 LINE",
"165 505 LINE",
"165 780 LINE",
"55 780 LINE",
"55 445 LINE",
"4 418 LINE",
"4 328 LINE",
"55 355 LINE",
"55 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */\01211 10 9 8 5 4 3 2 8 0 1 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 11 values pushed */\0120 1 1 22 75 0 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 11 values pushed */\0120 1 1 22 75 0 0 0 24 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 11 values pushed */\0120 0 0 1 89 0 1 1 22 0 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 5 values pushed */\01221 16 2 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 217;
}
);
leftKerningGroup = b;
note = lslash;
rightKerningGroup = d;
unicode = 0142;
},
{
glyphname = m;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"157 437.016 OFFCURVE",
"211.162 492 OFFCURVE",
"275 492 CURVE SMOOTH",
"340.333 492 OFFCURVE",
"394 455 OFFCURVE",
"394 343 CURVE SMOOTH",
"394 0 LINE",
"504 0 LINE",
"504 352 LINE SMOOTH",
"504 437.322 OFFCURVE",
"558.423 492 OFFCURVE",
"623 492 CURVE SMOOTH",
"691 492 OFFCURVE",
"740 455 OFFCURVE",
"740 343 CURVE SMOOTH",
"740 0 LINE",
"850 0 LINE",
"850 376 LINE SMOOTH",
"850 508 OFFCURVE",
"774.333 589 OFFCURVE",
"661 589 CURVE SMOOTH",
"574.146 589 OFFCURVE",
"512.96 536.92 OFFCURVE",
"485 481 CURVE",
"455.667 549 OFFCURVE",
"396 589 OFFCURVE",
"316 589 CURVE SMOOTH",
"236 589 OFFCURVE",
"180 542.333 OFFCURVE",
"152 497 CURVE",
"152 574 LINE",
"46 574 LINE",
"46 0 LINE",
"157 0 LINE",
"157 353 LINE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */\0125 1 5 1 11 1 0 5 2 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 21 values pushed */\0127 1 5 5 1 91 3 2 2 1 1 23 75 6 4 2 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 25 values pushed */\0120 1 1 23 75 7 1 5 5 2 91 3 1 2 2 31 75 6 4 2 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 23 values pushed */\0123 1 2 7 1 5 0 2 5 99 0 1 1 0 89 6 4 2 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 23 values pushed */\0123 1 2 7 1 5 0 2 5 99 0 1 1 0 89 6 4 2 0 0 24 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 28 values pushed */\0120 1 5 0 1 85 3 1 2 7 1 5 0 2 5 99 0 1 1 0 89 6 4 2 0 1 0 77 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 11 values pushed */\01235 21 35 19 38 35 17 17 8 7 28 \012CALL[ ]	/* CallFunction */";
};
width = 894;
}
);
leftKerningGroup = m;
note = m;
rightKerningGroup = h;
unicode = 006D;
},
{
glyphname = n;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"156 438.707 OFFCURVE",
"228.36 492 OFFCURVE",
"298 492 CURVE SMOOTH",
"370 492 OFFCURVE",
"436 455 OFFCURVE",
"436 343 CURVE SMOOTH",
"436 0 LINE",
"546 0 LINE",
"546 376 LINE SMOOTH",
"546 508 OFFCURVE",
"464 589 OFFCURVE",
"340 589 CURVE SMOOTH",
"256 589 OFFCURVE",
"189.333 549.667 OFFCURVE",
"152 507 CURVE",
"152 574 LINE",
"46 574 LINE",
"46 0 LINE",
"156 0 LINE",
"156 353 LINE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\0125 1 4 1 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 18 values pushed */\0120 4 4 1 91 2 1 1 1 23 75 3 1 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 22 values pushed */\0120 1 1 23 75 0 4 4 2 91 0 2 2 31 75 3 1 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 20 values pushed */\0120 2 0 4 0 2 4 99 0 1 1 0 89 3 1 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 20 values pushed */\0120 2 0 4 0 2 4 99 0 1 1 0 89 3 1 0 0 24 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 25 values pushed */\0120 1 4 0 1 85 0 2 0 4 0 2 4 99 0 1 1 0 89 3 1 0 1 0 77 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01235 19 35 17 17 5 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 591;
}
);
leftKerningGroup = m;
note = n;
rightKerningGroup = h;
unicode = 006E;
},
{
glyphname = nacute;
layers = (
{
components = (
{
alignment = -1;
name = n;
},
{
alignment = -1;
name = acute.lc;
transform = "{1, 0, 0, 1, 337, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 591;
}
);
leftKerningGroup = m;
note = nacute;
rightKerningGroup = h;
unicode = 0144;
},
{
glyphname = ncaron;
layers = (
{
components = (
{
alignment = -1;
name = n;
},
{
alignment = -1;
name = caron.lc;
transform = "{1, 0, 0, 1, 300, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 591;
}
);
leftKerningGroup = m;
note = ncaron;
rightKerningGroup = h;
unicode = 0148;
},
{
glyphname = ncommaaccent;
layers = (
{
components = (
{
alignment = -1;
name = n;
},
{
alignment = -1;
name = commaaccentcomb.lc;
transform = "{1, 0, 0, 1, 297, -27}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 591;
}
);
leftKerningGroup = m;
note = ncommaaccent;
rightKerningGroup = h;
unicode = 0146;
},
{
glyphname = eng;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"474.333 -224.667 OFFCURVE",
"546 -152.667 OFFCURVE",
"546 -2 CURVE SMOOTH",
"546 376 LINE SMOOTH",
"546 508 OFFCURVE",
"464 589 OFFCURVE",
"340 589 CURVE SMOOTH",
"256 589 OFFCURVE",
"189.333 549.667 OFFCURVE",
"152 507 CURVE",
"152 574 LINE",
"46 574 LINE",
"46 0 LINE",
"156 0 LINE",
"156 353 LINE SMOOTH",
"156 438.707 OFFCURVE",
"228.36 492 OFFCURVE",
"298 492 CURVE SMOOTH",
"370 492 OFFCURVE",
"436 455 OFFCURVE",
"436 343 CURVE SMOOTH",
"436 -2 LINE SMOOTH",
"436 -82 OFFCURVE",
"400.333 -127.667 OFFCURVE",
"343 -129 CURVE SMOOTH",
"334 -129 LINE",
"334 -226 LINE",
"349 -226 LINE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\01220 1 2 4 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 28 values pushed */\0120 2 2 4 91 5 1 4 4 23 75 0 3 3 21 75 0 1 1 0 91 6 1 0 0 33 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 32 values pushed */\0120 4 4 23 75 0 2 2 5 91 0 5 5 31 75 0 3 3 21 75 0 1 1 0 91 6 1 0 0 33 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 30 values pushed */\0120 5 0 2 3 5 2 99 0 4 4 3 89 0 3 3 21 75 0 1 1 0 91 6 1 0 0 33 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 30 values pushed */\0120 5 0 2 3 5 2 99 0 4 4 3 89 0 3 3 24 75 0 1 1 0 91 6 1 0 0 33 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 28 values pushed */\0120 5 0 2 3 5 2 99 0 4 0 3 1 4 3 97 0 1 1 0 91 6 1 0 0 33 0 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 19 values pushed */\0121 0 24 22 19 18 17 16 11 9 4 2 0 29 1 29 7 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 591;
}
);
leftKerningGroup = m;
note = eng;
rightKerningGroup = h;
unicode = 014B;
},
{
glyphname = ntilde;
layers = (
{
components = (
{
alignment = -1;
name = n;
},
{
alignment = -1;
name = tilde.lc;
transform = "{1, 0, 0, 1, 297, 9}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 591;
}
);
leftKerningGroup = m;
note = ntilde;
rightKerningGroup = h;
unicode = 00F1;
},
{
glyphname = o;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"257.667 603 OFFCURVE",
"174.333 566.167 OFFCURVE",
"117 509.5 CURVE SMOOTH",
"59.667 452.833 OFFCURVE",
"24 372.333 OFFCURVE",
"24 287 CURVE SMOOTH",
"24 201.667 OFFCURVE",
"59.667 121.167 OFFCURVE",
"117 64.5 CURVE SMOOTH",
"174.333 7.833 OFFCURVE",
"257.667 -29 OFFCURVE",
"351 -29 CURVE SMOOTH",
"445.667 -29 OFFCURVE",
"527.5 7.833 OFFCURVE",
"585.5 64.5 CURVE SMOOTH",
"643.5 121.167 OFFCURVE",
"679 201.667 OFFCURVE",
"679 287 CURVE SMOOTH",
"679 372.333 OFFCURVE",
"643.5 452.833 OFFCURVE",
"585.5 509.5 CURVE SMOOTH",
"527.5 566.167 OFFCURVE",
"445.667 603 OFFCURVE",
"351 603 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"472.311 508 OFFCURVE",
"563 408.641 OFFCURVE",
"563 287 CURVE SMOOTH",
"563 167.65 OFFCURVE",
"472.576 66 OFFCURVE",
"351 66 CURVE SMOOTH",
"230.535 66 OFFCURVE",
"140 165.875 OFFCURVE",
"140 287 CURVE SMOOTH",
"140 408.125 OFFCURVE",
"230.535 508 OFFCURVE",
"351 508 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 23 values pushed */\0125 1 2 2 0 91 4 1 0 0 31 75 0 3 3 1 91 0 1 1 29 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 21 values pushed */\0124 1 0 5 1 2 3 0 2 99 0 3 3 1 91 0 1 1 29 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 21 values pushed */\0124 1 0 5 1 2 3 0 2 99 0 3 3 1 91 0 1 1 32 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 26 values pushed */\0124 1 0 5 1 2 3 0 2 99 0 3 1 1 3 87 0 3 3 1 91 0 1 3 1 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 19 values pushed */\01221 20 1 0 31 29 20 39 21 39 11 9 0 19 1 19 6 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 703;
}
);
leftKerningGroup = c;
note = o;
rightKerningGroup = o;
unicode = 006F;
},
{
glyphname = oacute;
layers = (
{
components = (
{
alignment = -1;
name = o;
},
{
alignment = -1;
name = acute.lc;
transform = "{1, 0, 0, 1, 391, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 703;
}
);
leftKerningGroup = c;
note = oacute;
rightKerningGroup = o;
unicode = 00F3;
},
{
glyphname = obreve;
layers = (
{
components = (
{
alignment = -1;
name = o;
},
{
alignment = -1;
name = breve.lc;
transform = "{1, 0, 0, 1, 351, 7}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 703;
}
);
leftKerningGroup = c;
note = obreve;
rightKerningGroup = o;
unicode = 014F;
},
{
glyphname = ocircumflex;
layers = (
{
components = (
{
alignment = -1;
name = o;
},
{
alignment = -1;
name = circumflex.lc;
transform = "{1, 0, 0, 1, 353, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 703;
}
);
leftKerningGroup = c;
note = ocircumflex;
rightKerningGroup = o;
unicode = 00F4;
},
{
glyphname = odieresis;
layers = (
{
components = (
{
alignment = -1;
name = o;
},
{
alignment = -1;
name = dieresis.lc;
transform = "{1, 0, 0, 1, 351, -24}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 703;
}
);
leftKerningGroup = c;
note = odieresis;
rightKerningGroup = o;
unicode = 00F6;
},
{
glyphname = ograve;
layers = (
{
components = (
{
alignment = -1;
name = o;
},
{
alignment = -1;
name = grave.lc;
transform = "{1, 0, 0, 1, 306, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 703;
}
);
leftKerningGroup = c;
note = ograve;
rightKerningGroup = o;
unicode = 00F2;
},
{
glyphname = ohungarumlaut;
layers = (
{
components = (
{
alignment = -1;
name = o;
},
{
alignment = -1;
name = hungarumlaut.lc;
transform = "{1, 0, 0, 1, 359, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 703;
}
);
leftKerningGroup = c;
note = ohungarumlaut;
rightKerningGroup = o;
unicode = 0151;
},
{
glyphname = omacron;
layers = (
{
components = (
{
alignment = -1;
name = o;
},
{
alignment = -1;
name = macron.lc;
transform = "{1, 0, 0, 1, 351, -16}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 703;
}
);
leftKerningGroup = c;
note = omacron;
rightKerningGroup = o;
unicode = 014D;
},
{
glyphname = oslash;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"140 408.125 OFFCURVE",
"230.535 508 OFFCURVE",
"351 508 CURVE SMOOTH",
"376.333 508 OFFCURVE",
"399.667 504 OFFCURVE",
"421 496 CURVE",
"199 132 LINE",
"161.667 173.333 OFFCURVE",
"140 227 OFFCURVE",
"140 287 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"325.667 66 OFFCURVE",
"299.667 71 OFFCURVE",
"277 79 CURVE",
"500 445 LINE",
"540 405 OFFCURVE",
"563 348.333 OFFCURVE",
"563 287 CURVE SMOOTH",
"563 167.65 OFFCURVE",
"472.576 66 OFFCURVE",
"351 66 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"445.667 -29 OFFCURVE",
"527.5 7.833 OFFCURVE",
"585.5 64.5 CURVE SMOOTH",
"643.5 121.167 OFFCURVE",
"679 201.667 OFFCURVE",
"679 287 CURVE SMOOTH",
"679 387 OFFCURVE",
"632 478.667 OFFCURVE",
"556 536 CURVE",
"608 622 LINE",
"497 622 LINE",
"472 582 LINE",
"434.667 595.333 OFFCURVE",
"393.667 603 OFFCURVE",
"351 603 CURVE SMOOTH",
"257.667 603 OFFCURVE",
"174.333 566.167 OFFCURVE",
"117 509.5 CURVE SMOOTH",
"59.667 452.833 OFFCURVE",
"24 372.333 OFFCURVE",
"24 287 CURVE SMOOTH",
"24 189.667 OFFCURVE",
"69.667 99.667 OFFCURVE",
"143 41 CURVE",
"89 -48 LINE",
"200 -48 LINE",
"226 -6 LINE",
"263.333 -20.667 OFFCURVE",
"305.667 -29 OFFCURVE",
"351 -29 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */\01244 41 2 0 4 21 20 4 3 4 1 0 30 27 2 2 1 3 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 33 values pushed */\0120 5 4 5 114 0 3 2 3 115 0 0 0 4 91 0 4 4 31 75 6 1 1 1 2 91 7 1 2 2 29 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 31 values pushed */\0120 5 4 5 114 0 3 2 3 115 0 4 0 0 1 4 0 99 6 1 1 1 2 91 7 1 2 2 29 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 31 values pushed */\0120 5 4 5 114 0 3 2 3 115 0 4 0 0 1 4 0 99 6 1 1 1 2 91 7 1 2 2 32 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 37 values pushed */\0120 5 4 5 114 0 3 2 3 115 0 4 0 0 1 4 0 99 6 1 1 2 2 1 87 6 1 1 1 2 91 7 1 2 1 2 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 22 values pushed */\01225 24 13 12 43 42 39 37 29 28 24 51 25 51 12 23 13 23 38 8 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 698;
}
);
leftKerningGroup = c;
note = oslash;
rightKerningGroup = o;
unicode = 00F8;
},
{
glyphname = oslashacute;
layers = (
{
components = (
{
alignment = -1;
name = oslash;
},
{
alignment = -1;
name = acute.lc;
transform = "{1, 0, 0, 1, 391, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 698;
}
);
leftKerningGroup = c;
note = oslashacute;
rightKerningGroup = o;
unicode = 01FF;
},
{
glyphname = otilde;
layers = (
{
components = (
{
alignment = -1;
name = o;
},
{
alignment = -1;
name = tilde.lc;
transform = "{1, 0, 0, 1, 351, 9}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 703;
}
);
leftKerningGroup = c;
note = otilde;
rightKerningGroup = o;
unicode = 00F5;
},
{
glyphname = oe;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"964.333 508 OFFCURVE",
"1034.667 445 OFFCURVE",
"1056 353 CURVE",
"685 353 LINE",
"706.333 446.333 OFFCURVE",
"777.667 508 OFFCURVE",
"871 508 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"472.311 508 OFFCURVE",
"563 408.641 OFFCURVE",
"563 287 CURVE SMOOTH",
"563 166.936 OFFCURVE",
"472.683 66 OFFCURVE",
"351 66 CURVE SMOOTH",
"230.28 66 OFFCURVE",
"140 168.163 OFFCURVE",
"140 287 CURVE SMOOTH",
"140 408.125 OFFCURVE",
"230.535 508 OFFCURVE",
"351 508 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1101 150 LINE",
"1051.667 100.667 OFFCURVE",
"983.333 66 OFFCURVE",
"894 66 CURVE SMOOTH",
"768.667 66 OFFCURVE",
"687 147 OFFCURVE",
"679 267 CURVE",
"1177 267 LINE",
"1177 293 LINE SMOOTH",
"1177 379.667 OFFCURVE",
"1143.833 458.167 OFFCURVE",
"1088.5 513.5 CURVE SMOOTH",
"1033.167 568.833 OFFCURVE",
"956.333 603 OFFCURVE",
"871 603 CURVE SMOOTH",
"760.333 603 OFFCURVE",
"671.333 549.667 OFFCURVE",
"618 467 CURVE",
"560.667 548.333 OFFCURVE",
"464.333 603 OFFCURVE",
"351 603 CURVE SMOOTH",
"257.667 603 OFFCURVE",
"174.333 566.167 OFFCURVE",
"117 509.5 CURVE SMOOTH",
"59.667 452.833 OFFCURVE",
"24 372.333 OFFCURVE",
"24 287 CURVE SMOOTH",
"24 201.667 OFFCURVE",
"59.667 121.167 OFFCURVE",
"117 64.5 CURVE SMOOTH",
"174.333 7.833 OFFCURVE",
"257.667 -29 OFFCURVE",
"351 -29 CURVE SMOOTH",
"465.667 -29 OFFCURVE",
"561.667 26.667 OFFCURVE",
"619 108 CURVE",
"675 25.333 OFFCURVE",
"772.667 -29 OFFCURVE",
"894 -29 CURVE SMOOTH",
"1020.667 -29 OFFCURVE",
"1106.667 19 OFFCURVE",
"1168 79 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */\01249 1 1 0 65 33 2 3 8 2 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 35 values pushed */\0120 1 0 8 3 1 8 97 11 2 10 3 0 0 6 91 7 1 6 6 31 75 9 1 3 3 4 91 5 1 4 4 29 4 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 33 values pushed */\0127 1 6 11 2 10 3 0 1 6 0 99 0 1 0 8 3 1 8 97 9 1 3 3 4 91 5 1 4 4 29 4 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 33 values pushed */\0127 1 6 11 2 10 3 0 1 6 0 99 0 1 0 8 3 1 8 97 9 1 3 3 4 91 5 1 4 4 32 4 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 39 values pushed */\0127 1 6 11 2 10 3 0 1 6 0 99 0 1 0 8 3 1 8 97 9 1 3 4 4 3 87 9 1 3 3 4 91 5 1 4 3 4 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 31 values pushed */\0128 7 1 0 63 61 59 58 53 51 47 45 37 35 31 29 18 16 7 26 8 26 4 3 0 6 1 6 12 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 1199;
}
);
leftKerningGroup = c;
note = oe;
rightKerningGroup = e;
unicode = 0153;
},
{
glyphname = p;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"153 400.716 OFFCURVE",
"245.114 499 OFFCURVE",
"364 499 CURVE SMOOTH",
"483.332 499 OFFCURVE",
"572 400.564 OFFCURVE",
"572 286 CURVE SMOOTH",
"572 170.732 OFFCURVE",
"483.249 75 OFFCURVE",
"364 75 CURVE SMOOTH",
"245.114 75 OFFCURVE",
"153 173.284 OFFCURVE",
"153 287 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"474 -22 OFFCURVE",
"549.833 14 OFFCURVE",
"602.5 70 CURVE SMOOTH",
"655.167 126 OFFCURVE",
"688 204 OFFCURVE",
"688 288 CURVE SMOOTH",
"688 372 OFFCURVE",
"655.167 450.167 OFFCURVE",
"602.5 505.5 CURVE SMOOTH",
"549.833 560.833 OFFCURVE",
"474 596 OFFCURVE",
"390 596 CURVE SMOOTH",
"291.333 596 OFFCURVE",
"205.667 553 OFFCURVE",
"151 485 CURVE",
"151 574 LINE",
"46 574 LINE",
"46 -220 LINE",
"156 -220 LINE",
"156 86 LINE",
"210.667 20.667 OFFCURVE",
"295.333 -22 OFFCURVE",
"390 -22 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */\01228 23 2 0 1 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 32 values pushed */\0120 4 4 23 75 0 1 1 5 91 0 5 5 31 75 0 0 0 2 91 6 1 2 2 29 75 0 3 3 25 3 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 30 values pushed */\0120 5 0 1 0 5 1 99 0 0 0 2 91 6 1 2 2 29 75 0 4 4 3 89 0 3 3 25 3 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 30 values pushed */\0120 5 0 1 0 5 1 99 0 0 0 2 91 6 1 2 2 32 75 0 4 4 3 89 0 3 3 25 3 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 28 values pushed */\0120 5 0 1 0 5 1 99 0 0 6 1 2 3 0 2 99 0 4 4 3 89 0 3 3 25 3 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 17 values pushed */\01221 20 32 30 27 26 25 24 20 40 21 40 40 36 7 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 712;
}
);
leftKerningGroup = p;
note = p;
rightKerningGroup = b;
unicode = 0070;
},
{
glyphname = thorn;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"153 400.716 OFFCURVE",
"245.114 499 OFFCURVE",
"364 499 CURVE SMOOTH",
"483.249 499 OFFCURVE",
"572 403.268 OFFCURVE",
"572 288 CURVE SMOOTH",
"572 173.436 OFFCURVE",
"483.332 75 OFFCURVE",
"364 75 CURVE SMOOTH",
"245.114 75 OFFCURVE",
"153 173.284 OFFCURVE",
"153 287 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"474 -22 OFFCURVE",
"549.833 13.167 OFFCURVE",
"602.5 68.5 CURVE SMOOTH",
"655.167 123.833 OFFCURVE",
"688 202 OFFCURVE",
"688 286 CURVE SMOOTH",
"688 370 OFFCURVE",
"655.167 448 OFFCURVE",
"602.5 504 CURVE SMOOTH",
"549.833 560 OFFCURVE",
"474 596 OFFCURVE",
"390 596 CURVE SMOOTH",
"294 596 OFFCURVE",
"210.667 554.333 OFFCURVE",
"156 489 CURVE",
"156 780 LINE",
"46 780 LINE",
"46 -220 LINE",
"156 -220 LINE",
"156 85 LINE",
"212 19.667 OFFCURVE",
"295.333 -22 OFFCURVE",
"390 -22 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */\01228 23 2 0 1 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 32 values pushed */\0120 4 4 22 75 0 1 1 5 91 0 5 5 31 75 0 0 0 2 91 6 1 2 2 29 75 0 3 3 25 3 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 30 values pushed */\0120 5 0 1 0 5 1 99 0 4 4 22 75 0 0 0 2 91 6 1 2 2 29 75 0 3 3 25 3 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 30 values pushed */\0120 5 0 1 0 5 1 99 0 4 4 22 75 0 0 0 2 91 6 1 2 2 32 75 0 3 3 25 3 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 28 values pushed */\0120 5 0 1 0 5 1 99 0 0 6 1 2 3 0 2 99 0 4 4 22 75 0 3 3 25 3 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 17 values pushed */\01221 20 32 30 27 26 25 24 20 40 21 40 40 36 7 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 712;
}
);
note = thorn;
rightKerningGroup = b;
unicode = 00FE;
},
{
glyphname = q;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"666 -220 LINE",
"666 574 LINE",
"561 574 LINE",
"561 485 LINE",
"506.333 553 OFFCURVE",
"421 596 OFFCURVE",
"321 596 CURVE SMOOTH",
"237 596 OFFCURVE",
"162.333 560.833 OFFCURVE",
"109 505.5 CURVE SMOOTH",
"55.667 450.167 OFFCURVE",
"24 372 OFFCURVE",
"24 288 CURVE SMOOTH",
"24 204 OFFCURVE",
"55.667 126 OFFCURVE",
"109 70 CURVE SMOOTH",
"162.333 14 OFFCURVE",
"237 -22 OFFCURVE",
"321 -22 CURVE SMOOTH",
"417 -22 OFFCURVE",
"501.333 20.667 OFFCURVE",
"556 86 CURVE",
"556 -220 LINE"
);
},
{
closed = 1;
nodes = (
"559 173.284 OFFCURVE",
"466.886 75 OFFCURVE",
"348 75 CURVE SMOOTH",
"228.751 75 OFFCURVE",
"140 170.732 OFFCURVE",
"140 286 CURVE SMOOTH",
"140 400.564 OFFCURVE",
"228.668 499 OFFCURVE",
"348 499 CURVE SMOOTH",
"466.886 499 OFFCURVE",
"559 400.716 OFFCURVE",
"559 287 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */\01218 2 2 5 4 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 31 values pushed */\0120 3 3 23 75 0 4 4 2 91 0 2 2 31 75 0 5 5 1 91 0 1 1 29 75 0 0 0 25 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 29 values pushed */\0120 2 0 4 5 2 4 99 0 5 5 1 91 0 1 1 29 75 0 3 3 0 89 0 0 0 25 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 29 values pushed */\0120 2 0 4 5 2 4 99 0 5 5 1 91 0 1 1 32 75 0 3 3 0 89 0 0 0 25 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 27 values pushed */\0120 2 0 4 5 2 4 99 0 5 0 1 0 5 1 99 0 3 3 0 89 0 0 0 25 0 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 9 values pushed */\01240 37 19 40 35 16 6 7 26 \012CALL[ ]	/* CallFunction */";
};
width = 712;
}
);
leftKerningGroup = d;
note = q;
rightKerningGroup = q;
unicode = 0071;
},
{
glyphname = r;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"156 379.015 OFFCURVE",
"221.647 453 OFFCURVE",
"309 453 CURVE SMOOTH",
"315.667 453 OFFCURVE",
"327.667 450.333 OFFCURVE",
"333 449 CURVE",
"333 574 LINE",
"314 574 LINE SMOOTH",
"237.866 574 OFFCURVE",
"179.251 508.475 OFFCURVE",
"152 457 CURVE",
"152 574 LINE",
"46 574 LINE",
"46 0 LINE",
"156 0 LINE",
"156 315 LINE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */\0125 1 3 1 12 1 0 3 2 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 17 values pushed */\0120 3 3 1 91 2 1 1 1 23 75 0 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 18 values pushed */\0120 3 0 1 3 87 2 1 1 1 0 89 0 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 18 values pushed */\0120 3 0 1 3 87 2 1 1 1 0 89 0 0 0 24 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 20 values pushed */\0122 1 1 0 3 0 1 3 99 2 1 1 1 0 89 0 0 1 0 77 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 7 values pushed */\01235 37 17 17 4 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 351;
}
);
leftKerningGroup = m;
note = r;
rightKerningGroup = r;
unicode = 0072;
},
{
glyphname = racute;
layers = (
{
components = (
{
alignment = -1;
name = r;
},
{
alignment = -1;
name = acute.lc;
transform = "{1, 0, 0, 1, 244, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 351;
}
);
leftKerningGroup = m;
note = racute;
rightKerningGroup = r;
unicode = 0155;
},
{
glyphname = rcaron;
layers = (
{
components = (
{
alignment = -1;
name = r;
},
{
alignment = -1;
name = caron.lc;
transform = "{1, 0, 0, 1, 207, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 351;
}
);
leftKerningGroup = m;
note = rcaron;
rightKerningGroup = r;
unicode = 0159;
},
{
glyphname = rcommaaccent;
layers = (
{
components = (
{
alignment = -1;
name = r;
},
{
alignment = -1;
name = commaaccentcomb.lc;
transform = "{1, 0, 0, 1, 101, -27}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 351;
}
);
leftKerningGroup = m;
note = rcommaaccent;
rightKerningGroup = r;
unicode = 0157;
},
{
glyphname = s;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"98.681 592 OFFCURVE",
"28 526.872 OFFCURVE",
"28 448 CURVE SMOOTH",
"28 369.313 OFFCURVE",
"70.532 326.843 OFFCURVE",
"174 261 CURVE SMOOTH",
"258.569 210.259 OFFCURVE",
"293 175.019 OFFCURVE",
"293 145 CURVE SMOOTH",
"293 109 OFFCURVE",
"261 78.333 OFFCURVE",
"193 77 CURVE SMOOTH",
"155.667 77 OFFCURVE",
"96.333 94.333 OFFCURVE",
"39 125 CURVE",
"39 24 LINE",
"85.667 2.667 OFFCURVE",
"155.333 -17 OFFCURVE",
"206 -17 CURVE SMOOTH",
"330 -15.667 OFFCURVE",
"409 47.667 OFFCURVE",
"409 145 CURVE SMOOTH",
"409 177.667 OFFCURVE",
"397.333 209.167 OFFCURVE",
"374 239.5 CURVE SMOOTH",
"350.667 269.833 OFFCURVE",
"305.333 306.667 OFFCURVE",
"238 350 CURVE SMOOTH",
"204.667 370.667 OFFCURVE",
"180.667 387.833 OFFCURVE",
"166 401.5 CURVE SMOOTH",
"151.333 415.167 OFFCURVE",
"144 428.333 OFFCURVE",
"144 441 CURVE SMOOTH",
"144 477 OFFCURVE",
"175.667 499 OFFCURVE",
"229 499 CURVE SMOOTH",
"262.333 499 OFFCURVE",
"304.667 487.667 OFFCURVE",
"346 465 CURVE",
"346 566 LINE",
"312.667 580.667 OFFCURVE",
"269 592 OFFCURVE",
"221 592 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */\0123 1 1 0 29 23 4 3 3 1 22 1 2 3 3 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 22 values pushed */\0120 1 1 0 91 4 1 0 0 31 75 0 3 3 2 91 0 2 2 32 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 20 values pushed */\0124 1 0 0 1 3 0 1 99 0 3 3 2 91 0 2 2 32 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 25 values pushed */\0124 1 0 0 1 3 0 1 99 0 3 2 2 3 87 0 3 3 2 91 0 2 3 2 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 15 values pushed */\0121 0 27 25 20 18 8 6 0 43 1 43 5 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 430;
}
);
leftKerningGroup = s;
note = s;
rightKerningGroup = s;
unicode = 0073;
},
{
glyphname = sacute;
layers = (
{
components = (
{
alignment = -1;
name = s;
},
{
alignment = -1;
name = acute.lc;
transform = "{1, 0, 0, 1, 257, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 430;
}
);
leftKerningGroup = s;
note = sacute;
rightKerningGroup = s;
unicode = 015B;
},
{
glyphname = scaron;
layers = (
{
components = (
{
alignment = -1;
name = s;
},
{
alignment = -1;
name = caron.lc;
transform = "{1, 0, 0, 1, 219, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 430;
}
);
leftKerningGroup = s;
note = scaron;
rightKerningGroup = s;
unicode = 0161;
},
{
glyphname = scedilla;
layers = (
{
components = (
{
alignment = -1;
name = s;
},
{
alignment = -1;
name = cedilla.lc;
transform = "{1, 0, 0, 1, 213, -17}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 430;
}
);
leftKerningGroup = s;
note = scedilla;
rightKerningGroup = s;
unicode = 015F;
},
{
glyphname = scircumflex;
layers = (
{
components = (
{
alignment = -1;
name = s;
},
{
alignment = -1;
name = circumflex.lc;
transform = "{1, 0, 0, 1, 219, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 430;
}
);
leftKerningGroup = s;
note = scircumflex;
rightKerningGroup = s;
unicode = 015D;
},
{
glyphname = scommaaccent;
layers = (
{
components = (
{
alignment = -1;
name = s;
},
{
alignment = -1;
name = commaaccentcomb.lc;
transform = "{1, 0, 0, 1, 206, -27}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 430;
}
);
leftKerningGroup = s;
note = scommaaccent;
rightKerningGroup = s;
unicode = 0219;
},
{
glyphname = germandbls;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"366.667 -108 OFFCURVE",
"432.5 -61.833 OFFCURVE",
"478.5 -10.5 CURVE SMOOTH",
"524.5 40.833 OFFCURVE",
"551 101.333 OFFCURVE",
"551 172 CURVE SMOOTH",
"551 252 OFFCURVE",
"506.667 325.667 OFFCURVE",
"424 367 CURVE",
"534 570 LINE",
"532 574 LINE",
"192 574 LINE",
"157 520 LINE",
"157 598 LINE SMOOTH",
"157 683.333 OFFCURVE",
"202 695 OFFCURVE",
"246 695 CURVE",
"246 792 LINE",
"132.621 792 OFFCURVE",
"47 753.67 OFFCURVE",
"47 606 CURVE SMOOTH",
"47 0 LINE",
"157 0 LINE",
"157 480 LINE",
"378 480 LINE",
"295 328 LINE",
"377.667 306.667 OFFCURVE",
"438 252 OFFCURVE",
"438 172 CURVE SMOOTH",
"438 104 OFFCURVE",
"393.333 29.333 OFFCURVE",
"288 -36 CURVE",
"288 -148 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */\01222 1 0 4 26 7 2 1 0 2 74 1 0 2 1 71 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 26 values pushed */\0120 3 3 2 91 0 2 2 30 75 0 0 0 4 89 0 4 4 23 75 0 1 1 21 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 24 values pushed */\0120 4 0 0 1 4 0 97 0 3 3 2 91 0 2 2 30 75 0 1 1 21 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 24 values pushed */\0120 4 0 0 1 4 0 97 0 3 3 2 91 0 2 2 30 75 0 1 1 24 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 24 values pushed */\0120 1 0 1 115 0 4 0 0 1 4 0 97 0 3 3 2 91 0 2 2 30 3 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01220 17 21 17 24 5 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 579;
}
);
leftKerningGroup = germandbls;
note = germandbls;
rightKerningGroup = germandbls;
unicode = 00DF;
},
{
glyphname = t;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"274 480 LINE",
"274 574 LINE",
"198 574 LINE",
"198 743 LINE",
"88 713 LINE",
"88 574 LINE",
"13 574 LINE",
"13 480 LINE",
"88 480 LINE",
"88 0 LINE",
"198 0 LINE",
"198 480 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 5 values pushed */\0129 8 2 3 72 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 18 values pushed */\0122 1 0 0 3 89 4 1 3 3 23 75 0 1 1 21 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 16 values pushed */\0124 1 3 2 1 0 1 3 0 97 0 1 1 21 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 16 values pushed */\0124 1 3 2 1 0 1 3 0 97 0 1 1 24 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 24 values pushed */\0120 1 0 1 115 4 1 3 0 0 3 85 4 1 3 3 0 89 2 1 0 3 0 77 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01219 17 17 17 16 5 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 287;
}
);
leftKerningGroup = t;
note = t;
rightKerningGroup = t;
unicode = 0074;
},
{
glyphname = tbar;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"273 285 LINE",
"273 360 LINE",
"198 360 LINE",
"198 480 LINE",
"274 480 LINE",
"274 574 LINE",
"198 574 LINE",
"198 743 LINE",
"88 713 LINE",
"88 574 LINE",
"13 574 LINE",
"13 480 LINE",
"88 480 LINE",
"88 360 LINE",
"12 360 LINE",
"12 285 LINE",
"88 285 LINE",
"88 0 LINE",
"198 0 LINE",
"198 285 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 5 values pushed */\01213 12 2 5 72 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 28 values pushed */\0128 1 3 2 1 0 1 3 0 97 7 1 4 4 5 89 6 1 5 5 23 75 0 1 1 21 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 26 values pushed */\0126 1 5 7 1 4 3 5 4 97 8 1 3 2 1 0 1 3 0 97 0 1 1 21 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 26 values pushed */\0126 1 5 7 1 4 3 5 4 97 8 1 3 2 1 0 1 3 0 97 0 1 1 24 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 34 values pushed */\0120 1 0 1 115 6 1 5 7 1 4 3 5 4 97 8 1 3 0 0 3 85 8 1 3 3 0 89 2 1 0 3 0 77 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 12 values pushed */\01217 17 19 17 17 17 17 17 16 9 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 287;
}
);
note = tbar;
rightKerningGroup = t;
unicode = 0167;
},
{
glyphname = tcaron;
layers = (
{
components = (
{
alignment = -1;
name = t;
},
{
alignment = -1;
name = caron.vertical;
transform = "{1, 0, 0, 1, 312, 884}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 287;
}
);
leftKerningGroup = t;
note = tcaron;
rightKerningGroup = t;
unicode = 0165;
},
{
glyphname = tcommaaccent;
layers = (
{
components = (
{
alignment = -1;
name = t;
},
{
alignment = -1;
name = commaaccentcomb.lc;
transform = "{1, 0, 0, 1, 143, -27}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 287;
}
);
leftKerningGroup = t;
note = tcommaaccent;
rightKerningGroup = t;
unicode = 021B;
},
{
glyphname = u;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"439 0 LINE",
"545 0 LINE",
"545 574 LINE",
"435 574 LINE",
"435 221 LINE SMOOTH",
"435 135.293 OFFCURVE",
"362.64 82 OFFCURVE",
"293 82 CURVE SMOOTH",
"221 82 OFFCURVE",
"154 119 OFFCURVE",
"154 231 CURVE SMOOTH",
"154 574 LINE",
"44 574 LINE",
"44 198 LINE SMOOTH",
"44 66 OFFCURVE",
"127 -15 OFFCURVE",
"251 -15 CURVE SMOOTH",
"333.667 -15 OFFCURVE",
"401.667 24 OFFCURVE",
"439 68 CURVE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 6 values pushed */\0121 1 0 2 1 74 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 6 values pushed */\0121 1 4 2 1 74 \012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 19 values pushed */\0123 1 1 1 23 75 0 2 2 0 91 5 4 2 0 0 32 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 23 values pushed */\0123 1 1 1 23 75 5 1 4 4 21 75 0 2 2 0 91 0 0 0 32 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 23 values pushed */\0123 1 1 1 4 89 5 1 4 4 21 75 0 2 2 0 91 0 0 0 32 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 23 values pushed */\0123 1 1 1 4 89 5 1 4 4 24 75 0 2 2 0 91 0 0 0 32 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 26 values pushed */\0120 2 4 0 2 87 3 1 1 5 1 4 0 1 4 97 0 2 2 0 91 0 0 2 0 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 13 values pushed */\0120 0 0 21 0 21 21 35 19 35 6 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 591;
}
);
leftKerningGroup = u;
note = u;
rightKerningGroup = u;
unicode = 0075;
},
{
glyphname = uacute;
layers = (
{
components = (
{
alignment = -1;
name = u;
},
{
alignment = -1;
name = acute.lc;
transform = "{1, 0, 0, 1, 335, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 591;
}
);
leftKerningGroup = u;
note = uacute;
rightKerningGroup = u;
unicode = 00FA;
},
{
glyphname = ubreve;
layers = (
{
components = (
{
alignment = -1;
name = u;
},
{
alignment = -1;
name = breve.lc;
transform = "{1, 0, 0, 1, 295, 7}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 591;
}
);
leftKerningGroup = u;
note = ubreve;
rightKerningGroup = u;
unicode = 016D;
},
{
glyphname = ucircumflex;
layers = (
{
components = (
{
alignment = -1;
name = u;
},
{
alignment = -1;
name = circumflex.lc;
transform = "{1, 0, 0, 1, 297, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 591;
}
);
leftKerningGroup = u;
note = ucircumflex;
rightKerningGroup = u;
unicode = 00FB;
},
{
glyphname = udieresis;
layers = (
{
components = (
{
alignment = -1;
name = u;
},
{
alignment = -1;
name = dieresis.lc;
transform = "{1, 0, 0, 1, 295, -24}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 591;
}
);
leftKerningGroup = u;
note = udieresis;
rightKerningGroup = u;
unicode = 00FC;
},
{
glyphname = ugrave;
layers = (
{
components = (
{
alignment = -1;
name = u;
},
{
alignment = -1;
name = grave.lc;
transform = "{1, 0, 0, 1, 249, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 591;
}
);
leftKerningGroup = u;
note = ugrave;
rightKerningGroup = u;
unicode = 00F9;
},
{
glyphname = uhungarumlaut;
layers = (
{
components = (
{
alignment = -1;
name = u;
},
{
alignment = -1;
name = hungarumlaut.lc;
transform = "{1, 0, 0, 1, 303, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 591;
}
);
leftKerningGroup = u;
note = uhungarumlaut;
rightKerningGroup = u;
unicode = 0171;
},
{
glyphname = umacron;
layers = (
{
components = (
{
alignment = -1;
name = u;
},
{
alignment = -1;
name = macron.lc;
transform = "{1, 0, 0, 1, 295, -16}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 591;
}
);
leftKerningGroup = u;
note = umacron;
rightKerningGroup = u;
unicode = 016B;
},
{
glyphname = uogonek;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"522 -96 LINE",
"512.667 -102.667 OFFCURVE",
"501 -110 OFFCURVE",
"485 -110 CURVE SMOOTH",
"466.333 -110 OFFCURVE",
"455 -97 OFFCURVE",
"455 -81 CURVE SMOOTH",
"455 -65 OFFCURVE",
"466 -51.667 OFFCURVE",
"494 -33 CURVE SMOOTH",
"545 0 LINE",
"545 574 LINE",
"435 574 LINE",
"435 221 LINE SMOOTH",
"435 135.293 OFFCURVE",
"362.64 82 OFFCURVE",
"293 82 CURVE SMOOTH",
"221 82 OFFCURVE",
"154 119 OFFCURVE",
"154 231 CURVE SMOOTH",
"154 574 LINE",
"44 574 LINE",
"44 198 LINE SMOOTH",
"44 66 OFFCURVE",
"127 -15 OFFCURVE",
"251 -15 CURVE SMOOTH",
"333.667 -15 OFFCURVE",
"401.667 24 OFFCURVE",
"439 68 CURVE",
"439 0 LINE",
"439 0 LINE",
"422 -12 LINE",
"388.667 -33.333 OFFCURVE",
"365 -64 OFFCURVE",
"365 -100 CURVE SMOOTH",
"365 -138.667 OFFCURVE",
"393.667 -176 OFFCURVE",
"459 -176 CURVE SMOOTH",
"504.333 -174.667 OFFCURVE",
"538.333 -157.333 OFFCURVE",
"557 -140 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */\01232 12 10 3 1 3 42 1 5 1 2 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 24 values pushed */\0120 5 0 0 5 0 96 4 1 2 2 23 75 0 3 3 1 91 0 1 1 32 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 24 values pushed */\0124 1 2 3 2 114 0 5 0 0 5 0 96 0 3 3 1 91 0 1 1 32 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 30 values pushed */\0124 1 2 3 2 114 0 3 0 1 5 3 1 99 0 5 0 0 5 87 0 5 5 0 92 0 0 5 0 80 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 9 values pushed */\01239 21 35 19 42 34 6 7 26 \012CALL[ ]	/* CallFunction */";
};
width = 591;
}
);
leftKerningGroup = u;
note = uogonek;
rightKerningGroup = u;
unicode = 0173;
},
{
glyphname = uring;
layers = (
{
components = (
{
alignment = -1;
name = u;
},
{
alignment = -1;
name = ring.lc;
transform = "{1, 0, 0, 1, 295, 6}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 591;
}
);
leftKerningGroup = u;
note = uring;
rightKerningGroup = u;
unicode = 016F;
},
{
glyphname = utilde;
layers = (
{
components = (
{
alignment = -1;
name = u;
},
{
alignment = -1;
name = tilde.lc;
transform = "{1, 0, 0, 1, 295, 9}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 591;
}
);
leftKerningGroup = u;
note = utilde;
rightKerningGroup = u;
unicode = 0169;
},
{
glyphname = v;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"377 0 LINE",
"625 574 LINE",
"510 574 LINE",
"313 113 LINE",
"122 574 LINE",
"-1 574 LINE",
"247 0 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\0124 1 0 1 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 12 values pushed */\0122 1 1 1 23 75 0 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 12 values pushed */\0122 1 1 0 1 114 0 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 12 values pushed */\0122 1 1 0 1 114 0 0 0 24 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 10 values pushed */\0122 1 1 0 1 114 0 0 0 105 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 6 values pushed */\01218 17 16 3 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 624;
}
);
leftKerningGroup = v;
note = v;
rightKerningGroup = v;
unicode = 0076;
},
{
glyphname = w;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"576 0 LINE",
"685 0 LINE",
"879 574 LINE",
"768 574 LINE",
"632 147 LINE",
"502 574 LINE",
"384 574 LINE",
"252 148 LINE",
"118 574 LINE",
"-1 574 LINE",
"196 0 LINE",
"306 0 LINE",
"440 413 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */\0129 6 1 3 0 1 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 15 values pushed */\0123 2 2 1 1 23 75 5 4 2 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 15 values pushed */\0123 2 2 1 0 1 114 5 4 2 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 15 values pushed */\0123 2 2 1 0 1 114 5 4 2 0 0 24 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 13 values pushed */\0123 2 2 1 0 1 114 5 4 2 0 0 105 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 13 values pushed */\0120 0 0 12 0 12 18 18 17 18 6 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 878;
}
);
leftKerningGroup = w;
note = w;
rightKerningGroup = w;
unicode = 0077;
},
{
glyphname = wacute;
layers = (
{
components = (
{
alignment = -1;
name = w;
},
{
alignment = -1;
name = acute.lc;
transform = "{1, 0, 0, 1, 480, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 878;
}
);
leftKerningGroup = w;
note = wacute;
rightKerningGroup = w;
unicode = 1E83;
},
{
glyphname = wcircumflex;
layers = (
{
components = (
{
alignment = -1;
name = w;
},
{
alignment = -1;
name = circumflex.lc;
transform = "{1, 0, 0, 1, 442, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 878;
}
);
leftKerningGroup = w;
note = wcircumflex;
rightKerningGroup = w;
unicode = 0175;
},
{
glyphname = wdieresis;
layers = (
{
components = (
{
alignment = -1;
name = w;
},
{
alignment = -1;
name = dieresis.lc;
transform = "{1, 0, 0, 1, 440, -24}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 878;
}
);
leftKerningGroup = w;
note = wdieresis;
rightKerningGroup = w;
unicode = 1E85;
},
{
glyphname = wgrave;
layers = (
{
components = (
{
alignment = -1;
name = w;
},
{
alignment = -1;
name = grave.lc;
transform = "{1, 0, 0, 1, 395, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 878;
}
);
leftKerningGroup = w;
note = wgrave;
rightKerningGroup = w;
unicode = 1E81;
},
{
glyphname = x;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"457 0 LINE",
"577 0 LINE",
"376 299 LINE",
"581 574 LINE",
"462 574 LINE",
"309 361 LINE",
"164 574 LINE",
"39 574 LINE",
"232 297 LINE",
"12 0 LINE",
"130 0 LINE",
"299 227 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */\01210 7 4 1 4 0 1 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 14 values pushed */\0122 1 1 1 23 75 4 3 2 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 14 values pushed */\0122 1 1 1 0 89 4 3 2 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 14 values pushed */\0122 1 1 1 0 89 4 3 2 0 0 24 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 20 values pushed */\0122 1 1 0 0 1 85 2 1 1 1 0 89 4 3 2 0 1 0 77 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 12 values pushed */\0120 0 0 11 0 11 18 18 18 5 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 605;
}
);
leftKerningGroup = x;
note = x;
rightKerningGroup = x;
unicode = 0078;
},
{
glyphname = y;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"300 -220 LINE",
"602 574 LINE",
"488 574 LINE",
"318 124 LINE",
"123 574 LINE",
"-1 574 LINE",
"267 -11 LINE",
"188 -220 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */\0125 2 2 0 1 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 12 values pushed */\0122 1 1 1 23 75 0 0 0 25 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 12 values pushed */\0122 1 1 0 1 114 0 0 0 25 0 76 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 6 values pushed */\01218 18 16 3 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 601;
}
);
leftKerningGroup = y;
note = y;
rightKerningGroup = y;
unicode = 0079;
},
{
glyphname = yacute;
layers = (
{
components = (
{
alignment = -1;
name = y;
},
{
alignment = -1;
name = acute.lc;
transform = "{1, 0, 0, 1, 342, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 601;
}
);
leftKerningGroup = y;
note = yacute;
rightKerningGroup = y;
unicode = 00FD;
},
{
glyphname = ycircumflex;
layers = (
{
components = (
{
alignment = -1;
name = y;
},
{
alignment = -1;
name = circumflex.lc;
transform = "{1, 0, 0, 1, 305, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 601;
}
);
leftKerningGroup = y;
note = ycircumflex;
rightKerningGroup = y;
unicode = 0177;
},
{
glyphname = ydieresis;
layers = (
{
components = (
{
alignment = -1;
name = y;
},
{
alignment = -1;
name = dieresis.lc;
transform = "{1, 0, 0, 1, 302, -24}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 601;
}
);
leftKerningGroup = y;
note = ydieresis;
rightKerningGroup = y;
unicode = 00FF;
},
{
glyphname = ygrave;
layers = (
{
components = (
{
alignment = -1;
name = y;
},
{
alignment = -1;
name = grave.lc;
transform = "{1, 0, 0, 1, 257, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 601;
}
);
leftKerningGroup = y;
note = ygrave;
rightKerningGroup = y;
unicode = 1EF3;
},
{
glyphname = z;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"497 0 LINE",
"539 94 LINE",
"196 94 LINE",
"549 570 LINE",
"547 574 LINE",
"112 574 LINE",
"70 480 LINE",
"360 480 LINE",
"5 4 LINE",
"7 0 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 21 values pushed */\0120 1 1 2 89 0 2 2 23 75 0 3 3 0 89 0 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 19 values pushed */\0120 2 0 1 3 2 1 97 0 3 3 0 89 0 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 19 values pushed */\0120 2 0 1 3 2 1 97 0 3 3 0 89 0 0 0 24 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 24 values pushed */\0120 2 0 1 3 2 1 97 0 3 0 0 3 85 0 3 3 0 89 0 0 3 0 77 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 7 values pushed */\01218 17 18 16 4 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 567;
}
);
leftKerningGroup = z;
note = z;
rightKerningGroup = z;
unicode = 007A;
},
{
glyphname = zacute;
layers = (
{
components = (
{
alignment = -1;
name = z;
},
{
alignment = -1;
name = acute.lc;
transform = "{1, 0, 0, 1, 334, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 567;
}
);
leftKerningGroup = z;
note = zacute;
rightKerningGroup = z;
unicode = 017A;
},
{
glyphname = zcaron;
layers = (
{
components = (
{
alignment = -1;
name = z;
},
{
alignment = -1;
name = caron.lc;
transform = "{1, 0, 0, 1, 297, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 567;
}
);
leftKerningGroup = z;
note = zcaron;
rightKerningGroup = z;
unicode = 017E;
},
{
glyphname = zdotaccent;
layers = (
{
components = (
{
alignment = -1;
name = z;
},
{
alignment = -1;
name = dotaccent.lc;
transform = "{1, 0, 0, 1, 294, 27}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 567;
}
);
leftKerningGroup = z;
note = zdotaccent;
rightKerningGroup = z;
unicode = 017C;
},
{
glyphname = a.salt_low;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"182.667 53 OFFCURVE",
"136 107.667 OFFCURVE",
"136 173 CURVE SMOOTH",
"136 234.333 OFFCURVE",
"182.667 287 OFFCURVE",
"252 287 CURVE SMOOTH",
"324 287 OFFCURVE",
"373 234.333 OFFCURVE",
"373 173 CURVE SMOOTH",
"373 106.333 OFFCURVE",
"321.333 53 OFFCURVE",
"252 53 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"381 0 LINE",
"482 0 LINE",
"482 388 LINE SMOOTH",
"482 512 OFFCURVE",
"410.667 590 OFFCURVE",
"256 590 CURVE SMOOTH",
"206.667 590 OFFCURVE",
"167.333 586.333 OFFCURVE",
"90 569 CURVE",
"111 480 LINE",
"173.667 492 OFFCURVE",
"206.333 496 OFFCURVE",
"245 496 CURVE SMOOTH",
"325 497.333 OFFCURVE",
"372 463.667 OFFCURVE",
"372 353 CURVE SMOOTH",
"372 314 LINE",
"337.333 340.667 OFFCURVE",
"288.333 360 OFFCURVE",
"227 360 CURVE SMOOTH",
"107.195 360 OFFCURVE",
"21 278.633 OFFCURVE",
"21 170 CURVE SMOOTH",
"21 61.093 OFFCURVE",
"105.092 -20 OFFCURVE",
"213 -20 CURVE SMOOTH",
"285 -20 OFFCURVE",
"343.667 12 OFFCURVE",
"381 52 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */\01237 1 4 5 36 1 3 4 29 1 1 3 13 1 6 0 4 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 36 values pushed */\0120 3 0 1 0 3 1 99 0 4 4 5 91 0 5 5 31 75 8 1 6 6 21 75 7 1 0 0 2 91 0 2 2 32 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 34 values pushed */\0120 5 0 4 3 5 4 99 0 3 0 1 0 3 1 99 8 1 6 6 21 75 7 1 0 0 2 91 0 2 2 32 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 34 values pushed */\0120 5 0 4 3 5 4 99 0 3 0 1 0 3 1 99 8 1 6 6 24 75 7 1 0 0 2 91 0 2 2 32 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 43 values pushed */\0128 1 6 0 2 0 6 2 112 0 5 0 4 3 5 4 99 0 3 0 1 0 3 1 99 7 1 0 6 2 0 87 7 1 0 0 2 91 0 2 0 2 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 25 values pushed */\01212 12 1 0 12 44 12 44 41 39 34 32 27 25 17 15 7 5 0 11 1 11 9 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 528;
}
);
leftKerningGroup = a;
note = a.salt_low;
rightKerningGroup = a;
},
{
glyphname = a.salt_ss;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"559 173.284 OFFCURVE",
"466.886 75 OFFCURVE",
"348 75 CURVE SMOOTH",
"228.668 75 OFFCURVE",
"140 173.436 OFFCURVE",
"140 288 CURVE SMOOTH",
"140 403.268 OFFCURVE",
"228.751 499 OFFCURVE",
"348 499 CURVE SMOOTH",
"466.886 499 OFFCURVE",
"559 400.716 OFFCURVE",
"559 287 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"561 0 LINE",
"666 0 LINE",
"666 574 LINE",
"556 574 LINE",
"556 488 LINE",
"501.333 553.333 OFFCURVE",
"417 596 OFFCURVE",
"321 596 CURVE SMOOTH",
"237 596 OFFCURVE",
"162.333 560 OFFCURVE",
"109 504 CURVE SMOOTH",
"55.667 448 OFFCURVE",
"24 370 OFFCURVE",
"24 286 CURVE SMOOTH",
"24 202 OFFCURVE",
"55.667 123.833 OFFCURVE",
"109 68.5 CURVE SMOOTH",
"162.333 13.167 OFFCURVE",
"237 -22 OFFCURVE",
"321 -22 CURVE SMOOTH",
"421 -22 OFFCURVE",
"506.333 22 OFFCURVE",
"561 90 CURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */\01237 21 2 1 0 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 32 values pushed */\0120 4 4 23 75 0 0 0 3 91 0 3 3 31 75 6 1 5 5 21 75 0 1 1 2 91 0 2 2 29 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 30 values pushed */\0120 3 0 0 1 3 0 99 0 4 4 5 89 6 1 5 5 21 75 0 1 1 2 91 0 2 2 29 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 30 values pushed */\0120 3 0 0 1 3 0 99 0 4 4 5 89 6 1 5 5 24 75 0 1 1 2 91 0 2 2 32 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 33 values pushed */\0120 3 0 0 1 3 0 99 0 1 5 2 1 87 0 4 6 1 5 2 4 5 97 0 1 1 2 91 0 2 1 2 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\01220 20 20 40 20 40 19 40 39 40 36 7 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 712;
}
);
leftKerningGroup = d;
note = a.salt_ss;
rightKerningGroup = u;
},
{
glyphname = aacute.salt_low;
layers = (
{
components = (
{
alignment = -1;
name = a.salt_low;
},
{
alignment = -1;
name = acute.lc;
transform = "{1, 0, 0, 1, 305, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 528;
}
);
leftKerningGroup = a;
note = aacute.salt_low;
rightKerningGroup = a;
},
{
glyphname = aacute.salt_ss;
layers = (
{
components = (
{
alignment = -1;
name = a.salt_ss;
},
{
alignment = -1;
name = acute.lc;
transform = "{1, 0, 0, 1, 396, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 712;
}
);
leftKerningGroup = d;
note = aacute.salt_ss;
rightKerningGroup = u;
},
{
glyphname = abreve.salt_low;
layers = (
{
components = (
{
alignment = -1;
name = a.salt_low;
},
{
alignment = -1;
name = breve.lc;
transform = "{1, 0, 0, 1, 265, 7}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 528;
}
);
leftKerningGroup = a;
note = abreve.salt_low;
rightKerningGroup = a;
},
{
glyphname = abreve.salt_ss;
layers = (
{
components = (
{
alignment = -1;
name = a.salt_ss;
},
{
alignment = -1;
name = breve.lc;
transform = "{1, 0, 0, 1, 356, 7}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 712;
}
);
leftKerningGroup = d;
note = abreve.salt_ss;
rightKerningGroup = u;
},
{
glyphname = acircumflex.salt_low;
layers = (
{
components = (
{
alignment = -1;
name = a.salt_low;
},
{
alignment = -1;
name = circumflex.lc;
transform = "{1, 0, 0, 1, 267, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 528;
}
);
leftKerningGroup = a;
note = acircumflex.salt_low;
rightKerningGroup = a;
},
{
glyphname = acircumflex.salt_ss;
layers = (
{
components = (
{
alignment = -1;
name = a.salt_ss;
},
{
alignment = -1;
name = circumflex.lc;
transform = "{1, 0, 0, 1, 359, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 712;
}
);
leftKerningGroup = d;
note = acircumflex.salt_ss;
rightKerningGroup = u;
},
{
glyphname = adieresis.salt_low;
layers = (
{
components = (
{
alignment = -1;
name = a.salt_low;
},
{
alignment = -1;
name = dieresis.lc;
transform = "{1, 0, 0, 1, 265, -24}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 528;
}
);
leftKerningGroup = a;
note = adieresis.salt_low;
rightKerningGroup = a;
},
{
glyphname = adieresis.salt_ss;
layers = (
{
components = (
{
alignment = -1;
name = a.salt_ss;
},
{
alignment = -1;
name = dieresis.lc;
transform = "{1, 0, 0, 1, 356, -24}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 712;
}
);
leftKerningGroup = d;
note = adieresis.salt_ss;
rightKerningGroup = u;
},
{
glyphname = agrave.salt_low;
layers = (
{
components = (
{
alignment = -1;
name = a.salt_low;
},
{
alignment = -1;
name = grave.lc;
transform = "{1, 0, 0, 1, 220, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 528;
}
);
leftKerningGroup = a;
note = agrave.salt_low;
rightKerningGroup = a;
},
{
glyphname = agrave.salt_ss;
layers = (
{
components = (
{
alignment = -1;
name = a.salt_ss;
},
{
alignment = -1;
name = grave.lc;
transform = "{1, 0, 0, 1, 311, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 712;
}
);
leftKerningGroup = d;
note = agrave.salt_ss;
rightKerningGroup = u;
},
{
glyphname = amacron.salt_low;
layers = (
{
components = (
{
alignment = -1;
name = a.salt_low;
},
{
alignment = -1;
name = macron.lc;
transform = "{1, 0, 0, 1, 265, -16}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 528;
}
);
leftKerningGroup = a;
note = amacron.salt_low;
rightKerningGroup = a;
},
{
glyphname = amacron.salt_ss;
layers = (
{
components = (
{
alignment = -1;
name = a.salt_ss;
},
{
alignment = -1;
name = macron.lc;
transform = "{1, 0, 0, 1, 356, -16}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 712;
}
);
leftKerningGroup = d;
note = amacron.salt_ss;
rightKerningGroup = u;
},
{
glyphname = aogonek.salt_low;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"182.667 53 OFFCURVE",
"136 107.667 OFFCURVE",
"136 173 CURVE SMOOTH",
"136 234.333 OFFCURVE",
"182.667 287 OFFCURVE",
"252 287 CURVE SMOOTH",
"324 287 OFFCURVE",
"373 234.333 OFFCURVE",
"373 173 CURVE SMOOTH",
"373 106.333 OFFCURVE",
"321.333 53 OFFCURVE",
"252 53 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"459 -96 LINE",
"451 -102.667 OFFCURVE",
"439 -110 OFFCURVE",
"423 -110 CURVE SMOOTH",
"403 -110 OFFCURVE",
"392 -97 OFFCURVE",
"392 -81 CURVE SMOOTH",
"392 -65 OFFCURVE",
"404 -51.667 OFFCURVE",
"432 -33 CURVE SMOOTH",
"482 0 LINE",
"482 388 LINE SMOOTH",
"482 512 OFFCURVE",
"410.667 590 OFFCURVE",
"256 590 CURVE SMOOTH",
"206.667 590 OFFCURVE",
"167.333 586.333 OFFCURVE",
"90 569 CURVE",
"111 480 LINE",
"173.667 492 OFFCURVE",
"206.333 496 OFFCURVE",
"245 496 CURVE SMOOTH",
"325 497.333 OFFCURVE",
"372 463.667 OFFCURVE",
"372 353 CURVE SMOOTH",
"372 314 LINE",
"337.333 340.667 OFFCURVE",
"288.333 360 OFFCURVE",
"227 360 CURVE SMOOTH",
"107.195 360 OFFCURVE",
"21 278.633 OFFCURVE",
"21 170 CURVE SMOOTH",
"21 61.093 OFFCURVE",
"105.092 -20 OFFCURVE",
"213 -20 CURVE SMOOTH",
"285 -20 OFFCURVE",
"343.667 12 OFFCURVE",
"381 52 CURVE",
"381 1 LINE",
"359 -15 LINE",
"327 -36.333 OFFCURVE",
"302 -64 OFFCURVE",
"302 -100 CURVE SMOOTH",
"302 -138.667 OFFCURVE",
"330.667 -176 OFFCURVE",
"396 -176 CURVE SMOOTH",
"441.333 -174.667 OFFCURVE",
"475.333 -157.333 OFFCURVE",
"494 -140 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */\01247 1 5 6 46 1 4 5 39 1 1 4 54 23 22 3 3 0 64 1 7 3 5 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 37 values pushed */\0120 4 0 1 0 4 1 99 0 7 0 2 7 2 95 0 5 5 6 91 0 6 6 31 75 8 1 0 0 3 91 0 3 3 32 3 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 35 values pushed */\0120 6 0 5 4 6 5 99 0 4 0 1 0 4 1 99 0 7 0 2 7 2 95 8 1 0 0 3 91 0 3 3 32 3 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 41 values pushed */\0120 6 0 5 4 6 5 99 0 4 0 1 0 4 1 99 8 1 0 0 3 7 0 3 99 0 7 2 2 7 87 0 7 7 2 91 0 2 7 2 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 23 values pushed */\0121 0 62 60 51 49 44 42 37 35 27 25 16 14 7 5 0 11 1 11 9 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 528;
}
);
leftKerningGroup = a;
note = aogonek.salt_low;
rightKerningGroup = a;
},
{
glyphname = aogonek.salt_ss;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"625.333 -174.667 OFFCURVE",
"660.667 -157.333 OFFCURVE",
"678 -140 CURVE",
"643 -96 LINE",
"633.667 -102.667 OFFCURVE",
"622 -110 OFFCURVE",
"606 -110 CURVE SMOOTH",
"587.333 -110 OFFCURVE",
"576 -97 OFFCURVE",
"576 -81 CURVE SMOOTH",
"576 -65 OFFCURVE",
"587 -51.667 OFFCURVE",
"615 -33 CURVE SMOOTH",
"666 0 LINE",
"666 574 LINE",
"556 574 LINE",
"556 488 LINE",
"501.333 553.333 OFFCURVE",
"417 596 OFFCURVE",
"321 596 CURVE SMOOTH",
"237 596 OFFCURVE",
"162.333 560 OFFCURVE",
"109 504 CURVE SMOOTH",
"55.667 448 OFFCURVE",
"24 370 OFFCURVE",
"24 286 CURVE SMOOTH",
"24 202 OFFCURVE",
"55.667 123.833 OFFCURVE",
"109 68.5 CURVE SMOOTH",
"162.333 13.167 OFFCURVE",
"237 -22 OFFCURVE",
"321 -22 CURVE SMOOTH",
"421 -22 OFFCURVE",
"506.333 22 OFFCURVE",
"561 90 CURVE",
"561 -3 LINE",
"543 -15 LINE SMOOTH",
"509.667 -36.333 OFFCURVE",
"486 -64 OFFCURVE",
"486 -100 CURVE SMOOTH",
"486 -138.667 OFFCURVE",
"514.667 -176 OFFCURVE",
"580 -176 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"559 173.284 OFFCURVE",
"466.886 75 OFFCURVE",
"348 75 CURVE SMOOTH",
"228.668 75 OFFCURVE",
"140 173.436 OFFCURVE",
"140 288 CURVE SMOOTH",
"140 403.268 OFFCURVE",
"228.751 499 OFFCURVE",
"348 499 CURVE SMOOTH",
"466.886 499 OFFCURVE",
"559 400.716 OFFCURVE",
"559 287 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\01255 45 20 0 2 48 \012CALL[ ]	/* CallFunction */";
};
width = 712;
}
);
leftKerningGroup = d;
note = aogonek.salt_ss;
rightKerningGroup = u;
},
{
glyphname = aring.salt_low;
layers = (
{
components = (
{
alignment = -1;
name = a.salt_low;
},
{
alignment = -1;
name = ring.lc;
transform = "{1, 0, 0, 1, 265, 6}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 528;
}
);
leftKerningGroup = a;
note = aring.salt_low;
rightKerningGroup = a;
},
{
glyphname = aring.salt_ss;
layers = (
{
components = (
{
alignment = -1;
name = a.salt_ss;
},
{
alignment = -1;
name = ring.lc;
transform = "{1, 0, 0, 1, 357, 6}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 712;
}
);
leftKerningGroup = d;
note = aring.salt_ss;
rightKerningGroup = u;
},
{
glyphname = aringacute.salt_low;
layers = (
{
components = (
{
alignment = -1;
name = a.salt_low;
},
{
alignment = -1;
name = ring.lc;
transform = "{1, 0, 0, 1, 265, 6}";
},
{
alignment = -1;
name = acute.lc;
transform = "{1, 0, 0, 1, 305, 259}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 528;
}
);
leftKerningGroup = a;
note = aringacute.salt_low;
rightKerningGroup = a;
},
{
glyphname = aringacute.salt_ss;
layers = (
{
components = (
{
alignment = -1;
name = a.salt_ss;
},
{
alignment = -1;
name = ring.lc;
transform = "{1, 0, 0, 1, 356, 6}";
},
{
alignment = -1;
name = acute.lc;
transform = "{1, 0, 0, 1, 396, 259}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 712;
}
);
leftKerningGroup = d;
note = aringacute.salt_ss;
rightKerningGroup = u;
},
{
glyphname = atilde.salt_low;
layers = (
{
components = (
{
alignment = -1;
name = a.salt_low;
},
{
alignment = -1;
name = tilde.lc;
transform = "{1, 0, 0, 1, 265, 9}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 528;
}
);
leftKerningGroup = a;
note = atilde.salt_low;
rightKerningGroup = a;
},
{
glyphname = atilde.salt_ss;
layers = (
{
components = (
{
alignment = -1;
name = a.salt_ss;
},
{
alignment = -1;
name = tilde.lc;
transform = "{1, 0, 0, 1, 356, 9}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 712;
}
);
leftKerningGroup = d;
note = atilde.salt_ss;
rightKerningGroup = u;
},
{
glyphname = ae.salt_low;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"756.333 508 OFFCURVE",
"826.667 445 OFFCURVE",
"848 353 CURVE",
"478 353 LINE",
"499.333 446.333 OFFCURVE",
"569.667 508 OFFCURVE",
"663 508 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"182.667 44 OFFCURVE",
"136 97 OFFCURVE",
"136 169 CURVE SMOOTH",
"136 231.667 OFFCURVE",
"182.667 287 OFFCURVE",
"252 287 CURVE SMOOTH",
"324 287 OFFCURVE",
"373 233 OFFCURVE",
"373 169 CURVE SMOOTH",
"373 94.333 OFFCURVE",
"321.333 44 OFFCURVE",
"252 44 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"893 150 LINE",
"843.667 100.667 OFFCURVE",
"775.333 66 OFFCURVE",
"686 66 CURVE SMOOTH",
"560.667 66 OFFCURVE",
"480 147 OFFCURVE",
"472 267 CURVE",
"970 267 LINE",
"970 293 LINE SMOOTH",
"970 379.667 OFFCURVE",
"936.833 458.167 OFFCURVE",
"881.5 513.5 CURVE SMOOTH",
"826.167 568.833 OFFCURVE",
"749.667 603 OFFCURVE",
"663 603 CURVE SMOOTH",
"575 603 OFFCURVE",
"497.333 564.333 OFFCURVE",
"444 503 CURVE",
"412 559 OFFCURVE",
"349.333 590 OFFCURVE",
"252 590 CURVE SMOOTH",
"198.667 590 OFFCURVE",
"167 585.333 OFFCURVE",
"99 572 CURVE",
"104 479 LINE",
"174.667 492.333 OFFCURVE",
"201.333 496 OFFCURVE",
"240 496 CURVE SMOOTH",
"320 497.333 OFFCURVE",
"361 463.667 OFFCURVE",
"361 353 CURVE SMOOTH",
"361 322 LINE",
"327.667 344.667 OFFCURVE",
"281.667 360 OFFCURVE",
"227 360 CURVE SMOOTH",
"107.001 360 OFFCURVE",
"21 275.908 OFFCURVE",
"21 166 CURVE SMOOTH",
"21 54 OFFCURVE",
"108 -29 OFFCURVE",
"232 -29 CURVE SMOOTH",
"344 -29 OFFCURVE",
"408.333 28.333 OFFCURVE",
"431 91 CURVE",
"485.667 17.667 OFFCURVE",
"575.333 -29 OFFCURVE",
"686 -29 CURVE SMOOTH",
"812.667 -29 OFFCURVE",
"900 19 OFFCURVE",
"960 79 CURVE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 20 values pushed */\01247 1 0 8 53 46 2 1 0 39 1 3 1 69 25 2 11 10 4 74 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01234 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 23 values pushed */\01247 1 0 8 53 1 7 0 46 1 1 7 39 1 3 1 69 25 2 11 10 5 74 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 23 values pushed */\01247 1 0 8 53 1 7 0 46 1 6 7 39 1 3 1 69 25 2 11 10 5 74 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01219 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 52 values pushed */\0120 3 10 1 3 87 6 1 1 0 10 11 1 10 97 7 12 2 0 0 8 91 9 1 8 8 31 75 0 11 11 4 91 5 1 4 4 29 75 13 1 2 2 4 91 5 1 4 4 29 4 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 63 values pushed */\0120 3 10 1 3 87 6 1 1 0 10 11 1 10 97 7 12 2 0 0 9 91 0 9 9 31 75 7 12 2 0 0 8 91 0 8 8 31 75 0 11 11 4 91 5 1 4 4 29 75 13 1 2 2 4 91 5 1 4 4 29 4 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 60 values pushed */\0120 3 10 1 3 87 6 1 1 0 10 11 1 10 97 12 1 0 0 9 91 0 9 9 31 75 0 7 7 8 91 0 8 8 31 75 0 11 11 4 91 5 1 4 4 29 75 13 1 2 2 4 91 5 1 4 4 29 4 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 56 values pushed */\0120 9 12 1 0 7 9 0 99 0 8 0 7 1 8 7 99 0 3 10 1 3 87 6 1 1 0 10 11 1 10 97 0 11 11 4 91 5 1 4 4 29 75 13 1 2 2 4 91 5 1 4 4 29 4 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01234 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 56 values pushed */\0120 9 12 1 0 7 9 0 99 0 8 0 7 1 8 7 99 0 3 10 1 3 87 6 1 1 0 10 11 1 10 97 0 11 11 4 91 5 1 4 4 32 75 13 1 2 2 4 91 5 1 4 4 32 4 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 57 values pushed */\0120 9 12 1 0 7 9 0 99 0 8 0 7 6 8 7 99 0 6 0 3 10 6 3 99 0 1 0 10 11 1 10 97 0 11 11 4 91 5 1 4 4 32 75 13 1 2 2 4 91 5 1 4 4 32 4 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 58 values pushed */\0120 9 12 1 0 7 9 0 99 0 8 0 7 6 8 7 99 0 6 0 3 10 6 3 99 0 1 0 10 11 1 10 97 0 11 2 4 11 87 13 1 2 4 4 2 87 13 1 2 2 4 91 5 1 4 2 4 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 35 values pushed */\0128 7 1 0 67 65 63 62 57 55 51 49 44 42 37 35 29 27 23 21 14 12 7 18 8 18 4 3 0 6 1 6 14 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 991;
}
);
leftKerningGroup = a;
note = ae.salt_low;
rightKerningGroup = e;
},
{
glyphname = aeacute.salt_low;
layers = (
{
components = (
{
alignment = -1;
name = ae.salt_low;
},
{
alignment = -1;
name = acute.lc;
transform = "{1, 0, 0, 1, 511, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 991;
}
);
leftKerningGroup = a;
note = aeacute.salt_low;
rightKerningGroup = e;
},
{
glyphname = c.salt_low;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"484 112 LINE",
"480 112 LINE",
"438.667 81.333 OFFCURVE",
"385.667 75 OFFCURVE",
"351 75 CURVE SMOOTH",
"230.68 75 OFFCURVE",
"140 168.347 OFFCURVE",
"140 286 CURVE SMOOTH",
"140 403.223 OFFCURVE",
"230.81 496 OFFCURVE",
"351 496 CURVE SMOOTH",
"385.667 496 OFFCURVE",
"438.667 489.333 OFFCURVE",
"480 460 CURVE",
"484 460 LINE",
"528 541 LINE",
"481.333 571.667 OFFCURVE",
"416.333 591 OFFCURVE",
"351 591 CURVE SMOOTH",
"259 591 OFFCURVE",
"175.5 556.667 OFFCURVE",
"117.5 502 CURVE SMOOTH",
"59.5 447.333 OFFCURVE",
"24 370 OFFCURVE",
"24 286 CURVE SMOOTH",
"24 200.667 OFFCURVE",
"59.5 123.667 OFFCURVE",
"117.5 69 CURVE SMOOTH",
"175.5 14.333 OFFCURVE",
"259 -20 OFFCURVE",
"351 -20 CURVE SMOOTH",
"416.333 -20 OFFCURVE",
"481.333 -0.667 OFFCURVE",
"528 30 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */\01217 1 2 1 18 1 3 2 1 1 0 3 3 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 21 values pushed */\0120 2 2 1 91 0 1 1 31 75 0 3 3 0 91 0 0 0 32 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 19 values pushed */\0120 1 0 2 3 1 2 99 0 3 3 0 91 0 0 0 32 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 24 values pushed */\0120 1 0 2 3 1 2 99 0 3 0 0 3 87 0 3 3 0 91 0 0 3 0 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 7 values pushed */\01240 38 40 35 4 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 542;
}
);
leftKerningGroup = c;
note = c.salt_low;
rightKerningGroup = c;
},
{
glyphname = cacute.salt_low;
layers = (
{
components = (
{
alignment = -1;
name = c.salt_low;
},
{
alignment = -1;
name = acute.lc;
transform = "{1, 0, 0, 1, 374, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 542;
}
);
leftKerningGroup = c;
note = cacute.salt_low;
rightKerningGroup = c;
},
{
glyphname = ccaron.salt_low;
layers = (
{
components = (
{
alignment = -1;
name = c.salt_low;
},
{
alignment = -1;
name = caron.lc;
transform = "{1, 0, 0, 1, 337, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 542;
}
);
leftKerningGroup = c;
note = ccaron.salt_low;
rightKerningGroup = c;
},
{
glyphname = ccedilla.salt_low;
layers = (
{
components = (
{
alignment = -1;
name = c.salt_low;
},
{
alignment = -1;
name = cedilla.lc;
transform = "{1, 0, 0, 1, 333, -18}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 542;
}
);
leftKerningGroup = c;
note = ccedilla.salt_low;
rightKerningGroup = c;
},
{
glyphname = ccircumflex.salt_low;
layers = (
{
components = (
{
alignment = -1;
name = c.salt_low;
},
{
alignment = -1;
name = circumflex.lc;
transform = "{1, 0, 0, 1, 336, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 542;
}
);
leftKerningGroup = c;
note = ccircumflex.salt_low;
rightKerningGroup = c;
},
{
glyphname = cdotaccent.salt_low;
layers = (
{
components = (
{
alignment = -1;
name = c.salt_low;
},
{
alignment = -1;
name = dotaccent.lc;
transform = "{1, 0, 0, 1, 334, 27}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 542;
}
);
leftKerningGroup = c;
note = cdotaccent.salt_low;
rightKerningGroup = c;
},
{
glyphname = s.salt_low;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"96.171 592 OFFCURVE",
"28 520.951 OFFCURVE",
"28 442 CURVE SMOOTH",
"28 361.937 OFFCURVE",
"71.289 326.634 OFFCURVE",
"176 260 CURVE SMOOTH",
"257.285 208.662 OFFCURVE",
"292 176.508 OFFCURVE",
"292 145 CURVE SMOOTH",
"292 111.667 OFFCURVE",
"260 78.333 OFFCURVE",
"188 77 CURVE SMOOTH",
"148 77 OFFCURVE",
"109 94.333 OFFCURVE",
"53 125 CURVE",
"12 40 LINE",
"69.333 5.333 OFFCURVE",
"136.667 -18 OFFCURVE",
"202 -18 CURVE SMOOTH",
"326 -16.667 OFFCURVE",
"408 54 OFFCURVE",
"408 154 CURVE SMOOTH",
"408 186.667 OFFCURVE",
"396.667 216.167 OFFCURVE",
"374 242.5 CURVE SMOOTH",
"351.333 268.833 OFFCURVE",
"307 303.667 OFFCURVE",
"241 347 CURVE SMOOTH",
"205 369.667 OFFCURVE",
"179.667 387.333 OFFCURVE",
"165 400 CURVE SMOOTH",
"150.333 412.667 OFFCURVE",
"143 426.333 OFFCURVE",
"143 441 CURVE SMOOTH",
"143 474.333 OFFCURVE",
"175.667 498 OFFCURVE",
"225 498 CURVE SMOOTH",
"254.333 498 OFFCURVE",
"292 488.333 OFFCURVE",
"328 467 CURVE",
"372 550 LINE",
"333.333 570 OFFCURVE",
"278.333 592 OFFCURVE",
"217 592 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */\0123 1 1 0 29 23 4 3 3 1 22 1 2 3 3 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 22 values pushed */\0120 1 1 0 91 4 1 0 0 31 75 0 3 3 2 91 0 2 2 32 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 20 values pushed */\0124 1 0 0 1 3 0 1 99 0 3 3 2 91 0 2 2 32 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 25 values pushed */\0124 1 0 0 1 3 0 1 99 0 3 2 2 3 87 0 3 3 2 91 0 2 3 2 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 15 values pushed */\0121 0 27 25 20 18 8 6 0 43 1 43 5 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 430;
}
);
leftKerningGroup = s;
note = s.salt_low;
rightKerningGroup = s;
},
{
glyphname = sacute.salt_low;
layers = (
{
components = (
{
alignment = -1;
name = s.salt_low;
},
{
alignment = -1;
name = acute.lc;
transform = "{1, 0, 0, 1, 256, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 430;
}
);
leftKerningGroup = s;
note = sacute.salt_low;
rightKerningGroup = s;
},
{
glyphname = scaron.salt_low;
layers = (
{
components = (
{
alignment = -1;
name = s.salt_low;
},
{
alignment = -1;
name = caron.lc;
transform = "{1, 0, 0, 1, 219, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 430;
}
);
leftKerningGroup = s;
note = scaron.salt_low;
rightKerningGroup = s;
},
{
glyphname = scedilla.salt_low;
layers = (
{
components = (
{
alignment = -1;
name = s.salt_low;
},
{
alignment = -1;
name = cedilla.lc;
transform = "{1, 0, 0, 1, 208, -17}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 430;
}
);
leftKerningGroup = s;
note = scedilla.salt_low;
rightKerningGroup = s;
},
{
glyphname = scircumflex.salt_low;
layers = (
{
components = (
{
alignment = -1;
name = s.salt_low;
},
{
alignment = -1;
name = circumflex.lc;
transform = "{1, 0, 0, 1, 218, 8}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 430;
}
);
leftKerningGroup = s;
note = scircumflex.salt_low;
rightKerningGroup = s;
},
{
glyphname = scommaaccent.salt_low;
layers = (
{
components = (
{
alignment = -1;
name = s.salt_low;
},
{
alignment = -1;
name = commaaccentcomb.lc;
transform = "{1, 0, 0, 1, 202, -27}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 430;
}
);
leftKerningGroup = s;
note = scommaaccent.salt_low;
rightKerningGroup = s;
},
{
glyphname = c_h;
layers = (
{
components = (
{
alignment = -1;
name = c;
},
{
alignment = -1;
name = h;
transform = "{1, 0, 0, 1, 514, 0}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 1105;
}
);
leftKerningGroup = c;
note = c_h;
rightKerningGroup = h;
},
{
glyphname = c_k;
layers = (
{
components = (
{
alignment = -1;
name = c;
},
{
alignment = -1;
name = k;
transform = "{1, 0, 0, 1, 514, 0}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 1072;
}
);
leftKerningGroup = c;
note = c_k;
rightKerningGroup = k;
},
{
glyphname = f_f;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"197 0 LINE",
"197 480 LINE",
"337 480 LINE",
"337 0 LINE",
"447 0 LINE",
"447 480 LINE",
"524 480 LINE",
"524 574 LINE",
"447 574 LINE",
"447 598 LINE SMOOTH",
"447 683.333 OFFCURVE",
"492 695 OFFCURVE",
"536 695 CURVE",
"536 792 LINE",
"424.55 792 OFFCURVE",
"337 754.038 OFFCURVE",
"337 606 CURVE SMOOTH",
"337 574 LINE",
"197 574 LINE",
"197 598 LINE SMOOTH",
"197 683.333 OFFCURVE",
"242 695 OFFCURVE",
"286 695 CURVE",
"286 792 LINE",
"174.55 792 OFFCURVE",
"87 754.038 OFFCURVE",
"87 606 CURVE SMOOTH",
"87 574 LINE",
"12 574 LINE",
"12 480 LINE",
"87 480 LINE",
"87 0 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 33 values pushed */\0127 1 4 4 3 91 6 1 3 3 30 75 11 9 2 1 1 2 89 8 5 2 2 2 23 75 10 1 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 31 values pushed */\0128 5 2 2 11 9 2 1 0 2 1 97 7 1 4 4 3 91 6 1 3 3 30 75 10 1 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 31 values pushed */\0128 5 2 2 11 9 2 1 0 2 1 97 7 1 4 4 3 91 6 1 3 3 30 75 10 1 0 0 24 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 31 values pushed */\01210 1 0 1 0 115 8 5 2 2 11 9 2 1 0 2 1 97 7 1 4 4 3 91 6 1 3 3 30 4 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 18 values pushed */\01235 34 33 32 31 30 19 17 21 19 17 21 17 17 16 12 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 539;
}
);
leftKerningGroup = f;
note = f_f;
},
{
glyphname = f_f_i;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"692 780 LINE",
"578 780 LINE",
"578 661 LINE",
"692 661 LINE"
);
},
{
closed = 1;
nodes = (
"690 574 LINE",
"580 574 LINE",
"580 0 LINE",
"690 0 LINE"
);
},
{
closed = 1;
nodes = (
"197 0 LINE",
"197 480 LINE",
"337 480 LINE",
"337 0 LINE",
"447 0 LINE",
"447 480 LINE",
"517 480 LINE",
"517 574 LINE",
"447 574 LINE",
"447 598 LINE SMOOTH",
"447 683.333 OFFCURVE",
"493 695 OFFCURVE",
"533 695 CURVE",
"533 792 LINE",
"424.193 792 OFFCURVE",
"337 753.207 OFFCURVE",
"337 606 CURVE SMOOTH",
"337 574 LINE",
"197 574 LINE",
"197 598 LINE SMOOTH",
"197 683.333 OFFCURVE",
"242 695 OFFCURVE",
"286 695 CURVE",
"286 792 LINE",
"174.55 792 OFFCURVE",
"87 754.038 OFFCURVE",
"87 606 CURVE SMOOTH",
"87 574 LINE",
"12 574 LINE",
"12 480 LINE",
"87 480 LINE",
"87 0 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 51 values pushed */\01211 1 8 8 1 91 10 7 16 3 1 1 22 75 0 0 0 1 91 10 7 16 3 1 1 22 75 15 13 2 5 5 3 89 12 9 6 17 4 3 3 23 75 14 4 2 2 2 21 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 47 values pushed */\01211 1 8 8 7 91 10 1 7 7 30 75 0 0 0 1 89 16 1 1 1 22 75 15 13 2 5 5 3 89 12 9 6 17 4 3 3 23 75 14 4 2 2 2 21 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 48 values pushed */\01215 13 2 5 2 3 5 85 11 1 8 8 7 91 10 1 7 7 30 75 0 0 0 1 89 16 1 1 1 22 75 12 9 6 17 4 3 3 2 89 14 4 2 2 2 21 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 48 values pushed */\01215 13 2 5 2 3 5 85 11 1 8 8 7 91 10 1 7 7 30 75 0 0 0 1 89 16 1 1 1 22 75 12 9 6 17 4 3 3 2 89 14 4 2 2 2 24 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 45 values pushed */\01215 13 2 5 2 3 5 85 12 9 6 17 4 3 14 4 2 2 3 2 93 11 1 8 8 7 91 10 1 7 7 30 75 0 0 0 1 89 16 1 1 1 22 0 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 42 values pushed */\0124 4 0 0 43 42 41 40 39 38 37 36 33 32 31 30 25 24 21 20 19 18 13 12 11 10 9 8 4 7 4 7 6 5 0 3 0 3 17 18 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 738;
}
);
leftKerningGroup = f;
note = f_f_i;
rightKerningGroup = i;
},
{
glyphname = f_f_l;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"690 780 LINE",
"580 780 LINE",
"580 0 LINE",
"690 0 LINE"
);
},
{
closed = 1;
nodes = (
"197 0 LINE",
"197 480 LINE",
"337 480 LINE",
"337 0 LINE",
"447 0 LINE",
"447 480 LINE",
"517 480 LINE",
"517 574 LINE",
"447 574 LINE",
"447 598 LINE SMOOTH",
"447 683.333 OFFCURVE",
"493 695 OFFCURVE",
"533 695 CURVE",
"533 792 LINE",
"424.193 792 OFFCURVE",
"337 753.207 OFFCURVE",
"337 606 CURVE SMOOTH",
"337 574 LINE",
"197 574 LINE",
"197 598 LINE SMOOTH",
"197 683.333 OFFCURVE",
"242 695 OFFCURVE",
"286 695 CURVE",
"286 792 LINE",
"174.55 792 OFFCURVE",
"87 754.038 OFFCURVE",
"87 606 CURVE SMOOTH",
"87 574 LINE",
"12 574 LINE",
"12 480 LINE",
"87 480 LINE",
"87 0 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 36 values pushed */\0129 1 6 6 1 91 8 5 14 3 1 1 22 75 13 11 2 3 3 4 89 10 7 2 4 4 23 75 12 2 2 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 40 values pushed */\01214 1 1 1 22 75 9 1 6 6 5 91 8 1 5 5 30 75 13 11 2 3 3 4 89 10 7 2 4 4 23 75 12 2 2 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 38 values pushed */\01210 7 2 4 13 11 2 3 0 4 3 97 14 1 1 1 22 75 9 1 6 6 5 91 8 1 5 5 30 75 12 2 2 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 38 values pushed */\01210 7 2 4 13 11 2 3 0 4 3 97 14 1 1 1 22 75 9 1 6 6 5 91 8 1 5 5 30 75 12 2 2 0 0 24 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 38 values pushed */\01210 7 2 4 13 11 2 3 0 4 3 97 9 1 6 6 5 91 8 1 5 5 30 75 12 2 2 0 0 1 89 14 1 1 1 22 0 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 34 values pushed */\0120 0 39 38 37 36 35 34 33 32 29 28 27 26 21 20 17 16 15 14 9 8 7 6 5 4 0 3 0 3 17 15 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 738;
}
);
leftKerningGroup = f;
note = f_f_l;
rightKerningGroup = d;
},
{
glyphname = f_i;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"267 480 LINE",
"267 574 LINE",
"197 574 LINE",
"197 598 LINE SMOOTH",
"197 683.333 OFFCURVE",
"243 695 OFFCURVE",
"283 695 CURVE",
"283 792 LINE",
"174.193 792 OFFCURVE",
"87 753.207 OFFCURVE",
"87 606 CURVE SMOOTH",
"87 574 LINE",
"12 574 LINE",
"12 480 LINE",
"87 480 LINE",
"87 0 LINE",
"197 0 LINE",
"197 480 LINE"
);
},
{
closed = 1;
nodes = (
"442 780 LINE",
"328 780 LINE",
"328 661 LINE",
"442 661 LINE"
);
},
{
closed = 1;
nodes = (
"440 574 LINE",
"330 574 LINE",
"330 0 LINE",
"440 0 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 45 values pushed */\0120 5 5 4 91 11 8 2 4 4 30 75 0 7 7 4 91 11 8 2 4 4 30 75 2 1 0 0 3 89 12 10 6 3 3 3 23 75 9 1 1 1 21 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 42 values pushed */\0120 5 5 4 91 0 4 4 30 75 0 7 7 8 89 11 1 8 8 22 75 2 1 0 0 3 89 12 10 6 3 3 3 23 75 9 1 1 1 21 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 43 values pushed */\0122 1 0 1 3 0 85 0 5 5 4 91 0 4 4 30 75 0 7 7 8 89 11 1 8 8 22 75 12 10 6 3 3 3 1 89 9 1 1 1 21 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 43 values pushed */\0122 1 0 1 3 0 85 0 5 5 4 91 0 4 4 30 75 0 7 7 8 89 11 1 8 8 22 75 12 10 6 3 3 3 1 89 9 1 1 1 24 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 40 values pushed */\0122 1 0 1 3 0 85 12 10 6 3 3 9 1 1 3 1 93 0 5 5 4 91 0 4 4 30 75 0 7 7 8 89 11 1 8 8 22 7 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 25 values pushed */\01224 24 20 20 24 27 24 27 26 25 20 23 20 23 18 19 17 21 17 17 17 16 13 7 28 \012CALL[ ]	/* CallFunction */";
};
width = 488;
}
);
leftKerningGroup = f;
note = f_i;
rightKerningGroup = i;
},
{
glyphname = f_l;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"267 480 LINE",
"267 574 LINE",
"197 574 LINE",
"197 598 LINE SMOOTH",
"197 683.333 OFFCURVE",
"243 695 OFFCURVE",
"283 695 CURVE",
"283 792 LINE",
"174.193 792 OFFCURVE",
"87 753.207 OFFCURVE",
"87 606 CURVE SMOOTH",
"87 574 LINE",
"12 574 LINE",
"12 480 LINE",
"87 480 LINE",
"87 0 LINE",
"197 0 LINE",
"197 480 LINE"
);
},
{
closed = 1;
nodes = (
"440 780 LINE",
"330 780 LINE",
"330 0 LINE",
"440 0 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 31 values pushed */\0120 5 5 4 91 9 8 2 4 4 30 75 2 1 0 0 3 89 6 1 3 3 23 75 7 1 1 1 21 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 35 values pushed */\0129 1 8 8 22 75 0 5 5 4 91 0 4 4 30 75 2 1 0 0 3 89 6 1 3 3 23 75 7 1 1 1 21 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 33 values pushed */\0126 1 3 2 1 0 1 3 0 97 9 1 8 8 22 75 0 5 5 4 91 0 4 4 30 75 7 1 1 1 21 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 33 values pushed */\0126 1 3 2 1 0 1 3 0 97 9 1 8 8 22 75 0 5 5 4 91 0 4 4 30 75 7 1 1 1 24 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 33 values pushed */\0126 1 3 2 1 0 1 3 0 97 0 5 5 4 91 0 4 4 30 75 7 1 1 1 8 89 9 1 8 8 22 1 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 17 values pushed */\01220 20 20 23 20 23 18 19 17 21 17 17 17 16 10 7 28 \012CALL[ ]	/* CallFunction */";
};
width = 488;
}
);
leftKerningGroup = f;
note = f_l;
rightKerningGroup = d;
},
{
glyphname = i_jacute;
layers = (
{
components = (
{
alignment = -1;
name = iacute;
},
{
alignment = -1;
name = jacute;
transform = "{1, 0, 0, 1, 207, 0}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 407;
}
);
leftKerningGroup = i;
note = i_jacute;
rightKerningGroup = j;
},
{
glyphname = ordfeminine;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"145 394 OFFCURVE",
"119 427 OFFCURVE",
"119 467 CURVE SMOOTH",
"119 503 OFFCURVE",
"145 533 OFFCURVE",
"185 533 CURVE SMOOTH",
"226.333 533 OFFCURVE",
"252 503 OFFCURVE",
"252 467 CURVE SMOOTH",
"252 425.667 OFFCURVE",
"223.667 394 OFFCURVE",
"185 394 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"261 345 LINE",
"355 345 LINE",
"355 616 LINE SMOOTH",
"355 704 OFFCURVE",
"298.333 758 OFFCURVE",
"181 758 CURVE SMOOTH",
"139.667 758 OFFCURVE",
"112.667 754.333 OFFCURVE",
"66 745 CURVE",
"68 657 LINE",
"117.333 666.333 OFFCURVE",
"141.333 670 OFFCURVE",
"168 670 CURVE SMOOTH",
"225.333 671.333 OFFCURVE",
"251 650.333 OFFCURVE",
"251 585 CURVE SMOOTH",
"251 573 LINE",
"228.333 587.667 OFFCURVE",
"196.667 597 OFFCURVE",
"158 597 CURVE SMOOTH",
"67.333 597 OFFCURVE",
"12 536 OFFCURVE",
"12 464 CURVE SMOOTH",
"12 386.667 OFFCURVE",
"68.667 331 OFFCURVE",
"142 331 CURVE SMOOTH",
"195.333 331 OFFCURVE",
"234.333 352.667 OFFCURVE",
"261 378 CURVE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01213 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 18 values pushed */\01233 1 4 5 32 1 3 4 25 1 1 3 13 1 2 0 4 74 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 18 values pushed */\01233 1 4 5 32 1 3 4 25 1 1 3 13 1 6 0 4 74 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 18 values pushed */\01233 1 4 5 32 1 3 4 25 1 1 3 13 1 2 0 4 74 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 18 values pushed */\01233 1 4 5 32 1 3 4 25 1 1 3 13 1 6 0 4 74 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01213 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 29 values pushed */\0120 3 0 1 0 3 1 99 7 1 0 8 6 2 2 0 2 95 0 4 4 5 91 0 5 5 56 4 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 36 values pushed */\0128 1 6 0 2 0 6 2 112 0 3 0 1 0 3 1 99 7 1 0 0 2 0 2 95 0 4 4 5 91 0 5 5 56 4 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 29 values pushed */\0120 3 0 1 0 3 1 99 7 1 0 8 6 2 2 0 2 95 0 4 4 5 91 0 5 5 56 4 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 36 values pushed */\0128 1 6 0 2 0 6 2 112 0 3 0 1 0 3 1 99 7 1 0 0 2 0 2 95 0 4 4 5 91 0 5 5 56 4 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 43 values pushed */\0128 1 6 0 2 0 6 2 112 0 5 0 4 3 5 4 99 0 3 0 1 0 3 1 99 7 1 0 6 2 0 87 7 1 0 0 2 91 0 2 0 2 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 25 values pushed */\01212 12 1 0 12 40 12 40 37 35 30 28 23 21 17 15 7 5 0 11 1 11 9 9 20 \012CALL[ ]	/* CallFunction */";
};
width = 385;
}
);
note = ordfeminine;
unicode = 00AA;
},
{
glyphname = ordmasculine;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"117.803 766 OFFCURVE",
"15 671.815 OFFCURVE",
"15 546 CURVE SMOOTH",
"15 419.859 OFFCURVE",
"118.311 325 OFFCURVE",
"250 325 CURVE SMOOTH",
"382.821 325 OFFCURVE",
"484 419.859 OFFCURVE",
"484 546 CURVE SMOOTH",
"484 671.815 OFFCURVE",
"383.337 766 OFFCURVE",
"250 766 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"322 678 OFFCURVE",
"376 619.333 OFFCURVE",
"376 546 CURVE SMOOTH",
"376 472.667 OFFCURVE",
"322 413 OFFCURVE",
"250 413 CURVE SMOOTH",
"178 413 OFFCURVE",
"123 471.333 OFFCURVE",
"123 546 CURVE SMOOTH",
"123 619.333 OFFCURVE",
"178 678 OFFCURVE",
"250 678 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 20 values pushed */\0120 3 0 1 3 1 95 5 1 2 2 0 91 4 1 0 0 56 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 26 values pushed */\0124 1 0 5 1 2 3 0 2 99 0 3 1 1 3 87 0 3 3 1 91 0 1 3 1 79 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 19 values pushed */\01221 20 1 0 27 25 20 31 21 31 11 9 0 19 1 19 6 9 20 \012CALL[ ]	/* CallFunction */";
};
width = 498;
}
);
note = ordmasculine;
unicode = 00BA;
},
{
glyphname = mu;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"142 -190 LINE",
"142 66 LINE",
"172.667 16.667 OFFCURVE",
"231.667 -15 OFFCURVE",
"297 -15 CURVE SMOOTH",
"361 -15 OFFCURVE",
"420.333 16.667 OFFCURVE",
"451 66 CURVE",
"451 0 LINE",
"547 0 LINE",
"547 574 LINE",
"437 574 LINE",
"437 221 LINE SMOOTH",
"437 133.387 OFFCURVE",
"364.847 82 OFFCURVE",
"296 82 CURVE SMOOTH",
"228.056 82 OFFCURVE",
"156 133.79 OFFCURVE",
"156 221 CURVE SMOOTH",
"156 574 LINE",
"46 574 LINE",
"46 -220 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0122 1 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 593;
}
);
leftKerningGroup = p;
note = mu;
rightKerningGroup = u;
unicode = 03BC;
},
{
glyphname = zero.salt_slash;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"234 770 OFFCURVE",
"165.833 738.5 OFFCURVE",
"118.5 676.5 CURVE SMOOTH",
"71.167 614.5 OFFCURVE",
"42 520.667 OFFCURVE",
"42 398 CURVE SMOOTH",
"42 346 LINE SMOOTH",
"42 224.667 OFFCURVE",
"71.167 131.5 OFFCURVE",
"118.5 69.5 CURVE SMOOTH",
"165.833 7.5 OFFCURVE",
"234 -24 OFFCURVE",
"310 -24 CURVE SMOOTH",
"387.333 -24 OFFCURVE",
"455.167 7.5 OFFCURVE",
"502.5 69.5 CURVE SMOOTH",
"549.833 131.5 OFFCURVE",
"579 224.667 OFFCURVE",
"579 346 CURVE SMOOTH",
"579 398 LINE SMOOTH",
"579 520.667 OFFCURVE",
"549.833 614.5 OFFCURVE",
"502.5 676.5 CURVE SMOOTH",
"455.167 738.5 OFFCURVE",
"387.333 770 OFFCURVE",
"310 770 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"403.333 675 OFFCURVE",
"468 586 OFFCURVE",
"468 398 CURVE SMOOTH",
"468 346 LINE SMOOTH",
"468 271.333 OFFCURVE",
"457.667 212 OFFCURVE",
"439 168 CURVE",
"245 657 LINE",
"263.667 669 OFFCURVE",
"286 675 OFFCURVE",
"310 675 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"220.667 71 OFFCURVE",
"152 159.333 OFFCURVE",
"152 346 CURVE SMOOTH",
"152 398 LINE SMOOTH",
"152 474 OFFCURVE",
"163.333 534 OFFCURVE",
"182 578 CURVE",
"377 89 LINE",
"357 77 OFFCURVE",
"334 71 OFFCURVE",
"310 71 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */\01237 36 26 25 4 3 2 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 24 values pushed */\0125 1 2 2 0 91 4 1 0 0 28 75 6 1 3 3 1 91 0 1 1 29 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 24 values pushed */\0125 1 2 2 0 91 4 1 0 0 22 75 6 1 3 3 1 91 0 1 1 32 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 21 values pushed */\0126 1 3 0 1 3 1 95 5 1 2 2 0 91 4 1 0 0 22 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 28 values pushed */\0124 1 0 5 1 2 3 0 2 99 6 1 3 1 1 3 87 6 1 3 3 1 91 0 1 3 1 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 23 values pushed */\01234 33 23 22 1 0 33 43 34 43 22 32 23 32 12 10 0 21 1 21 7 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 621;
}
);
note = zero.salt_slash;
},
{
glyphname = zero;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"234 770 OFFCURVE",
"165.833 738.5 OFFCURVE",
"118.5 676.5 CURVE SMOOTH",
"71.167 614.5 OFFCURVE",
"42 520.667 OFFCURVE",
"42 398 CURVE SMOOTH",
"42 346 LINE SMOOTH",
"42 224.667 OFFCURVE",
"71.167 131.5 OFFCURVE",
"118.5 69.5 CURVE SMOOTH",
"165.833 7.5 OFFCURVE",
"234 -24 OFFCURVE",
"310 -24 CURVE SMOOTH",
"387.333 -24 OFFCURVE",
"455.167 7.5 OFFCURVE",
"502.5 69.5 CURVE SMOOTH",
"549.833 131.5 OFFCURVE",
"579 224.667 OFFCURVE",
"579 346 CURVE SMOOTH",
"579 398 LINE SMOOTH",
"579 520.667 OFFCURVE",
"549.833 614.5 OFFCURVE",
"502.5 676.5 CURVE SMOOTH",
"455.167 738.5 OFFCURVE",
"387.333 770 OFFCURVE",
"310 770 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"468 159.333 OFFCURVE",
"402 71 OFFCURVE",
"310 71 CURVE SMOOTH",
"220.667 71 OFFCURVE",
"152 159.333 OFFCURVE",
"152 346 CURVE SMOOTH",
"152 398 LINE SMOOTH",
"152 586 OFFCURVE",
"220.667 675 OFFCURVE",
"310 675 CURVE SMOOTH",
"403.333 675 OFFCURVE",
"468 586 OFFCURVE",
"468 398 CURVE SMOOTH",
"468 346 LINE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 22 values pushed */\0120 2 2 0 91 4 1 0 0 28 75 0 3 3 1 91 0 1 1 29 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 22 values pushed */\0120 2 2 0 91 4 1 0 0 22 75 0 3 3 1 91 0 1 1 32 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 19 values pushed */\0120 3 0 1 3 1 95 0 2 2 0 91 4 1 0 0 22 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 25 values pushed */\0124 1 0 0 2 3 0 2 99 0 3 1 1 3 87 0 3 3 1 91 0 1 3 1 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 15 values pushed */\0121 0 34 32 27 25 12 10 0 21 1 21 5 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 621;
}
);
leftKerningGroup = zero;
note = zero;
rightKerningGroup = zero;
unicode = 0030;
},
{
glyphname = one;
lastChange = "2022-06-03 16:52:12 +0000";
layers = (
{
guideLines = (
{
position = "{23, 58}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"283 0 LINE",
"283 746 LINE",
"197 746 LINE",
"69 625 LINE",
"69 483 LINE",
"173 581 LINE",
"173 0 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */\0124 3 2 3 0 1 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 11 values pushed */\0120 1 1 20 75 0 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 11 values pushed */\0120 1 1 0 89 0 0 0 24 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 16 values pushed */\0120 1 0 0 1 85 0 1 1 0 89 0 0 1 0 77 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 5 values pushed */\01220 16 2 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 352;
}
);
leftKerningGroup = one;
note = one;
rightKerningGroup = one;
unicode = 0031;
},
{
glyphname = two;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"507 0 LINE",
"546 94 LINE",
"209 94 LINE",
"266.427 155.844 OFFCURVE",
"368.876 271.251 OFFCURVE",
"397 305 CURVE SMOOTH",
"473 397 OFFCURVE",
"517.333 454 OFFCURVE",
"516 546 CURVE",
"516 671.945 OFFCURVE",
"410.657 770 OFFCURVE",
"267 770 CURVE SMOOTH",
"203 770 OFFCURVE",
"139.667 753.333 OFFCURVE",
"85 720 CURVE",
"85 607 LINE",
"145 659 OFFCURVE",
"200 676 OFFCURVE",
"256 676 CURVE SMOOTH",
"342.667 674.667 OFFCURVE",
"401 610.333 OFFCURVE",
"401 541 CURVE SMOOTH",
"401 479.667 OFFCURVE",
"376.333 435.667 OFFCURVE",
"311 357 CURVE SMOOTH",
"266.309 301.995 OFFCURVE",
"62.381 65.976 OFFCURVE",
"20 13 CURVE",
"25 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */\01217 1 1 2 16 1 3 1 2 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 21 values pushed */\0120 1 1 2 91 0 2 2 28 75 0 3 3 0 89 0 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 21 values pushed */\0120 1 1 2 91 0 2 2 22 75 0 3 3 0 89 0 0 0 24 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 18 values pushed */\0120 3 0 0 3 0 93 0 1 1 2 91 0 2 2 22 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 24 values pushed */\0120 2 0 1 3 2 1 99 0 3 0 0 3 85 0 3 3 0 89 0 0 3 0 77 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 7 values pushed */\01228 37 43 16 4 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 574;
}
);
leftKerningGroup = two;
note = two;
rightKerningGroup = two;
unicode = 0032;
},
{
glyphname = three;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"357.322 -24 OFFCURVE",
"479 75.754 OFFCURVE",
"479 218 CURVE SMOOTH",
"479 314 OFFCURVE",
"418.333 388 OFFCURVE",
"333 420 CURVE",
"394.333 454.667 OFFCURVE",
"435.667 520.667 OFFCURVE",
"437 586 CURVE SMOOTH",
"437 693.821 OFFCURVE",
"333.7 770 OFFCURVE",
"210 770 CURVE SMOOTH",
"154 770 OFFCURVE",
"109 762.333 OFFCURVE",
"77 749 CURVE",
"67 649 LINE",
"111 671.667 OFFCURVE",
"155.667 676 OFFCURVE",
"193 676 CURVE SMOOTH",
"270.333 676 OFFCURVE",
"327 635.333 OFFCURVE",
"327 574 CURVE SMOOTH",
"327 511.333 OFFCURVE",
"266 458 OFFCURVE",
"182 458 CURVE SMOOTH",
"131 458 LINE",
"128 364 LINE",
"182 364 LINE SMOOTH",
"290 364 OFFCURVE",
"369 308.667 OFFCURVE",
"369 222 CURVE SMOOTH",
"369 134 OFFCURVE",
"286.667 69.667 OFFCURVE",
"168 71 CURVE SMOOTH",
"136.012 71 OFFCURVE",
"56.432 89.712 OFFCURVE",
"20 114 CURVE",
"20 13 LINE",
"60.235 -12.147 OFFCURVE",
"151.47 -24 OFFCURVE",
"194 -24 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */\01229 1 3 4 41 1 2 3 6 1 1 2 5 1 0 1 4 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 30 values pushed */\0120 3 0 2 1 3 2 99 0 4 4 5 91 0 5 5 28 75 0 1 1 0 91 6 1 0 0 29 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 30 values pushed */\0120 3 0 2 1 3 2 99 0 4 4 5 91 0 5 5 22 75 0 1 1 0 91 6 1 0 0 32 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 27 values pushed */\0120 3 0 2 1 3 2 99 0 1 6 1 0 1 0 95 0 4 4 5 91 0 5 5 22 4 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 33 values pushed */\0120 5 0 4 3 5 4 99 0 3 0 2 1 3 2 99 0 1 0 0 1 87 0 1 1 0 91 6 1 0 1 0 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 19 values pushed */\0121 0 34 32 27 25 21 19 18 16 12 10 0 48 1 48 7 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 507;
}
);
leftKerningGroup = three;
note = three;
rightKerningGroup = three;
unicode = 0033;
},
{
glyphname = four;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"392 241 LINE",
"176 241 LINE",
"392 561 LINE"
);
},
{
closed = 1;
nodes = (
"572 148 LINE",
"599 241 LINE",
"503 241 LINE",
"503 746 LINE",
"413 746 LINE",
"19 165 LINE",
"26 148 LINE",
"392 148 LINE",
"392 0 LINE",
"503 0 LINE",
"503 148 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\0121 1 0 4 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 22 values pushed */\0125 6 2 0 3 1 1 2 0 1 97 0 4 4 20 75 0 2 2 21 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 22 values pushed */\0125 6 2 0 3 1 1 2 0 1 97 0 4 4 2 89 0 2 2 24 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 27 values pushed */\0120 4 0 2 4 85 5 6 2 0 3 1 1 2 0 1 97 0 4 4 2 89 0 2 4 2 77 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 19 values pushed */\0120 0 13 12 11 10 8 7 6 5 4 3 0 2 0 2 7 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 620;
}
);
leftKerningGroup = four;
note = four;
rightKerningGroup = four;
unicode = 0034;
},
{
glyphname = five;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"305.333 -24 OFFCURVE",
"384.5 4.833 OFFCURVE",
"438.5 53.5 CURVE SMOOTH",
"492.5 102.167 OFFCURVE",
"524 170.333 OFFCURVE",
"524 249 CURVE SMOOTH",
"524 396.179 OFFCURVE",
"415.509 496 OFFCURVE",
"254 496 CURVE SMOOTH",
"235.333 496 OFFCURVE",
"214.667 494.333 OFFCURVE",
"196 493 CURVE",
"240 652 LINE",
"522 652 LINE",
"552 746 LINE",
"165 746 LINE",
"71 374 LINE",
"117.667 391.333 OFFCURVE",
"166 402 OFFCURVE",
"222 402 CURVE SMOOTH",
"334 402 OFFCURVE",
"410 334.333 OFFCURVE",
"410 249 CURVE SMOOTH",
"410 141.748 OFFCURVE",
"322.073 70 OFFCURVE",
"210 70 CURVE SMOOTH",
"148.667 70 OFFCURVE",
"81.333 89.333 OFFCURVE",
"28 120 CURVE",
"28 22 LINE",
"84 -10 OFFCURVE",
"157.333 -24 OFFCURVE",
"212 -24 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */\01223 1 2 5 18 4 2 1 2 3 1 0 1 3 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 30 values pushed */\0120 5 0 2 1 5 2 99 0 4 4 3 89 0 3 3 20 75 0 1 1 0 91 6 1 0 0 29 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 28 values pushed */\0120 3 0 4 5 3 4 97 0 5 0 2 1 5 2 99 0 1 1 0 91 6 1 0 0 32 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 33 values pushed */\0120 3 0 4 5 3 4 97 0 5 0 2 1 5 2 99 0 1 0 0 1 87 0 1 1 0 91 6 1 0 1 0 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 19 values pushed */\0121 0 27 24 22 21 20 19 16 14 8 6 0 35 1 35 7 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 581;
}
);
leftKerningGroup = five;
note = five;
rightKerningGroup = five;
unicode = 0035;
},
{
glyphname = six;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"453.01 -24 OFFCURVE",
"572 88.004 OFFCURVE",
"572 231 CURVE SMOOTH",
"572 367.38 OFFCURVE",
"463.734 475 OFFCURVE",
"327 475 CURVE SMOOTH",
"284.333 475 OFFCURVE",
"245.333 463.667 OFFCURVE",
"212 445 CURVE",
"212 445 LINE",
"269.333 535.667 OFFCURVE",
"351.333 638 OFFCURVE",
"442 746 CURVE",
"305 746 LINE",
"238.333 662 OFFCURVE",
"167.167 572.833 OFFCURVE",
"114.5 485.5 CURVE SMOOTH",
"61.833 398.167 OFFCURVE",
"25 312 OFFCURVE",
"25 232 CURVE SMOOTH",
"25 74.668 OFFCURVE",
"147.583 -24 OFFCURVE",
"299 -24 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"388.333 387 OFFCURVE",
"462 316 OFFCURVE",
"462 228 CURVE SMOOTH",
"462 142.667 OFFCURVE",
"388.333 70 OFFCURVE",
"299 70 CURVE SMOOTH",
"210.296 70 OFFCURVE",
"135 141.556 OFFCURVE",
"135 228 CURVE SMOOTH",
"135 316.205 OFFCURVE",
"209.017 387 OFFCURVE",
"299 387 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\01214 1 3 2 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 26 values pushed */\0120 2 6 1 3 4 2 3 100 0 1 1 20 75 0 4 4 0 91 5 1 0 0 29 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 26 values pushed */\0120 1 2 1 114 0 2 6 1 3 4 2 3 100 0 4 4 0 91 5 1 0 0 32 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 31 values pushed */\0120 1 2 1 114 0 2 6 1 3 4 2 3 100 0 4 0 0 4 87 0 4 4 0 91 5 1 0 4 0 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 21 values pushed */\01229 28 1 0 39 37 28 43 29 43 19 17 11 10 0 27 1 27 7 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 592;
}
);
leftKerningGroup = six;
note = six;
rightKerningGroup = six;
unicode = 0036;
},
{
glyphname = seven;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"226 0 LINE",
"542 746 LINE",
"54 746 LINE",
"22 652 LINE",
"384 652 LINE",
"104 0 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 16 values pushed */\0120 1 1 2 89 0 2 2 20 75 0 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 14 values pushed */\0120 2 0 1 0 2 1 97 0 0 0 24 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 21 values pushed */\0120 0 1 0 115 0 2 1 1 2 85 0 2 2 1 89 0 1 2 1 77 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 6 values pushed */\01217 17 16 3 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 552;
}
);
leftKerningGroup = seven;
note = seven;
rightKerningGroup = seven;
unicode = 0037;
},
{
glyphname = eight;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"445.484 -24 OFFCURVE",
"562 75.711 OFFCURVE",
"562 213 CURVE SMOOTH",
"562 299.667 OFFCURVE",
"511.333 373.667 OFFCURVE",
"430 411 CURVE",
"488.667 445.667 OFFCURVE",
"523 502.667 OFFCURVE",
"523 568 CURVE SMOOTH",
"523 683.178 OFFCURVE",
"423.397 770 OFFCURVE",
"289 770 CURVE SMOOTH",
"157.084 770 OFFCURVE",
"57 682.744 OFFCURVE",
"57 568 CURVE SMOOTH",
"57 502.667 OFFCURVE",
"92.667 445.333 OFFCURVE",
"150 412 CURVE",
"68.667 373.333 OFFCURVE",
"18 299.667 OFFCURVE",
"18 213 CURVE SMOOTH",
"18 75.732 OFFCURVE",
"133.733 -24 OFFCURVE",
"289 -24 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"221 445 OFFCURVE",
"165 496.667 OFFCURVE",
"165 562 CURVE SMOOTH",
"165 627.333 OFFCURVE",
"221 676 OFFCURVE",
"289 676 CURVE SMOOTH",
"357 676 OFFCURVE",
"414 627.333 OFFCURVE",
"414 562 CURVE SMOOTH",
"414 496.667 OFFCURVE",
"355.667 445 OFFCURVE",
"289 445 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"201.741 70 OFFCURVE",
"127 135.122 OFFCURVE",
"127 219 CURVE SMOOTH",
"127 304.05 OFFCURVE",
"201.576 366 OFFCURVE",
"289 366 CURVE SMOOTH",
"381 366 OFFCURVE",
"454 303 OFFCURVE",
"454 219 CURVE SMOOTH",
"454 135 OFFCURVE",
"381 70 OFFCURVE",
"289 70 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */\01224 8 2 5 2 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 32 values pushed */\0127 1 2 0 5 4 2 5 99 0 3 3 1 91 0 1 1 28 75 8 1 4 4 0 91 6 1 0 0 29 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 32 values pushed */\0127 1 2 0 5 4 2 5 99 0 3 3 1 91 0 1 1 22 75 8 1 4 4 0 91 6 1 0 0 32 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 29 values pushed */\0127 1 2 0 5 4 2 5 99 8 1 4 6 1 0 4 0 95 0 3 3 1 91 0 1 1 22 3 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 36 values pushed */\0120 1 0 3 2 1 3 99 7 1 2 0 5 4 2 5 99 8 1 4 0 0 4 87 8 1 4 4 0 91 6 1 0 4 0 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 27 values pushed */\01245 44 33 32 1 0 51 49 44 59 45 59 39 37 32 43 33 43 17 15 0 31 1 31 9 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 581;
}
);
leftKerningGroup = eight;
note = eight;
rightKerningGroup = eight;
unicode = 0038;
},
{
glyphname = nine;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"353.667 84 OFFCURVE",
"424.833 173.167 OFFCURVE",
"477.5 260.5 CURVE SMOOTH",
"530.167 347.833 OFFCURVE",
"567 434 OFFCURVE",
"567 514 CURVE SMOOTH",
"567 671.762 OFFCURVE",
"446.986 770 OFFCURVE",
"294 770 CURVE SMOOTH",
"139.99 770 OFFCURVE",
"21 657.996 OFFCURVE",
"21 515 CURVE SMOOTH",
"21 379.115 OFFCURVE",
"129.115 271 OFFCURVE",
"265 271 CURVE SMOOTH",
"307.667 271 OFFCURVE",
"346.667 282.333 OFFCURVE",
"380 301 CURVE",
"380 301 LINE",
"322.667 210.333 OFFCURVE",
"240.333 108 OFFCURVE",
"151 0 CURVE",
"287 0 LINE"
);
},
{
closed = 1;
nodes = (
"203.333 359 OFFCURVE",
"131 430 OFFCURVE",
"131 518 CURVE SMOOTH",
"131 603.333 OFFCURVE",
"203.333 676 OFFCURVE",
"294 676 CURVE SMOOTH",
"382.346 676 OFFCURVE",
"457 604.931 OFFCURVE",
"457 518 CURVE SMOOTH",
"457 429.307 OFFCURVE",
"383.63 359 OFFCURVE",
"294 359 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\0124 1 1 3 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 25 values pushed */\0125 1 3 0 1 0 3 1 99 0 4 4 2 91 0 2 2 28 75 0 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 25 values pushed */\0125 1 3 0 1 0 3 1 99 0 4 4 2 91 0 2 2 22 75 0 0 0 24 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 25 values pushed */\0120 0 1 0 115 5 1 3 0 1 0 3 1 99 0 4 4 2 91 0 2 2 22 4 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 31 values pushed */\0120 0 1 0 115 0 2 0 4 3 2 4 99 5 1 3 1 1 3 87 5 1 3 3 1 91 0 1 3 1 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\01229 28 39 37 28 43 29 43 40 38 16 6 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 592;
}
);
leftKerningGroup = nine;
note = nine;
rightKerningGroup = nine;
unicode = 0039;
},
{
glyphname = zero.sinf;
layers = (
{
components = (
{
alignment = -1;
name = zero.dnom;
transform = "{1, 0, 0, 1, 0, -200}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 405;
}
);
note = zero.sinf;
},
{
glyphname = one.sinf;
layers = (
{
components = (
{
alignment = -1;
name = one.dnom;
transform = "{1, 0, 0, 1, 0, -200}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 235;
}
);
note = one.sinf;
},
{
glyphname = two.sinf;
layers = (
{
components = (
{
alignment = -1;
name = two.dnom;
transform = "{1, 0, 0, 1, 0, -200}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 361;
}
);
note = two.sinf;
},
{
glyphname = three.sinf;
layers = (
{
components = (
{
alignment = -1;
name = three.dnom;
transform = "{1, 0, 0, 1, 0, -200}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 322;
}
);
note = three.sinf;
},
{
glyphname = four.sinf;
layers = (
{
components = (
{
alignment = -1;
name = four.dnom;
transform = "{1, 0, 0, 1, 0, -200}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 389;
}
);
note = four.sinf;
},
{
glyphname = five.sinf;
layers = (
{
components = (
{
alignment = -1;
name = five.dnom;
transform = "{1, 0, 0, 1, 0, -200}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 366;
}
);
note = five.sinf;
},
{
glyphname = six.sinf;
layers = (
{
components = (
{
alignment = -1;
name = six.dnom;
transform = "{1, 0, 0, 1, 0, -200}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 378;
}
);
note = six.sinf;
},
{
glyphname = seven.sinf;
layers = (
{
components = (
{
alignment = -1;
name = seven.dnom;
transform = "{1, 0, 0, 1, 0, -200}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 355;
}
);
note = seven.sinf;
},
{
glyphname = eight.sinf;
layers = (
{
components = (
{
alignment = -1;
name = eight.dnom;
transform = "{1, 0, 0, 1, 0, -200}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 366;
}
);
note = eight.sinf;
},
{
glyphname = nine.sinf;
layers = (
{
components = (
{
alignment = -1;
name = nine.dnom;
transform = "{1, 0, 0, 1, 0, -200}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 378;
}
);
note = nine.sinf;
},
{
glyphname = zero.dnom;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"101.667 482 OFFCURVE",
"24 403.667 OFFCURVE",
"24 249 CURVE SMOOTH",
"24 217 LINE SMOOTH",
"24 65 OFFCURVE",
"101.667 -15 OFFCURVE",
"203 -15 CURVE SMOOTH",
"304.333 -15 OFFCURVE",
"381 65 OFFCURVE",
"381 217 CURVE SMOOTH",
"381 249 LINE SMOOTH",
"381 403.667 OFFCURVE",
"304.333 482 OFFCURVE",
"203 482 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"293 110.333 OFFCURVE",
"255 60 OFFCURVE",
"203 60 CURVE SMOOTH",
"151 60 OFFCURVE",
"112 110.333 OFFCURVE",
"112 217 CURVE SMOOTH",
"112 249 LINE SMOOTH",
"112 357 OFFCURVE",
"151 407 OFFCURVE",
"203 407 CURVE SMOOTH",
"256.333 407 OFFCURVE",
"293 357 OFFCURVE",
"293 249 CURVE SMOOTH",
"293 217 LINE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 20 values pushed */\0124 1 0 0 2 3 0 2 99 0 3 3 1 91 0 1 1 32 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 25 values pushed */\0124 1 0 0 2 3 0 2 99 0 3 1 1 3 87 0 3 3 1 91 0 1 3 1 79 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 15 values pushed */\0121 0 26 24 19 17 8 6 0 13 1 13 5 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 405;
}
);
note = zero.dnom;
},
{
glyphname = one.dnom;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"196 0 LINE",
"196 467 LINE",
"127 467 LINE",
"21 365 LINE",
"21 252 LINE",
"108 339 LINE",
"108 0 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */\0124 3 2 3 0 1 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 11 values pushed */\0120 1 1 0 89 0 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 11 values pushed */\0120 1 1 0 89 0 0 0 24 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 16 values pushed */\0120 1 0 0 1 85 0 1 1 0 89 0 0 1 0 77 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 5 values pushed */\01220 16 2 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 235;
}
);
note = one.dnom;
},
{
glyphname = two.dnom;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"321 0 LINE",
"351 74 LINE",
"151 74 LINE",
"193.667 122 OFFCURVE",
"247.333 184.333 OFFCURVE",
"266 207 CURVE SMOOTH",
"295.333 244.333 OFFCURVE",
"327.667 273.667 OFFCURVE",
"329 339 CURVE SMOOTH",
"329 417.667 OFFCURVE",
"262.667 480.667 OFFCURVE",
"164 482 CURVE SMOOTH",
"125.333 482 OFFCURVE",
"84.667 473.667 OFFCURVE",
"50 455 CURVE",
"49 367 LINE",
"86.333 396.333 OFFCURVE",
"119.667 408 OFFCURVE",
"153 408 CURVE SMOOTH",
"203.667 408 OFFCURVE",
"237 372.667 OFFCURVE",
"237 334 CURVE SMOOTH",
"237 299.333 OFFCURVE",
"222.333 280.333 OFFCURVE",
"197 247 CURVE SMOOTH",
"175.128 217.838 OFFCURVE",
"40.894 53.873 OFFCURVE",
"6 12 CURVE",
"12 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */\01217 1 1 2 16 1 3 1 2 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 19 values pushed */\0120 2 0 1 3 2 1 99 0 3 3 0 89 0 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 19 values pushed */\0120 2 0 1 3 2 1 99 0 3 3 0 89 0 0 0 24 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 24 values pushed */\0120 2 0 1 3 2 1 99 0 3 0 0 3 85 0 3 3 0 89 0 0 3 0 77 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 7 values pushed */\01224 37 43 16 4 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 361;
}
);
note = two.dnom;
},
{
glyphname = three.dnom;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"235 -16.333 OFFCURVE",
"309 49.333 OFFCURVE",
"309 136 CURVE SMOOTH",
"309 193.333 OFFCURVE",
"273 239.667 OFFCURVE",
"221 261 CURVE",
"258.333 282.333 OFFCURVE",
"283.667 323.667 OFFCURVE",
"285 365 CURVE SMOOTH",
"285 431.667 OFFCURVE",
"219.333 483.333 OFFCURVE",
"134 482 CURVE SMOOTH",
"92.667 482 OFFCURVE",
"64.333 478 OFFCURVE",
"43 470 CURVE",
"37 391 LINE",
"63.667 404.333 OFFCURVE",
"96.667 407 OFFCURVE",
"118 407 CURVE SMOOTH",
"164.667 407 OFFCURVE",
"197 386.333 OFFCURVE",
"197 353 CURVE SMOOTH",
"197 317 OFFCURVE",
"161.333 290 OFFCURVE",
"112 290 CURVE SMOOTH",
"82 290 LINE",
"79 216 LINE",
"112 216 LINE SMOOTH",
"176 216 OFFCURVE",
"222 186.667 OFFCURVE",
"222 140 CURVE SMOOTH",
"222 90.667 OFFCURVE",
"174 58.667 OFFCURVE",
"102 60 CURVE SMOOTH",
"82 60 OFFCURVE",
"31.333 65.667 OFFCURVE",
"10 83 CURVE",
"10 8 LINE",
"39.333 -9.333 OFFCURVE",
"97.667 -15 OFFCURVE",
"127 -15 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */\01225 1 3 4 35 1 2 3 4 1 1 2 3 1 0 1 4 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 28 values pushed */\0120 5 0 4 3 5 4 99 0 3 0 2 1 3 2 99 0 1 1 0 91 6 1 0 0 32 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 33 values pushed */\0120 5 0 4 3 5 4 99 0 3 0 2 1 3 2 99 0 1 0 0 1 87 0 1 1 0 91 6 1 0 1 0 79 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 19 values pushed */\0121 0 30 28 23 21 17 15 14 12 8 6 0 40 1 40 7 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 322;
}
);
note = three.dnom;
},
{
glyphname = four.dnom;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"239 159 LINE",
"126 159 LINE",
"239 324 LINE"
);
},
{
closed = 1;
nodes = (
"364 85 LINE",
"385 159 LINE",
"327 159 LINE",
"327 467 LINE",
"256 467 LINE",
"4 101 LINE",
"10 85 LINE",
"239 85 LINE",
"239 0 LINE",
"327 0 LINE",
"327 85 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\0121 1 0 4 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 22 values pushed */\0125 6 2 0 3 1 1 2 0 1 97 0 4 4 2 89 0 2 2 21 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 22 values pushed */\0125 6 2 0 3 1 1 2 0 1 97 0 4 4 2 89 0 2 2 24 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 27 values pushed */\0120 4 0 2 4 85 5 6 2 0 3 1 1 2 0 1 97 0 4 4 2 89 0 2 4 2 77 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 19 values pushed */\0120 0 13 12 11 10 8 7 6 5 4 3 0 2 0 2 7 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 389;
}
);
note = four.dnom;
},
{
glyphname = five.dnom;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"257 -15 OFFCURVE",
"336 58.667 OFFCURVE",
"336 156 CURVE SMOOTH",
"336 246.667 OFFCURVE",
"270.333 311 OFFCURVE",
"161 311 CURVE SMOOTH",
"156.333 311 OFFCURVE",
"151.833 311 OFFCURVE",
"147.5 311 CURVE SMOOTH",
"143.167 311 OFFCURVE",
"138.667 310.667 OFFCURVE",
"134 310 CURVE",
"157 393 LINE",
"331 393 LINE",
"354 467 LINE",
"99 467 LINE",
"38 222 LINE",
"66 231.333 OFFCURVE",
"97.667 237 OFFCURVE",
"131 237 CURVE SMOOTH",
"201.667 237 OFFCURVE",
"245 201.333 OFFCURVE",
"245 156 CURVE SMOOTH",
"245 97.333 OFFCURVE",
"194.667 59 OFFCURVE",
"132 59 CURVE SMOOTH",
"88 59 OFFCURVE",
"46.333 69.667 OFFCURVE",
"13 91 CURVE",
"13 13 LINE",
"49 -7 OFFCURVE",
"98.333 -15 OFFCURVE",
"133 -15 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */\01216 4 2 1 2 3 1 0 1 2 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 28 values pushed */\0120 3 0 4 5 3 4 97 0 5 0 2 1 5 2 99 0 1 1 0 91 6 1 0 0 32 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 33 values pushed */\0120 3 0 4 5 3 4 97 0 5 0 2 1 5 2 99 0 1 0 0 1 87 0 1 1 0 91 6 1 0 1 0 79 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 19 values pushed */\0121 0 25 21 20 19 18 17 14 12 8 6 0 29 1 29 7 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 366;
}
);
note = five.dnom;
},
{
glyphname = six.dnom;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"295 -15 OFFCURVE",
"370 59.333 OFFCURVE",
"370 150 CURVE SMOOTH",
"370 235.333 OFFCURVE",
"302 304 OFFCURVE",
"218 304 CURVE SMOOTH",
"195.333 304 OFFCURVE",
"172.667 299.333 OFFCURVE",
"154 290 CURVE",
"191.333 344.667 OFFCURVE",
"242.667 405.667 OFFCURVE",
"296 467 CURVE",
"188 467 LINE",
"107.895 371.876 OFFCURVE",
"12 252.027 OFFCURVE",
"12 150 CURVE SMOOTH",
"12 47.333 OFFCURVE",
"91 -15 OFFCURVE",
"191 -15 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"240.333 236 OFFCURVE",
"282 196.333 OFFCURVE",
"282 147 CURVE SMOOTH",
"282 99 OFFCURVE",
"240.333 59 OFFCURVE",
"191 59 CURVE SMOOTH",
"141.667 59 OFFCURVE",
"99 99 OFFCURVE",
"99 147 CURVE SMOOTH",
"99 196.333 OFFCURVE",
"141.667 236 OFFCURVE",
"191 236 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\01212 1 3 2 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 26 values pushed */\0120 1 2 1 114 0 2 6 1 3 4 2 3 100 0 4 4 0 91 5 1 0 0 32 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 31 values pushed */\0120 1 2 1 114 0 2 6 1 3 4 2 3 100 0 4 0 0 4 87 0 4 4 0 91 5 1 0 4 0 79 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 21 values pushed */\01222 21 1 0 28 26 21 32 22 32 16 14 9 8 0 20 1 20 7 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 378;
}
);
note = six.dnom;
},
{
glyphname = seven.dnom;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"154 0 LINE",
"354 467 LINE",
"34 467 LINE",
"11 393 LINE",
"228 393 LINE",
"57 0 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 14 values pushed */\0120 2 0 1 0 2 1 97 0 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 14 values pushed */\0120 2 0 1 0 2 1 97 0 0 0 24 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 21 values pushed */\0120 0 1 0 115 0 2 1 1 2 85 0 2 2 1 89 0 1 2 1 77 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 6 values pushed */\01217 17 16 3 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 355;
}
);
note = seven.dnom;
},
{
glyphname = eight.dnom;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"288.333 -15 OFFCURVE",
"359 50.333 OFFCURVE",
"359 137 CURVE SMOOTH",
"359 190.333 OFFCURVE",
"329.333 233 OFFCURVE",
"280 257 CURVE",
"314.667 278.333 OFFCURVE",
"334 312.667 OFFCURVE",
"334 354 CURVE SMOOTH",
"334 423.333 OFFCURVE",
"277.667 482 OFFCURVE",
"183 482 CURVE SMOOTH",
"91 482 OFFCURVE",
"32 423.333 OFFCURVE",
"32 354 CURVE SMOOTH",
"32 312.667 OFFCURVE",
"52.667 278.333 OFFCURVE",
"86 257 CURVE",
"36.667 233 OFFCURVE",
"8 190.333 OFFCURVE",
"8 137 CURVE SMOOTH",
"8 50.333 OFFCURVE",
"76.333 -15 OFFCURVE",
"183 -15 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"145.667 282 OFFCURVE",
"116 311.667 OFFCURVE",
"116 349 CURVE SMOOTH",
"116 382.333 OFFCURVE",
"145.667 408 OFFCURVE",
"183 408 CURVE SMOOTH",
"220.333 408 OFFCURVE",
"250 382.333 OFFCURVE",
"250 349 CURVE SMOOTH",
"250 310.333 OFFCURVE",
"219 282 OFFCURVE",
"183 282 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"133.667 59 OFFCURVE",
"93 93.667 OFFCURVE",
"93 143 CURVE SMOOTH",
"93 188.333 OFFCURVE",
"133.667 222 OFFCURVE",
"183 222 CURVE SMOOTH",
"233.667 222 OFFCURVE",
"273 188.333 OFFCURVE",
"273 143 CURVE SMOOTH",
"273 93.667 OFFCURVE",
"233.667 59 OFFCURVE",
"183 59 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */\01218 6 2 5 2 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 30 values pushed */\0120 1 0 3 2 1 3 99 7 1 2 0 5 4 2 5 99 8 1 4 4 0 91 6 1 0 0 32 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 36 values pushed */\0120 1 0 3 2 1 3 99 7 1 2 0 5 4 2 5 99 8 1 4 0 0 4 87 8 1 4 4 0 91 6 1 0 4 0 79 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 27 values pushed */\01237 36 25 24 1 0 43 41 36 47 37 47 31 29 24 35 25 35 13 11 0 23 1 23 9 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 366;
}
);
note = eight.dnom;
},
{
glyphname = nine.dnom;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"271.235 97.352 OFFCURVE",
"367 210.972 OFFCURVE",
"367 317 CURVE SMOOTH",
"367 418.756 OFFCURVE",
"288.902 481 OFFCURVE",
"188 481 CURVE SMOOTH",
"84 481 OFFCURVE",
"9 406.667 OFFCURVE",
"9 316 CURVE SMOOTH",
"9 230.667 OFFCURVE",
"75.667 162 OFFCURVE",
"161 162 CURVE SMOOTH",
"183.667 162 OFFCURVE",
"206.667 166.667 OFFCURVE",
"224 176 CURVE",
"188 121.333 OFFCURVE",
"136.333 60.333 OFFCURVE",
"83 -1 CURVE",
"191 -1 LINE"
);
},
{
closed = 1;
nodes = (
"137.333 230 OFFCURVE",
"96 269.667 OFFCURVE",
"96 319 CURVE SMOOTH",
"96 367 OFFCURVE",
"137.333 407 OFFCURVE",
"188 407 CURVE SMOOTH",
"237.333 407 OFFCURVE",
"279 367 OFFCURVE",
"279 319 CURVE SMOOTH",
"279 269.667 OFFCURVE",
"237.333 230 OFFCURVE",
"188 230 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\0124 1 1 3 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 23 values pushed */\0120 2 0 4 3 2 4 99 5 1 3 0 1 0 3 1 99 0 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 23 values pushed */\0120 2 0 4 3 2 4 99 5 1 3 0 1 0 3 1 99 0 0 0 24 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 31 values pushed */\0120 0 1 0 115 0 2 0 4 3 2 4 99 5 1 3 1 1 3 87 5 1 3 3 1 91 0 1 3 1 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\01224 23 30 28 23 34 24 34 36 37 16 6 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 378;
}
);
note = nine.dnom;
},
{
glyphname = zero.numr;
layers = (
{
components = (
{
alignment = -1;
name = zero.dnom;
transform = "{1, 0, 0, 1, 0, 279}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 405;
}
);
note = zero.numr;
},
{
glyphname = one.numr;
layers = (
{
components = (
{
alignment = -1;
name = one.dnom;
transform = "{1, 0, 0, 1, 0, 279}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 235;
}
);
note = one.numr;
},
{
glyphname = two.numr;
layers = (
{
components = (
{
alignment = -1;
name = two.dnom;
transform = "{1, 0, 0, 1, 0, 279}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 361;
}
);
note = two.numr;
},
{
glyphname = three.numr;
layers = (
{
components = (
{
alignment = -1;
name = three.dnom;
transform = "{1, 0, 0, 1, 0, 279}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 322;
}
);
note = three.numr;
},
{
glyphname = four.numr;
layers = (
{
components = (
{
alignment = -1;
name = four.dnom;
transform = "{1, 0, 0, 1, 0, 279}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 389;
}
);
note = four.numr;
},
{
glyphname = five.numr;
layers = (
{
components = (
{
alignment = -1;
name = five.dnom;
transform = "{1, 0, 0, 1, 0, 279}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 366;
}
);
note = five.numr;
},
{
glyphname = six.numr;
layers = (
{
components = (
{
alignment = -1;
name = six.dnom;
transform = "{1, 0, 0, 1, 0, 279}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 378;
}
);
note = six.numr;
},
{
glyphname = seven.numr;
layers = (
{
components = (
{
alignment = -1;
name = seven.dnom;
transform = "{1, 0, 0, 1, 0, 279}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 355;
}
);
note = seven.numr;
},
{
glyphname = eight.numr;
layers = (
{
components = (
{
alignment = -1;
name = eight.dnom;
transform = "{1, 0, 0, 1, 0, 279}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 366;
}
);
note = eight.numr;
},
{
glyphname = nine.numr;
layers = (
{
components = (
{
alignment = -1;
name = nine.dnom;
transform = "{1, 0, 0, 1, 0, 279}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 378;
}
);
note = nine.numr;
},
{
glyphname = zero.sups;
layers = (
{
components = (
{
alignment = -1;
name = zero.dnom;
transform = "{1, 0, 0, 1, 20, 279}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 445;
}
);
note = zero.sups;
},
{
glyphname = one.sups;
layers = (
{
components = (
{
alignment = -1;
name = one.dnom;
transform = "{1, 0, 0, 1, 20, 279}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 275;
}
);
note = one.sups;
},
{
glyphname = two.sups;
layers = (
{
components = (
{
alignment = -1;
name = two.dnom;
transform = "{1, 0, 0, 1, 20, 279}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 401;
}
);
note = two.sups;
},
{
glyphname = three.sups;
layers = (
{
components = (
{
alignment = -1;
name = three.dnom;
transform = "{1, 0, 0, 1, 20, 279}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 362;
}
);
note = three.sups;
},
{
glyphname = four.sups;
layers = (
{
components = (
{
alignment = -1;
name = four.dnom;
transform = "{1, 0, 0, 1, 20, 279}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 429;
}
);
note = four.sups;
},
{
glyphname = five.sups;
layers = (
{
components = (
{
alignment = -1;
name = five.dnom;
transform = "{1, 0, 0, 1, 20, 279}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 406;
}
);
note = five.sups;
},
{
glyphname = six.sups;
layers = (
{
components = (
{
alignment = -1;
name = six.dnom;
transform = "{1, 0, 0, 1, 20, 279}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 418;
}
);
note = six.sups;
},
{
glyphname = seven.sups;
layers = (
{
components = (
{
alignment = -1;
name = seven.dnom;
transform = "{1, 0, 0, 1, 20, 279}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 395;
}
);
note = seven.sups;
},
{
glyphname = eight.sups;
layers = (
{
components = (
{
alignment = -1;
name = eight.dnom;
transform = "{1, 0, 0, 1, 20, 279}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 406;
}
);
note = eight.sups;
},
{
glyphname = nine.sups;
layers = (
{
components = (
{
alignment = -1;
name = nine.dnom;
transform = "{1, 0, 0, 1, 20, 279}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 418;
}
);
note = nine.sups;
},
{
glyphname = fraction;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"307 746 LINE",
"-138 0 LINE",
"-41 0 LINE",
"406 746 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 11 values pushed */\0120 0 0 20 75 0 1 1 21 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 11 values pushed */\0120 0 1 0 114 0 1 1 24 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 9 values pushed */\0120 0 1 0 114 0 1 1 105 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 5 values pushed */\01217 16 2 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 267;
}
);
note = fraction;
unicode = 2044;
},
{
glyphname = onehalf;
layers = (
{
components = (
{
alignment = -1;
name = one.dnom;
transform = "{1, 0, 0, 1, 0, 279}";
},
{
alignment = -1;
name = fraction;
transform = "{1, 0, 0, 1, 235, 0}";
},
{
alignment = -1;
name = two.dnom;
transform = "{1, 0, 0, 1, 479, 0}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 840;
}
);
note = onehalf;
unicode = 00BD;
},
{
glyphname = onequarter;
layers = (
{
components = (
{
alignment = -1;
name = one.dnom;
transform = "{1, 0, 0, 1, 0, 279}";
},
{
alignment = -1;
name = fraction;
transform = "{1, 0, 0, 1, 235, 0}";
},
{
alignment = -1;
name = four.dnom;
transform = "{1, 0, 0, 1, 372, 0}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 761;
}
);
note = onequarter;
unicode = 00BC;
},
{
glyphname = threequarters;
layers = (
{
components = (
{
alignment = -1;
name = three.dnom;
transform = "{1, 0, 0, 1, 0, 279}";
},
{
alignment = -1;
name = fraction;
transform = "{1, 0, 0, 1, 310, 0}";
},
{
alignment = -1;
name = four.dnom;
transform = "{1, 0, 0, 1, 448, 0}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 837;
}
);
note = threequarters;
unicode = 00BE;
},
{
glyphname = period;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"57 132 LINE",
"57 0 LINE",
"189 0 LINE",
"189 132 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 11 values pushed */\0120 0 0 1 89 0 1 1 21 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 11 values pushed */\0120 0 0 1 89 0 1 1 24 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 16 values pushed */\0120 0 1 1 0 85 0 0 0 1 89 0 1 0 1 77 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 5 values pushed */\01217 16 2 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 246;
}
);
leftKerningGroup = period;
note = period;
rightKerningGroup = period;
unicode = 002E;
},
{
glyphname = comma;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"83 125 LINE",
"35 -150 LINE",
"118 -150 LINE",
"214 125 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */\0120 0 1 1 0 85 0 0 0 1 89 0 1 0 1 77 17 16 2 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 266;
}
);
leftKerningGroup = comma;
note = comma;
rightKerningGroup = comma;
unicode = 002C;
},
{
glyphname = colon;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"60 521 LINE",
"60 381 LINE",
"186 381 LINE",
"186 521 LINE"
);
},
{
closed = 1;
nodes = (
"60 141 LINE",
"60 0 LINE",
"186 0 LINE",
"186 141 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 19 values pushed */\0120 0 0 1 2 0 1 97 0 2 2 3 89 0 3 3 21 3 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 19 values pushed */\0120 0 0 1 2 0 1 97 0 2 2 3 89 0 3 3 24 3 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 24 values pushed */\0120 0 0 1 2 0 1 97 0 2 3 3 2 85 0 2 2 3 89 0 3 2 3 77 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 7 values pushed */\01217 17 17 16 4 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 245;
}
);
leftKerningGroup = colon;
note = colon;
rightKerningGroup = colon;
unicode = 003A;
},
{
glyphname = semicolon;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"77 521 LINE",
"77 381 LINE",
"203 381 LINE",
"203 521 LINE"
);
},
{
closed = 1;
nodes = (
"78 115 LINE",
"36 -148 LINE",
"122 -148 LINE",
"205 115 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */\0120 0 0 1 2 0 1 97 0 2 3 3 2 85 0 2 2 3 89 0 3 2 3 77 17 17 17 16 4 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 268;
}
);
leftKerningGroup = semicolon;
note = semicolon;
rightKerningGroup = colon;
unicode = 003B;
},
{
glyphname = ellipsis;
layers = (
{
components = (
{
alignment = -1;
name = period;
},
{
alignment = -1;
name = period;
transform = "{1, 0, 0, 1, 241, 0}";
},
{
alignment = -1;
name = period;
transform = "{1, 0, 0, 1, 483, 0}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 728;
}
);
leftKerningGroup = period;
note = ellipsis;
rightKerningGroup = period;
unicode = 2026;
},
{
glyphname = exclam;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"194 190 LINE",
"216 746 LINE",
"79 746 LINE",
"101 190 LINE"
);
},
{
closed = 1;
nodes = (
"84 0 LINE",
"211 0 LINE",
"211 119 LINE",
"84 119 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 22 values pushed */\0120 0 0 1 89 0 1 1 20 75 0 2 2 3 89 4 1 3 3 21 3 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 20 values pushed */\0120 1 0 0 2 1 0 97 0 2 2 3 89 4 1 3 3 24 3 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 25 values pushed */\0120 1 0 0 2 1 0 97 0 2 3 3 2 85 0 2 2 3 89 4 1 3 2 3 77 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 12 values pushed */\0124 4 4 7 4 7 18 17 16 5 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 295;
}
);
leftKerningGroup = exclam;
note = exclam;
rightKerningGroup = exclam;
unicode = 0021;
},
{
glyphname = exclamdown;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"84 746 LINE",
"84 627 LINE",
"211 627 LINE",
"211 746 LINE"
);
},
{
closed = 1;
nodes = (
"194 556 LINE",
"101 556 LINE",
"79 0 LINE",
"216 0 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 22 values pushed */\0120 1 1 0 89 0 0 0 20 75 4 1 3 3 23 75 0 2 2 21 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 22 values pushed */\0120 1 1 0 89 0 0 0 20 75 4 1 3 3 2 89 0 2 2 21 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 20 values pushed */\0120 0 0 1 3 0 1 97 4 1 3 3 2 89 0 2 2 24 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 26 values pushed */\0120 0 0 1 3 0 1 97 4 1 3 2 2 3 85 4 1 3 3 2 89 0 2 3 2 77 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 12 values pushed */\0124 4 4 7 4 7 18 17 16 5 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 295;
}
);
leftKerningGroup = exclamdown;
note = exclamdown;
rightKerningGroup = exclamdown;
unicode = 00A1;
},
{
glyphname = question;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"294 181 LINE",
"294 305 LINE",
"406.147 321.822 OFFCURVE",
"492 412.193 OFFCURVE",
"492 540 CURVE SMOOTH",
"492 672 OFFCURVE",
"391.667 761 OFFCURVE",
"249 761 CURVE SMOOTH",
"181 761 OFFCURVE",
"116.333 743 OFFCURVE",
"59 707 CURVE",
"62 604 LINE",
"119.333 650.667 OFFCURVE",
"173.667 667 OFFCURVE",
"227 667 CURVE SMOOTH",
"323 667 OFFCURVE",
"381 605.667 OFFCURVE",
"381 539 CURVE SMOOTH",
"381 445.207 OFFCURVE",
"306.038 397 OFFCURVE",
"220 397 CURVE SMOOTH",
"190 397 LINE",
"190 181 LINE"
);
},
{
closed = 1;
nodes = (
"188 0 LINE",
"296 0 LINE",
"296 111 LINE",
"188 111 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */\01215 1 2 3 14 1 1 2 26 1 0 1 3 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 30 values pushed */\0120 1 0 0 4 1 0 97 0 2 2 3 91 0 3 3 28 75 0 4 4 5 89 6 1 5 5 21 5 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 28 values pushed */\0120 3 0 2 1 3 2 99 0 1 0 0 4 1 0 97 0 4 4 5 89 6 1 5 5 24 5 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 33 values pushed */\0120 3 0 2 1 3 2 99 0 1 0 0 4 1 0 97 0 4 5 5 4 85 0 4 4 5 89 6 1 5 4 5 77 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\01227 27 27 30 27 30 25 37 38 33 16 7 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 551;
}
);
leftKerningGroup = question;
note = question;
rightKerningGroup = question;
unicode = 003F;
},
{
glyphname = questiondown;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"375 746 LINE",
"267 746 LINE",
"267 635 LINE",
"375 635 LINE"
);
},
{
closed = 1;
nodes = (
"382 -15 OFFCURVE",
"447.667 4 OFFCURVE",
"505 40 CURVE",
"501 142 LINE",
"443.667 95.333 OFFCURVE",
"389.333 79 OFFCURVE",
"336 79 CURVE SMOOTH",
"238.667 79 OFFCURVE",
"182 141 OFFCURVE",
"182 217 CURVE SMOOTH",
"182 311.104 OFFCURVE",
"256.7 365 OFFCURVE",
"344 365 CURVE SMOOTH",
"373 365 LINE",
"373 566 LINE",
"270 566 LINE",
"270 425 LINE",
"156.293 410.787 OFFCURVE",
"72 335.138 OFFCURVE",
"72 203 CURVE SMOOTH",
"72 71 OFFCURVE",
"171.333 -15 OFFCURVE",
"314 -15 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */\01212 1 4 3 27 1 5 4 28 1 2 5 3 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 33 values pushed */\0120 0 0 1 89 6 1 1 1 20 75 0 4 4 3 89 0 3 3 23 75 0 5 5 2 91 7 1 2 2 32 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 31 values pushed */\0120 3 0 4 5 3 4 99 0 0 0 1 89 6 1 1 1 20 75 0 5 5 2 91 7 1 2 2 32 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 29 values pushed */\0126 1 1 0 0 3 1 0 97 0 3 0 4 5 3 4 99 0 5 5 2 91 7 1 2 2 32 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 34 values pushed */\0126 1 1 0 0 3 1 0 97 0 3 0 4 5 3 4 99 0 5 2 2 5 87 0 5 5 2 91 7 1 2 5 2 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 22 values pushed */\0125 4 0 0 25 23 17 15 14 13 4 30 5 30 0 3 0 3 17 8 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
leftKerningGroup = questiondown;
note = questiondown;
rightKerningGroup = questiondown;
unicode = 00BF;
},
{
glyphname = periodcentered;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"57 412 LINE",
"57 280 LINE",
"189 280 LINE",
"189 412 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */\0120 0 1 1 0 85 0 0 0 1 89 0 1 0 1 77 17 16 2 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 246;
}
);
leftKerningGroup = periodcentered;
note = periodcentered;
rightKerningGroup = periodcentered;
unicode = 00B7;
},
{
glyphname = bullet;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"59 386 LINE",
"59 249 LINE",
"198 249 LINE",
"198 386 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */\0120 0 1 1 0 85 0 0 0 1 89 0 1 0 1 77 17 16 2 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 257;
}
);
leftKerningGroup = bullet;
note = bullet;
rightKerningGroup = bullet;
unicode = 2022;
},
{
glyphname = asterisk;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"259 413 LINE",
"326 462 LINE",
"223 567 LINE",
"352 588 LINE",
"326 668 LINE",
"206 607 LINE",
"227 746 LINE",
"145 746 LINE",
"166 606 LINE",
"45 667 LINE",
"20 587 LINE",
"152 565 LINE",
"48 461 LINE",
"115 412 LINE",
"187 549 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */\01214 13 12 11 10 7 6 5 4 3 2 1 12 0 71 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 6 values pushed */\0120 0 0 20 0 76 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 105 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 4 values pushed */\01224 1 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 372;
}
);
leftKerningGroup = asterisk;
note = asterisk;
rightKerningGroup = asterisk;
unicode = 002A;
},
{
glyphname = numbersign;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"454 293 LINE",
"293 293 LINE",
"325 453 LINE",
"486 453 LINE"
);
},
{
closed = 1;
nodes = (
"396 0 LINE",
"489 0 LINE",
"530 203 LINE",
"682 203 LINE",
"682 293 LINE",
"548 293 LINE",
"580 453 LINE",
"722 453 LINE",
"722 543 LINE",
"598 543 LINE",
"639 746 LINE",
"544 746 LINE",
"504 543 LINE",
"343 543 LINE",
"384 746 LINE",
"288 746 LINE",
"248 543 LINE",
"84 543 LINE",
"84 453 LINE",
"230 453 LINE",
"198 293 LINE",
"45 293 LINE",
"45 203 LINE",
"180 203 LINE",
"140 0 LINE",
"234 0 LINE",
"275 203 LINE",
"436 203 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 39 values pushed */\01211 9 2 7 12 6 2 0 1 7 0 98 13 5 16 3 1 14 4 2 2 3 1 2 97 10 1 8 8 20 75 17 15 2 3 3 21 3 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 39 values pushed */\01210 1 8 7 8 114 11 9 2 7 12 6 2 0 1 7 0 98 13 5 16 3 1 14 4 2 2 3 1 2 97 17 15 2 3 3 24 3 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 49 values pushed */\01210 1 8 7 8 114 17 15 2 3 2 3 115 11 9 2 7 12 6 2 0 1 7 0 98 13 5 16 3 1 2 2 1 85 13 5 16 3 1 1 2 89 14 4 2 2 1 2 77 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 42 values pushed */\0124 4 0 0 4 31 4 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 0 3 0 3 17 18 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 768;
}
);
note = numbersign;
unicode = 0023;
},
{
glyphname = slash;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"524 780 LINE",
"414 780 LINE",
"-76 -220 LINE",
"33 -220 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */\0122 1 1 1 22 75 0 0 0 25 0 76 0 0 0 3 0 3 17 3 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 540;
}
);
leftKerningGroup = slash;
note = slash;
rightKerningGroup = slash;
unicode = 002F;
},
{
glyphname = backslash;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"16 780 LINE",
"507 -220 LINE",
"618 -220 LINE",
"128 780 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */\0120 0 0 22 75 0 1 1 25 1 76 17 16 2 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 542;
}
);
leftKerningGroup = backslash;
note = backslash;
rightKerningGroup = backslash;
unicode = 005C;
},
{
glyphname = endash.salt_en;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"500 361 LINE",
"0 361 LINE",
"0 274 LINE",
"500 274 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */\0122 1 1 0 0 1 85 2 1 1 1 0 89 0 0 1 0 77 0 0 0 3 0 3 17 3 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 500;
}
);
note = endash.salt_en;
},
{
glyphname = emdash.salt_em;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"1000 361 LINE",
"0 361 LINE",
"0 274 LINE",
"1000 274 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */\0122 1 1 0 0 1 85 2 1 1 1 0 89 0 0 1 0 77 0 0 0 3 0 3 17 3 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 1000;
}
);
note = emdash.salt_em;
},
{
glyphname = asterisk.salt1;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"318 510 LINE",
"326 528 LINE",
"244 602 LINE",
"301 700 LINE",
"286 713 LINE",
"191 657 LINE",
"115 742 LINE",
"98 732 LINE",
"122 625 LINE",
"18 578 LINE",
"22 559 LINE",
"131 548 LINE",
"143 435 LINE",
"163 433 LINE",
"207 534 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0129 2 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 354;
}
);
note = asterisk.salt1;
},
{
glyphname = endash.uc_salt_en;
layers = (
{
components = (
{
alignment = -1;
name = endash.salt_en;
transform = "{1, 0, 0, 1, 0, 56}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 500;
}
);
note = endash.uc_salt_en;
},
{
glyphname = emdash.uc_salt_em;
layers = (
{
components = (
{
alignment = -1;
name = emdash.salt_em;
transform = "{1, 0, 0, 1, 0, 56}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 1000;
}
);
note = emdash.uc_salt_em;
},
{
glyphname = colon.uc;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"60 621 LINE",
"60 481 LINE",
"186 481 LINE",
"186 621 LINE"
);
},
{
closed = 1;
nodes = (
"60 241 LINE",
"60 100 LINE",
"186 100 LINE",
"186 241 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */\0120 0 0 1 2 0 1 97 0 2 3 3 2 85 0 2 2 3 89 0 3 2 3 77 17 17 17 16 4 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 245;
}
);
note = colon.uc;
},
{
glyphname = semicolon.uc;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"77 621 LINE",
"77 481 LINE",
"203 481 LINE",
"203 621 LINE"
);
},
{
closed = 1;
nodes = (
"78 215 LINE",
"36 -48 LINE",
"122 -48 LINE",
"205 215 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */\0120 0 0 1 2 0 1 97 0 2 3 3 2 85 0 2 2 3 89 0 3 2 3 77 17 17 17 16 4 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 268;
}
);
note = semicolon.uc;
},
{
glyphname = parenleft;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"245 739.333 OFFCURVE",
"193 679.667 OFFCURVE",
"153 601 CURVE SMOOTH",
"113 522.333 OFFCURVE",
"84 422.333 OFFCURVE",
"84 305 CURVE SMOOTH",
"84 289 LINE SMOOTH",
"84 171.667 OFFCURVE",
"113 70.833 OFFCURVE",
"153 -8.5 CURVE SMOOTH",
"193 -87.833 OFFCURVE",
"244.667 -147 OFFCURVE",
"290 -183 CURVE",
"352 -115 LINE",
"317.333 -83 OFFCURVE",
"276.667 -28.5 OFFCURVE",
"246 41.5 CURVE SMOOTH",
"215.333 111.5 OFFCURVE",
"193 196.667 OFFCURVE",
"193 290 CURVE SMOOTH",
"193 304 LINE SMOOTH",
"193 398.667 OFFCURVE",
"215.333 483.667 OFFCURVE",
"246 553 CURVE SMOOTH",
"276.667 622.333 OFFCURVE",
"317.333 677.667 OFFCURVE",
"352 711 CURVE",
"289 778 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\01213 0 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 412;
}
);
note = parenleft;
rightKerningGroup = parenleft;
unicode = 0028;
},
{
glyphname = parenright;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"60 711 LINE",
"94.667 677.667 OFFCURVE",
"134.333 622.333 OFFCURVE",
"165 553 CURVE SMOOTH",
"195.667 483.667 OFFCURVE",
"218 398.667 OFFCURVE",
"218 304 CURVE SMOOTH",
"218 290 LINE SMOOTH",
"218 196.667 OFFCURVE",
"195.5 111.5 OFFCURVE",
"165.5 41.5 CURVE SMOOTH",
"135.5 -28.5 OFFCURVE",
"94.667 -83 OFFCURVE",
"60 -115 CURVE",
"122 -183 LINE",
"166 -147 OFFCURVE",
"218 -87.833 OFFCURVE",
"258 -8.5 CURVE SMOOTH",
"298 70.833 OFFCURVE",
"327 171.667 OFFCURVE",
"327 289 CURVE SMOOTH",
"327 305 LINE SMOOTH",
"327 422.333 OFFCURVE",
"298 522.333 OFFCURVE",
"258 601 CURVE SMOOTH",
"218 679.667 OFFCURVE",
"167 739.333 OFFCURVE",
"123 778 CURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\01211 0 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 412;
}
);
leftKerningGroup = parenright;
note = parenright;
unicode = 0029;
},
{
glyphname = braceleft;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"348 -214 LINE",
"348 -142 LINE",
"312 -142 LINE SMOOTH",
"272 -142 OFFCURVE",
"253 -133.667 OFFCURVE",
"253 -59 CURVE SMOOTH",
"253 131 LINE SMOOTH",
"253 195 OFFCURVE",
"229.333 235.667 OFFCURVE",
"176 257 CURVE",
"176 273 LINE",
"229.333 295.667 OFFCURVE",
"253 338.333 OFFCURVE",
"253 401 CURVE SMOOTH",
"253 585 LINE SMOOTH",
"253 659.667 OFFCURVE",
"272 674 OFFCURVE",
"312 674 CURVE SMOOTH",
"348 674 LINE",
"348 746 LINE",
"268 746 LINE SMOOTH",
"189.333 746 OFFCURVE",
"143 716 OFFCURVE",
"143 608 CURVE SMOOTH",
"143 400 LINE SMOOTH",
"143 338.667 OFFCURVE",
"120.333 314.333 OFFCURVE",
"87 305 CURVE",
"86.333 305 OFFCURVE",
"85.167 304.833 OFFCURVE",
"83.5 304.5 CURVE SMOOTH",
"81.833 304.167 OFFCURVE",
"80.667 304 OFFCURVE",
"80 304 CURVE",
"80 226 LINE",
"80.667 226 OFFCURVE",
"81.833 225.833 OFFCURVE",
"83.5 225.5 CURVE SMOOTH",
"85.167 225.167 OFFCURVE",
"86.333 225 OFFCURVE",
"87 225 CURVE",
"120.333 215.667 OFFCURVE",
"143 190.333 OFFCURVE",
"143 129 CURVE SMOOTH",
"143 -76 LINE SMOOTH",
"143 -184 OFFCURVE",
"189.333 -214 OFFCURVE",
"268 -214 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */\01233 32 12 3 3 2 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 21 values pushed */\0120 2 2 1 89 0 1 1 20 75 0 3 3 0 89 0 0 0 25 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 19 values pushed */\0120 1 0 2 3 1 2 99 0 3 3 0 89 0 0 0 25 0 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 10 values pushed */\01241 39 26 24 23 21 32 4 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 414;
}
);
note = braceleft;
rightKerningGroup = braceleft;
unicode = 007B;
},
{
glyphname = braceright;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"223.333 -214 OFFCURVE",
"271 -184 OFFCURVE",
"271 -76 CURVE SMOOTH",
"271 129 LINE SMOOTH",
"271 190.333 OFFCURVE",
"293.667 215.667 OFFCURVE",
"327 225 CURVE",
"327.667 225 OFFCURVE",
"328.833 225.167 OFFCURVE",
"330.5 225.5 CURVE SMOOTH",
"332.167 225.833 OFFCURVE",
"333.333 226 OFFCURVE",
"334 226 CURVE",
"334 304 LINE",
"333.333 304 OFFCURVE",
"332.167 304.167 OFFCURVE",
"330.5 304.5 CURVE SMOOTH",
"328.833 304.833 OFFCURVE",
"327.667 305 OFFCURVE",
"327 305 CURVE",
"293.667 314.333 OFFCURVE",
"271 338.667 OFFCURVE",
"271 400 CURVE SMOOTH",
"271 608 LINE SMOOTH",
"271 716 OFFCURVE",
"223.333 746 OFFCURVE",
"146 746 CURVE SMOOTH",
"65 746 LINE",
"65 680 LINE",
"101 680 LINE SMOOTH",
"141 680 OFFCURVE",
"161 664.667 OFFCURVE",
"161 590 CURVE SMOOTH",
"161 401 LINE SMOOTH",
"161 338.333 OFFCURVE",
"183.667 295.667 OFFCURVE",
"237 273 CURVE",
"237 257 LINE",
"183.667 235.667 OFFCURVE",
"161 195 OFFCURVE",
"161 131 CURVE SMOOTH",
"161 -64 LINE SMOOTH",
"161 -138.667 OFFCURVE",
"141 -148 OFFCURVE",
"101 -148 CURVE SMOOTH",
"65 -148 LINE",
"65 -214 LINE",
"146 -214 LINE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */\01232 11 10 3 1 2 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 22 values pushed */\0120 2 2 3 89 0 3 3 20 75 0 1 1 0 89 4 1 0 0 25 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 20 values pushed */\0120 3 0 2 1 3 2 99 0 1 1 0 89 4 1 0 0 25 0 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 15 values pushed */\0121 0 22 20 19 17 4 2 0 41 1 41 5 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 414;
}
);
leftKerningGroup = braceright;
note = braceright;
unicode = 007D;
},
{
glyphname = bracketleft;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"115 -214 LINE",
"360 -214 LINE",
"360 -142 LINE",
"225 -142 LINE",
"225 674 LINE",
"352 674 LINE",
"352 746 LINE",
"115 746 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 22 values pushed */\0120 1 1 0 89 0 0 0 20 75 0 2 2 3 89 4 1 3 3 25 3 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 20 values pushed */\0120 0 0 1 2 0 1 97 0 2 2 3 89 4 1 3 3 25 3 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 12 values pushed */\0120 0 0 7 0 7 17 17 17 5 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 398;
}
);
note = bracketleft;
rightKerningGroup = bracketleft;
unicode = 005B;
},
{
glyphname = bracketright;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"283 -214 LINE",
"283 746 LINE",
"46 746 LINE",
"46 674 LINE",
"173 674 LINE",
"173 -142 LINE",
"38 -142 LINE",
"38 -214 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 21 values pushed */\0120 2 2 3 89 0 3 3 20 75 0 1 1 0 89 0 0 0 25 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 19 values pushed */\0120 3 0 2 1 3 2 97 0 1 1 0 89 0 0 0 25 0 76 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 7 values pushed */\01217 17 17 16 4 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 398;
}
);
leftKerningGroup = bracketright;
note = bracketright;
unicode = 005D;
},
{
glyphname = parenleft.uc;
layers = (
{
components = (
{
alignment = -1;
name = parenleft;
transform = "{1, 0, 0, 1, 0, 64}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 399;
}
);
note = parenleft.uc;
rightKerningGroup = parenleft.uc;
},
{
glyphname = parenright.uc;
layers = (
{
components = (
{
alignment = -1;
name = parenright;
transform = "{1, 0, 0, 1, 0, 64}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 412;
}
);
leftKerningGroup = parenright.uc;
note = parenright.uc;
},
{
glyphname = braceleft.uc;
layers = (
{
components = (
{
alignment = -1;
name = braceleft;
transform = "{1, 0, 0, 1, 0, 92}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 414;
}
);
note = braceleft.uc;
rightKerningGroup = braceleft.uc;
},
{
glyphname = braceright.uc;
layers = (
{
components = (
{
alignment = -1;
name = braceright;
transform = "{1, 0, 0, 1, 0, 92}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 414;
}
);
leftKerningGroup = braceright.uc;
note = braceright.uc;
},
{
glyphname = bracketleft.uc;
layers = (
{
components = (
{
alignment = -1;
name = bracketleft;
transform = "{1, 0, 0, 1, 0, 92}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 398;
}
);
note = bracketleft.uc;
rightKerningGroup = bracketleft.uc;
},
{
glyphname = bracketright.uc;
layers = (
{
components = (
{
alignment = -1;
name = bracketright;
transform = "{1, 0, 0, 1, 0, 92}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 398;
}
);
leftKerningGroup = bracketright.uc;
note = bracketright.uc;
},
{
glyphname = hyphen;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"364 370 LINE",
"40 370 LINE",
"40 265 LINE",
"364 265 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */\0122 1 1 0 0 1 85 2 1 1 1 0 89 0 0 1 0 77 0 0 0 3 0 3 17 3 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 404;
}
);
leftKerningGroup = hyphen;
note = hyphen;
rightKerningGroup = hyphen;
unicode = 002D;
},
{
glyphname = endash;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"494 361 LINE",
"30 361 LINE",
"30 274 LINE",
"494 274 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */\0122 1 1 0 0 1 85 2 1 1 1 0 89 0 0 1 0 77 0 0 0 3 0 3 17 3 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 524;
}
);
leftKerningGroup = endash;
note = endash;
rightKerningGroup = endash;
unicode = 2013;
},
{
glyphname = emdash;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"694 361 LINE",
"30 361 LINE",
"30 274 LINE",
"694 274 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */\0122 1 1 0 0 1 85 2 1 1 1 0 89 0 0 1 0 77 0 0 0 3 0 3 17 3 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 724;
}
);
leftKerningGroup = endash;
note = emdash;
rightKerningGroup = endash;
unicode = 2014;
},
{
glyphname = underscore;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"500 -55 LINE",
"0 -55 LINE",
"0 -141 LINE",
"500 -141 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 28 values pushed */\0122 1 1 0 0 1 85 2 1 1 1 0 89 0 0 1 0 77 0 0 0 3 0 3 17 3 7 21 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 500;
}
);
note = underscore;
unicode = 005F;
},
{
glyphname = hyphen.uc;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"364 426 LINE",
"40 426 LINE",
"40 321 LINE",
"364 321 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */\0122 1 1 0 0 1 85 2 1 1 1 0 89 0 0 1 0 77 0 0 0 3 0 3 17 3 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 404;
}
);
leftKerningGroup = hyphen.uc;
note = hyphen.uc;
rightKerningGroup = hyphen.uc;
},
{
glyphname = endash.uc;
layers = (
{
components = (
{
alignment = -1;
name = endash;
transform = "{1, 0, 0, 1, 0, 56}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 524;
}
);
note = endash.uc;
},
{
glyphname = emdash.uc;
layers = (
{
components = (
{
alignment = -1;
name = emdash;
transform = "{1, 0, 0, 1, 0, 56}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 724;
}
);
note = emdash.uc;
},
{
glyphname = quotesinglbase;
layers = (
{
components = (
{
alignment = -1;
name = quoteright;
transform = "{1, 0, 0, 1, -17, -746}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 282;
}
);
leftKerningGroup = quotesinglbase;
note = quotesinglbase;
rightKerningGroup = quotesinglbase;
unicode = 201A;
},
{
glyphname = quotedblbase;
layers = (
{
components = (
{
alignment = -1;
name = quotedblright;
transform = "{1, 0, 0, 1, -17, -746}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 460;
}
);
leftKerningGroup = quotesinglbase;
note = quotedblbase;
rightKerningGroup = quotesinglbase;
unicode = 201E;
},
{
glyphname = quotedblleft;
layers = (
{
components = (
{
alignment = -1;
name = quoteleft;
},
{
alignment = -1;
name = quoteleft;
transform = "{1, 0, 0, 1, 178, 0}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 462;
}
);
leftKerningGroup = quoteleft;
note = quotedblleft;
rightKerningGroup = quoteleft;
unicode = 201C;
},
{
glyphname = quotedblright;
layers = (
{
components = (
{
alignment = -1;
name = quoteright;
},
{
alignment = -1;
name = quoteright;
transform = "{1, 0, 0, 1, 178, 0}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 457;
}
);
leftKerningGroup = quotedbl;
note = quotedblright;
rightKerningGroup = quotedbl;
unicode = 201D;
},
{
glyphname = quoteleft;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"235 746 LINE",
"153 746 LINE",
"51 463 LINE",
"176 463 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 12 values pushed */\0120 0 0 1 89 2 1 1 1 20 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 18 values pushed */\0122 1 1 0 0 1 85 2 1 1 1 0 89 0 0 1 0 77 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 10 values pushed */\0120 0 0 3 0 3 17 3 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 284;
}
);
leftKerningGroup = quoteleft;
note = quoteleft;
rightKerningGroup = quoteleft;
unicode = 2018;
},
{
glyphname = quoteright;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"54 463 LINE",
"136 463 LINE",
"237 746 LINE",
"112 746 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 12 values pushed */\0122 1 1 1 0 89 0 0 0 20 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 17 values pushed */\0120 0 1 1 0 85 0 0 0 1 89 2 1 1 0 1 77 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 10 values pushed */\0120 0 0 3 0 3 17 3 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 279;
}
);
leftKerningGroup = quotedbl;
note = quoteright;
rightKerningGroup = quotedbl;
unicode = 2019;
},
{
glyphname = guillemetleft;
layers = (
{
components = (
{
alignment = -1;
name = guilsinglleft;
},
{
alignment = -1;
name = guilsinglleft;
transform = "{1, 0, 0, 1, 192, 0}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 568;
}
);
leftKerningGroup = guillemetleft;
note = guillemotleft;
rightKerningGroup = guillemetleft;
unicode = 00AB;
},
{
glyphname = guillemetright;
layers = (
{
components = (
{
alignment = -1;
name = guilsinglright;
},
{
alignment = -1;
name = guilsinglright;
transform = "{1, 0, 0, 1, 192, 0}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 568;
}
);
leftKerningGroup = guillemetright;
note = guillemotright;
rightKerningGroup = guillemetright;
unicode = 00BB;
},
{
glyphname = guilsinglleft;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"325 0 LINE",
"141 287 LINE",
"327 574 LINE",
"230 574 LINE",
"45 288 LINE",
"45 285 LINE",
"230 0 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */\0126 2 2 0 1 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 11 values pushed */\0120 1 1 23 75 0 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 11 values pushed */\0120 1 1 0 89 0 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 11 values pushed */\0120 1 1 0 89 0 0 0 24 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 16 values pushed */\0120 1 0 0 1 85 0 1 1 0 89 0 0 1 0 77 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 5 values pushed */\01219 16 2 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 376;
}
);
leftKerningGroup = guillemetleft;
note = guilsinglleft;
rightKerningGroup = guillemetleft;
unicode = 2039;
},
{
glyphname = guilsinglright;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"146 0 LINE",
"331 285 LINE",
"331 288 LINE",
"146 574 LINE",
"51 574 LINE",
"235 289 LINE",
"50 0 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */\0125 2 2 0 1 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 11 values pushed */\0120 1 1 23 75 0 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 11 values pushed */\0120 1 1 0 89 0 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 11 values pushed */\0120 1 1 0 89 0 0 0 24 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 16 values pushed */\0120 1 0 0 1 85 0 1 1 0 89 0 0 1 0 77 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 5 values pushed */\01218 16 2 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 376;
}
);
leftKerningGroup = guillemetright;
note = guilsinglright;
rightKerningGroup = guillemetright;
unicode = 203A;
},
{
glyphname = quotedbl;
layers = (
{
components = (
{
alignment = -1;
name = quotesingle;
},
{
alignment = -1;
name = quotesingle;
transform = "{1, 0, 0, 1, 178, 0}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 457;
}
);
leftKerningGroup = quotedbl;
note = quotedbl;
rightKerningGroup = quotedbl;
unicode = 0022;
},
{
glyphname = quotesingle;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"54 463 LINE",
"136 463 LINE",
"237 746 LINE",
"112 746 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 12 values pushed */\0122 1 1 1 0 89 0 0 0 20 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 17 values pushed */\0120 0 1 1 0 85 0 0 0 1 89 2 1 1 0 1 77 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 10 values pushed */\0120 0 0 3 0 3 17 3 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 279;
}
);
leftKerningGroup = quotedbl;
note = quotesingle;
rightKerningGroup = quotedbl;
unicode = 0027;
},
{
glyphname = guillemetleft.uc;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"518 46 LINE",
"333 333 LINE",
"519 620 LINE",
"422 620 LINE",
"237 334 LINE",
"237 331 LINE",
"422 46 LINE"
);
},
{
closed = 1;
nodes = (
"325 46 LINE",
"141 333 LINE",
"327 620 LINE",
"230 620 LINE",
"45 334 LINE",
"45 331 LINE",
"230 46 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */\01213 9 6 2 4 0 1 1 74 3 1 1 0 0 1 85 3 1 1 1 0 89 2 1 0 1 0 77 19 18 19 16 4 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 568;
}
);
leftKerningGroup = guilsinglleft.uc;
note = guillemotleft.uc;
rightKerningGroup = guilsinglleft.uc;
},
{
glyphname = guillemetright.uc;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"338 46 LINE",
"523 331 LINE",
"523 334 LINE",
"338 620 LINE",
"243 620 LINE",
"427 335 LINE",
"242 46 LINE"
);
},
{
closed = 1;
nodes = (
"146 46 LINE",
"331 331 LINE",
"331 334 LINE",
"146 620 LINE",
"51 620 LINE",
"235 335 LINE",
"50 46 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */\01212 9 5 2 4 0 1 1 74 3 1 1 0 0 1 85 3 1 1 1 0 89 2 1 0 1 0 77 18 19 18 16 4 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 568;
}
);
leftKerningGroup = guilsinglright.uc;
note = guillemotright.uc;
rightKerningGroup = guilsinglright.uc;
},
{
glyphname = guilsinglleft.uc;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"325 46 LINE",
"141 333 LINE",
"327 620 LINE",
"230 620 LINE",
"45 334 LINE",
"45 331 LINE",
"230 46 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */\0126 2 2 0 1 1 74 0 1 0 0 1 85 0 1 1 0 89 0 0 1 0 77 19 16 2 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 376;
}
);
leftKerningGroup = guilsinglleft.uc;
note = guilsinglleft.uc;
rightKerningGroup = guilsinglleft.uc;
},
{
glyphname = guilsinglright.uc;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"146 46 LINE",
"331 331 LINE",
"331 334 LINE",
"146 620 LINE",
"51 620 LINE",
"235 335 LINE",
"50 46 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */\0125 2 2 0 1 1 74 0 1 0 0 1 85 0 1 1 0 89 0 0 1 0 77 18 16 2 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 376;
}
);
leftKerningGroup = guilsinglright.uc;
note = guilsinglright.uc;
rightKerningGroup = guilsinglright.uc;
},
{
glyphname = CR;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 333;
}
);
note = CR;
unicode = 000D;
},
{
glyphname = zeroWidthNoBreakSpace;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 0;
}
);
note = uniFEFF;
unicode = FEFF;
},
{
glyphname = .notdef;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 0;
}
);
note = .notdef;
},
{
glyphname = .null;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 0;
}
);
note = .null;
},
{
glyphname = emquad;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 1000;
}
);
note = uni2001;
unicode = 2001;
},
{
glyphname = emspace;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 1000;
}
);
note = uni2003;
unicode = 2003;
},
{
glyphname = enquad;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 500;
}
);
note = uni2000;
unicode = 2000;
},
{
glyphname = enspace;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 500;
}
);
note = uni2002;
unicode = 2002;
},
{
glyphname = fourperemspace;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 250;
}
);
note = uni2005;
unicode = 2005;
},
{
glyphname = hairspace;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 100;
}
);
note = uni200A;
unicode = 200A;
},
{
glyphname = space;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 170;
}
);
leftKerningGroup = space;
note = space;
rightKerningGroup = space;
unicode = 0020;
},
{
glyphname = thinspace;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 166;
}
);
note = uni2009;
unicode = 2009;
},
{
glyphname = threeperemspace;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 333;
}
);
note = uni2004;
unicode = 2004;
},
{
glyphname = zerowidthspace;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 0;
}
);
note = uni200B;
unicode = 200B;
},
{
glyphname = space.em;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 1000;
}
);
note = space.em;
},
{
glyphname = space.en;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 500;
}
);
note = space.en;
},
{
glyphname = space.frac;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 85;
}
);
note = space.frac;
},
{
glyphname = space.thin;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 150;
}
);
note = space.thin;
},
{
glyphname = apple;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"10 -101 LINE",
"586 -101 LINE",
"586 660 LINE",
"10 660 LINE"
);
},
{
closed = 1;
nodes = (
"107 560 LINE",
"277 560 LINE SMOOTH",
"408.388 560 OFFCURVE",
"519 439.85 OFFCURVE",
"519 281 CURVE SMOOTH",
"519 119.603 OFFCURVE",
"410.544 0 OFFCURVE",
"277 0 CURVE SMOOTH",
"107 0 LINE"
);
},
{
closed = 1;
nodes = (
"396.202 17 OFFCURVE",
"496 119.366 OFFCURVE",
"496 281 CURVE SMOOTH",
"496 440.185 OFFCURVE",
"395.996 542 OFFCURVE",
"271 542 CURVE SMOOTH",
"115 542 LINE",
"115 17 LINE",
"271 17 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"390.753 535 OFFCURVE",
"488 435.653 OFFCURVE",
"488 281 CURVE SMOOTH",
"488 125.12 OFFCURVE",
"390.773 25 OFFCURVE",
"271 25 CURVE SMOOTH",
"122 25 LINE",
"122 535 LINE",
"271 535 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"145 32 LINE",
"271 32 LINE SMOOTH",
"388.032 32 OFFCURVE",
"481 131.304 OFFCURVE",
"481 281 CURVE SMOOTH",
"481 430.222 OFFCURVE",
"388.425 527 OFFCURVE",
"271 527 CURVE SMOOTH",
"145 527 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */\01244 43 32 30 19 17 5 4 1 0 5 48 \012CALL[ ]	/* CallFunction */";
};
width = 596;
}
);
note = apple;
unicode = F8FF;
},
{
glyphname = at;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"646.435 -189 OFFCURVE",
"793.938 -157.978 OFFCURVE",
"873 -98 CURVE",
"840 -49 LINE",
"767.494 -104.774 OFFCURVE",
"635.38 -134 OFFCURVE",
"528 -134 CURVE SMOOTH",
"400 -132.667 OFFCURVE",
"294 -82.833 OFFCURVE",
"222 -7.5 CURVE SMOOTH",
"150 67.833 OFFCURVE",
"109 173 OFFCURVE",
"109 281 CURVE SMOOTH",
"109 382.333 OFFCURVE",
"148.667 483.5 OFFCURVE",
"218 557.5 CURVE SMOOTH",
"287.333 631.5 OFFCURVE",
"389 681 OFFCURVE",
"509 681 CURVE SMOOTH",
"625 681 OFFCURVE",
"723.167 636.167 OFFCURVE",
"790.5 567.5 CURVE SMOOTH",
"857.833 498.833 OFFCURVE",
"896 406.333 OFFCURVE",
"896 313 CURVE SMOOTH",
"896 182.409 OFFCURVE",
"831.645 93 OFFCURVE",
"778 93 CURVE SMOOTH",
"772 93 OFFCURVE",
"765.167 95.5 OFFCURVE",
"757.5 100.5 CURVE SMOOTH",
"749.833 105.5 OFFCURVE",
"746 118.667 OFFCURVE",
"746 140 CURVE SMOOTH",
"746 474 LINE",
"656 474 LINE",
"656 424 LINE",
"614.667 469.333 OFFCURVE",
"553.667 500.333 OFFCURVE",
"487 499 CURVE SMOOTH",
"349.659 499 OFFCURVE",
"243 400.461 OFFCURVE",
"243 260 CURVE SMOOTH",
"243 122.537 OFFCURVE",
"347.705 24.321 OFFCURVE",
"487 27 CURVE SMOOTH",
"555 28.333 OFFCURVE",
"616.667 63.667 OFFCURVE",
"658 109 CURVE",
"667.333 63.667 OFFCURVE",
"701.333 29 OFFCURVE",
"764 29 CURVE SMOOTH",
"801.333 29 OFFCURVE",
"850.333 47 OFFCURVE",
"889 91 CURVE SMOOTH",
"927.667 135 OFFCURVE",
"958 206.667 OFFCURVE",
"958 312 CURVE SMOOTH",
"958 422.667 OFFCURVE",
"913.5 529.5 OFFCURVE",
"835.5 607.5 CURVE SMOOTH",
"757.5 685.5 OFFCURVE",
"643.667 736 OFFCURVE",
"509 736 CURVE SMOOTH",
"370.333 736 OFFCURVE",
"253 682.833 OFFCURVE",
"173 599.5 CURVE SMOOTH",
"93 516.167 OFFCURVE",
"47 401.333 OFFCURVE",
"47 280 CURVE SMOOTH",
"47 150.667 OFFCURVE",
"95 33.167 OFFCURVE",
"179 -51.5 CURVE SMOOTH",
"263 -136.167 OFFCURVE",
"384 -189 OFFCURVE",
"528 -189 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"410.388 110 OFFCURVE",
"343 164.421 OFFCURVE",
"343 260 CURVE SMOOTH",
"343 358.016 OFFCURVE",
"410.24 413 OFFCURVE",
"495 413 CURVE SMOOTH",
"580.43 413 OFFCURVE",
"645 341.126 OFFCURVE",
"645 264 CURVE SMOOTH",
"645 183.76 OFFCURVE",
"578.492 110 OFFCURVE",
"495 110 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 15 values pushed */\01239 1 10 5 23 1 6 10 71 70 2 8 2 3 74 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 15 values pushed */\01239 1 10 5 23 1 6 9 71 70 2 8 2 3 74 \012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 46 values pushed */\0120 5 4 10 4 5 10 112 0 4 0 10 6 4 10 99 12 9 2 6 3 1 2 8 6 2 100 0 8 11 1 0 8 0 95 0 7 7 1 91 0 1 1 20 7 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 51 values pushed */\0120 5 4 10 4 5 10 112 0 4 0 10 9 4 10 99 12 1 9 6 2 9 87 0 6 3 1 2 8 6 2 100 0 8 11 1 0 8 0 95 0 7 7 1 91 0 1 1 20 7 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 57 values pushed */\0120 5 4 10 4 5 10 112 0 1 0 7 4 1 7 99 0 4 0 10 9 4 10 99 12 1 9 6 2 9 87 0 6 3 1 2 8 6 2 100 0 8 0 0 8 87 0 8 8 0 91 11 1 0 8 0 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 33 values pushed */\01277 76 1 0 87 85 76 95 77 95 66 64 56 54 46 44 41 40 37 35 27 25 21 19 11 9 0 75 1 75 13 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 1001;
}
);
leftKerningGroup = at;
note = at;
rightKerningGroup = at;
unicode = 0040;
},
{
glyphname = ampersand;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"254 644.333 OFFCURVE",
"293.667 683 OFFCURVE",
"347 683 CURVE SMOOTH",
"412.333 683 OFFCURVE",
"444 639.667 OFFCURVE",
"444 601 CURVE SMOOTH",
"444 551.667 OFFCURVE",
"404 520.333 OFFCURVE",
"332 475 CURVE",
"331.333 474.333 OFFCURVE",
"330.333 473.667 OFFCURVE",
"329 473 CURVE SMOOTH",
"327.667 472.333 OFFCURVE",
"326.333 471.667 OFFCURVE",
"325 471 CURVE",
"281 520.333 OFFCURVE",
"254 547 OFFCURVE",
"254 595 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"235.667 78.333 OFFCURVE",
"172 127.667 OFFCURVE",
"172 189 CURVE SMOOTH",
"172 257 OFFCURVE",
"218.333 299.667 OFFCURVE",
"297 349 CURVE",
"339.667 299.667 OFFCURVE",
"407.667 221.333 OFFCURVE",
"469 152 CURVE",
"418.333 106.667 OFFCURVE",
"362.333 77 OFFCURVE",
"301 77 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"741 0 LINE",
"741 2 LINE",
"731.667 12.667 OFFCURVE",
"715.167 31.333 OFFCURVE",
"691.5 58 CURVE SMOOTH",
"667.833 84.667 OFFCURVE",
"641 115 OFFCURVE",
"611 149 CURVE",
"626.333 167.667 OFFCURVE",
"641.5 186.833 OFFCURVE",
"656.5 206.5 CURVE SMOOTH",
"671.5 226.167 OFFCURVE",
"686.667 245.667 OFFCURVE",
"702 265 CURVE",
"629 340 LINE",
"614.333 321.333 OFFCURVE",
"599.667 302.5 OFFCURVE",
"585 283.5 CURVE SMOOTH",
"570.333 264.5 OFFCURVE",
"555.667 246 OFFCURVE",
"541 228 CURVE",
"487.667 289.333 OFFCURVE",
"431.333 352.333 OFFCURVE",
"386 403 CURVE",
"394 407 OFFCURVE",
"402 411.667 OFFCURVE",
"410 417 CURVE SMOOTH",
"495.333 471.667 OFFCURVE",
"559 523.667 OFFCURVE",
"559 605 CURVE SMOOTH",
"559 702.275 OFFCURVE",
"471.387 770 OFFCURVE",
"347 770 CURVE SMOOTH",
"234.02 770 OFFCURVE",
"135 698.9 OFFCURVE",
"135 596 CURVE SMOOTH",
"135 528 OFFCURVE",
"177 485 OFFCURVE",
"237 417 CURVE",
"125 350.333 OFFCURVE",
"44 290 OFFCURVE",
"44 178 CURVE SMOOTH",
"44 58 OFFCURVE",
"143.667 -22.667 OFFCURVE",
"289 -24 CURVE SMOOTH",
"397 -25.333 OFFCURVE",
"475 14.667 OFFCURVE",
"539 72 CURVE",
"568.333 38.667 OFFCURVE",
"591 13.333 OFFCURVE",
"603 0 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */\01268 65 64 61 58 39 21 18 3 9 1 0 30 1 4 1 2 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 28 values pushed */\0120 0 0 3 91 0 3 3 28 75 6 1 4 4 21 75 5 1 1 1 2 91 0 2 2 29 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 28 values pushed */\0120 0 0 3 91 0 3 3 22 75 6 1 4 4 24 75 5 1 1 1 2 91 0 2 2 32 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 28 values pushed */\0126 1 4 1 2 1 4 2 112 5 1 1 0 2 1 2 95 0 0 0 3 91 0 3 3 22 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 35 values pushed */\0126 1 4 1 2 1 4 2 112 0 3 0 0 1 3 0 99 5 1 1 4 2 1 87 5 1 1 1 2 91 0 2 1 2 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 20 values pushed */\01227 27 16 15 27 72 27 71 48 46 34 32 15 26 16 26 43 7 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 763;
}
);
leftKerningGroup = ampersand;
note = ampersand;
rightKerningGroup = ampersand;
unicode = 0026;
},
{
glyphname = paragraph;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"389 -207 LINE",
"389 668 LINE",
"476 668 LINE",
"476 -207 LINE",
"547 -207 LINE",
"547 746 LINE",
"299 746 LINE SMOOTH",
"147.632 746 OFFCURVE",
"33 636.898 OFFCURVE",
"33 508 CURVE SMOOTH",
"33 372.566 OFFCURVE",
"147.033 272 OFFCURVE",
"301 272 CURVE SMOOTH",
"318 272 LINE",
"318 -207 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 25 values pushed */\0120 1 4 0 4 1 0 112 0 4 4 2 89 0 2 2 20 75 3 1 0 0 25 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01238 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 23 values pushed */\0120 1 4 0 4 1 0 112 0 2 0 4 1 2 4 97 3 1 0 0 25 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 29 values pushed */\0120 1 4 0 4 1 0 112 3 1 0 0 113 0 2 4 4 2 85 0 2 2 4 89 0 4 2 4 77 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01217 17 40 33 16 5 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 602;
}
);
note = paragraph;
unicode = 00B6;
},
{
glyphname = section;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"210.333 210 OFFCURVE",
"174.167 234.333 OFFCURVE",
"156.5 255 CURVE SMOOTH",
"138.833 275.667 OFFCURVE",
"130 296.333 OFFCURVE",
"130 317 CURVE SMOOTH",
"130 362.333 OFFCURVE",
"167.667 395.667 OFFCURVE",
"221 401 CURVE",
"227 398.333 OFFCURVE",
"233.333 395.167 OFFCURVE",
"240 391.5 CURVE SMOOTH",
"246.667 387.833 OFFCURVE",
"253.333 384.333 OFFCURVE",
"260 381 CURVE",
"357.777 327.667 OFFCURVE",
"393 282.093 OFFCURVE",
"393 236 CURVE SMOOTH",
"393 194.667 OFFCURVE",
"369.667 159 OFFCURVE",
"331 143 CURVE",
"312.333 156.333 OFFCURVE",
"290.333 168.667 OFFCURVE",
"265 182 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"338.42 -222 OFFCURVE",
"441 -158.15 OFFCURVE",
"441 -33 CURVE SMOOTH",
"441 8.333 OFFCURVE",
"427.333 50.333 OFFCURVE",
"394 89 CURVE",
"448.667 117 OFFCURVE",
"490 170 OFFCURVE",
"490 250 CURVE SMOOTH",
"490 327.333 OFFCURVE",
"449.667 398 OFFCURVE",
"307 474 CURVE SMOOTH",
"220.333 523.333 OFFCURVE",
"180 555.333 OFFCURVE",
"180 598 CURVE SMOOTH",
"180 643.333 OFFCURVE",
"225 675 OFFCURVE",
"277 675 CURVE SMOOTH",
"322.333 675 OFFCURVE",
"361.333 662.667 OFFCURVE",
"400 640 CURVE",
"402 736 LINE",
"356.667 760 OFFCURVE",
"319.667 767 OFFCURVE",
"277 767 CURVE SMOOTH",
"157.668 767 OFFCURVE",
"80 679.642 OFFCURVE",
"80 586 CURVE SMOOTH",
"80 535.333 OFFCURVE",
"96.667 493.333 OFFCURVE",
"146 452 CURVE",
"72.667 422.667 OFFCURVE",
"34 355.333 OFFCURVE",
"34 294 CURVE SMOOTH",
"34 212.667 OFFCURVE",
"85 159 OFFCURVE",
"193 107 CURVE",
"297.264 51.54 OFFCURVE",
"339 11.975 OFFCURVE",
"339 -39 CURVE SMOOTH",
"339 -91 OFFCURVE",
"291.667 -127.667 OFFCURVE",
"221 -129 CURVE SMOOTH",
"167.667 -129 OFFCURVE",
"115.333 -107.667 OFFCURVE",
"62 -77 CURVE",
"60 -180 LINE",
"102.667 -204 OFFCURVE",
"163.667 -222 OFFCURVE",
"221 -222 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */\01252 1 3 2 68 53 41 24 14 3 6 1 3 23 1 0 1 3 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 22 values pushed */\0120 3 3 2 91 0 2 2 28 75 0 1 1 0 91 4 1 0 0 33 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01238 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 22 values pushed */\0120 3 3 2 91 0 2 2 22 75 0 1 1 0 91 4 1 0 0 33 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 20 values pushed */\0120 2 0 3 1 2 3 99 0 1 1 0 91 4 1 0 0 33 0 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 15 values pushed */\01221 20 57 55 50 48 28 26 20 75 21 75 5 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 516;
}
);
note = section;
unicode = 00A7;
},
{
glyphname = copyright;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"329.333 756 OFFCURVE",
"230.333 713.333 OFFCURVE",
"161 644 CURVE SMOOTH",
"91.667 574.667 OFFCURVE",
"50 478.333 OFFCURVE",
"50 373 CURVE SMOOTH",
"50 267.667 OFFCURVE",
"91.667 171.333 OFFCURVE",
"161 102 CURVE SMOOTH",
"230.333 32.667 OFFCURVE",
"329.333 -10 OFFCURVE",
"440 -10 CURVE SMOOTH",
"550.667 -10 OFFCURVE",
"648.667 32.667 OFFCURVE",
"718 102 CURVE SMOOTH",
"787.333 171.333 OFFCURVE",
"829 267.667 OFFCURVE",
"829 373 CURVE SMOOTH",
"829 478.333 OFFCURVE",
"787.333 574.667 OFFCURVE",
"718 644 CURVE SMOOTH",
"648.667 713.333 OFFCURVE",
"550.667 756 OFFCURVE",
"440 756 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"533.333 714 OFFCURVE",
"618.5 675.5 OFFCURVE",
"680.5 613.5 CURVE SMOOTH",
"742.5 551.5 OFFCURVE",
"781 466.333 OFFCURVE",
"781 373 CURVE SMOOTH",
"781 279.667 OFFCURVE",
"742.5 193.333 OFFCURVE",
"680.5 132 CURVE SMOOTH",
"618.5 70.667 OFFCURVE",
"533.333 32 OFFCURVE",
"440 32 CURVE SMOOTH",
"346.667 32 OFFCURVE",
"260.5 70.667 OFFCURVE",
"198.5 132 CURVE SMOOTH",
"136.5 193.333 OFFCURVE",
"98 279.667 OFFCURVE",
"98 373 CURVE SMOOTH",
"98 466.333 OFFCURVE",
"136.5 551.5 OFFCURVE",
"198.5 613.5 CURVE SMOOTH",
"260.5 675.5 OFFCURVE",
"346.667 714 OFFCURVE",
"440 714 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"559.667 592.333 OFFCURVE",
"507.667 611 OFFCURVE",
"453 611 CURVE SMOOTH",
"316.794 611 OFFCURVE",
"211 507.45 OFFCURVE",
"211 376 CURVE SMOOTH",
"211 244.219 OFFCURVE",
"317.28 140 OFFCURVE",
"453 140 CURVE SMOOTH",
"507.667 140 OFFCURVE",
"559.667 158.667 OFFCURVE",
"605 196 CURVE",
"561 261 LINE",
"527.667 238.333 OFFCURVE",
"495.333 225 OFFCURVE",
"458 225 CURVE SMOOTH",
"372.667 225 OFFCURVE",
"304 296 OFFCURVE",
"304 376 CURVE SMOOTH",
"304 456 OFFCURVE",
"372.667 526 OFFCURVE",
"458 526 CURVE SMOOTH",
"495.333 526 OFFCURVE",
"527.667 512.667 OFFCURVE",
"561 490 CURVE",
"605 555 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 80 values pushed */\01253 41 2 5 4 54 1 6 5 2 74 8 1 0 9 1 2 7 0 2 99 0 7 0 4 5 7 4 99 0 5 0 6 3 5 6 99 0 3 1 1 3 87 0 3 3 1 91 0 1 3 1 79 21 20 1 0 68 66 58 56 51 49 45 43 31 29 20 39 21 39 11 9 0 19 1 19 10 7 20 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 879;
}
);
leftKerningGroup = copyright;
note = copyright;
rightKerningGroup = copyright;
unicode = 00A9;
},
{
glyphname = registered;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"132.417 756 OFFCURVE",
"30 654.808 OFFCURVE",
"30 527 CURVE SMOOTH",
"30 397.963 OFFCURVE",
"132.212 297 OFFCURVE",
"264 297 CURVE SMOOTH",
"394.935 297 OFFCURVE",
"497 398.473 OFFCURVE",
"497 527 CURVE SMOOTH",
"497 654.295 OFFCURVE",
"394.73 756 OFFCURVE",
"264 756 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"376.66 731 OFFCURVE",
"468 639.217 OFFCURVE",
"468 527 CURVE SMOOTH",
"468 414.442 OFFCURVE",
"376.179 322 OFFCURVE",
"264 322 CURVE SMOOTH",
"150.982 322 OFFCURVE",
"59 413.982 OFFCURVE",
"59 527 CURVE SMOOTH",
"59 639.673 OFFCURVE",
"150.494 731 OFFCURVE",
"264 731 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"286.333 607 OFFCURVE",
"301 593.667 OFFCURVE",
"301 571 CURVE SMOOTH",
"301 548.333 OFFCURVE",
"287.333 534 OFFCURVE",
"262 534 CURVE SMOOTH",
"247 534 LINE",
"247 607 LINE",
"261 607 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"314 399 LINE",
"374 399 LINE",
"378 404 LINE",
"310 496 LINE",
"336.667 509.333 OFFCURVE",
"358 533.667 OFFCURVE",
"358 571 CURVE SMOOTH",
"358 636.333 OFFCURVE",
"311.667 659 OFFCURVE",
"261 659 CURVE SMOOTH",
"191 659 LINE",
"191 399 LINE",
"247 399 LINE",
"247 484 LINE",
"250 484 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 96 values pushed */\01261 50 2 6 5 1 74 0 5 4 6 4 5 6 112 12 8 2 6 3 4 6 3 110 9 1 0 10 1 2 7 0 2 99 0 7 11 1 4 5 7 4 99 0 3 1 1 3 87 0 3 3 1 92 0 1 3 1 80 49 49 41 40 21 20 1 0 49 63 49 63 56 54 53 52 44 42 40 48 41 48 31 29 20 39 21 39 11 9 0 19 1 19 13 7 20 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 527;
}
);
leftKerningGroup = registered;
note = registered;
rightKerningGroup = registered;
unicode = 00AE;
},
{
glyphname = published;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"329.333 756 OFFCURVE",
"230.333 713.333 OFFCURVE",
"161 644 CURVE SMOOTH",
"91.667 574.667 OFFCURVE",
"50 478.333 OFFCURVE",
"50 373 CURVE SMOOTH",
"50 267.667 OFFCURVE",
"91.667 171.333 OFFCURVE",
"161 102 CURVE SMOOTH",
"230.333 32.667 OFFCURVE",
"329.333 -10 OFFCURVE",
"440 -10 CURVE SMOOTH",
"550.667 -10 OFFCURVE",
"648.667 32.667 OFFCURVE",
"718 102 CURVE SMOOTH",
"787.333 171.333 OFFCURVE",
"829 267.667 OFFCURVE",
"829 373 CURVE SMOOTH",
"829 478.333 OFFCURVE",
"787.333 574.667 OFFCURVE",
"718 644 CURVE SMOOTH",
"648.667 713.333 OFFCURVE",
"550.667 756 OFFCURVE",
"440 756 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"533.333 714 OFFCURVE",
"619.667 675.333 OFFCURVE",
"681 614 CURVE SMOOTH",
"742.333 552.667 OFFCURVE",
"781 467.667 OFFCURVE",
"781 373 CURVE SMOOTH",
"781 279.667 OFFCURVE",
"742.333 193.333 OFFCURVE",
"681 132 CURVE SMOOTH",
"619.667 70.667 OFFCURVE",
"533.333 32 OFFCURVE",
"440 32 CURVE SMOOTH",
"345.333 32 OFFCURVE",
"259.333 70.667 OFFCURVE",
"198 132 CURVE SMOOTH",
"136.667 193.333 OFFCURVE",
"98 279.667 OFFCURVE",
"98 373 CURVE SMOOTH",
"98 467.667 OFFCURVE",
"136.667 552.667 OFFCURVE",
"198 614 CURVE SMOOTH",
"259.333 675.333 OFFCURVE",
"345.333 714 OFFCURVE",
"440 714 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"536.128 302 OFFCURVE",
"623 347.705 OFFCURVE",
"623 446 CURVE SMOOTH",
"623 557.845 OFFCURVE",
"551.333 593 OFFCURVE",
"452 593 CURVE SMOOTH",
"327 593 LINE",
"327 159 LINE",
"420 159 LINE",
"420 302 LINE",
"449 302 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"507 506 OFFCURVE",
"530 483.333 OFFCURVE",
"530 446 CURVE SMOOTH",
"530 411.333 OFFCURVE",
"500.333 389 OFFCURVE",
"459 389 CURVE SMOOTH",
"420 389 LINE",
"420 506 LINE",
"459 506 LINE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */\01257 55 44 42 29 20 9 0 4 48 \012CALL[ ]	/* CallFunction */";
};
width = 879;
}
);
leftKerningGroup = copyright;
note = copyrightsound;
rightKerningGroup = copyright;
unicode = 2117;
},
{
glyphname = trademark;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"81 442 LINE",
"147 442 LINE",
"147 686 LINE",
"208 686 LINE",
"208 746 LINE",
"18 746 LINE",
"18 686 LINE",
"81 686 LINE"
);
},
{
closed = 1;
nodes = (
"409 492 LINE",
"424 492 LINE",
"513 637 LINE",
"513 442 LINE",
"578 442 LINE",
"578 746 LINE",
"509 746 LINE",
"418 590 LINE",
"324 746 LINE",
"253 746 LINE",
"253 442 LINE",
"318 442 LINE",
"318 638 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\01212 10 3 0 2 48 \012CALL[ ]	/* CallFunction */";
};
width = 639;
}
);
leftKerningGroup = trademark;
note = trademark;
rightKerningGroup = trademark;
unicode = 2122;
},
{
glyphname = degree;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"94.671 765 OFFCURVE",
"22 692.048 OFFCURVE",
"22 605 CURVE SMOOTH",
"22 517.952 OFFCURVE",
"94.671 445 OFFCURVE",
"187 445 CURVE SMOOTH",
"278.493 445 OFFCURVE",
"351 518.452 OFFCURVE",
"351 605 CURVE SMOOTH",
"351 691.548 OFFCURVE",
"278.493 765 OFFCURVE",
"187 765 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"244.333 707 OFFCURVE",
"286 659.667 OFFCURVE",
"286 605 CURVE SMOOTH",
"286 550.333 OFFCURVE",
"244.333 503 OFFCURVE",
"187 503 CURVE SMOOTH",
"129.667 503 OFFCURVE",
"88 550.333 OFFCURVE",
"88 605 CURVE SMOOTH",
"88 659.667 OFFCURVE",
"129.667 707 OFFCURVE",
"187 707 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 45 values pushed */\0124 1 0 5 1 2 3 0 2 99 0 3 1 1 3 87 0 3 3 1 91 0 1 3 1 79 21 20 1 0 27 25 20 31 21 31 11 9 0 19 1 19 6 7 20 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 374;
}
);
note = degree;
rightKerningGroup = degree;
unicode = 00B0;
},
{
glyphname = minute;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"35 420 LINE",
"136 420 LINE",
"195 746 LINE",
"94 746 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 12 values pushed */\0122 1 1 1 0 89 0 0 0 20 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 17 values pushed */\0120 0 1 1 0 85 0 0 0 1 89 2 1 1 0 1 77 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 10 values pushed */\0120 0 0 3 0 3 17 3 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 230;
}
);
leftKerningGroup = minute;
note = minute;
rightKerningGroup = minute;
unicode = 2032;
},
{
glyphname = second;
layers = (
{
components = (
{
alignment = -1;
name = minute;
},
{
alignment = -1;
name = minute;
transform = "{1, 0, 0, 1, 187, 0}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 417;
}
);
leftKerningGroup = minute;
note = second;
rightKerningGroup = minute;
unicode = 2033;
},
{
glyphname = bar;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"59 746 LINE",
"59 -160 LINE",
"134 -160 LINE",
"134 746 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 11 values pushed */\0120 1 1 0 89 0 0 0 20 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 16 values pushed */\0120 0 1 1 0 85 0 0 0 1 89 0 1 0 1 77 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 5 values pushed */\01217 16 2 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 193;
}
);
note = bar;
unicode = 007C;
},
{
glyphname = brokenbar;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"59 746 LINE",
"59 346 LINE",
"134 346 LINE",
"134 746 LINE"
);
},
{
closed = 1;
nodes = (
"59 240 LINE",
"59 -160 LINE",
"134 -160 LINE",
"134 240 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 18 values pushed */\0120 2 0 3 2 3 93 0 1 1 0 89 0 0 0 20 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 24 values pushed */\0120 0 0 1 2 0 1 97 0 2 3 3 2 85 0 2 2 3 89 0 3 2 3 77 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 7 values pushed */\01217 17 17 16 4 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 193;
}
);
note = brokenbar;
unicode = 00A6;
},
{
glyphname = dagger;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"435 474 LINE",
"435 563 LINE",
"291 563 LINE",
"291 746 LINE",
"181 746 LINE",
"181 563 LINE",
"38 563 LINE",
"38 474 LINE",
"181 474 LINE",
"181 -80 LINE",
"291 -110 LINE",
"291 474 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 5 values pushed */\0123 2 2 0 71 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 18 values pushed */\0120 3 3 20 75 1 1 0 0 2 89 4 1 2 2 23 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 15 values pushed */\0124 1 2 1 1 0 2 0 93 0 3 3 20 3 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 24 values pushed */\0120 3 2 3 114 4 1 2 0 0 2 85 4 1 2 2 0 89 1 1 0 2 0 77 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01217 17 17 19 16 5 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 472;
}
);
leftKerningGroup = dagger;
note = dagger;
rightKerningGroup = dagger;
unicode = 2020;
},
{
glyphname = daggerdbl;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"436 223 LINE",
"436 312 LINE",
"293 312 LINE",
"293 474 LINE",
"436 474 LINE",
"436 563 LINE",
"293 563 LINE",
"293 746 LINE",
"183 746 LINE",
"183 563 LINE",
"39 563 LINE",
"39 474 LINE",
"183 474 LINE",
"183 312 LINE",
"39 312 LINE",
"39 223 LINE",
"183 223 LINE",
"183 -80 LINE",
"293 -110 LINE",
"293 223 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 5 values pushed */\0123 2 2 0 71 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 27 values pushed */\0128 1 2 1 1 0 2 0 93 0 5 5 20 75 7 1 3 3 4 89 6 1 4 4 23 3 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 25 values pushed */\0126 1 4 7 1 3 2 4 3 97 8 1 2 1 1 0 2 0 93 0 5 5 20 5 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 34 values pushed */\0120 5 4 5 114 6 1 4 7 1 3 2 4 3 97 8 1 2 0 0 2 85 8 1 2 2 0 89 1 1 0 2 0 77 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 12 values pushed */\01217 17 17 17 17 17 17 19 16 9 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 475;
}
);
leftKerningGroup = daggerdbl;
note = daggerdbl;
rightKerningGroup = daggerdbl;
unicode = 2021;
},
{
glyphname = registered.salt_big;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"329.333 756 OFFCURVE",
"230.333 713.333 OFFCURVE",
"161 644 CURVE SMOOTH",
"91.667 574.667 OFFCURVE",
"50 478.333 OFFCURVE",
"50 373 CURVE SMOOTH",
"50 267.667 OFFCURVE",
"91.667 171.333 OFFCURVE",
"161 102 CURVE SMOOTH",
"230.333 32.667 OFFCURVE",
"329.333 -10 OFFCURVE",
"440 -10 CURVE SMOOTH",
"550.667 -10 OFFCURVE",
"648.667 32.667 OFFCURVE",
"718 102 CURVE SMOOTH",
"787.333 171.333 OFFCURVE",
"829 267.667 OFFCURVE",
"829 373 CURVE SMOOTH",
"829 478.333 OFFCURVE",
"787.333 574.667 OFFCURVE",
"718 644 CURVE SMOOTH",
"648.667 713.333 OFFCURVE",
"550.667 756 OFFCURVE",
"440 756 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"533.333 714 OFFCURVE",
"618.5 675.333 OFFCURVE",
"680.5 614 CURVE SMOOTH",
"742.5 552.667 OFFCURVE",
"781 466.333 OFFCURVE",
"781 373 CURVE SMOOTH",
"781 279.667 OFFCURVE",
"742.5 194.5 OFFCURVE",
"680.5 132.5 CURVE SMOOTH",
"618.5 70.5 OFFCURVE",
"533.333 32 OFFCURVE",
"440 32 CURVE SMOOTH",
"346.667 32 OFFCURVE",
"260.5 70.5 OFFCURVE",
"198.5 132.5 CURVE SMOOTH",
"136.5 194.5 OFFCURVE",
"98 279.667 OFFCURVE",
"98 373 CURVE SMOOTH",
"98 466.333 OFFCURVE",
"136.5 552.667 OFFCURVE",
"198.5 614 CURVE SMOOTH",
"260.5 675.333 OFFCURVE",
"346.667 714 OFFCURVE",
"440 714 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"477.333 506 OFFCURVE",
"503 484.333 OFFCURVE",
"503 447 CURVE SMOOTH",
"503 409.667 OFFCURVE",
"479.667 387 OFFCURVE",
"437 387 CURVE SMOOTH",
"411 387 LINE",
"411 506 LINE",
"436 506 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"524 160 LINE",
"624 160 LINE",
"631 168 LINE",
"516 322 LINE",
"561.333 343.333 OFFCURVE",
"597 385.667 OFFCURVE",
"597 447 CURVE SMOOTH",
"597 548.766 OFFCURVE",
"525.808 593 OFFCURVE",
"436 593 CURVE SMOOTH",
"319 593 LINE",
"319 160 LINE",
"411 160 LINE",
"411 303 LINE",
"416 303 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */\01263 50 2 6 5 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 51 values pushed */\0120 5 4 6 4 5 6 112 12 8 2 6 3 4 6 3 110 10 1 2 2 0 91 9 1 0 0 20 75 11 1 4 4 7 89 0 7 7 23 75 0 3 3 1 92 0 1 1 32 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 49 values pushed */\0120 5 4 6 4 5 6 112 12 8 2 6 3 4 6 3 110 0 7 11 1 4 5 7 4 99 10 1 2 2 0 91 9 1 0 0 20 75 0 3 3 1 92 0 1 1 32 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 47 values pushed */\0120 5 4 6 4 5 6 112 12 8 2 6 3 4 6 3 110 9 1 0 10 1 2 7 0 2 99 0 7 11 1 4 5 7 4 99 0 3 3 1 92 0 1 1 32 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 52 values pushed */\0120 5 4 6 4 5 6 112 12 8 2 6 3 4 6 3 110 9 1 0 10 1 2 7 0 2 99 0 7 11 1 4 5 7 4 99 0 3 1 1 3 87 0 3 3 1 92 0 1 3 1 80 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 37 values pushed */\01249 49 41 40 21 20 1 0 49 65 49 65 56 54 53 52 44 42 40 48 41 48 31 29 20 39 21 39 11 9 0 19 1 19 13 7 20 \012CALL[ ]	/* CallFunction */";
};
width = 879;
}
);
leftKerningGroup = copyright;
note = registered.salt_big;
rightKerningGroup = copyright;
},
{
glyphname = cent;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"486 101 LINE",
"483 101 LINE",
"431 75.667 OFFCURVE",
"391.667 69 OFFCURVE",
"357 69 CURVE SMOOTH",
"237.401 69 OFFCURVE",
"139 167.401 OFFCURVE",
"139 287 CURVE SMOOTH",
"139 406.136 OFFCURVE",
"237.677 505 OFFCURVE",
"357 505 CURVE SMOOTH",
"390.333 505 OFFCURVE",
"440.333 496 OFFCURVE",
"483 468 CURVE",
"486 468 LINE",
"486 571 LINE",
"447.333 588.333 OFFCURVE",
"404.333 596.667 OFFCURVE",
"371 598 CURVE",
"371 695 LINE",
"292 695 LINE",
"292 594 LINE",
"138.103 569.7 OFFCURVE",
"24 444.621 OFFCURVE",
"24 287 CURVE SMOOTH",
"24 129.379 OFFCURVE",
"138.103 4.3 OFFCURVE",
"292 -20 CURVE",
"292 -117 LINE",
"371 -117 LINE",
"371 -25 LINE",
"407 -23.667 OFFCURVE",
"448.667 -15.667 OFFCURVE",
"486 -1 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */\01222 16 2 4 3 40 23 2 5 4 6 0 2 0 5 3 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01212 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 33 values pushed */\0120 2 3 3 2 102 0 1 0 0 1 103 0 4 4 3 91 0 3 3 31 75 0 5 5 0 91 0 0 0 29 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 32 values pushed */\0120 2 3 2 114 0 1 0 0 1 103 0 4 4 3 91 0 3 3 31 75 0 5 5 0 91 0 0 0 29 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 31 values pushed */\0120 2 3 2 114 0 1 0 1 115 0 4 4 3 91 0 3 3 31 75 0 5 5 0 91 0 0 0 29 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 29 values pushed */\0120 2 3 2 114 0 1 0 1 115 0 3 0 4 5 3 4 100 0 5 5 0 91 0 0 0 29 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 29 values pushed */\0120 2 3 2 114 0 1 0 1 115 0 3 0 4 5 3 4 100 0 5 5 0 91 0 0 0 32 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 34 values pushed */\0120 2 3 2 114 0 1 0 1 115 0 3 0 4 5 3 4 100 0 5 0 0 5 87 0 5 5 0 91 0 0 5 0 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 9 values pushed */\01240 38 17 28 17 18 6 7 26 \012CALL[ ]	/* CallFunction */";
};
width = 510;
}
);
note = cent;
unicode = 00A2;
},
{
glyphname = currency;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"476 149 LINE",
"539 214 LINE",
"449 304 LINE",
"465 332 OFFCURVE",
"474 363.667 OFFCURVE",
"474 397 CURVE SMOOTH",
"474 430.333 OFFCURVE",
"465 463 OFFCURVE",
"449 491 CURVE",
"539 581 LINE",
"476 645 LINE",
"386 556 LINE",
"358 573.333 OFFCURVE",
"323.333 585 OFFCURVE",
"286 585 CURVE SMOOTH",
"248.667 585 OFFCURVE",
"214.333 573.333 OFFCURVE",
"185 556 CURVE",
"95 645 LINE",
"32 581 LINE",
"123 490 LINE",
"107 462 OFFCURVE",
"98 430.333 OFFCURVE",
"98 397 CURVE SMOOTH",
"98 363.667 OFFCURVE",
"106.667 331 OFFCURVE",
"124 303 CURVE",
"32 213 LINE",
"95 149 LINE",
"186 238 LINE",
"214 220.667 OFFCURVE",
"248.667 209 OFFCURVE",
"286 209 CURVE SMOOTH",
"323.333 209 OFFCURVE",
"358 220.667 OFFCURVE",
"386 238 CURVE"
);
},
{
closed = 1;
nodes = (
"347.333 509 OFFCURVE",
"395 455.667 OFFCURVE",
"395 397 CURVE SMOOTH",
"395 338.333 OFFCURVE",
"347.333 285 OFFCURVE",
"286 285 CURVE SMOOTH",
"223.333 285 OFFCURVE",
"177 338.333 OFFCURVE",
"177 397 CURVE SMOOTH",
"177 455.667 OFFCURVE",
"223.333 509 OFFCURVE",
"286 509 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */\01227 25 19 17 4 2 1 34 28 16 10 4 3 2 35 9 7 1 4 0 3 3 74 26 18 2 1 72 8 1 0 71 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01226 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 19 values pushed */\0120 3 0 0 3 0 95 4 1 2 2 1 91 0 1 1 23 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 25 values pushed */\0120 1 4 1 2 3 1 2 99 0 3 0 0 3 87 0 3 3 0 91 0 0 3 0 79 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\01237 36 43 41 36 47 37 47 23 21 35 5 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 572;
}
);
note = currency;
unicode = 00A4;
},
{
glyphname = dollar;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"304 -116 LINE",
"304 3 LINE",
"411.413 19.525 OFFCURVE",
"495 81.639 OFFCURVE",
"495 193 CURVE SMOOTH",
"495 291.333 OFFCURVE",
"418.751 341.989 OFFCURVE",
"302 423 CURVE SMOOTH",
"253.333 455.667 OFFCURVE",
"217.667 482.667 OFFCURVE",
"195 504 CURVE SMOOTH",
"172.333 525.333 OFFCURVE",
"161 548.333 OFFCURVE",
"161 573 CURVE SMOOTH",
"161 585.667 OFFCURVE",
"170 600.167 OFFCURVE",
"188 616.5 CURVE SMOOTH",
"206 632.833 OFFCURVE",
"239 641 OFFCURVE",
"287 641 CURVE SMOOTH",
"348.333 641 OFFCURVE",
"405.667 623.667 OFFCURVE",
"447 597 CURVE",
"446 700 LINE",
"404.667 722.667 OFFCURVE",
"350.667 734.333 OFFCURVE",
"304 737 CURVE",
"304 848 LINE",
"226 848 LINE",
"226 735 LINE",
"104.667 720.333 OFFCURVE",
"42 646 OFFCURVE",
"42 570 CURVE SMOOTH",
"42 490 OFFCURVE",
"90 435.667 OFFCURVE",
"222 349 CURVE SMOOTH",
"275.333 313 OFFCURVE",
"314.833 283.667 OFFCURVE",
"340.5 261 CURVE SMOOTH",
"366.167 238.333 OFFCURVE",
"379 215 OFFCURVE",
"379 191 CURVE SMOOTH",
"379 144.333 OFFCURVE",
"331.333 95 OFFCURVE",
"234 95 CURVE SMOOTH",
"158 95 OFFCURVE",
"102 110.667 OFFCURVE",
"38 152 CURVE",
"38 46 LINE",
"82 15.333 OFFCURVE",
"158 -0.667 OFFCURVE",
"226 -2 CURVE",
"226 -116 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */\01227 21 2 5 4 28 6 2 2 5 47 5 2 1 2 3 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01211 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 33 values pushed */\0120 3 4 4 3 102 0 0 1 1 0 103 0 5 5 4 91 0 4 4 20 75 0 2 2 1 91 0 1 1 21 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 31 values pushed */\0120 3 4 3 114 0 0 1 0 115 0 5 5 4 91 0 4 4 20 75 0 2 2 1 91 0 1 1 21 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 29 values pushed */\0120 3 4 3 114 0 0 1 0 115 0 4 0 5 2 4 5 100 0 2 2 1 91 0 1 1 24 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 34 values pushed */\0120 3 4 3 114 0 0 1 0 115 0 4 0 5 2 4 5 100 0 2 1 1 2 87 0 2 2 1 91 0 1 2 1 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 9 values pushed */\01237 17 28 37 17 16 6 7 26 \012CALL[ ]	/* CallFunction */";
};
width = 524;
}
);
note = dollar;
unicode = 0024;
},
{
glyphname = euro;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"601 116 LINE",
"562.333 92 OFFCURVE",
"520.667 77 OFFCURVE",
"474 77 CURVE SMOOTH",
"363.333 77 OFFCURVE",
"275.333 154.667 OFFCURVE",
"238 260 CURVE",
"490 260 LINE",
"505 327 LINE",
"221 327 LINE",
"220.333 335 OFFCURVE",
"219.667 343 OFFCURVE",
"219 351 CURVE SMOOTH",
"218.333 359 OFFCURVE",
"218 367 OFFCURVE",
"218 375 CURVE SMOOTH",
"218 385.667 OFFCURVE",
"218.667 397.333 OFFCURVE",
"220 408 CURVE",
"520 408 LINE",
"535 476 LINE",
"233 476 LINE",
"267.667 585.333 OFFCURVE",
"359.333 669 OFFCURVE",
"474 669 CURVE SMOOTH",
"520.667 669 OFFCURVE",
"562.333 653.667 OFFCURVE",
"601 631 CURVE",
"601 735 LINE",
"557 756.333 OFFCURVE",
"511.667 767 OFFCURVE",
"461 767 CURVE SMOOTH",
"373 767 OFFCURVE",
"295.833 735.833 OFFCURVE",
"236.5 684.5 CURVE SMOOTH",
"177.167 633.167 OFFCURVE",
"133.667 560 OFFCURVE",
"115 476 CURVE",
"21 476 LINE",
"6 408 LINE",
"105 408 LINE",
"104.333 402.667 OFFCURVE",
"104 397 OFFCURVE",
"104 391 CURVE SMOOTH",
"104 385 OFFCURVE",
"104 379.333 OFFCURVE",
"104 374 CURVE SMOOTH",
"104 358 OFFCURVE",
"104.667 341.667 OFFCURVE",
"106 327 CURVE",
"21 327 LINE",
"6 260 LINE",
"118 260 LINE",
"138 178.667 OFFCURVE",
"181.333 108.5 OFFCURVE",
"240 58.5 CURVE SMOOTH",
"298.667 8.5 OFFCURVE",
"375.667 -21 OFFCURVE",
"461 -21 CURVE SMOOTH",
"511.667 -21 OFFCURVE",
"558.333 -10.333 OFFCURVE",
"601 11 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */\01228 1 6 5 29 1 4 6 53 1 11 1 0 1 0 11 4 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 41 values pushed */\0127 1 4 8 1 3 2 4 3 97 9 1 2 10 1 1 11 2 1 97 0 6 6 5 91 0 5 5 28 75 0 11 11 0 91 0 0 0 29 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01238 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 41 values pushed */\0127 1 4 8 1 3 2 4 3 97 9 1 2 10 1 1 11 2 1 97 0 6 6 5 91 0 5 5 22 75 0 11 11 0 91 0 0 0 32 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 39 values pushed */\0120 5 0 6 4 5 6 99 7 1 4 8 1 3 2 4 3 97 9 1 2 10 1 1 11 2 1 97 0 11 11 0 91 0 0 0 32 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 44 values pushed */\0120 5 0 6 4 5 6 99 7 1 4 8 1 3 2 4 3 97 9 1 2 10 1 1 11 2 1 97 0 11 0 0 11 87 0 11 11 0 91 0 0 11 0 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 18 values pushed */\01251 49 47 46 45 44 17 18 37 36 17 22 17 20 34 12 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 635;
}
);
note = Euro;
unicode = 20AC;
},
{
glyphname = florin;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"252.667 12.667 OFFCURVE",
"260.5 68.667 OFFCURVE",
"270.5 138 CURVE SMOOTH",
"279.19 198.249 OFFCURVE",
"293.098 303.57 OFFCURVE",
"302 367 CURVE",
"396 367 LINE",
"396 460 LINE",
"315 460 LINE",
"317.667 478.667 OFFCURVE",
"320.167 495.667 OFFCURVE",
"322.5 511 CURVE SMOOTH",
"324.833 526.333 OFFCURVE",
"326.667 540 OFFCURVE",
"328 552 CURVE SMOOTH",
"340 638.667 OFFCURVE",
"390.667 649 OFFCURVE",
"436 649 CURVE",
"436 746 LINE",
"316.738 746 OFFCURVE",
"236.766 703.719 OFFCURVE",
"217 553 CURVE SMOOTH",
"215.667 541 OFFCURVE",
"213.833 527.167 OFFCURVE",
"211.5 511.5 CURVE SMOOTH",
"209.167 495.833 OFFCURVE",
"206.667 478.667 OFFCURVE",
"204 460 CURVE",
"110 460 LINE",
"110 367 LINE",
"191 367 LINE",
"182.145 303.906 OFFCURVE",
"168.141 198.914 OFFCURVE",
"159.5 139 CURVE SMOOTH",
"151.35 82.491 OFFCURVE",
"142.199 14.796 OFFCURVE",
"138 -9 CURVE",
"125.746 -102.129 OFFCURVE",
"88.624 -123 OFFCURVE",
"23 -123 CURVE",
"23 -220 LINE",
"162.43 -220 OFFCURVE",
"226.985 -171.102 OFFCURVE",
"250 -10 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 31 values pushed */\0126 1 3 7 1 2 1 3 2 97 0 5 5 4 91 0 4 4 20 75 0 1 1 0 91 0 0 0 25 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 29 values pushed */\0120 4 0 5 3 4 5 99 6 1 3 7 1 2 1 3 2 97 0 1 1 0 91 0 0 0 25 0 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 11 values pushed */\01217 21 17 23 17 25 17 20 8 7 28 \012CALL[ ]	/* CallFunction */";
};
width = 468;
}
);
note = florin;
unicode = 0192;
},
{
glyphname = sterling;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"555 89 LINE",
"230 89 LINE",
"252.667 113 OFFCURVE",
"267 153 OFFCURVE",
"267 209 CURVE SMOOTH",
"267 350 LINE",
"455 350 LINE",
"455 425 LINE",
"267 425 LINE",
"267 559 LINE SMOOTH",
"267 626.344 OFFCURVE",
"339.08 668 OFFCURVE",
"410 668 CURVE SMOOTH",
"446 668 OFFCURVE",
"482 660.667 OFFCURVE",
"518 642 CURVE",
"518 740 LINE",
"476.667 757.333 OFFCURVE",
"435.333 761 OFFCURVE",
"394 761 CURVE SMOOTH",
"268.686 761 OFFCURVE",
"155 689.271 OFFCURVE",
"155 568 CURVE SMOOTH",
"155 425 LINE",
"69 425 LINE",
"69 350 LINE",
"155 350 LINE",
"155 209 LINE SMOOTH",
"155 129 OFFCURVE",
"127.333 89 OFFCURVE",
"66 89 CURVE SMOOTH",
"41 89 LINE",
"41 0 LINE",
"555 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */\01220 1 5 4 21 1 3 5 2 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 33 values pushed */\0126 1 3 7 1 2 1 3 2 97 0 5 5 4 91 0 4 4 28 75 9 8 2 1 1 0 89 0 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 31 values pushed */\0120 4 0 5 3 4 5 99 6 1 3 7 1 2 1 3 2 97 9 8 2 1 1 0 89 0 0 0 24 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 38 values pushed */\0120 4 0 5 3 4 5 99 6 1 3 7 1 2 1 3 2 97 9 8 2 1 0 0 1 87 9 8 2 1 1 0 89 0 0 1 0 77 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 17 values pushed */\0120 0 0 37 0 37 17 21 37 37 17 19 33 17 10 7 28 \012CALL[ ]	/* CallFunction */";
};
width = 591;
}
);
note = sterling;
unicode = 00A3;
},
{
glyphname = yen;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"585 164 LINE",
"585 237 LINE",
"375 237 LINE",
"375 272 LINE",
"402 325 LINE",
"585 325 LINE",
"585 399 LINE",
"441 399 LINE",
"622 746 LINE",
"500 746 LINE",
"318 386 LINE",
"141 746 LINE",
"13 746 LINE",
"193 399 LINE",
"56 399 LINE",
"56 325 LINE",
"231 325 LINE",
"257 275 LINE",
"257 237 LINE",
"56 237 LINE",
"56 164 LINE",
"257 164 LINE",
"257 0 LINE",
"375 0 LINE",
"375 164 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */\01215 1 4 5 22 8 2 3 4 2 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 32 values pushed */\0128 1 5 9 1 4 3 5 4 98 10 1 3 2 1 0 1 3 0 97 7 1 6 6 20 75 0 1 1 21 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 32 values pushed */\0127 1 6 5 6 114 8 1 5 9 1 4 3 5 4 98 10 1 3 2 1 0 1 3 0 97 0 1 1 24 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 40 values pushed */\0127 1 6 5 6 114 0 1 0 1 115 8 1 5 9 1 4 3 5 4 98 10 1 3 0 0 3 85 10 1 3 3 0 89 2 1 0 3 0 77 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 16 values pushed */\01224 23 21 20 17 18 17 17 18 17 17 17 16 11 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 635;
}
);
note = yen;
unicode = 00A5;
},
{
glyphname = plus;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"578 306 LINE",
"578 396 LINE",
"360 396 LINE",
"360 616 LINE",
"257 616 LINE",
"257 396 LINE",
"39 396 LINE",
"39 306 LINE",
"257 306 LINE",
"257 66 LINE",
"360 66 LINE",
"360 306 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */\0120 4 3 1 4 85 5 1 3 2 1 0 1 3 0 97 0 4 4 1 89 0 1 4 1 77 17 17 17 17 17 16 6 7 26 \012CALL[ ]	/* CallFunction */";
};
width = 617;
}
);
leftKerningGroup = plus;
note = plus;
rightKerningGroup = plus;
unicode = 002B;
},
{
glyphname = minus;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"544 395 LINE",
"34 395 LINE",
"34 304 LINE",
"544 304 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0121 0 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 578;
}
);
leftKerningGroup = plus;
note = minus;
rightKerningGroup = plus;
unicode = 2212;
},
{
glyphname = multiply;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"446 98 LINE",
"509 161 LINE",
"328 342 LINE",
"487 501 LINE",
"425 563 LINE",
"266 404 LINE",
"98 572 LINE",
"34 510 LINE",
"203 341 LINE",
"29 168 LINE",
"91 106 LINE",
"265 279 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0126 0 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 539;
}
);
note = multiply;
unicode = 00D7;
},
{
glyphname = divide;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"245 491 LINE",
"353 491 LINE",
"353 609 LINE",
"245 609 LINE"
);
},
{
closed = 1;
nodes = (
"560 395 LINE",
"36 395 LINE",
"36 304 LINE",
"560 304 LINE"
);
},
{
closed = 1;
nodes = (
"245 90 LINE",
"353 90 LINE",
"353 208 LINE",
"245 208 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */\0120 0 6 1 1 3 0 1 97 7 1 3 0 2 4 3 2 97 0 4 5 5 4 85 0 4 4 5 89 8 1 5 4 5 77 8 8 4 4 0 0 8 11 8 11 10 9 4 7 4 7 6 5 0 3 0 3 17 9 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 598;
}
);
leftKerningGroup = plus;
note = divide;
rightKerningGroup = plus;
unicode = 00F7;
},
{
glyphname = equal;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"508 488 LINE",
"38 488 LINE",
"38 404 LINE",
"508 404 LINE"
);
},
{
closed = 1;
nodes = (
"508 275 LINE",
"38 275 LINE",
"38 191 LINE",
"508 191 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */\0124 1 1 0 0 3 1 0 97 5 1 3 2 2 3 85 5 1 3 3 2 89 0 2 3 2 77 4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 545;
}
);
note = equal;
unicode = 003D;
},
{
glyphname = notequal;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"196 18 LINE",
"266 191 LINE",
"504 191 LINE",
"504 275 LINE",
"300 275 LINE",
"352 404 LINE",
"504 404 LINE",
"504 488 LINE",
"386 488 LINE",
"457 663 LINE",
"360 662 LINE",
"290 488 LINE",
"38 488 LINE",
"38 404 LINE",
"256 404 LINE",
"203 275 LINE",
"38 275 LINE",
"38 191 LINE",
"169 191 LINE",
"99 17 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\01211 1 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 542;
}
);
note = notequal;
rightKerningGroup = f;
unicode = 2260;
},
{
glyphname = greater;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"27 21 LINE",
"534 269 LINE",
"534 358 LINE",
"27 607 LINE",
"27 509 LINE",
"434 315 LINE",
"27 123 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0124 0 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 561;
}
);
note = greater;
unicode = 003E;
},
{
glyphname = less;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"533 21 LINE",
"533 123 LINE",
"126 315 LINE",
"533 509 LINE",
"533 607 LINE",
"27 358 LINE",
"27 269 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0123 0 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 561;
}
);
note = less;
unicode = 003C;
},
{
glyphname = greaterequal;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"27 144 LINE",
"533 330 LINE",
"533 419 LINE",
"27 607 LINE",
"27 509 LINE",
"415 376 LINE",
"27 246 LINE"
);
},
{
closed = 1;
nodes = (
"533 107 LINE",
"27 107 LINE",
"27 27 LINE",
"533 27 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\0128 7 4 0 2 48 \012CALL[ ]	/* CallFunction */";
};
width = 560;
}
);
note = greaterequal;
unicode = 2265;
},
{
glyphname = lessequal;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"533 144 LINE",
"533 246 LINE",
"145 376 LINE",
"533 509 LINE",
"533 607 LINE",
"27 419 LINE",
"27 330 LINE"
);
},
{
closed = 1;
nodes = (
"27 107 LINE",
"27 27 LINE",
"533 27 LINE",
"533 107 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\0129 7 3 0 2 48 \012CALL[ ]	/* CallFunction */";
};
width = 560;
}
);
note = lessequal;
unicode = 2264;
},
{
glyphname = plusminus;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"567 322 LINE",
"567 412 LINE",
"356 412 LINE",
"356 620 LINE",
"253 620 LINE",
"253 412 LINE",
"40 412 LINE",
"40 322 LINE",
"253 322 LINE",
"253 141 LINE",
"356 141 LINE",
"356 322 LINE"
);
},
{
closed = 1;
nodes = (
"568 102 LINE",
"39 102 LINE",
"39 21 LINE",
"568 21 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01224 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 30 values pushed */\0125 1 3 2 1 0 1 3 0 97 0 4 0 1 7 4 1 97 8 1 7 7 6 89 0 6 6 21 6 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 36 values pushed */\0125 1 3 2 1 0 1 3 0 97 0 4 0 1 7 4 1 97 8 1 7 6 6 7 85 8 1 7 7 6 89 0 6 7 6 77 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 16 values pushed */\01212 12 12 15 12 15 18 17 17 17 17 17 16 9 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 607;
}
);
note = plusminus;
unicode = 00B1;
},
{
glyphname = approxequal;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"121 427.667 OFFCURVE",
"148.667 437.333 OFFCURVE",
"174 436 CURVE",
"232.478 436 OFFCURVE",
"326.786 362 OFFCURVE",
"397 362 CURVE SMOOTH",
"467.357 362 OFFCURVE",
"522 401.195 OFFCURVE",
"522 498 CURVE",
"440 511 LINE",
"438.667 465.667 OFFCURVE",
"411.333 459 OFFCURVE",
"386 459 CURVE SMOOTH",
"329.042 459 OFFCURVE",
"231.47 534 OFFCURVE",
"162 534 CURVE SMOOTH",
"93.919 534 OFFCURVE",
"39 493.074 OFFCURVE",
"39 397 CURVE",
"121 385 LINE"
);
},
{
closed = 1;
nodes = (
"121 216.333 OFFCURVE",
"148.667 223 OFFCURVE",
"174 223 CURVE SMOOTH",
"228.982 223 OFFCURVE",
"330.12 148 OFFCURVE",
"397 148 CURVE SMOOTH",
"467.211 148 OFFCURVE",
"522 188.221 OFFCURVE",
"522 285 CURVE",
"440 298 LINE",
"438.667 252.667 OFFCURVE",
"411.333 245.667 OFFCURVE",
"386 247 CURVE",
"327.837 247 OFFCURVE",
"232.991 321 OFFCURVE",
"162 321 CURVE SMOOTH",
"94.568 321 OFFCURVE",
"39 280.247 OFFCURVE",
"39 185 CURVE",
"121 171 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\01247 33 19 5 2 48 \012CALL[ ]	/* CallFunction */";
};
width = 561;
}
);
note = approxequal;
unicode = 2248;
},
{
glyphname = asciitilde;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"155 265 OFFCURVE",
"160.333 288.167 OFFCURVE",
"171 298.5 CURVE SMOOTH",
"181.667 308.833 OFFCURVE",
"193.333 314 OFFCURVE",
"206 314 CURVE SMOOTH",
"275.941 314 OFFCURVE",
"390.207 206 OFFCURVE",
"473 206 CURVE SMOOTH",
"554.333 206 OFFCURVE",
"612 264 OFFCURVE",
"612 384 CURVE",
"510 391 LINE",
"510 355 OFFCURVE",
"504.833 332.167 OFFCURVE",
"494.5 322.5 CURVE SMOOTH",
"484.167 312.833 OFFCURVE",
"472.333 308 OFFCURVE",
"459 308 CURVE SMOOTH",
"389.685 308 OFFCURVE",
"280.051 418 OFFCURVE",
"199 418 CURVE SMOOTH",
"119 418 OFFCURVE",
"53 368 OFFCURVE",
"53 236 CURVE",
"155 229 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 38 values pushed */\0120 3 1 5 2 3 104 0 0 2 4 5 0 104 0 1 0 5 2 1 5 99 0 2 0 4 2 87 0 2 2 4 92 0 4 2 4 80 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 40 values pushed */\0120 3 1 5 1 3 5 112 0 0 2 4 2 0 4 112 0 1 0 5 2 1 5 99 0 2 0 4 2 87 0 2 2 4 92 0 4 2 4 80 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 9 values pushed */\01235 34 18 35 34 16 6 7 26 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 665;
}
);
note = asciitilde;
unicode = 007E;
},
{
glyphname = logicalnot;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"614 128 LINE",
"614 435 LINE",
"30 435 LINE",
"30 339 LINE",
"502 339 LINE",
"502 128 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */\0120 0 1 0 115 0 2 1 1 2 85 0 2 2 1 89 0 1 2 1 77 17 17 16 3 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 654;
}
);
note = logicalnot;
unicode = 00AC;
},
{
glyphname = asciicircum;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"476 369 LINE",
"584 369 LINE",
"359 746 LINE",
"265 746 LINE",
"43 369 LINE",
"149 369 LINE",
"313 650 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 28 values pushed */\0121 1 0 1 1 74 0 1 0 1 114 3 2 2 0 0 105 0 0 0 6 0 6 17 18 4 7 22 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 627;
}
);
note = asciicircum;
unicode = 005E;
},
{
glyphname = infinity;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"591.909 165 OFFCURVE",
"663 246.668 OFFCURVE",
"663 341 CURVE SMOOTH",
"663 434.55 OFFCURVE",
"594.532 517 OFFCURVE",
"499 517 CURVE SMOOTH",
"431 517 OFFCURVE",
"379.667 483.667 OFFCURVE",
"337 413 CURVE",
"299.667 467.667 OFFCURVE",
"256.667 517 OFFCURVE",
"178 517 CURVE SMOOTH",
"81.516 517 OFFCURVE",
"11 435.245 OFFCURVE",
"11 341 CURVE SMOOTH",
"11 247.018 OFFCURVE",
"81.737 165 OFFCURVE",
"175 165 CURVE SMOOTH",
"251 165 OFFCURVE",
"299.333 210.667 OFFCURVE",
"338 272 CURVE",
"371.333 220 OFFCURVE",
"416.333 165 OFFCURVE",
"495 165 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"130.667 245 OFFCURVE",
"95 291.667 OFFCURVE",
"95 341 CURVE SMOOTH",
"95 390.333 OFFCURVE",
"130.667 437 OFFCURVE",
"180 437 CURVE SMOOTH",
"234.667 437 OFFCURVE",
"254 397 OFFCURVE",
"294 337 CURVE",
"272.667 295.667 OFFCURVE",
"242.667 245 OFFCURVE",
"184 245 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"436.667 245 OFFCURVE",
"416 289.667 OFFCURVE",
"380 347 CURVE",
"408 401.667 OFFCURVE",
"436.667 437 OFFCURVE",
"490 437 CURVE SMOOTH",
"542 437 OFFCURVE",
"579 390.333 OFFCURVE",
"579 341 CURVE SMOOTH",
"579 291.667 OFFCURVE",
"543.333 245 OFFCURVE",
"494 245 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */\01249 44 37 32 15 0 3 48 \012CALL[ ]	/* CallFunction */";
};
width = 674;
}
);
note = infinity;
unicode = 221E;
},
{
glyphname = radical;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"371 0 LINE",
"657 746 LINE",
"559 746 LINE",
"316 109 LINE",
"195 455 LINE",
"42 455 LINE",
"42 365 LINE",
"130 365 LINE",
"260 0 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0127 0 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 662;
}
);
note = radical;
unicode = 221A;
},
{
glyphname = percent;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"672 746 LINE",
"582 746 LINE",
"104 0 LINE",
"193 0 LINE"
);
},
{
closed = 1;
nodes = (
"91 746 OFFCURVE",
"24 682 OFFCURVE",
"24 558 CURVE SMOOTH",
"24 531 LINE SMOOTH",
"24 408.333 OFFCURVE",
"91 344 OFFCURVE",
"179 344 CURVE SMOOTH",
"268.333 344 OFFCURVE",
"335 408.333 OFFCURVE",
"335 531 CURVE SMOOTH",
"335 558 LINE SMOOTH",
"335 682 OFFCURVE",
"268.333 746 OFFCURVE",
"179 746 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"249 448 OFFCURVE",
"220.333 407 OFFCURVE",
"179 407 CURVE SMOOTH",
"139 407 OFFCURVE",
"110 448 OFFCURVE",
"110 532 CURVE SMOOTH",
"110 557 LINE SMOOTH",
"110 641 OFFCURVE",
"139 683 OFFCURVE",
"179 683 CURVE SMOOTH",
"220.333 683 OFFCURVE",
"249 641 OFFCURVE",
"249 557 CURVE SMOOTH",
"249 532 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"508 402 OFFCURVE",
"441 338 OFFCURVE",
"441 214 CURVE SMOOTH",
"441 187 LINE SMOOTH",
"441 64.333 OFFCURVE",
"508 0 OFFCURVE",
"596 0 CURVE SMOOTH",
"685.333 0 OFFCURVE",
"752 64.333 OFFCURVE",
"752 187 CURVE SMOOTH",
"752 214 LINE SMOOTH",
"752 338 OFFCURVE",
"685.333 402 OFFCURVE",
"596 402 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"665 104 OFFCURVE",
"637.333 63 OFFCURVE",
"596 63 CURVE SMOOTH",
"556 63 OFFCURVE",
"527 104 OFFCURVE",
"527 188 CURVE SMOOTH",
"527 213 LINE SMOOTH",
"527 297 OFFCURVE",
"556 339 OFFCURVE",
"596 339 CURVE SMOOTH",
"637.333 339 OFFCURVE",
"665 297 OFFCURVE",
"665 213 CURVE SMOOTH",
"665 188 LINE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 36 values pushed */\01212 6 2 5 8 1 3 9 5 3 100 0 4 4 1 91 11 2 10 3 1 1 20 75 0 9 9 0 91 7 1 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 34 values pushed */\01211 2 10 3 1 0 4 5 1 4 99 12 6 2 5 8 1 3 9 5 3 100 0 9 9 0 91 7 1 0 0 24 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01246 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 39 values pushed */\01211 2 10 3 1 0 4 5 1 4 99 12 6 2 5 8 1 3 9 5 3 100 0 9 0 0 9 87 0 9 9 0 91 7 1 0 9 0 79 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 45 values pushed */\01211 2 10 3 1 0 4 5 1 4 99 0 5 0 3 8 5 3 99 12 1 6 0 8 9 6 8 100 0 9 0 0 9 87 0 9 9 0 91 7 1 0 9 0 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 34 values pushed */\01233 32 5 4 0 0 58 56 51 49 40 38 32 45 33 45 30 28 23 21 12 10 4 17 5 17 0 3 0 3 17 13 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 775;
}
);
leftKerningGroup = percent;
note = percent;
unicode = 0025;
},
{
glyphname = perthousand;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"672 746 LINE",
"582 746 LINE",
"104 0 LINE",
"193 0 LINE"
);
},
{
closed = 1;
nodes = (
"91 746 OFFCURVE",
"24 682 OFFCURVE",
"24 558 CURVE SMOOTH",
"24 531 LINE SMOOTH",
"24 408.333 OFFCURVE",
"91 344 OFFCURVE",
"179 344 CURVE SMOOTH",
"268.333 344 OFFCURVE",
"335 408.333 OFFCURVE",
"335 531 CURVE SMOOTH",
"335 558 LINE SMOOTH",
"335 682 OFFCURVE",
"268.333 746 OFFCURVE",
"179 746 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"249 448 OFFCURVE",
"220.333 407 OFFCURVE",
"179 407 CURVE SMOOTH",
"139 407 OFFCURVE",
"110 448 OFFCURVE",
"110 532 CURVE SMOOTH",
"110 557 LINE SMOOTH",
"110 641 OFFCURVE",
"139 683 OFFCURVE",
"179 683 CURVE SMOOTH",
"220.333 683 OFFCURVE",
"249 641 OFFCURVE",
"249 557 CURVE SMOOTH",
"249 532 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"508 402 OFFCURVE",
"441 338 OFFCURVE",
"441 214 CURVE SMOOTH",
"441 187 LINE SMOOTH",
"441 64.333 OFFCURVE",
"508 0 OFFCURVE",
"596 0 CURVE SMOOTH",
"685.333 0 OFFCURVE",
"752 64.333 OFFCURVE",
"752 187 CURVE SMOOTH",
"752 214 LINE SMOOTH",
"752 338 OFFCURVE",
"685.333 402 OFFCURVE",
"596 402 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"871.333 402 OFFCURVE",
"804 338 OFFCURVE",
"804 214 CURVE SMOOTH",
"804 187 LINE SMOOTH",
"804 64.333 OFFCURVE",
"871.333 0 OFFCURVE",
"958 0 CURVE SMOOTH",
"1047.333 0 OFFCURVE",
"1113 64.333 OFFCURVE",
"1113 187 CURVE SMOOTH",
"1113 214 LINE SMOOTH",
"1113 338 OFFCURVE",
"1047.333 402 OFFCURVE",
"958 402 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1028 102.333 OFFCURVE",
"999.333 62 OFFCURVE",
"958 62 CURVE SMOOTH",
"918 62 OFFCURVE",
"889 102.333 OFFCURVE",
"889 189 CURVE SMOOTH",
"889 213 LINE SMOOTH",
"889 297 OFFCURVE",
"918 340 OFFCURVE",
"958 340 CURVE SMOOTH",
"999.333 340 OFFCURVE",
"1028 297 OFFCURVE",
"1028 213 CURVE SMOOTH",
"1028 189 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"665 104 OFFCURVE",
"637.333 63 OFFCURVE",
"596 63 CURVE SMOOTH",
"556 63 OFFCURVE",
"527 104 OFFCURVE",
"527 188 CURVE SMOOTH",
"527 213 LINE SMOOTH",
"527 297 OFFCURVE",
"556 339 OFFCURVE",
"596 339 CURVE SMOOTH",
"637.333 339 OFFCURVE",
"665 297 OFFCURVE",
"665 213 CURVE SMOOTH",
"665 188 LINE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01233 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 41 values pushed */\01217 8 16 6 4 5 12 10 2 3 11 5 3 100 0 4 4 1 91 15 2 14 3 1 1 20 75 13 1 11 11 0 91 9 7 2 0 0 21 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 39 values pushed */\01215 2 14 3 1 0 4 5 1 4 99 17 8 16 6 4 5 12 10 2 3 11 5 3 100 13 1 11 11 0 91 9 7 2 0 0 24 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01246 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 45 values pushed */\01215 2 14 3 1 0 4 5 1 4 99 17 8 16 6 4 5 12 10 2 3 11 5 3 100 13 1 11 0 0 11 87 13 1 11 11 0 91 9 7 2 0 11 0 79 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 55 values pushed */\01215 2 14 3 1 0 4 5 1 4 99 0 5 6 3 5 87 10 1 3 12 6 3 88 17 8 16 3 6 0 12 11 6 12 100 13 1 11 0 0 11 87 13 1 11 11 0 91 9 7 2 0 11 0 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 46 values pushed */\01247 46 33 32 5 4 0 0 86 84 79 77 72 70 65 63 54 52 46 59 47 59 40 38 32 45 33 45 30 28 23 21 12 10 4 17 5 17 0 3 0 3 17 18 7 21 \012CALL[ ]	/* CallFunction */";
};
width = 1137;
}
);
leftKerningGroup = percent;
note = perthousand;
unicode = 2030;
},
{
glyphname = plus.uc;
layers = (
{
components = (
{
alignment = -1;
name = plus;
transform = "{1, 0, 0, 1, 0, 24}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 617;
}
);
note = plus.uc;
},
{
glyphname = minus.uc;
layers = (
{
components = (
{
alignment = -1;
name = minus;
transform = "{1, 0, 0, 1, 0, 24}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 578;
}
);
note = minus.uc;
},
{
glyphname = multiply.uc;
layers = (
{
components = (
{
alignment = -1;
name = multiply;
transform = "{1, 0, 0, 1, 0, 24}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 539;
}
);
note = multiply.uc;
},
{
glyphname = divide.uc;
layers = (
{
components = (
{
alignment = -1;
name = divide;
transform = "{1, 0, 0, 1, 0, 24}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 598;
}
);
note = divide.uc;
},
{
glyphname = equal.uc;
layers = (
{
components = (
{
alignment = -1;
name = equal;
transform = "{1, 0, 0, 1, 0, 24}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 545;
}
);
note = equal.uc;
},
{
glyphname = upArrow;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"689 268 LINE",
"695 268 LINE",
"695 429 LINE",
"380 742 LINE",
"370 742 LINE",
"55 429 LINE",
"55 268 LINE",
"61 268 LINE",
"316 523 LINE",
"316 0 LINE",
"434 0 LINE",
"434 523 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0128 2 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 750;
}
);
note = arrowup;
unicode = 2191;
},
{
glyphname = northEastArrow;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"534 76 LINE",
"539 72 LINE",
"653 186 LINE",
"652 630 LINE",
"644 637 LINE",
"201 638 LINE",
"87 524 LINE",
"91 520 LINE",
"452 520 LINE",
"82 150 LINE",
"165 67 LINE",
"535 437 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0127 2 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 750;
}
);
note = uni2197;
unicode = 2197;
},
{
glyphname = rightArrow;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"433 78 LINE",
"746 393 LINE",
"746 403 LINE",
"433 718 LINE",
"272 718 LINE",
"272 712 LINE",
"527 457 LINE",
"4 457 LINE",
"4 339 LINE",
"527 339 LINE",
"272 84 LINE",
"272 78 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0128 0 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 750;
}
);
note = arrowright;
unicode = 2192;
},
{
glyphname = southEastArrow;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"200 77 LINE",
"644 78 LINE",
"651 86 LINE",
"652 529 LINE",
"538 643 LINE",
"534 639 LINE",
"534 278 LINE",
"164 648 LINE",
"81 565 LINE",
"451 195 LINE",
"90 196 LINE",
"86 191 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0125 0 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 750;
}
);
note = uni2198;
unicode = 2198;
},
{
glyphname = downArrow;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"380 4 LINE",
"695 317 LINE",
"695 478 LINE",
"689 478 LINE",
"434 223 LINE",
"434 746 LINE",
"316 746 LINE",
"316 223 LINE",
"61 478 LINE",
"55 478 LINE",
"55 317 LINE",
"370 4 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0126 0 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 750;
}
);
note = arrowdown;
unicode = 2193;
},
{
glyphname = southWestArrow;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"549 75 LINE",
"663 189 LINE",
"659 193 LINE",
"298 193 LINE",
"668 563 LINE",
"585 646 LINE",
"215 277 LINE",
"216 637 LINE",
"211 641 LINE",
"97 527 LINE",
"98 83 LINE",
"106 76 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0127 0 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 750;
}
);
note = uni2199;
unicode = 2199;
},
{
glyphname = leftArrow;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"478 89 LINE",
"223 344 LINE",
"746 344 LINE",
"746 462 LINE",
"223 462 LINE",
"478 717 LINE",
"478 723 LINE",
"317 723 LINE",
"4 408 LINE",
"4 398 LINE",
"317 83 LINE",
"478 83 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0125 1 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 750;
}
);
note = arrowleft;
unicode = 2190;
},
{
glyphname = northWestArrow;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"669 149 LINE",
"299 518 LINE",
"660 518 LINE",
"664 522 LINE",
"550 636 LINE",
"106 635 LINE",
"99 628 LINE",
"98 184 LINE",
"212 70 LINE",
"216 74 LINE",
"216 435 LINE",
"586 65 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0128 1 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 750;
}
);
note = uni2196;
unicode = 2196;
},
{
glyphname = lozenge;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"553 373 LINE",
"338 746 LINE",
"256 746 LINE",
"40 373 LINE",
"257 0 LINE",
"337 0 LINE"
);
},
{
closed = 1;
nodes = (
"298 90 LINE",
"134 374 LINE",
"296 657 LINE",
"460 371 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\0128 6 4 1 2 48 \012CALL[ ]	/* CallFunction */";
};
width = 593;
}
);
note = lozenge;
unicode = 25CA;
},
{
glyphname = commaaccentcomb;
layers = (
{
components = (
{
alignment = -1;
name = commaaccentcomb.cmb;
transform = "{1, 0, 0, 1, 250, 0}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 500;
}
);
note = commaaccent;
unicode = 0326;
},
{
glyphname = dieresis;
layers = (
{
components = (
{
alignment = -1;
name = dieresis.cmb;
transform = "{1, 0, 0, 1, 250, 0}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 500;
}
);
note = dieresis;
unicode = 00A8;
},
{
glyphname = dotaccent;
layers = (
{
components = (
{
alignment = -1;
name = dotaccent.cmb;
transform = "{1, 0, 0, 1, 250, 0}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 500;
}
);
note = dotaccent;
unicode = 02D9;
},
{
glyphname = grave;
layers = (
{
components = (
{
alignment = -1;
name = grave.cmb;
transform = "{1, 0, 0, 1, 250, 0}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 500;
}
);
note = grave;
unicode = 0060;
},
{
glyphname = acute;
layers = (
{
components = (
{
alignment = -1;
name = acute.cmb;
transform = "{1, 0, 0, 1, 250, 0}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 500;
}
);
note = acute;
unicode = 00B4;
},
{
glyphname = hungarumlaut;
layers = (
{
components = (
{
alignment = -1;
name = hungarumlaut.cmb;
transform = "{1, 0, 0, 1, 250, 0}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 500;
}
);
note = hungarumlaut;
unicode = 02DD;
},
{
glyphname = circumflex;
layers = (
{
components = (
{
alignment = -1;
name = circumflex.cmb;
transform = "{1, 0, 0, 1, 250, 0}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 500;
}
);
note = circumflex;
unicode = 02C6;
},
{
glyphname = caron;
layers = (
{
components = (
{
alignment = -1;
name = caron.cmb;
transform = "{1, 0, 0, 1, 250, 0}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 500;
}
);
note = caron;
unicode = 02C7;
},
{
glyphname = breve;
layers = (
{
components = (
{
alignment = -1;
name = breve.cmb;
transform = "{1, 0, 0, 1, 250, 0}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 500;
}
);
note = breve;
unicode = 02D8;
},
{
glyphname = ring;
layers = (
{
components = (
{
alignment = -1;
name = ring.cmb;
transform = "{1, 0, 0, 1, 250, 0}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 500;
}
);
note = ring;
unicode = 02DA;
},
{
glyphname = tilde;
layers = (
{
components = (
{
alignment = -1;
name = tilde.cmb;
transform = "{1, 0, 0, 1, 250, 0}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 500;
}
);
note = tilde;
unicode = 02DC;
},
{
glyphname = macron;
layers = (
{
components = (
{
alignment = -1;
name = macron.cmb;
transform = "{1, 0, 0, 1, 250, 0}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 500;
}
);
note = macron;
unicode = 00AF;
},
{
glyphname = cedilla;
layers = (
{
components = (
{
alignment = -1;
name = cedilla.cmb;
transform = "{1, 0, 0, 1, 250, 0}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 500;
}
);
note = cedilla;
unicode = 00B8;
},
{
glyphname = ogonek;
layers = (
{
components = (
{
alignment = -1;
name = ogonek.cmb;
transform = "{1, 0, 0, 1, 250, 0}";
}
);
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
width = 500;
}
);
note = ogonek;
unicode = 02DB;
},
{
glyphname = commaaccentcomb.cmb;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"56 -30 LINE",
"-58 -30 LINE",
"-82 -195 LINE",
"-1 -195 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0121 0 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = commaaccent.cmb;
},
{
glyphname = dieresis.cmb;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"159 770 LINE",
"54 770 LINE",
"54 675 LINE",
"159 675 LINE"
);
},
{
closed = 1;
nodes = (
"-54 770 LINE",
"-159 770 LINE",
"-159 675 LINE",
"-54 675 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 41 values pushed */\0125 3 4 3 1 0 0 1 85 5 3 4 3 1 1 0 89 2 1 0 1 0 77 4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 7 21 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = dieresis.cmb;
},
{
glyphname = dotaccent.cmb;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"57 737 LINE",
"-57 737 LINE",
"-57 634 LINE",
"57 634 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 28 values pushed */\0122 1 1 0 0 1 85 2 1 1 1 0 89 0 0 1 0 77 0 0 0 3 0 3 17 3 7 21 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = dotaccent.cmb;
},
{
glyphname = grave.cmb;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"-128 790 LINE",
"1 643 LINE",
"91 643 LINE",
"6 790 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 21 values pushed */\0120 0 1 1 0 85 0 0 0 1 89 0 1 0 1 77 17 16 2 7 22 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = grave.cmb;
},
{
glyphname = acute.cmb;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"130 790 LINE",
"-2 790 LINE",
"-86 643 LINE",
"1 643 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 28 values pushed */\0122 1 1 0 0 1 85 2 1 1 1 0 89 0 0 1 0 77 0 0 0 3 0 3 17 3 7 21 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = acute.cmb;
},
{
glyphname = hungarumlaut.cmb;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"130 790 LINE",
"38 643 LINE",
"119 643 LINE",
"251 790 LINE"
);
},
{
closed = 1;
nodes = (
"-54 790 LINE",
"-146 643 LINE",
"-65 643 LINE",
"67 790 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 26 values pushed */\0122 1 0 1 1 0 85 2 1 0 0 1 89 3 1 1 0 1 77 17 17 17 16 4 7 24 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = hungarumlaut.cmb;
},
{
glyphname = circumflex.cmb;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"72 643 LINE",
"168 643 LINE",
"57 790 LINE",
"-60 790 LINE",
"-171 643 LINE",
"-76 643 LINE",
"-2 733 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 28 values pushed */\0121 1 0 1 1 74 0 1 0 1 114 3 2 2 0 0 105 0 0 0 6 0 6 17 18 4 7 22 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = circumflex.cmb;
},
{
glyphname = caron.cmb;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"57 643 LINE",
"168 790 LINE",
"71 790 LINE",
"-3 699 LINE",
"-76 790 LINE",
"-171 790 LINE",
"-60 643 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 22 values pushed */\0124 1 0 1 1 74 2 1 1 0 1 114 0 0 0 105 18 17 16 3 7 23 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = caron.cmb;
},
{
glyphname = breve.cmb;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"85 792 LINE",
"65 738.667 OFFCURVE",
"30.667 711 OFFCURVE",
"0 711 CURVE SMOOTH",
"-30.667 711 OFFCURVE",
"-65 738.667 OFFCURVE",
"-85 792 CURVE",
"-158 789 LINE",
"-139.333 701 OFFCURVE",
"-82.667 639 OFFCURVE",
"0 639 CURVE SMOOTH",
"82.667 639 OFFCURVE",
"139.333 701 OFFCURVE",
"158 789 CURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 35 values pushed */\0124 3 2 1 2 1 114 0 2 0 0 2 87 0 2 2 0 91 0 0 2 0 79 0 0 0 13 0 13 34 18 34 5 7 23 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = breve.cmb;
},
{
glyphname = ring.cmb;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"-66.667 873 OFFCURVE",
"-120 817.333 OFFCURVE",
"-120 756 CURVE SMOOTH",
"-120 694.667 OFFCURVE",
"-66.667 640 OFFCURVE",
"0 640 CURVE SMOOTH",
"66.667 640 OFFCURVE",
"120 694.667 OFFCURVE",
"120 756 CURVE SMOOTH",
"120 817.333 OFFCURVE",
"66.667 873 OFFCURVE",
"0 873 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"34.667 820 OFFCURVE",
"63 790.667 OFFCURVE",
"63 756 CURVE SMOOTH",
"63 720 OFFCURVE",
"34.667 692 OFFCURVE",
"0 692 CURVE SMOOTH",
"-34.667 692 OFFCURVE",
"-63 720 OFFCURVE",
"-63 756 CURVE SMOOTH",
"-63 790.667 OFFCURVE",
"-34.667 820 OFFCURVE",
"0 820 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 45 values pushed */\0124 1 0 5 1 2 3 0 2 99 0 3 1 1 3 87 0 3 3 1 91 0 1 3 1 79 13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 7 20 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = ring.cmb;
},
{
glyphname = tilde.cmb;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"-123.333 695.333 OFFCURVE",
"-102.333 706 OFFCURVE",
"-81 706 CURVE SMOOTH",
"-39.996 706 OFFCURVE",
"39.989 646 OFFCURVE",
"97 646 CURVE SMOOTH",
"165 646 OFFCURVE",
"218.333 692.667 OFFCURVE",
"209 794 CURVE",
"119 796 LINE",
"120.333 748 OFFCURVE",
"100.333 736 OFFCURVE",
"79 736 CURVE SMOOTH",
"37.526 736 OFFCURVE",
"-43.339 796 OFFCURVE",
"-99 796 CURVE SMOOTH",
"-172.067 796 OFFCURVE",
"-219.718 748.473 OFFCURVE",
"-210 644 CURVE",
"-122 642 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 35 values pushed */\0120 2 5 0 2 87 3 1 1 0 5 0 1 5 99 0 2 2 0 92 4 1 0 2 0 80 35 34 18 35 36 16 6 7 26 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = tilde.cmb;
},
{
glyphname = macron.cmb;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"138 750 LINE",
"-138 750 LINE",
"-138 667 LINE",
"138 667 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 28 values pushed */\0122 1 1 0 0 1 85 2 1 1 1 0 89 0 0 1 0 77 0 0 0 3 0 3 17 3 7 21 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = macron.cmb;
},
{
glyphname = cedilla.cmb;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"45.333 -202 OFFCURVE",
"95 -162 OFFCURVE",
"95 -114 CURVE SMOOTH",
"95 -68.667 OFFCURVE",
"62 -38 OFFCURVE",
"2 -30 CURVE",
"18 10 LINE",
"-39 10 LINE",
"-68 -70 LINE",
"-64 -78 LINE",
"-44 -78 LINE SMOOTH",
"-6.667 -78 OFFCURVE",
"20 -92.333 OFFCURVE",
"20 -111 CURVE SMOOTH",
"20 -131 OFFCURVE",
"-1.667 -145 OFFCURVE",
"-35 -145 CURVE SMOOTH",
"-47 -145 OFFCURVE",
"-74.667 -141.333 OFFCURVE",
"-100 -132 CURVE",
"-101 -132 LINE",
"-101 -189 LINE",
"-75.667 -198.333 OFFCURVE",
"-45.333 -202 OFFCURVE",
"-28 -202 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 55 values pushed */\01219 16 2 2 3 4 1 1 2 3 1 0 1 3 74 0 3 0 2 1 3 2 99 0 1 0 0 1 87 0 1 1 0 91 4 1 0 1 0 79 1 0 18 17 15 13 9 7 0 24 1 24 5 7 20 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = cedilla.cmb;
},
{
glyphname = ogonek.cmb;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"78 6 LINE",
"-9 16 LINE",
"-45 -9 LINE SMOOTH",
"-77 -30.333 OFFCURVE",
"-102 -58 OFFCURVE",
"-102 -94 CURVE SMOOTH",
"-102 -132.667 OFFCURVE",
"-72.333 -170 OFFCURVE",
"-7 -170 CURVE SMOOTH",
"38.333 -168.667 OFFCURVE",
"72.667 -151.333 OFFCURVE",
"90 -134 CURVE",
"55 -90 LINE",
"47 -96.667 OFFCURVE",
"35 -104 OFFCURVE",
"19 -104 CURVE SMOOTH",
"0.333 -104 OFFCURVE",
"-12 -91 OFFCURVE",
"-12 -75 CURVE SMOOTH",
"-12 -59 OFFCURVE",
"0 -45.667 OFFCURVE",
"28 -27 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 33 values pushed */\01210 1 1 0 1 74 21 20 9 3 0 72 0 0 1 1 0 87 0 0 0 1 91 0 1 0 1 79 37 37 2 7 22 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = ogonek.cmb;
},
{
glyphname = commaaccentcomb.lc;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"56 -30 LINE",
"-58 -30 LINE",
"-82 -195 LINE",
"-1 -195 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0121 0 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = commaaccent.lc;
},
{
glyphname = dieresis.lc;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"159 770 LINE",
"54 770 LINE",
"54 675 LINE",
"159 675 LINE"
);
},
{
closed = 1;
nodes = (
"-54 770 LINE",
"-159 770 LINE",
"-159 675 LINE",
"-54 675 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\0125 4 1 0 2 48 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = dieresis.lc;
},
{
glyphname = dotaccent.lc;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"57 753 LINE",
"-57 753 LINE",
"-57 634 LINE",
"57 634 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0121 0 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = dotaccent.lc;
},
{
glyphname = grave.lc;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"-128 790 LINE",
"1 643 LINE",
"91 643 LINE",
"6 790 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0122 0 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = grave.lc;
},
{
glyphname = acute.lc;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"130 790 LINE",
"-2 790 LINE",
"-86 643 LINE",
"1 643 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0121 0 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = acute.lc;
},
{
glyphname = hungarumlaut.lc;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"130 790 LINE",
"38 643 LINE",
"119 643 LINE",
"251 790 LINE"
);
},
{
closed = 1;
nodes = (
"-54 790 LINE",
"-146 643 LINE",
"-65 643 LINE",
"67 790 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\0126 4 2 0 2 48 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = hungarumlaut.lc;
},
{
glyphname = circumflex.lc;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"72 643 LINE",
"168 643 LINE",
"57 790 LINE",
"-60 790 LINE",
"-171 643 LINE",
"-76 643 LINE",
"-2 733 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0124 0 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = circumflex.lc;
},
{
glyphname = caron.lc;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"57 643 LINE",
"168 790 LINE",
"71 790 LINE",
"-3 699 LINE",
"-76 790 LINE",
"-171 790 LINE",
"-60 643 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0122 0 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = caron.lc;
},
{
glyphname = breve.lc;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"85 792 LINE",
"65 738.667 OFFCURVE",
"30.667 711 OFFCURVE",
"0 711 CURVE SMOOTH",
"-30.667 711 OFFCURVE",
"-65 738.667 OFFCURVE",
"-85 792 CURVE",
"-158 789 LINE",
"-139.333 701 OFFCURVE",
"-82.667 639 OFFCURVE",
"0 639 CURVE SMOOTH",
"82.667 639 OFFCURVE",
"139.333 701 OFFCURVE",
"158 789 CURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0127 2 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = breve.lc;
},
{
glyphname = ring.lc;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"-66.667 873 OFFCURVE",
"-120 817.333 OFFCURVE",
"-120 756 CURVE SMOOTH",
"-120 694.667 OFFCURVE",
"-66.667 640 OFFCURVE",
"0 640 CURVE SMOOTH",
"66.667 640 OFFCURVE",
"120 694.667 OFFCURVE",
"120 756 CURVE SMOOTH",
"120 817.333 OFFCURVE",
"66.667 873 OFFCURVE",
"0 873 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"34.667 820 OFFCURVE",
"63 790.667 OFFCURVE",
"63 756 CURVE SMOOTH",
"63 720 OFFCURVE",
"34.667 692 OFFCURVE",
"0 692 CURVE SMOOTH",
"-34.667 692 OFFCURVE",
"-63 720 OFFCURVE",
"-63 756 CURVE SMOOTH",
"-63 790.667 OFFCURVE",
"-34.667 820 OFFCURVE",
"0 820 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\01217 12 5 0 2 48 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = ring.lc;
},
{
glyphname = tilde.lc;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"-123.333 695.333 OFFCURVE",
"-102.333 706 OFFCURVE",
"-81 706 CURVE SMOOTH",
"-39.996 706 OFFCURVE",
"39.989 646 OFFCURVE",
"97 646 CURVE SMOOTH",
"165 646 OFFCURVE",
"218.333 692.667 OFFCURVE",
"209 794 CURVE",
"119 796 LINE",
"120.333 748 OFFCURVE",
"100.333 736 OFFCURVE",
"79 736 CURVE SMOOTH",
"37.526 736 OFFCURVE",
"-43.339 796 OFFCURVE",
"-99 796 CURVE SMOOTH",
"-172.067 796 OFFCURVE",
"-219.718 748.473 OFFCURVE",
"-210 644 CURVE",
"-122 642 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0125 0 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = tilde.lc;
},
{
glyphname = macron.lc;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"138 750 LINE",
"-138 750 LINE",
"-138 667 LINE",
"138 667 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0121 0 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = macron.lc;
},
{
glyphname = cedilla.lc;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"45.333 -202 OFFCURVE",
"95 -162 OFFCURVE",
"95 -114 CURVE SMOOTH",
"95 -68.667 OFFCURVE",
"62 -38 OFFCURVE",
"2 -30 CURVE",
"18 10 LINE",
"-39 10 LINE",
"-68 -70 LINE",
"-64 -78 LINE",
"-44 -78 LINE SMOOTH",
"-6.667 -78 OFFCURVE",
"20 -92.333 OFFCURVE",
"20 -111 CURVE SMOOTH",
"20 -131 OFFCURVE",
"-1.667 -145 OFFCURVE",
"-35 -145 CURVE SMOOTH",
"-47 -145 OFFCURVE",
"-74.667 -141.333 OFFCURVE",
"-100 -132 CURVE",
"-101 -132 LINE",
"-101 -189 LINE",
"-75.667 -198.333 OFFCURVE",
"-45.333 -202 OFFCURVE",
"-28 -202 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\01217 0 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = cedilla.lc;
},
{
glyphname = ogonek.lc;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"78 6 LINE",
"-9 16 LINE",
"-45 -9 LINE SMOOTH",
"-77 -30.333 OFFCURVE",
"-102 -58 OFFCURVE",
"-102 -94 CURVE SMOOTH",
"-102 -132.667 OFFCURVE",
"-72.333 -170 OFFCURVE",
"-7 -170 CURVE SMOOTH",
"38.333 -168.667 OFFCURVE",
"72.667 -151.333 OFFCURVE",
"90 -134 CURVE",
"55 -90 LINE",
"47 -96.667 OFFCURVE",
"35 -104 OFFCURVE",
"19 -104 CURVE SMOOTH",
"0.333 -104 OFFCURVE",
"-12 -91 OFFCURVE",
"-12 -75 CURVE SMOOTH",
"-12 -59 OFFCURVE",
"0 -45.667 OFFCURVE",
"28 -27 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\01220 13 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = ogonek.lc;
},
{
glyphname = caron.vertical;
layers = (
{
layerId = "952C609B-CA64-4350-B6E7-D316939CE488";
paths = (
{
closed = 1;
nodes = (
"34 -30 LINE",
"-65 -30 LINE",
"-82 -195 LINE",
"-14 -195 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0121 0 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = caron.vertical;
}
);
instances = (
{
name = Regular;
weightClass = Normal;
}
);
kerning = {
"952C609B-CA64-4350-B6E7-D316939CE488" = {
"@MMK_L_A" = {
"@MMK_R_C" = -41;
"@MMK_R_J" = 10;
"@MMK_R_T" = -56;
"@MMK_R_T.salt_tall" = -41;
"@MMK_R_U" = -30;
"@MMK_R_V" = -106;
"@MMK_R_W" = -63;
"@MMK_R_Y" = -112;
"@MMK_R_a" = -4;
"@MMK_R_ampersand" = -29;
"@MMK_R_asterisk" = -99;
"@MMK_R_at" = -20;
"@MMK_R_backslash" = -83;
"@MMK_R_braceright" = -16;
"@MMK_R_braceright.uc" = -10;
"@MMK_R_bracketright" = -8;
"@MMK_R_bracketright.uc" = -10;
"@MMK_R_bullet" = -62;
"@MMK_R_c" = -14;
"@MMK_R_copyright" = -60;
"@MMK_R_d" = -14;
"@MMK_R_dagger" = -45;
"@MMK_R_daggerdbl" = -40;
"@MMK_R_endash" = -19;
"@MMK_R_f" = -14;
"@MMK_R_g" = -21;
"@MMK_R_guillemetleft" = -14;
"@MMK_R_guilsinglleft.uc" = -19;
"@MMK_R_guilsinglright.uc" = -5;
"@MMK_R_hyphen" = -65;
"@MMK_R_hyphen.uc" = -88;
"@MMK_R_parenright" = -20;
"@MMK_R_periodcentered" = -70;
"@MMK_R_question" = -36;
"@MMK_R_quotedbl" = -84;
"@MMK_R_quoteleft" = -61;
"@MMK_R_registered" = -123;
"@MMK_R_t" = -15;
"@MMK_R_trademark" = -121;
"@MMK_R_u" = -14;
"@MMK_R_v" = -64;
"@MMK_R_w" = -38;
"@MMK_R_y" = -56;
};
"@MMK_L_AE" = {
"@MMK_R_C" = -29;
"@MMK_R_J" = 4;
"@MMK_R_T" = -46;
"@MMK_R_T.salt_tall" = -35;
"@MMK_R_U" = -6;
"@MMK_R_V" = -93;
"@MMK_R_W" = -61;
"@MMK_R_Y" = -99;
"@MMK_R_asterisk" = -76;
"@MMK_R_backslash" = -110;
"@MMK_R_bullet" = -36;
"@MMK_R_copyright" = -37;
"@MMK_R_dagger" = -22;
"@MMK_R_daggerdbl" = -21;
"@MMK_R_g" = -4;
"@MMK_R_guillemetleft" = -13;
"@MMK_R_guilsinglleft.uc" = -34;
"@MMK_R_hyphen" = -43;
"@MMK_R_hyphen.uc" = -44;
"@MMK_R_parenright" = -13;
"@MMK_R_periodcentered" = -44;
"@MMK_R_question" = -29;
"@MMK_R_quotedbl" = -66;
"@MMK_R_quoteleft" = -56;
"@MMK_R_registered" = -92;
"@MMK_R_trademark" = -86;
"@MMK_R_v" = -43;
"@MMK_R_w" = -24;
"@MMK_R_y" = -21;
};
"@MMK_L_B" = {
"@MMK_R_A" = -8;
"@MMK_R_J" = -6;
"@MMK_R_S" = -6;
"@MMK_R_T" = -44;
"@MMK_R_T.salt_tall" = -28;
"@MMK_R_W" = -14;
"@MMK_R_Y" = -17;
"@MMK_R_Z" = -7;
"@MMK_R_dagger" = -11;
"@MMK_R_f" = -5;
"@MMK_R_guillemetright" = -14;
"@MMK_R_guilsinglright.uc" = -4;
"@MMK_R_period" = -10;
"@MMK_R_quoteleft" = -6;
"@MMK_R_t" = -5;
"@MMK_R_w" = -4;
"@MMK_R_y" = -11;
"@MMK_R_z" = -10;
};
"@MMK_L_C" = {
"@MMK_R_C" = -16;
"@MMK_R_V" = -6;
"@MMK_R_backslash" = 24;
"@MMK_R_bracketright" = 14;
"@MMK_R_bullet" = -6;
"@MMK_R_c" = -4;
"@MMK_R_copyright" = -20;
"@MMK_R_d" = -6;
"@MMK_R_g" = -6;
"@MMK_R_guillemetleft" = -24;
"@MMK_R_guillemetright" = 7;
"@MMK_R_guilsinglleft.uc" = -7;
"@MMK_R_guilsinglright.uc" = 21;
"@MMK_R_hyphen.uc" = -9;
"@MMK_R_periodcentered" = -25;
"@MMK_R_quotedbl" = 10;
"@MMK_R_registered" = -6;
"@MMK_R_slash" = 27;
"@MMK_R_v" = -24;
"@MMK_R_w" = -31;
"@MMK_R_x" = -4;
"@MMK_R_y" = -21;
};
"@MMK_L_D" = {
"@MMK_R_A" = -28;
"@MMK_R_J" = -53;
"@MMK_R_S" = -20;
"@MMK_R_T" = -45;
"@MMK_R_T.salt_tall" = -28;
"@MMK_R_V" = -39;
"@MMK_R_W" = -24;
"@MMK_R_X" = -28;
"@MMK_R_Y" = -44;
"@MMK_R_Z" = -25;
"@MMK_R_a" = -6;
"@MMK_R_ampersand" = -14;
"@MMK_R_asterisk" = -4;
"@MMK_R_backslash" = -52;
"@MMK_R_braceright" = -42;
"@MMK_R_braceright.uc" = -34;
"@MMK_R_bracketright" = -30;
"@MMK_R_bracketright.uc" = -25;
"@MMK_R_comma" = -67;
"@MMK_R_exclam" = -11;
"@MMK_R_guillemetright" = -24;
"@MMK_R_guilsinglright.uc" = -19;
"@MMK_R_parenright" = -47;
"@MMK_R_parenright.uc" = -21;
"@MMK_R_period" = -59;
"@MMK_R_question" = -21;
"@MMK_R_quotedbl" = -3;
"@MMK_R_quoteleft" = -6;
"@MMK_R_semicolon" = -11;
"@MMK_R_slash" = -65;
"@MMK_R_trademark" = -29;
"@MMK_R_v" = -4;
"@MMK_R_x" = -18;
"@MMK_R_y" = -9;
"@MMK_R_z" = -21;
};
"@MMK_L_E" = {
"@MMK_R_C" = -11;
"@MMK_R_at" = -6;
"@MMK_R_dagger" = -10;
"@MMK_R_g" = -4;
"@MMK_R_x" = -15;
};
"@MMK_L_F" = {
"@MMK_R_A" = -36;
"@MMK_R_C" = -10;
"@MMK_R_J" = -67;
"@MMK_R_S" = -10;
"@MMK_R_Z" = -16;
"@MMK_R_a" = -32;
"@MMK_R_c" = -17;
"@MMK_R_colon" = -4;
"@MMK_R_d" = -21;
"@MMK_R_dagger" = -14;
"@MMK_R_g" = -17;
"@MMK_R_guillemetright" = -16;
"@MMK_R_period" = -68;
"@MMK_R_quoteleft" = -10;
"@MMK_R_w" = -6;
"@MMK_R_y" = -6;
"@MMK_R_z" = -29;
};
"@MMK_L_G" = {
"@MMK_R_A" = -43;
"@MMK_R_J" = -46;
"@MMK_R_S" = -20;
"@MMK_R_T" = -35;
"@MMK_R_T.salt_tall" = -25;
"@MMK_R_V" = -35;
"@MMK_R_W" = -21;
"@MMK_R_X" = -34;
"@MMK_R_Y" = -37;
"@MMK_R_Z" = -29;
"@MMK_R_a" = -6;
"@MMK_R_ampersand" = -21;
"@MMK_R_asterisk" = -4;
"@MMK_R_backslash" = -56;
"@MMK_R_braceright" = -35;
"@MMK_R_braceright.uc" = -32;
"@MMK_R_bracketright" = -26;
"@MMK_R_bracketright.uc" = -25;
"@MMK_R_c" = 4;
"@MMK_R_comma" = -74;
"@MMK_R_exclam" = -5;
"@MMK_R_guillemetright" = -24;
"@MMK_R_guilsinglright.uc" = -17;
"@MMK_R_parenright" = -47;
"@MMK_R_parenright.uc" = -25;
"@MMK_R_period" = -54;
"@MMK_R_question" = -29;
"@MMK_R_quotedbl" = -3;
"@MMK_R_quoteleft" = -6;
"@MMK_R_slash" = -39;
"@MMK_R_trademark" = -25;
"@MMK_R_v" = -4;
"@MMK_R_w" = 4;
"@MMK_R_x" = -11;
"@MMK_R_y" = -4;
"@MMK_R_z" = -10;
};
"@MMK_L_Hbar" = {
"@MMK_R_dagger" = 17;
"@MMK_R_daggerdbl" = 17;
};
"@MMK_L_I" = {
"@MMK_R_j" = 8;
};
"@MMK_L_J" = {
"@MMK_R_A" = -11;
"@MMK_R_S" = -7;
"@MMK_R_Z" = -14;
"@MMK_R_bracketright.uc" = -9;
"@MMK_R_comma" = -19;
"@MMK_R_period" = -19;
"@MMK_R_semicolon" = -5;
"@MMK_R_slash" = -9;
"@MMK_R_x" = -5;
};
"@MMK_L_K" = {
"@MMK_R_C" = -90;
"@MMK_R_S" = -35;
"@MMK_R_T" = -19;
"@MMK_R_T.salt_tall" = -19;
"@MMK_R_U" = -25;
"@MMK_R_V" = -9;
"@MMK_R_W" = -10;
"@MMK_R_Y" = -10;
"@MMK_R_a" = -27;
"@MMK_R_ampersand" = -39;
"@MMK_R_asterisk" = -42;
"@MMK_R_at" = -32;
"@MMK_R_backslash" = -20;
"@MMK_R_braceright" = -9;
"@MMK_R_bracketright.uc" = -9;
"@MMK_R_bullet" = -76;
"@MMK_R_c" = -67;
"@MMK_R_copyright" = -67;
"@MMK_R_d" = -36;
"@MMK_R_dagger" = -39;
"@MMK_R_daggerdbl" = -37;
"@MMK_R_endash" = -16;
"@MMK_R_f" = -19;
"@MMK_R_g" = -60;
"@MMK_R_guillemetleft" = -52;
"@MMK_R_guillemetright" = -6;
"@MMK_R_guilsinglleft.uc" = -41;
"@MMK_R_guilsinglright.uc" = -16;
"@MMK_R_hyphen" = -79;
"@MMK_R_hyphen.uc" = -61;
"@MMK_R_parenright" = -6;
"@MMK_R_periodcentered" = -54;
"@MMK_R_question" = -29;
"@MMK_R_quotedbl" = -15;
"@MMK_R_quoteleft" = -47;
"@MMK_R_registered" = -71;
"@MMK_R_s" = -14;
"@MMK_R_t" = -28;
"@MMK_R_trademark" = -25;
"@MMK_R_u" = -34;
"@MMK_R_v" = -59;
"@MMK_R_w" = -46;
"@MMK_R_x" = -6;
"@MMK_R_y" = -70;
};
"@MMK_L_K.salt_tall" = {
"@MMK_R_C" = -71;
"@MMK_R_S" = -42;
"@MMK_R_T" = -32;
"@MMK_R_T.salt_tall" = -24;
"@MMK_R_U" = -25;
"@MMK_R_V" = -6;
"@MMK_R_W" = -6;
"@MMK_R_Y" = -14;
"@MMK_R_a" = -24;
"@MMK_R_ampersand" = -39;
"@MMK_R_asterisk" = -49;
"@MMK_R_at" = -32;
"@MMK_R_backslash" = -27;
"@MMK_R_braceright" = -12;
"@MMK_R_braceright.uc" = -4;
"@MMK_R_bracketright" = -14;
"@MMK_R_bracketright.uc" = -9;
"@MMK_R_bullet" = -82;
"@MMK_R_c" = -61;
"@MMK_R_copyright" = -67;
"@MMK_R_d" = -59;
"@MMK_R_dagger" = -49;
"@MMK_R_daggerdbl" = -44;
"@MMK_R_endash" = -16;
"@MMK_R_f" = -12;
"@MMK_R_g" = -67;
"@MMK_R_guillemetleft" = -52;
"@MMK_R_guilsinglleft.uc" = -63;
"@MMK_R_guilsinglright.uc" = -10;
"@MMK_R_hyphen" = -72;
"@MMK_R_hyphen.uc" = -55;
"@MMK_R_parenright" = -10;
"@MMK_R_periodcentered" = -68;
"@MMK_R_question" = -36;
"@MMK_R_quotedbl" = -27;
"@MMK_R_quoteleft" = -54;
"@MMK_R_registered" = -84;
"@MMK_R_s" = -18;
"@MMK_R_slash" = 6;
"@MMK_R_t" = -19;
"@MMK_R_trademark" = -37;
"@MMK_R_u" = -29;
"@MMK_R_v" = -54;
"@MMK_R_w" = -44;
"@MMK_R_x" = -10;
"@MMK_R_y" = -57;
};
"@MMK_L_L" = {
"@MMK_R_C" = -44;
"@MMK_R_J" = 6;
"@MMK_R_T" = -67;
"@MMK_R_T.salt_tall" = -63;
"@MMK_R_U" = -18;
"@MMK_R_V" = -55;
"@MMK_R_W" = -41;
"@MMK_R_Y" = -75;
"@MMK_R_ampersand" = -6;
"@MMK_R_asterisk" = -57;
"@MMK_R_at" = -6;
"@MMK_R_backslash" = -91;
"@MMK_R_braceright" = -10;
"@MMK_R_braceright.uc" = -9;
"@MMK_R_bracketright" = -16;
"@MMK_R_bullet" = -44;
"@MMK_R_c" = -12;
"@MMK_R_copyright" = -22;
"@MMK_R_d" = -12;
"@MMK_R_dagger" = -49;
"@MMK_R_daggerdbl" = -17;
"@MMK_R_f" = -15;
"@MMK_R_g" = -19;
"@MMK_R_guillemetleft" = -14;
"@MMK_R_guilsinglleft.uc" = -25;
"@MMK_R_hyphen" = -24;
"@MMK_R_hyphen.uc" = -26;
"@MMK_R_parenright.uc" = -10;
"@MMK_R_periodcentered" = -52;
"@MMK_R_question" = -21;
"@MMK_R_quotedbl" = -23;
"@MMK_R_quoteleft" = -42;
"@MMK_R_registered" = -70;
"@MMK_R_slash" = 21;
"@MMK_R_t" = -15;
"@MMK_R_trademark" = -71;
"@MMK_R_u" = -8;
"@MMK_R_v" = -44;
"@MMK_R_w" = -24;
"@MMK_R_y" = -39;
};
"@MMK_L_O" = {
"@MMK_R_A" = -36;
"@MMK_R_J" = -72;
"@MMK_R_S" = -24;
"@MMK_R_T" = -31;
"@MMK_R_T.salt_tall" = -33;
"@MMK_R_V" = -31;
"@MMK_R_W" = -19;
"@MMK_R_X" = -34;
"@MMK_R_Y" = -48;
"@MMK_R_Z" = -31;
"@MMK_R_a" = -10;
"@MMK_R_ampersand" = -21;
"@MMK_R_asterisk" = -11;
"@MMK_R_backslash" = -56;
"@MMK_R_braceright" = -35;
"@MMK_R_braceright.uc" = -32;
"@MMK_R_bracketright" = -26;
"@MMK_R_bracketright.uc" = -25;
"@MMK_R_c" = 4;
"@MMK_R_comma" = -74;
"@MMK_R_exclam" = -5;
"@MMK_R_guillemetright" = -24;
"@MMK_R_guilsinglright.uc" = -19;
"@MMK_R_parenright" = -47;
"@MMK_R_parenright.uc" = -25;
"@MMK_R_period" = -54;
"@MMK_R_question" = -29;
"@MMK_R_quotedbl" = -3;
"@MMK_R_quoteleft" = -10;
"@MMK_R_quotesinglbase" = -63;
"@MMK_R_registered" = -4;
"@MMK_R_semicolon" = -4;
"@MMK_R_slash" = -44;
"@MMK_R_trademark" = -20;
"@MMK_R_v" = -4;
"@MMK_R_w" = 7;
"@MMK_R_x" = -11;
"@MMK_R_y" = -7;
"@MMK_R_z" = -24;
};
"@MMK_L_P" = {
"@MMK_R_A" = -59;
"@MMK_R_J" = -59;
"@MMK_R_T" = -10;
"@MMK_R_T.salt_tall" = -10;
"@MMK_R_W" = -4;
"@MMK_R_Y" = -18;
"@MMK_R_Z" = -25;
"@MMK_R_a" = -29;
"@MMK_R_c" = -16;
"@MMK_R_colon" = -10;
"@MMK_R_d" = -16;
"@MMK_R_g" = -14;
"@MMK_R_guillemetleft" = -25;
"@MMK_R_guillemetright" = -14;
"@MMK_R_guilsinglleft.uc" = -15;
"@MMK_R_guilsinglright.uc" = -14;
"@MMK_R_period" = -114;
"@MMK_R_z" = -37;
};
"@MMK_L_P.salt_tall" = {
"@MMK_R_A" = -61;
"@MMK_R_J" = -73;
"@MMK_R_T" = -10;
"@MMK_R_T.salt_tall" = -6;
"@MMK_R_W" = -10;
"@MMK_R_Y" = -14;
"@MMK_R_Z" = -40;
"@MMK_R_a" = -37;
"@MMK_R_c" = -20;
"@MMK_R_colon" = -10;
"@MMK_R_d" = -20;
"@MMK_R_g" = -24;
"@MMK_R_guillemetleft" = -32;
"@MMK_R_guillemetright" = -10;
"@MMK_R_guilsinglleft.uc" = -29;
"@MMK_R_guilsinglright.uc" = -14;
"@MMK_R_m" = -6;
"@MMK_R_period" = -121;
"@MMK_R_u" = -10;
"@MMK_R_w" = 3;
"@MMK_R_z" = -31;
};
"@MMK_L_R" = {
"@MMK_R_C" = -36;
"@MMK_R_S" = -20;
"@MMK_R_T" = -51;
"@MMK_R_T.salt_tall" = -51;
"@MMK_R_U" = -24;
"@MMK_R_V" = -45;
"@MMK_R_W" = -50;
"@MMK_R_Y" = -29;
"@MMK_R_a" = -25;
"@MMK_R_ampersand" = -14;
"@MMK_R_asterisk" = -24;
"@MMK_R_at" = -27;
"@MMK_R_backslash" = -41;
"@MMK_R_braceright" = -24;
"@MMK_R_braceright.uc" = -14;
"@MMK_R_bracketright" = -16;
"@MMK_R_bracketright.uc" = -10;
"@MMK_R_bullet" = -40;
"@MMK_R_c" = -46;
"@MMK_R_copyright" = -34;
"@MMK_R_d" = -46;
"@MMK_R_dagger" = -10;
"@MMK_R_daggerdbl" = -14;
"@MMK_R_endash" = -16;
"@MMK_R_f" = -11;
"@MMK_R_g" = -53;
"@MMK_R_guillemetleft" = -30;
"@MMK_R_guillemetright" = -10;
"@MMK_R_guilsinglleft.uc" = -21;
"@MMK_R_guilsinglright.uc" = -10;
"@MMK_R_hyphen" = -47;
"@MMK_R_hyphen.uc" = -26;
"@MMK_R_parenright" = -34;
"@MMK_R_parenright.uc" = -14;
"@MMK_R_periodcentered" = -49;
"@MMK_R_question" = -46;
"@MMK_R_quotedbl" = -16;
"@MMK_R_quoteleft" = -29;
"@MMK_R_registered" = -21;
"@MMK_R_s" = -5;
"@MMK_R_t" = -11;
"@MMK_R_trademark" = -36;
"@MMK_R_u" = -23;
"@MMK_R_v" = -26;
"@MMK_R_w" = -18;
"@MMK_R_x" = -4;
"@MMK_R_y" = -24;
"@MMK_R_z" = -9;
};
"@MMK_L_R.salt_tall" = {
"@MMK_R_A" = -10;
"@MMK_R_C" = -53;
"@MMK_R_S" = -26;
"@MMK_R_T" = -65;
"@MMK_R_T.salt_tall" = -63;
"@MMK_R_U" = -44;
"@MMK_R_V" = -49;
"@MMK_R_W" = -38;
"@MMK_R_X" = -31;
"@MMK_R_Y" = -61;
"@MMK_R_a" = -26;
"@MMK_R_ampersand" = -34;
"@MMK_R_asterisk" = -37;
"@MMK_R_at" = -34;
"@MMK_R_backslash" = -61;
"@MMK_R_braceright" = -34;
"@MMK_R_braceright.uc" = -17;
"@MMK_R_bracketright" = -24;
"@MMK_R_bracketright.uc" = -10;
"@MMK_R_bullet" = -47;
"@MMK_R_c" = -51;
"@MMK_R_copyright" = -37;
"@MMK_R_d" = -51;
"@MMK_R_dagger" = -34;
"@MMK_R_daggerdbl" = -20;
"@MMK_R_endash" = -16;
"@MMK_R_f" = -19;
"@MMK_R_g" = -69;
"@MMK_R_guillemetleft" = -34;
"@MMK_R_guillemetright" = -10;
"@MMK_R_guilsinglleft.uc" = -36;
"@MMK_R_guilsinglright.uc" = -24;
"@MMK_R_hyphen" = -51;
"@MMK_R_hyphen.uc" = -24;
"@MMK_R_parenright" = -41;
"@MMK_R_parenright.uc" = -21;
"@MMK_R_periodcentered" = -62;
"@MMK_R_question" = -46;
"@MMK_R_quotedbl" = -34;
"@MMK_R_quoteleft" = -40;
"@MMK_R_registered" = -45;
"@MMK_R_s" = -21;
"@MMK_R_semicolon" = -4;
"@MMK_R_t" = -22;
"@MMK_R_trademark" = -64;
"@MMK_R_u" = -25;
"@MMK_R_v" = -34;
"@MMK_R_w" = -19;
"@MMK_R_x" = -14;
"@MMK_R_y" = -29;
"@MMK_R_z" = -5;
};
"@MMK_L_S" = {
"@MMK_R_A" = -8;
"@MMK_R_T" = -34;
"@MMK_R_T.salt_tall" = -24;
"@MMK_R_V" = -17;
"@MMK_R_W" = -4;
"@MMK_R_X" = -5;
"@MMK_R_Y" = -8;
"@MMK_R_Z" = -7;
"@MMK_R_asterisk" = -10;
"@MMK_R_at" = -10;
"@MMK_R_backslash" = -30;
"@MMK_R_braceright" = -3;
"@MMK_R_bracketright.uc" = -10;
"@MMK_R_bullet" = -17;
"@MMK_R_comma" = -10;
"@MMK_R_copyright" = -6;
"@MMK_R_dagger" = -30;
"@MMK_R_g" = -4;
"@MMK_R_guillemetright" = -10;
"@MMK_R_hyphen.uc" = -3;
"@MMK_R_parenright.uc" = -4;
"@MMK_R_period" = -6;
"@MMK_R_periodcentered" = -17;
"@MMK_R_question" = -10;
"@MMK_R_quotedbl" = -6;
"@MMK_R_quoteleft" = -20;
"@MMK_R_registered" = -34;
"@MMK_R_semicolon" = -4;
"@MMK_R_slash" = -4;
"@MMK_R_trademark" = -24;
"@MMK_R_v" = -17;
"@MMK_R_w" = -11;
"@MMK_R_x" = -11;
"@MMK_R_y" = -17;
"@MMK_R_z" = -14;
};
"@MMK_L_T" = {
"@MMK_R_A" = -51;
"@MMK_R_C" = -31;
"@MMK_R_J" = -39;
"@MMK_R_S" = -10;
"@MMK_R_a" = -25;
"@MMK_R_ampersand" = -24;
"@MMK_R_at" = -42;
"@MMK_R_bullet" = -44;
"@MMK_R_c" = -55;
"@MMK_R_colon" = -32;
"@MMK_R_comma" = -55;
"@MMK_R_copyright" = -37;
"@MMK_R_d" = -44;
"@MMK_R_dagger" = -14;
"@MMK_R_daggerdbl" = -14;
"@MMK_R_f" = -17;
"@MMK_R_g" = -44;
"@MMK_R_guillemetleft" = -34;
"@MMK_R_guillemetright" = -6;
"@MMK_R_guilsinglleft.uc" = -16;
"@MMK_R_hyphen" = -29;
"@MMK_R_hyphen.uc" = -25;
"@MMK_R_period" = -62;
"@MMK_R_periodcentered" = -44;
"@MMK_R_quoteleft" = -14;
"@MMK_R_registered" = -17;
"@MMK_R_s" = -17;
"@MMK_R_semicolon" = -32;
"@MMK_R_slash" = -24;
"@MMK_R_x" = -6;
"@MMK_R_z" = -14;
};
"@MMK_L_T.salt_tall" = {
"@MMK_R_A" = -41;
"@MMK_R_C" = -33;
"@MMK_R_J" = -57;
"@MMK_R_S" = -4;
"@MMK_R_Z" = -11;
"@MMK_R_a" = -39;
"@MMK_R_ampersand" = -15;
"@MMK_R_at" = -29;
"@MMK_R_bullet" = -51;
"@MMK_R_c" = -59;
"@MMK_R_colon" = -32;
"@MMK_R_comma" = -41;
"@MMK_R_copyright" = -41;
"@MMK_R_d" = -56;
"@MMK_R_dagger" = -14;
"@MMK_R_daggerdbl" = -14;
"@MMK_R_f" = -6;
"@MMK_R_g" = -34;
"@MMK_R_guillemetleft" = -35;
"@MMK_R_guillemetright" = -6;
"@MMK_R_guilsinglleft.uc" = -20;
"@MMK_R_hyphen" = -19;
"@MMK_R_hyphen.uc" = -6;
"@MMK_R_m" = -4;
"@MMK_R_p" = -4;
"@MMK_R_period" = -76;
"@MMK_R_periodcentered" = -61;
"@MMK_R_quoteleft" = -6;
"@MMK_R_quotesinglbase" = -45;
"@MMK_R_registered" = -20;
"@MMK_R_s" = -10;
"@MMK_R_semicolon" = -32;
"@MMK_R_slash" = -36;
"@MMK_R_t" = -6;
"@MMK_R_v" = -25;
"@MMK_R_w" = -14;
"@MMK_R_x" = -20;
"@MMK_R_y" = -10;
"@MMK_R_z" = -31;
};
"@MMK_L_Thorn" = {
"@MMK_R_A" = -39;
"@MMK_R_J" = -34;
"@MMK_R_T" = -31;
"@MMK_R_T.salt_tall" = -28;
"@MMK_R_W" = -5;
"@MMK_R_Y" = -21;
"@MMK_R_Z" = -14;
"@MMK_R_a" = -10;
"@MMK_R_colon" = -9;
"@MMK_R_guillemetright" = -14;
"@MMK_R_guilsinglright.uc" = -14;
"@MMK_R_period" = -86;
"@MMK_R_y" = -4;
"@MMK_R_z" = -10;
};
"@MMK_L_U" = {
"@MMK_R_A" = -30;
"@MMK_R_J" = -38;
"@MMK_R_S" = -6;
"@MMK_R_X" = -7;
"@MMK_R_Z" = -12;
"@MMK_R_a" = -5;
"@MMK_R_ampersand" = -5;
"@MMK_R_comma" = -30;
"@MMK_R_period" = -40;
"@MMK_R_quotesinglbase" = -51;
"@MMK_R_slash" = -13;
"@MMK_R_x" = -5;
"@MMK_R_z" = -9;
};
"@MMK_L_V" = {
"@MMK_R_A" = -106;
"@MMK_R_C" = -31;
"@MMK_R_J" = -40;
"@MMK_R_S" = -13;
"@MMK_R_Z" = -15;
"@MMK_R_a" = -59;
"@MMK_R_c" = -64;
"@MMK_R_colon" = -20;
"@MMK_R_copyright" = -55;
"@MMK_R_d" = -64;
"@MMK_R_dagger" = -20;
"@MMK_R_daggerdbl" = -19;
"@MMK_R_endash" = -14;
"@MMK_R_f" = -4;
"@MMK_R_g" = -63;
"@MMK_R_guillemetleft" = -35;
"@MMK_R_guillemetright" = -29;
"@MMK_R_guilsinglleft.uc" = -22;
"@MMK_R_guilsinglright.uc" = -11;
"@MMK_R_m" = -26;
"@MMK_R_p" = -26;
"@MMK_R_period" = -77;
"@MMK_R_s" = -39;
"@MMK_R_t" = -4;
"@MMK_R_u" = -7;
"@MMK_R_y" = -4;
"@MMK_R_z" = -41;
};
"@MMK_L_W" = {
"@MMK_R_A" = -63;
"@MMK_R_C" = -19;
"@MMK_R_J" = -37;
"@MMK_R_S" = -4;
"@MMK_R_Z" = -10;
"@MMK_R_a" = -39;
"@MMK_R_ampersand" = -71;
"@MMK_R_at" = -57;
"@MMK_R_braceright.uc" = -9;
"@MMK_R_bullet" = -57;
"@MMK_R_c" = -52;
"@MMK_R_colon" = -16;
"@MMK_R_comma" = -56;
"@MMK_R_copyright" = -45;
"@MMK_R_d" = -51;
"@MMK_R_dagger" = -6;
"@MMK_R_daggerdbl" = -9;
"@MMK_R_endash" = -10;
"@MMK_R_g" = -51;
"@MMK_R_guillemetleft" = -26;
"@MMK_R_guillemetright" = -22;
"@MMK_R_guilsinglleft.uc" = -15;
"@MMK_R_guilsinglright.uc" = -6;
"@MMK_R_hyphen" = -47;
"@MMK_R_hyphen.uc" = -34;
"@MMK_R_m" = -10;
"@MMK_R_p" = -6;
"@MMK_R_period" = -54;
"@MMK_R_periodcentered" = -52;
"@MMK_R_registered" = -9;
"@MMK_R_s" = -23;
"@MMK_R_semicolon" = -20;
"@MMK_R_slash" = -76;
"@MMK_R_u" = -14;
"@MMK_R_x" = -20;
"@MMK_R_z" = -49;
};
"@MMK_L_X" = {
"@MMK_R_C" = -34;
"@MMK_R_S" = -6;
"@MMK_R_U" = -7;
"@MMK_R_a" = -17;
"@MMK_R_c" = -40;
"@MMK_R_copyright" = -64;
"@MMK_R_d" = -40;
"@MMK_R_dagger" = -24;
"@MMK_R_daggerdbl" = -10;
"@MMK_R_endash" = -11;
"@MMK_R_f" = -7;
"@MMK_R_g" = -31;
"@MMK_R_guillemetleft" = -28;
"@MMK_R_guilsinglleft.uc" = -46;
"@MMK_R_guilsinglright.uc" = -8;
"@MMK_R_quotedbl" = -9;
"@MMK_R_quoteleft" = -18;
"@MMK_R_s" = -7;
"@MMK_R_t" = -7;
"@MMK_R_u" = -13;
"@MMK_R_w" = -9;
"@MMK_R_y" = -21;
};
"@MMK_L_Y" = {
"@MMK_R_A" = -112;
"@MMK_R_C" = -48;
"@MMK_R_J" = -79;
"@MMK_R_S" = -13;
"@MMK_R_Z" = -17;
"@MMK_R_a" = -81;
"@MMK_R_ampersand" = -70;
"@MMK_R_asterisk" = -11;
"@MMK_R_at" = -96;
"@MMK_R_braceright.uc" = -14;
"@MMK_R_bracketright.uc" = -9;
"@MMK_R_bullet" = -72;
"@MMK_R_c" = -81;
"@MMK_R_colon" = -47;
"@MMK_R_comma" = -89;
"@MMK_R_copyright" = -59;
"@MMK_R_d" = -79;
"@MMK_R_dagger" = -24;
"@MMK_R_daggerdbl" = -24;
"@MMK_R_endash" = -14;
"@MMK_R_f" = -21;
"@MMK_R_g" = -82;
"@MMK_R_germandbls" = -14;
"@MMK_R_guillemetleft" = -68;
"@MMK_R_guillemetright" = -31;
"@MMK_R_guilsinglleft.uc" = -45;
"@MMK_R_guilsinglright.uc" = -17;
"@MMK_R_hyphen" = -76;
"@MMK_R_hyphen.uc" = -57;
"@MMK_R_m" = -31;
"@MMK_R_p" = -35;
"@MMK_R_period" = -96;
"@MMK_R_periodcentered" = -79;
"@MMK_R_quoteleft" = -14;
"@MMK_R_registered" = -26;
"@MMK_R_s" = -39;
"@MMK_R_semicolon" = -44;
"@MMK_R_slash" = -99;
"@MMK_R_t" = -4;
"@MMK_R_u" = -35;
"@MMK_R_v" = -6;
"@MMK_R_w" = -2;
"@MMK_R_x" = -35;
"@MMK_R_y" = -2;
"@MMK_R_z" = -58;
};
"@MMK_L_Z" = {
"@MMK_R_A" = -4;
"@MMK_R_C" = -26;
"@MMK_R_S" = -6;
"@MMK_R_T" = -4;
"@MMK_R_T.salt_tall" = -7;
"@MMK_R_V" = -10;
"@MMK_R_Y" = -7;
"@MMK_R_Z" = -6;
"@MMK_R_asterisk" = -12;
"@MMK_R_bullet" = -47;
"@MMK_R_c" = -17;
"@MMK_R_copyright" = -20;
"@MMK_R_d" = -17;
"@MMK_R_dagger" = -37;
"@MMK_R_daggerdbl" = -31;
"@MMK_R_f" = -4;
"@MMK_R_g" = -13;
"@MMK_R_guillemetleft" = -19;
"@MMK_R_guilsinglleft.uc" = -14;
"@MMK_R_hyphen" = -41;
"@MMK_R_hyphen.uc" = -44;
"@MMK_R_periodcentered" = -53;
"@MMK_R_question" = -4;
"@MMK_R_quotedbl" = -11;
"@MMK_R_quoteleft" = -37;
"@MMK_R_registered" = -35;
"@MMK_R_slash" = 6;
"@MMK_R_t" = -6;
"@MMK_R_trademark" = -4;
"@MMK_R_u" = -9;
"@MMK_R_v" = -14;
"@MMK_R_w" = -10;
"@MMK_R_x" = -4;
"@MMK_R_y" = -10;
};
"@MMK_L_a" = {
"@MMK_R_T" = -20;
"@MMK_R_T.salt_tall" = -13;
"@MMK_R_V" = -44;
"@MMK_R_W" = -25;
"@MMK_R_Y" = -44;
"@MMK_R_asterisk" = -5;
"@MMK_R_backslash" = -79;
"@MMK_R_question" = -10;
"@MMK_R_quotedbl" = -41;
"@MMK_R_quoteleft" = -18;
"@MMK_R_registered" = -13;
"@MMK_R_trademark" = -16;
"@MMK_R_v" = -6;
"@MMK_R_w" = -4;
"@MMK_R_x" = -16;
"@MMK_R_y" = -6;
};
"@MMK_L_ampersand" = {
"@MMK_R_C" = -24;
"@MMK_R_J" = 5;
"@MMK_R_T" = -37;
"@MMK_R_T.salt_tall" = -29;
"@MMK_R_U" = -9;
"@MMK_R_W" = -74;
"@MMK_R_Y" = -111;
"@MMK_R_c" = -7;
"@MMK_R_d" = -7;
"@MMK_R_g" = -7;
"@MMK_R_w" = -34;
"@MMK_R_y" = -40;
};
"@MMK_L_asterisk" = {
"@MMK_R_A" = -99;
"@MMK_R_C" = -11;
"@MMK_R_J" = -41;
"@MMK_R_Y" = -8;
"@MMK_R_Z" = -15;
"@MMK_R_a" = -10;
"@MMK_R_c" = -20;
"@MMK_R_d" = -20;
"@MMK_R_f" = 6;
"@MMK_R_g" = -16;
"@MMK_R_i" = 17;
"@MMK_R_j" = 17;
"@MMK_R_period" = -100;
"@MMK_R_t" = 6;
"@MMK_R_w" = 24;
"@MMK_R_y" = 24;
"@MMK_R_z" = -30;
};
"@MMK_L_at" = {
"@MMK_R_A" = -24;
"@MMK_R_J" = -31;
"@MMK_R_S" = -37;
"@MMK_R_T" = -42;
"@MMK_R_T.salt_tall" = -29;
"@MMK_R_W" = -44;
"@MMK_R_Y" = -86;
"@MMK_R_Z" = -30;
"@MMK_R_w" = -16;
"@MMK_R_y" = -18;
"@MMK_R_z" = -9;
};
"@MMK_L_b" = {
"@MMK_R_A" = -25;
"@MMK_R_J" = -6;
"@MMK_R_S" = -24;
"@MMK_R_T" = -44;
"@MMK_R_T.salt_tall" = -34;
"@MMK_R_V" = -64;
"@MMK_R_W" = -51;
"@MMK_R_X" = -27;
"@MMK_R_Y" = -79;
"@MMK_R_Z" = -20;
"@MMK_R_asterisk" = -20;
"@MMK_R_backslash" = -92;
"@MMK_R_braceright" = -11;
"@MMK_R_bracketright" = -26;
"@MMK_R_colon" = -3;
"@MMK_R_comma" = -29;
"@MMK_R_dagger" = -19;
"@MMK_R_f" = -17;
"@MMK_R_guillemetright" = -29;
"@MMK_R_parenright" = -12;
"@MMK_R_period" = -14;
"@MMK_R_question" = -41;
"@MMK_R_quotedbl" = -62;
"@MMK_R_quoteleft" = -35;
"@MMK_R_registered" = -23;
"@MMK_R_s" = -1;
"@MMK_R_semicolon" = -16;
"@MMK_R_slash" = -31;
"@MMK_R_t" = -14;
"@MMK_R_trademark" = -26;
"@MMK_R_v" = -34;
"@MMK_R_w" = -22;
"@MMK_R_x" = -49;
"@MMK_R_y" = -25;
"@MMK_R_z" = -34;
};
"@MMK_L_backslash" = {
"@MMK_R_C" = -47;
"@MMK_R_J" = 46;
"@MMK_R_S" = 23;
"@MMK_R_T" = -56;
"@MMK_R_T.salt_tall" = -36;
"@MMK_R_U" = -37;
"@MMK_R_W" = -66;
"@MMK_R_Y" = -89;
"@MMK_R_Z" = 34;
"@MMK_R_a" = -1;
"@MMK_R_c" = -29;
"@MMK_R_d" = -27;
"@MMK_R_g" = -12;
"@MMK_R_i" = 14;
"@MMK_R_j" = 156;
"@MMK_R_p" = 38;
"@MMK_R_u" = -10;
"@MMK_R_w" = -61;
"@MMK_R_y" = -34;
"@MMK_R_z" = 7;
};
"@MMK_L_braceleft" = {
"@MMK_R_A" = -16;
"@MMK_R_C" = -35;
"@MMK_R_S" = -3;
"@MMK_R_Z" = -4;
"@MMK_R_a" = -3;
"@MMK_R_b" = 11;
"@MMK_R_c" = -15;
"@MMK_R_d" = -11;
"@MMK_R_g" = -14;
"@MMK_R_i" = 5;
"@MMK_R_j" = 74;
"@MMK_R_s" = -7;
"@MMK_R_t" = 4;
"@MMK_R_w" = -9;
"@MMK_R_y" = -4;
"@MMK_R_z" = -10;
};
"@MMK_L_braceleft.uc" = {
"@MMK_R_A" = -10;
"@MMK_R_C" = -32;
"@MMK_R_Y" = -4;
};
"@MMK_L_bracketleft" = {
"@MMK_R_A" = -8;
"@MMK_R_C" = -26;
"@MMK_R_J" = -10;
"@MMK_R_b" = 14;
"@MMK_R_c" = -16;
"@MMK_R_d" = -22;
"@MMK_R_i" = 9;
"@MMK_R_j" = 85;
"@MMK_R_t" = 6;
"@MMK_R_w" = -7;
"@MMK_R_y" = -4;
"@MMK_R_z" = -7;
};
"@MMK_L_bracketleft.uc" = {
"@MMK_R_A" = -10;
"@MMK_R_C" = -25;
"@MMK_R_S" = -10;
"@MMK_R_Y" = -9;
};
"@MMK_L_bullet" = {
"@MMK_R_A" = -62;
"@MMK_R_J" = -44;
"@MMK_R_S" = -54;
"@MMK_R_T" = -61;
"@MMK_R_T.salt_tall" = -51;
"@MMK_R_W" = -57;
"@MMK_R_Y" = -72;
"@MMK_R_Z" = -51;
"@MMK_R_f" = -7;
"@MMK_R_s" = -7;
"@MMK_R_t" = -7;
"@MMK_R_w" = -14;
"@MMK_R_y" = -14;
"@MMK_R_z" = -31;
};
"@MMK_L_c" = {
"@MMK_R_V" = -27;
"@MMK_R_W" = -10;
"@MMK_R_Y" = -21;
"@MMK_R_a" = -1;
"@MMK_R_backslash" = -36;
"@MMK_R_braceright" = 7;
"@MMK_R_bracketright" = 7;
"@MMK_R_bullet" = -7;
"@MMK_R_c" = -1;
"@MMK_R_comma" = 7;
"@MMK_R_d" = -10;
"@MMK_R_dagger" = 7;
"@MMK_R_g" = -10;
"@MMK_R_guillemetleft" = -14;
"@MMK_R_guillemetright" = 18;
"@MMK_R_hyphen" = -10;
"@MMK_R_periodcentered" = -3;
"@MMK_R_quotedbl" = -11;
"@MMK_R_quoteleft" = -11;
"@MMK_R_registered" = 19;
"@MMK_R_slash" = 25;
};
"@MMK_L_colon" = {
"@MMK_R_T" = -46;
"@MMK_R_T.salt_tall" = -32;
"@MMK_R_V" = -27;
"@MMK_R_W" = -16;
"@MMK_R_X" = -4;
"@MMK_R_Y" = -47;
"@MMK_R_c" = -3;
"@MMK_R_d" = -3;
"@MMK_R_four" = -37;
"@MMK_R_g" = -3;
"@MMK_R_nine" = -3;
"@MMK_R_one" = -4;
"@MMK_R_seven" = -17;
"@MMK_R_two" = -10;
};
"@MMK_L_comma" = {
"@MMK_R_C" = -67;
"@MMK_R_T" = -56;
"@MMK_R_T.salt_tall" = -44;
"@MMK_R_U" = -40;
"@MMK_R_W" = -56;
"@MMK_R_Y" = -84;
"@MMK_R_Z" = -7;
"@MMK_R_c" = -16;
"@MMK_R_d" = -10;
"@MMK_R_g" = -10;
"@MMK_R_j" = 10;
"@MMK_R_quotedbl" = -121;
"@MMK_R_quoteleft" = -134;
"@MMK_R_u" = -10;
"@MMK_R_w" = -19;
"@MMK_R_y" = -21;
};
"@MMK_L_copyright" = {
"@MMK_R_A" = -60;
"@MMK_R_J" = -34;
"@MMK_R_S" = -34;
"@MMK_R_T" = -41;
"@MMK_R_T.salt_tall" = -41;
"@MMK_R_V" = -55;
"@MMK_R_W" = -41;
"@MMK_R_X" = -64;
"@MMK_R_Y" = -59;
"@MMK_R_Z" = -41;
"@MMK_R_a" = -14;
"@MMK_R_four" = -19;
"@MMK_R_seven" = -19;
"@MMK_R_two" = -20;
"@MMK_R_v" = -4;
"@MMK_R_w" = -4;
"@MMK_R_x" = -22;
"@MMK_R_y" = -4;
"@MMK_R_z" = -44;
};
"@MMK_L_d" = {
"@MMK_R_ampersand" = -4;
"@MMK_R_backslash" = 24;
"@MMK_R_braceright" = 11;
"@MMK_R_bracketright" = 14;
"@MMK_R_guillemetright" = 3;
"@MMK_R_parenright" = 15;
"@MMK_R_quotedbl" = -13;
"@MMK_R_quoteleft" = -10;
"@MMK_R_semicolon" = -5;
};
"@MMK_L_dagger" = {
"@MMK_R_A" = -45;
"@MMK_R_Hbar" = 17;
"@MMK_R_J" = -24;
"@MMK_R_S" = -11;
"@MMK_R_T" = -27;
"@MMK_R_T.salt_tall" = -14;
"@MMK_R_V" = -20;
"@MMK_R_W" = -6;
"@MMK_R_X" = -24;
"@MMK_R_Y" = -24;
"@MMK_R_Z" = -61;
"@MMK_R_a" = -17;
"@MMK_R_c" = -19;
"@MMK_R_d" = -19;
"@MMK_R_g" = -16;
"@MMK_R_s" = -6;
"@MMK_R_v" = 10;
"@MMK_R_w" = 10;
"@MMK_R_x" = -6;
"@MMK_R_y" = 10;
"@MMK_R_z" = -21;
};
"@MMK_L_daggerdbl" = {
"@MMK_R_A" = -40;
"@MMK_R_Hbar" = 17;
"@MMK_R_J" = -17;
"@MMK_R_Lslash" = 6;
"@MMK_R_S" = -11;
"@MMK_R_T" = -27;
"@MMK_R_T.salt_tall" = -14;
"@MMK_R_V" = -19;
"@MMK_R_W" = -9;
"@MMK_R_X" = -10;
"@MMK_R_Y" = -24;
"@MMK_R_Z" = -14;
"@MMK_R_s" = -3;
"@MMK_R_v" = 8;
"@MMK_R_w" = 8;
"@MMK_R_x" = -6;
"@MMK_R_y" = 8;
"@MMK_R_z" = -12;
};
"@MMK_L_degree" = {
"@MMK_R_period" = -120;
};
"@MMK_L_e" = {
"@MMK_R_A" = -6;
"@MMK_R_T" = -34;
"@MMK_R_T.salt_tall" = -31;
"@MMK_R_V" = -69;
"@MMK_R_W" = -55;
"@MMK_R_X" = -27;
"@MMK_R_Y" = -89;
"@MMK_R_asterisk" = -18;
"@MMK_R_backslash" = -111;
"@MMK_R_braceright" = -7;
"@MMK_R_bracketright" = -14;
"@MMK_R_colon" = -1;
"@MMK_R_dagger" = -19;
"@MMK_R_f" = -14;
"@MMK_R_guillemetright" = -27;
"@MMK_R_parenright" = -11;
"@MMK_R_question" = -15;
"@MMK_R_quotedbl" = -51;
"@MMK_R_quoteleft" = -24;
"@MMK_R_registered" = -21;
"@MMK_R_slash" = -6;
"@MMK_R_t" = -14;
"@MMK_R_trademark" = -16;
"@MMK_R_v" = -36;
"@MMK_R_w" = -23;
"@MMK_R_x" = -41;
"@MMK_R_y" = -36;
"@MMK_R_z" = -19;
};
"@MMK_L_eight" = {
"@MMK_R_guillemetright" = -15;
"@MMK_R_guilsinglright.uc" = -15;
"@MMK_R_minute" = -24;
"@MMK_R_percent" = -4;
"@MMK_R_quotedbl" = -21;
"@MMK_R_quoteleft" = -11;
};
"@MMK_L_endash" = {
"@MMK_R_A" = -19;
"@MMK_R_V" = -14;
"@MMK_R_W" = -10;
"@MMK_R_X" = -11;
"@MMK_R_Y" = -14;
"@MMK_R_five" = -41;
"@MMK_R_four" = -45;
"@MMK_R_nine" = -20;
"@MMK_R_one" = -27;
"@MMK_R_seven" = -47;
"@MMK_R_three" = -31;
"@MMK_R_two" = -60;
"@MMK_R_v" = -4;
"@MMK_R_x" = -10;
"@MMK_R_y" = -4;
};
"@MMK_L_eth" = {
"@MMK_R_A" = -21;
"@MMK_R_J" = -6;
"@MMK_R_S" = -20;
"@MMK_R_T" = -14;
"@MMK_R_T.salt_tall" = -6;
"@MMK_R_W" = -14;
"@MMK_R_Y" = -29;
"@MMK_R_Z" = -16;
"@MMK_R_colon" = -3;
"@MMK_R_dagger" = -14;
"@MMK_R_guillemetright" = -25;
"@MMK_R_period" = -10;
"@MMK_R_quotedbl" = -48;
"@MMK_R_quoteleft" = -13;
"@MMK_R_t" = -6;
"@MMK_R_w" = -10;
"@MMK_R_y" = -14;
"@MMK_R_z" = -6;
};
"@MMK_L_exclam" = {
"@MMK_R_quotedbl" = -10;
"@MMK_R_quoteleft" = -10;
};
"@MMK_L_exclamdown" = {
"@MMK_R_C" = -5;
};
"@MMK_L_f" = {
"@MMK_R_A" = -14;
"@MMK_R_B" = 6;
"@MMK_R_T" = 20;
"@MMK_R_T.salt_tall" = 17;
"@MMK_R_V" = 41;
"@MMK_R_W" = 31;
"@MMK_R_X" = 20;
"@MMK_R_Y" = 31;
"@MMK_R_a" = -15;
"@MMK_R_asterisk" = 20;
"@MMK_R_b" = 6;
"@MMK_R_backslash" = 40;
"@MMK_R_braceright" = 25;
"@MMK_R_bracketright" = 39;
"@MMK_R_bullet" = -7;
"@MMK_R_c" = -16;
"@MMK_R_d" = -16;
"@MMK_R_g" = -14;
"@MMK_R_parenright" = 19;
"@MMK_R_question" = 11;
"@MMK_R_quotedbl" = -6;
"@MMK_R_quoteleft" = 4;
"@MMK_R_registered" = 18;
"@MMK_R_trademark" = 38;
"@MMK_R_x" = -4;
"@MMK_R_z" = -10;
};
"@MMK_L_five" = {
"@MMK_R_colon" = -6;
"@MMK_R_endash" = -7;
"@MMK_R_guillemetright" = -11;
"@MMK_R_guilsinglright.uc" = -9;
"@MMK_R_period" = -17;
"@MMK_R_quoteleft" = -15;
};
"@MMK_L_four" = {
"@MMK_R_endash" = -27;
"@MMK_R_guillemetright" = -14;
"@MMK_R_guilsinglright.uc" = -14;
"@MMK_R_minute" = -34;
"@MMK_R_percent" = -5;
"@MMK_R_plus" = -19;
"@MMK_R_quotedbl" = -17;
"@MMK_R_quoteleft" = -19;
"@MMK_R_t" = -14;
};
"@MMK_L_g" = {
"@MMK_R_T.salt_tall" = -4;
"@MMK_R_V" = -16;
"@MMK_R_Y" = -14;
"@MMK_R_backslash" = -36;
"@MMK_R_j" = 4;
"@MMK_R_quotedbl" = -18;
"@MMK_R_quoteleft" = -10;
"@MMK_R_slash" = 8;
};
"@MMK_L_germandbls" = {
"@MMK_R_c" = -9;
"@MMK_R_dagger" = -6;
"@MMK_R_daggerdbl" = -3;
"@MMK_R_guillemetright" = -6;
"@MMK_R_quotedbl" = -56;
"@MMK_R_quoteleft" = -30;
};
"@MMK_L_guillemetleft" = {
"@MMK_R_C" = -24;
"@MMK_R_S" = -6;
"@MMK_R_T" = -10;
"@MMK_R_T.salt_tall" = -6;
"@MMK_R_V" = -29;
"@MMK_R_W" = -22;
"@MMK_R_Y" = -31;
"@MMK_R_a" = -21;
"@MMK_R_b" = 3;
"@MMK_R_c" = -28;
"@MMK_R_d" = -29;
"@MMK_R_eight" = -15;
"@MMK_R_four" = -35;
"@MMK_R_g" = -29;
"@MMK_R_i" = 3;
"@MMK_R_j" = 3;
"@MMK_R_nine" = -11;
"@MMK_R_s" = -6;
"@MMK_R_seven" = -10;
"@MMK_R_six" = -25;
"@MMK_R_two" = -4;
"@MMK_R_zero" = -6;
};
"@MMK_L_guillemetright" = {
"@MMK_R_A" = -14;
"@MMK_R_J" = -24;
"@MMK_R_S" = -9;
"@MMK_R_T" = -49;
"@MMK_R_T.salt_tall" = -35;
"@MMK_R_V" = -35;
"@MMK_R_W" = -26;
"@MMK_R_X" = -28;
"@MMK_R_Y" = -68;
"@MMK_R_Z" = -11;
"@MMK_R_five" = -10;
"@MMK_R_four" = -10;
"@MMK_R_nine" = -16;
"@MMK_R_one" = -15;
"@MMK_R_s" = -10;
"@MMK_R_seven" = -21;
"@MMK_R_three" = -11;
"@MMK_R_two" = -19;
"@MMK_R_v" = -11;
"@MMK_R_w" = -10;
"@MMK_R_x" = -15;
"@MMK_R_y" = -11;
"@MMK_R_z" = -14;
};
"@MMK_L_guilsinglleft.uc" = {
"@MMK_R_A" = -5;
"@MMK_R_C" = -19;
"@MMK_R_V" = -11;
"@MMK_R_W" = -6;
"@MMK_R_X" = -8;
"@MMK_R_Y" = -17;
"@MMK_R_eight" = -8;
"@MMK_R_four" = -35;
"@MMK_R_nine" = -15;
"@MMK_R_one" = -6;
"@MMK_R_seven" = -20;
"@MMK_R_six" = -25;
"@MMK_R_three" = -4;
"@MMK_R_two" = -10;
"@MMK_R_zero" = -16;
};
"@MMK_L_guilsinglright.uc" = {
"@MMK_R_A" = -19;
"@MMK_R_J" = -14;
"@MMK_R_S" = -19;
"@MMK_R_T" = -39;
"@MMK_R_T.salt_tall" = -20;
"@MMK_R_V" = -22;
"@MMK_R_W" = -15;
"@MMK_R_X" = -46;
"@MMK_R_Y" = -45;
"@MMK_R_Z" = -14;
"@MMK_R_five" = -15;
"@MMK_R_four" = -10;
"@MMK_R_nine" = -14;
"@MMK_R_one" = -10;
"@MMK_R_seven" = -25;
"@MMK_R_three" = -16;
"@MMK_R_two" = -42;
};
"@MMK_L_h" = {
"@MMK_R_T" = -10;
"@MMK_R_T.salt_tall" = -10;
"@MMK_R_V" = -41;
"@MMK_R_W" = -34;
"@MMK_R_Y" = -41;
"@MMK_R_asterisk" = -19;
"@MMK_R_backslash" = -107;
"@MMK_R_dagger" = -16;
"@MMK_R_question" = -10;
"@MMK_R_quotedbl" = -28;
"@MMK_R_quoteleft" = -30;
"@MMK_R_quotesinglbase" = -16;
"@MMK_R_registered" = -16;
"@MMK_R_trademark" = -34;
"@MMK_R_v" = -6;
"@MMK_R_w" = -3;
"@MMK_R_y" = -9;
};
"@MMK_L_hyphen" = {
"@MMK_R_A" = -65;
"@MMK_R_J" = -10;
"@MMK_R_T" = -29;
"@MMK_R_T.salt_tall" = -19;
"@MMK_R_W" = -47;
"@MMK_R_Y" = -76;
"@MMK_R_Z" = -32;
"@MMK_R_w" = -10;
"@MMK_R_y" = -11;
"@MMK_R_z" = -21;
};
"@MMK_L_hyphen.uc" = {
"@MMK_R_A" = -88;
"@MMK_R_J" = -20;
"@MMK_R_S" = -13;
"@MMK_R_T" = -24;
"@MMK_R_T.salt_tall" = -6;
"@MMK_R_W" = -34;
"@MMK_R_Y" = -57;
"@MMK_R_Z" = -40;
};
"@MMK_L_i" = {
"@MMK_R_T.salt_tall" = -20;
"@MMK_R_asterisk" = 17;
"@MMK_R_braceright" = 5;
"@MMK_R_bracketright" = 9;
"@MMK_R_guillemetright" = 3;
"@MMK_R_parenright" = 6;
"@MMK_R_quotedbl" = -11;
"@MMK_R_quoteleft" = -10;
"@MMK_R_slash" = 14;
};
"@MMK_L_j" = {
"@MMK_R_T" = -20;
"@MMK_R_T.salt_tall" = -20;
"@MMK_R_asterisk" = 17;
"@MMK_R_braceright" = 5;
"@MMK_R_bracketright" = 9;
"@MMK_R_guillemetright" = 3;
"@MMK_R_j" = 29;
"@MMK_R_parenright" = 6;
"@MMK_R_quotedbl" = -9;
"@MMK_R_quoteleft" = -10;
"@MMK_R_slash" = 59;
};
"@MMK_L_k" = {
"@MMK_R_C" = -14;
"@MMK_R_T" = -17;
"@MMK_R_T.salt_tall" = -31;
"@MMK_R_V" = -16;
"@MMK_R_W" = -14;
"@MMK_R_Y" = -21;
"@MMK_R_a" = -13;
"@MMK_R_ampersand" = -10;
"@MMK_R_asterisk" = 3;
"@MMK_R_at" = -15;
"@MMK_R_backslash" = -59;
"@MMK_R_braceright" = -10;
"@MMK_R_bracketright" = -4;
"@MMK_R_bullet" = -39;
"@MMK_R_c" = -44;
"@MMK_R_d" = -46;
"@MMK_R_dagger" = -6;
"@MMK_R_daggerdbl" = -4;
"@MMK_R_endash" = -14;
"@MMK_R_f" = -6;
"@MMK_R_g" = -46;
"@MMK_R_guillemetleft" = -22;
"@MMK_R_hyphen" = -36;
"@MMK_R_periodcentered" = -25;
"@MMK_R_question" = -7;
"@MMK_R_quotedbl" = -34;
"@MMK_R_quoteleft" = -38;
"@MMK_R_s" = -13;
"@MMK_R_t" = -4;
"@MMK_R_trademark" = -10;
"@MMK_R_u" = -4;
"@MMK_R_v" = -4;
"@MMK_R_z" = -4;
};
"@MMK_L_minute" = {
"@MMK_R_eight" = -35;
"@MMK_R_five" = -54;
"@MMK_R_four" = -117;
"@MMK_R_nine" = -20;
"@MMK_R_one" = -14;
"@MMK_R_seven" = -14;
"@MMK_R_six" = -65;
"@MMK_R_three" = -30;
"@MMK_R_two" = -37;
"@MMK_R_zero" = -24;
};
"@MMK_L_nine" = {
"@MMK_R_colon" = -6;
"@MMK_R_endash" = -10;
"@MMK_R_guillemetleft" = -14;
"@MMK_R_guillemetright" = -6;
"@MMK_R_guilsinglleft.uc" = -4;
"@MMK_R_guilsinglright.uc" = -10;
"@MMK_R_period" = -59;
};
"@MMK_L_o" = {
"@MMK_R_A" = -16;
"@MMK_R_C" = 4;
"@MMK_R_J" = -6;
"@MMK_R_S" = -24;
"@MMK_R_T" = -55;
"@MMK_R_T.salt_tall" = -59;
"@MMK_R_V" = -64;
"@MMK_R_W" = -52;
"@MMK_R_X" = -39;
"@MMK_R_Y" = -81;
"@MMK_R_Z" = -26;
"@MMK_R_asterisk" = -20;
"@MMK_R_backslash" = -109;
"@MMK_R_braceright" = -15;
"@MMK_R_bracketright" = -16;
"@MMK_R_colon" = -3;
"@MMK_R_comma" = -20;
"@MMK_R_dagger" = -19;
"@MMK_R_f" = -16;
"@MMK_R_guillemetright" = -28;
"@MMK_R_parenright" = -11;
"@MMK_R_period" = -16;
"@MMK_R_question" = -36;
"@MMK_R_quotedbl" = -49;
"@MMK_R_quoteleft" = -41;
"@MMK_R_registered" = -26;
"@MMK_R_semicolon" = -16;
"@MMK_R_slash" = -29;
"@MMK_R_t" = -14;
"@MMK_R_trademark" = -24;
"@MMK_R_v" = -36;
"@MMK_R_w" = -27;
"@MMK_R_x" = -49;
"@MMK_R_y" = -34;
"@MMK_R_z" = -29;
};
"@MMK_L_one" = {
"@MMK_R_guillemetleft" = 18;
};
"@MMK_L_parenleft" = {
"@MMK_R_A" = -20;
"@MMK_R_C" = -47;
"@MMK_R_b" = 15;
"@MMK_R_c" = -11;
"@MMK_R_d" = -12;
"@MMK_R_g" = -14;
"@MMK_R_i" = 6;
"@MMK_R_j" = 30;
"@MMK_R_s" = -7;
"@MMK_R_w" = -9;
"@MMK_R_y" = -6;
"@MMK_R_z" = -14;
};
"@MMK_L_parenleft.uc" = {
"@MMK_R_C" = -25;
};
"@MMK_L_period" = {
"@MMK_R_C" = -54;
"@MMK_R_J" = 10;
"@MMK_R_T" = -76;
"@MMK_R_T.salt_tall" = -76;
"@MMK_R_U" = -46;
"@MMK_R_V" = -77;
"@MMK_R_W" = -54;
"@MMK_R_Y" = -94;
"@MMK_R_c" = -16;
"@MMK_R_d" = -14;
"@MMK_R_four" = -10;
"@MMK_R_g" = -11;
"@MMK_R_nine" = -56;
"@MMK_R_one" = -44;
"@MMK_R_quotedbl" = -121;
"@MMK_R_quoteleft" = -134;
"@MMK_R_seven" = -16;
"@MMK_R_space" = -30;
"@MMK_R_two" = 5;
"@MMK_R_u" = -6;
"@MMK_R_v" = -49;
"@MMK_R_w" = -31;
"@MMK_R_y" = -29;
"@MMK_R_zero" = -19;
};
"@MMK_L_periodcentered" = {
"@MMK_R_A" = -70;
"@MMK_R_J" = -44;
"@MMK_R_S" = -51;
"@MMK_R_T" = -54;
"@MMK_R_T.salt_tall" = -61;
"@MMK_R_W" = -52;
"@MMK_R_Y" = -79;
"@MMK_R_Z" = -46;
"@MMK_R_a" = -14;
"@MMK_R_s" = -6;
"@MMK_R_w" = -10;
"@MMK_R_y" = -10;
"@MMK_R_z" = -46;
};
"@MMK_L_plus" = {
"@MMK_R_five" = -30;
"@MMK_R_four" = -23;
"@MMK_R_one" = -6;
"@MMK_R_seven" = -26;
"@MMK_R_three" = -26;
"@MMK_R_two" = -80;
};
"@MMK_L_q" = {
"@MMK_R_T.salt_tall" = -4;
"@MMK_R_j" = 40;
"@MMK_R_quotedbl" = -18;
"@MMK_R_quoteleft" = -10;
};
"@MMK_L_question" = {
"@MMK_R_A" = -29;
"@MMK_R_quotedbl" = -14;
"@MMK_R_quoteleft" = -10;
};
"@MMK_L_questiondown" = {
"@MMK_R_A" = -6;
"@MMK_R_C" = -29;
"@MMK_R_T" = -25;
"@MMK_R_T.salt_tall" = -65;
"@MMK_R_U" = -25;
"@MMK_R_W" = -16;
"@MMK_R_Y" = -57;
"@MMK_R_f" = -11;
"@MMK_R_t" = -16;
"@MMK_R_w" = -19;
"@MMK_R_y" = -20;
};
"@MMK_L_quotedbl" = {
"@MMK_R_A" = -109;
"@MMK_R_C" = -59;
"@MMK_R_J" = -65;
"@MMK_R_S" = -29;
"@MMK_R_X" = -3;
"@MMK_R_Z" = -30;
"@MMK_R_a" = -115;
"@MMK_R_b" = -13;
"@MMK_R_c" = -131;
"@MMK_R_comma" = -134;
"@MMK_R_d" = -117;
"@MMK_R_eight" = -49;
"@MMK_R_f" = -39;
"@MMK_R_five" = -58;
"@MMK_R_four" = -149;
"@MMK_R_g" = -109;
"@MMK_R_germandbls" = -32;
"@MMK_R_i" = -24;
"@MMK_R_j" = -24;
"@MMK_R_m" = -50;
"@MMK_R_nine" = -27;
"@MMK_R_one" = -40;
"@MMK_R_p" = -57;
"@MMK_R_period" = -134;
"@MMK_R_s" = -72;
"@MMK_R_seven" = -26;
"@MMK_R_six" = -84;
"@MMK_R_space" = -60;
"@MMK_R_t" = -41;
"@MMK_R_three" = -35;
"@MMK_R_two" = -54;
"@MMK_R_u" = -49;
"@MMK_R_v" = -39;
"@MMK_R_w" = -49;
"@MMK_R_x" = -75;
"@MMK_R_y" = -46;
"@MMK_R_z" = -131;
"@MMK_R_zero" = -52;
};
"@MMK_L_quoteleft" = {
"@MMK_R_A" = -94;
"@MMK_R_C" = -29;
"@MMK_R_J" = -51;
"@MMK_R_Z" = -11;
"@MMK_R_a" = -86;
"@MMK_R_b" = -18;
"@MMK_R_c" = -86;
"@MMK_R_d" = -78;
"@MMK_R_eight" = -24;
"@MMK_R_exclamdown" = -11;
"@MMK_R_f" = -33;
"@MMK_R_five" = -26;
"@MMK_R_four" = -81;
"@MMK_R_g" = -74;
"@MMK_R_germandbls" = -24;
"@MMK_R_i" = -28;
"@MMK_R_j" = -28;
"@MMK_R_m" = -41;
"@MMK_R_nine" = -5;
"@MMK_R_one" = -4;
"@MMK_R_p" = -24;
"@MMK_R_questiondown" = -91;
"@MMK_R_s" = -56;
"@MMK_R_seven" = -4;
"@MMK_R_six" = -23;
"@MMK_R_t" = -36;
"@MMK_R_three" = -11;
"@MMK_R_two" = -20;
"@MMK_R_u" = -41;
"@MMK_R_v" = -33;
"@MMK_R_w" = -33;
"@MMK_R_x" = -43;
"@MMK_R_y" = -33;
"@MMK_R_z" = -110;
"@MMK_R_zero" = -11;
};
"@MMK_L_quotesinglbase" = {
"@MMK_R_A" = 22;
"@MMK_R_C" = -58;
"@MMK_R_T" = -50;
"@MMK_R_T.salt_tall" = -35;
"@MMK_R_U" = -34;
"@MMK_R_V" = -38;
"@MMK_R_W" = -28;
"@MMK_R_Y" = -51;
"@MMK_R_a" = -30;
"@MMK_R_b" = -13;
"@MMK_R_c" = -67;
"@MMK_R_d" = -67;
"@MMK_R_eight" = -8;
"@MMK_R_f" = -42;
"@MMK_R_four" = -46;
"@MMK_R_g" = -86;
"@MMK_R_germandbls" = -13;
"@MMK_R_i" = -14;
"@MMK_R_j" = 47;
"@MMK_R_m" = -13;
"@MMK_R_nine" = -26;
"@MMK_R_one" = -60;
"@MMK_R_p" = -13;
"@MMK_R_s" = -28;
"@MMK_R_seven" = -32;
"@MMK_R_six" = -15;
"@MMK_R_t" = -45;
"@MMK_R_u" = -39;
"@MMK_R_v" = -99;
"@MMK_R_w" = -101;
"@MMK_R_x" = -14;
"@MMK_R_y" = -97;
"@MMK_R_z" = -26;
"@MMK_R_zero" = -56;
};
"@MMK_L_r" = {
"@MMK_R_A" = -29;
"@MMK_R_J" = -10;
"@MMK_R_T" = -20;
"@MMK_R_T.salt_tall" = -6;
"@MMK_R_W" = -10;
"@MMK_R_X" = -6;
"@MMK_R_a" = -31;
"@MMK_R_asterisk" = 11;
"@MMK_R_at" = -8;
"@MMK_R_backslash" = -47;
"@MMK_R_bullet" = -8;
"@MMK_R_c" = -13;
"@MMK_R_comma" = -46;
"@MMK_R_d" = -11;
"@MMK_R_g" = -11;
"@MMK_R_guillemetleft" = -14;
"@MMK_R_period" = -55;
"@MMK_R_periodcentered" = -6;
"@MMK_R_quotedbl" = -8;
"@MMK_R_quoteleft" = -8;
"@MMK_R_registered" = 7;
"@MMK_R_s" = -6;
"@MMK_R_slash" = -58;
"@MMK_R_v" = 12;
"@MMK_R_w" = 12;
"@MMK_R_x" = -1;
"@MMK_R_y" = 12;
"@MMK_R_z" = -8;
};
"@MMK_L_registered" = {
"@MMK_R_A" = -132;
"@MMK_R_C" = -4;
"@MMK_R_J" = -80;
"@MMK_R_S" = -24;
"@MMK_R_T" = -20;
"@MMK_R_T.salt_tall" = -20;
"@MMK_R_W" = -9;
"@MMK_R_Y" = -26;
"@MMK_R_Z" = -56;
"@MMK_R_a" = -30;
"@MMK_R_c" = -26;
"@MMK_R_d" = -23;
"@MMK_R_f" = 7;
"@MMK_R_g" = -20;
"@MMK_R_s" = -5;
"@MMK_R_t" = 11;
"@MMK_R_w" = 22;
"@MMK_R_y" = 22;
"@MMK_R_z" = -41;
};
"@MMK_L_s" = {
"@MMK_R_T" = -34;
"@MMK_R_T.salt_tall" = -20;
"@MMK_R_V" = -34;
"@MMK_R_W" = -22;
"@MMK_R_Y" = -49;
"@MMK_R_asterisk" = -14;
"@MMK_R_backslash" = -87;
"@MMK_R_braceright" = -14;
"@MMK_R_bracketright" = -10;
"@MMK_R_bullet" = -7;
"@MMK_R_dagger" = -16;
"@MMK_R_daggerdbl" = -4;
"@MMK_R_f" = -10;
"@MMK_R_g" = -9;
"@MMK_R_hyphen" = -7;
"@MMK_R_parenright" = -7;
"@MMK_R_periodcentered" = -14;
"@MMK_R_question" = -9;
"@MMK_R_quotedbl" = -57;
"@MMK_R_quoteleft" = -50;
"@MMK_R_registered" = -24;
"@MMK_R_t" = -13;
"@MMK_R_trademark" = -36;
"@MMK_R_v" = -24;
"@MMK_R_w" = -16;
"@MMK_R_x" = -20;
"@MMK_R_y" = -25;
"@MMK_R_z" = -10;
};
"@MMK_L_seven" = {
"@MMK_R_colon" = -25;
"@MMK_R_endash" = -64;
"@MMK_R_guillemetleft" = -44;
"@MMK_R_guillemetright" = -23;
"@MMK_R_guilsinglleft.uc" = -38;
"@MMK_R_guilsinglright.uc" = -25;
"@MMK_R_minute" = -16;
"@MMK_R_percent" = -11;
"@MMK_R_period" = -70;
"@MMK_R_plus" = -31;
"@MMK_R_quotedbl" = -6;
"@MMK_R_quoteleft" = -20;
"@MMK_R_t" = -5;
};
"@MMK_L_six" = {
"@MMK_R_colon" = -3;
"@MMK_R_guillemetright" = -21;
"@MMK_R_guilsinglright.uc" = -21;
"@MMK_R_minute" = -41;
"@MMK_R_percent" = -14;
"@MMK_R_quotedbl" = -31;
"@MMK_R_quoteleft" = -21;
};
"@MMK_L_slash" = {
"@MMK_R_A" = -114;
"@MMK_R_C" = -66;
"@MMK_R_J" = -55;
"@MMK_R_a" = -78;
"@MMK_R_b" = 23;
"@MMK_R_c" = -114;
"@MMK_R_d" = -99;
"@MMK_R_f" = -29;
"@MMK_R_g" = -97;
"@MMK_R_m" = -57;
"@MMK_R_p" = -21;
"@MMK_R_s" = -76;
"@MMK_R_t" = -16;
"@MMK_R_u" = -56;
"@MMK_R_w" = -30;
"@MMK_R_y" = -34;
"@MMK_R_z" = -115;
};
"@MMK_L_space" = {
"@MMK_R_quoteleft" = -60;
};
"@MMK_L_t" = {
"@MMK_R_T.salt_tall" = -6;
"@MMK_R_X" = -4;
"@MMK_R_a" = -6;
"@MMK_R_asterisk" = 6;
"@MMK_R_backslash" = -16;
"@MMK_R_braceright" = 5;
"@MMK_R_bracketright" = 6;
"@MMK_R_bullet" = -7;
"@MMK_R_c" = -14;
"@MMK_R_d" = -14;
"@MMK_R_g" = -13;
"@MMK_R_quotedbl" = 1;
"@MMK_R_quoteleft" = -6;
"@MMK_R_registered" = 11;
"@MMK_R_trademark" = 7;
"@MMK_R_x" = -6;
"@MMK_R_z" = -17;
};
"@MMK_L_three" = {
"@MMK_R_guillemetleft" = 18;
"@MMK_R_guillemetright" = -8;
"@MMK_R_guilsinglright.uc" = -15;
"@MMK_R_minute" = -11;
"@MMK_R_quotedbl" = -15;
"@MMK_R_quoteleft" = -19;
};
"@MMK_L_trademark" = {
"@MMK_R_A" = -121;
"@MMK_R_J" = -41;
"@MMK_R_Z" = -17;
"@MMK_R_a" = -15;
"@MMK_R_c" = -7;
"@MMK_R_d" = -11;
"@MMK_R_f" = 3;
"@MMK_R_g" = -11;
"@MMK_R_t" = 6;
"@MMK_R_w" = 17;
"@MMK_R_y" = 17;
"@MMK_R_z" = -35;
};
"@MMK_L_two" = {
"@MMK_R_endash" = -25;
"@MMK_R_guillemetleft" = -14;
"@MMK_R_guilsinglleft.uc" = -15;
"@MMK_R_guilsinglright.uc" = -9;
"@MMK_R_minute" = -15;
"@MMK_R_percent" = -10;
"@MMK_R_plus" = -29;
"@MMK_R_quotedbl" = -11;
"@MMK_R_quoteleft" = -10;
"@MMK_R_t" = -4;
};
"@MMK_L_u" = {
"@MMK_R_T.salt_tall" = -4;
"@MMK_R_W" = -6;
"@MMK_R_Y" = -13;
"@MMK_R_backslash" = -46;
"@MMK_R_quotedbl" = -14;
"@MMK_R_trademark" = -10;
};
"@MMK_L_v" = {
"@MMK_R_A" = -64;
"@MMK_R_J" = -35;
"@MMK_R_T" = -20;
"@MMK_R_T.salt_tall" = -17;
"@MMK_R_Y" = -19;
"@MMK_R_Z" = -6;
"@MMK_R_a" = -33;
"@MMK_R_c" = -36;
"@MMK_R_d" = -34;
"@MMK_R_dagger" = 10;
"@MMK_R_daggerdbl" = 8;
"@MMK_R_endash" = -4;
"@MMK_R_g" = -29;
"@MMK_R_guillemetleft" = -11;
"@MMK_R_period" = -50;
"@MMK_R_quotedbl" = -10;
"@MMK_R_s" = 1;
"@MMK_R_z" = -26;
};
"@MMK_L_w" = {
"@MMK_R_A" = -37;
"@MMK_R_J" = -27;
"@MMK_R_T" = -14;
"@MMK_R_T.salt_tall" = -6;
"@MMK_R_V" = -10;
"@MMK_R_X" = -11;
"@MMK_R_Y" = -11;
"@MMK_R_a" = -24;
"@MMK_R_ampersand" = -20;
"@MMK_R_asterisk" = 24;
"@MMK_R_at" = -16;
"@MMK_R_backslash" = -29;
"@MMK_R_braceright" = -7;
"@MMK_R_bracketright" = -10;
"@MMK_R_bullet" = -14;
"@MMK_R_c" = -27;
"@MMK_R_comma" = -19;
"@MMK_R_d" = -22;
"@MMK_R_dagger" = 10;
"@MMK_R_daggerdbl" = 8;
"@MMK_R_g" = -22;
"@MMK_R_guillemetleft" = -7;
"@MMK_R_hyphen" = -10;
"@MMK_R_parenright" = -7;
"@MMK_R_period" = -31;
"@MMK_R_periodcentered" = -10;
"@MMK_R_quotedbl" = -14;
"@MMK_R_registered" = 22;
"@MMK_R_s" = -14;
"@MMK_R_semicolon" = -6;
"@MMK_R_slash" = -61;
"@MMK_R_trademark" = 3;
"@MMK_R_z" = -21;
};
"@MMK_L_x" = {
"@MMK_R_C" = -14;
"@MMK_R_T" = -31;
"@MMK_R_T.salt_tall" = -14;
"@MMK_R_W" = -16;
"@MMK_R_Y" = -27;
"@MMK_R_a" = -24;
"@MMK_R_c" = -49;
"@MMK_R_d" = -49;
"@MMK_R_dagger" = -11;
"@MMK_R_daggerdbl" = -6;
"@MMK_R_endash" = -10;
"@MMK_R_f" = -6;
"@MMK_R_g" = -46;
"@MMK_R_guillemetleft" = -15;
"@MMK_R_quotedbl" = -31;
"@MMK_R_quoteleft" = -36;
"@MMK_R_s" = -20;
"@MMK_R_t" = -6;
"@MMK_R_u" = -4;
"@MMK_R_z" = -5;
};
"@MMK_L_y" = {
"@MMK_R_A" = -56;
"@MMK_R_J" = -34;
"@MMK_R_T" = -27;
"@MMK_R_T.salt_tall" = -6;
"@MMK_R_V" = -10;
"@MMK_R_X" = -11;
"@MMK_R_Y" = -10;
"@MMK_R_Z" = -17;
"@MMK_R_a" = -26;
"@MMK_R_ampersand" = -16;
"@MMK_R_asterisk" = 24;
"@MMK_R_at" = -18;
"@MMK_R_backslash" = -26;
"@MMK_R_braceright" = -7;
"@MMK_R_bracketright" = -4;
"@MMK_R_bullet" = -14;
"@MMK_R_c" = -34;
"@MMK_R_comma" = -27;
"@MMK_R_d" = -25;
"@MMK_R_dagger" = 10;
"@MMK_R_daggerdbl" = 8;
"@MMK_R_endash" = -4;
"@MMK_R_g" = -26;
"@MMK_R_guillemetleft" = -11;
"@MMK_R_hyphen" = -11;
"@MMK_R_parenright" = -7;
"@MMK_R_period" = -35;
"@MMK_R_periodcentered" = -10;
"@MMK_R_quotedbl" = -11;
"@MMK_R_registered" = 22;
"@MMK_R_s" = -7;
"@MMK_R_semicolon" = -6;
"@MMK_R_slash" = -44;
"@MMK_R_trademark" = 3;
"@MMK_R_z" = -21;
};
"@MMK_L_z" = {
"@MMK_R_T" = -10;
"@MMK_R_T.salt_tall" = -10;
"@MMK_R_V" = -7;
"@MMK_R_Y" = -15;
"@MMK_R_asterisk" = 3;
"@MMK_R_at" = -6;
"@MMK_R_backslash" = -52;
"@MMK_R_braceright" = -7;
"@MMK_R_bracketright" = -7;
"@MMK_R_bullet" = -15;
"@MMK_R_c" = -27;
"@MMK_R_d" = -24;
"@MMK_R_g" = -30;
"@MMK_R_guillemetleft" = -7;
"@MMK_R_hyphen" = -24;
"@MMK_R_parenright" = -14;
"@MMK_R_periodcentered" = -22;
"@MMK_R_quotedbl" = -29;
"@MMK_R_quoteleft" = -13;
"@MMK_R_registered" = -4;
"@MMK_R_t" = -4;
"@MMK_R_trademark" = -4;
"@MMK_R_u" = -4;
"@MMK_R_v" = -5;
"@MMK_R_x" = -7;
"@MMK_R_z" = -11;
};
"@MMK_L_zero" = {
"@MMK_R_guillemetright" = -14;
"@MMK_R_guilsinglright.uc" = -14;
"@MMK_R_period" = -22;
"@MMK_R_quotedbl" = -4;
"@MMK_R_quoteleft" = -6;
"@MMK_R_quotesinglbase" = -87;
};
Aogonek = {
j = 61;
jacute = 61;
jcircumflex = 61;
};
B = {
V = -24;
X = -11;
asterisk = -4;
backslash = -40;
braceright = -14;
braceright.uc = -14;
bracketright = -11;
bracketright.uc = -10;
comma = -10;
parenright = -15;
parenright.uc = -15;
periodcentered = -10;
question = -10;
registered = -11;
semicolon = -9;
slash = -9;
trademark = -29;
v = -7;
x = -11;
};
C = {
icircumflex = 10;
imacron = 20;
};
C.salt_low = {
C = -36;
C.salt_low = -36;
Cacute = -36;
Cacute.salt_low = -36;
Ccaron = -36;
Ccaron.salt_low = -36;
Ccedilla = -36;
Ccedilla.salt_low = -36;
Ccircumflex = -36;
Ccircumflex.salt_low = -36;
Cdotaccent = -36;
Cdotaccent.salt_low = -36;
G = -36;
Gbreve = -36;
Gcircumflex = -36;
Gcommaaccent = -36;
Gdotaccent = -36;
O = -36;
OE = -36;
Oacute = -36;
Obreve = -36;
Ocircumflex = -36;
Odieresis = -36;
Odieresis.salt = -36;
Ograve = -36;
Ohungarumlaut = -36;
Omacron = -36;
Oslash = -36;
Oslashacute = -36;
Otilde = -36;
Q = -36;
icircumflex = 10;
imacron = 20;
};
Cacute = {
icircumflex = 10;
imacron = 20;
};
Cacute.salt_low = {
icircumflex = 10;
imacron = 20;
};
Ccaron = {
icircumflex = 10;
imacron = 20;
};
Ccaron.salt_low = {
icircumflex = 10;
imacron = 20;
};
Ccedilla = {
icircumflex = 10;
imacron = 20;
};
Ccedilla.salt_low = {
icircumflex = 10;
imacron = 20;
};
Ccircumflex = {
icircumflex = 10;
imacron = 20;
};
Ccircumflex.salt_low = {
icircumflex = 10;
imacron = 20;
};
Cdotaccent = {
icircumflex = 10;
imacron = 20;
};
Cdotaccent.salt_low = {
icircumflex = 10;
imacron = 20;
};
E = {
idieresis = 14;
};
Eacute = {
idieresis = 14;
};
Ebreve = {
idieresis = 14;
};
Ecaron = {
idieresis = 14;
};
Ecircumflex = {
idieresis = 14;
};
Edieresis = {
idieresis = 14;
};
Edotaccent = {
idieresis = 14;
};
Egrave = {
idieresis = 14;
};
Emacron = {
idieresis = 14;
};
Eogonek = {
idieresis = 14;
};
F = {
X = -20;
ampersand = -22;
at = -17;
braceright.uc = -9;
bullet = -6;
comma = -62;
parenright.uc = -7;
periodcentered = -9;
semicolon = -14;
slash = -69;
v = -8;
x = -10;
};
G = {
Lslash = 18;
};
Hbar = {
T.salt_tall = 6;
question = 6;
};
Iogonek = {
j = 14;
jacute = 14;
jcircumflex = 14;
};
Lcaron = {
T.salt_tall = -41;
Tbar.salt_tall = -41;
Tcaron.salt_tall = -41;
Tcommaaccent.salt_tall = -41;
V = -51;
W = -54;
Wacute = -54;
Wcircumflex = -54;
Wdieresis = -54;
Wgrave = -54;
Y = -61;
Yacute = -61;
Ycircumflex = -61;
Ydieresis = -61;
Ygrave = -61;
backslash = -44;
trademark = -39;
};
O = {
Lslash = 5;
};
OE = {
idieresis = 14;
};
P = {
V = -11;
X = -28;
ampersand = -31;
at = -17;
backslash = -16;
braceright = -24;
braceright.uc = -24;
bracketright = -10;
bracketright.uc = -20;
bullet = -24;
comma = -94;
exclam = -10;
hyphen = -27;
parenright = -20;
parenright.uc = -21;
periodcentered = -30;
semicolon = -14;
slash = -104;
trademark = -9;
x = -11;
};
P.salt_tall = {
V = -10;
X = -34;
ampersand = -39;
at = -24;
backslash = -16;
braceright = -34;
braceright.uc = -31;
bracketright = -24;
bracketright.uc = -27;
bullet = -34;
comma = -114;
exclam = -10;
hyphen = -34;
icircumflex = 6;
parenright = -27;
parenright.uc = -32;
periodcentered = -36;
question = -17;
semicolon = -16;
slash = -111;
trademark = -9;
v = 3;
x = -19;
};
Q = {
A = -24;
AE = -24;
AEacute = -24;
Aacute = -24;
Abreve = -24;
Acircumflex = -24;
Adieresis = -24;
Adieresis.salt = -24;
Agrave = -24;
Amacron = -24;
Aogonek = -24;
Aring = -24;
Aringacute = -24;
Atilde = -24;
J = -10;
Jacute = -10;
Jcircumflex = -10;
Lslash = 11;
S = -27;
S.salt_low = -27;
S.salt_tall = -27;
Sacute = -27;
Sacute.salt_low = -27;
Sacute.salt_tall = -27;
Scaron = -27;
Scaron.salt_low = -27;
Scaron.salt_tall = -27;
Scedilla = -27;
Scedilla.salt_low = -27;
Scedilla.salt_tall = -27;
Scircumflex = -27;
Scircumflex.salt_low = -27;
Scircumflex.salt_tall = -27;
Scommaaccent = -27;
Scommaaccent.salt_low = -27;
Scommaaccent.salt_tall = -27;
T.salt_tall = -18;
Tbar.salt_tall = -17;
Tcaron.salt_tall = -18;
Tcommaaccent.salt_tall = -18;
V = -34;
W = -31;
Wacute = -31;
Wcircumflex = -31;
Wdieresis = -31;
Wgrave = -31;
X = -19;
Y = -51;
Yacute = -51;
Ycircumflex = -51;
Ydieresis = -51;
Ygrave = -51;
comma = -31;
ellipsis = -27;
period = -27;
z = -6;
zacute = -6;
zcaron = -6;
zdotaccent = -6;
};
T.salt_tall = {
Hbar = 6;
icircumflex = 17;
igrave = 6;
};
Tbar.salt_tall = {
bullet = -31;
copyright = -27;
icircumflex = 17;
igrave = 6;
periodcentered = -24;
published = -27;
registered.salt_big = -27;
};
Tcaron.salt_tall = {
icircumflex = 17;
igrave = 6;
};
Tcommaaccent.salt_tall = {
icircumflex = 17;
igrave = 6;
};
Thorn = {
V = -26;
X = -35;
ampersand = -6;
backslash = -54;
braceright = -34;
braceright.uc = -30;
bracketright = -24;
bracketright.uc = -15;
comma = -89;
exclam = -4;
parenright = -37;
parenright.uc = -26;
question = -35;
semicolon = -5;
slash = -87;
trademark = -10;
v = -4;
x = -10;
};
V = {
ampersand = -75;
asterisk = -5;
at = -71;
bullet = -62;
comma = -69;
hyphen = -61;
hyphen.uc = -64;
igrave = 14;
imacron = 29;
periodcentered = -66;
registered = -20;
semicolon = -31;
slash = -98;
v = -4;
x = -27;
};
W = {
icircumflex = 48;
};
Wacute = {
icircumflex = 48;
};
Wcircumflex = {
icircumflex = 48;
};
Wdieresis = {
icircumflex = 48;
};
Wgrave = {
icircumflex = 48;
};
X = {
ampersand = -24;
asterisk = -20;
at = -26;
braceright = -3;
bracketright = 3;
bullet = -74;
hyphen = -64;
hyphen.uc = -37;
periodcentered = -67;
question = -15;
registered = -45;
semicolon = -5;
slash = 14;
trademark = -6;
v = -14;
};
ampersand = {
V = -126;
v = -42;
};
aogonek = {
j = 30;
jacute = 30;
jcircumflex = 30;
};
asterisk = {
V = -5;
X = -20;
comma = -100;
eight = -20;
five = -21;
four = -90;
germandbls = 6;
lslash = 4;
seven = -20;
six = -26;
three = -14;
two = -35;
v = 24;
x = 9;
zero = -6;
};
at = {
V = -57;
X = -44;
lslash = 4;
v = -18;
x = -26;
};
backslash = {
V = -93;
X = 6;
eight = -16;
four = -14;
nine = -45;
one = -16;
seven = -18;
six = -10;
v = -74;
zero = -40;
};
braceleft = {
eight = -10;
four = -26;
one = -6;
six = -21;
three = 10;
two = -9;
v = -7;
zero = -16;
};
braceleft.uc = {
eight = -10;
four = -31;
nine = -14;
one = -10;
six = -14;
zero = -16;
};
bracketleft = {
eight = -9;
five = -14;
four = -39;
germandbls = 5;
one = -6;
seven = -4;
six = -16;
three = 14;
two = -10;
v = -7;
x = -4;
zero = -9;
};
bracketleft.uc = {
V = -9;
eight = -10;
four = -31;
nine = -14;
one = -11;
six = -14;
two = -9;
zero = -16;
};
bullet = {
Tbar.salt_tall = -31;
V = -62;
X = -74;
eight = -6;
five = -20;
four = -25;
nine = -19;
one = -27;
seven = -44;
three = -35;
two = -64;
v = -14;
x = -44;
};
comma = {
V = -70;
X = -5;
eight = -3;
five = -3;
four = 1;
nine = -21;
one = -44;
seven = -19;
six = -3;
space = -30;
three = 6;
two = -4;
v = -39;
zero = -27;
};
copyright = {
Tbar.salt_tall = -27;
};
currency = {
five = -6;
four = -11;
nine = -4;
seven = -24;
three = -6;
two = -31;
};
d = {
icircumflex = 20;
idieresis = 24;
igrave = 31;
imacron = 20;
};
dcaron = {
b = 74;
backslash = 64;
braceright = 10;
h = 74;
hcircumflex = 74;
j = 69;
jacute = 69;
jcircumflex = 69;
k = 74;
kcommaaccent = 74;
l = 74;
lacute = 74;
lcaron = 74;
lcommaaccent = 74;
ldot = 74;
lslash = 74;
t = 47;
tcaron = 47;
tcommaaccent = 47;
};
degree = {
comma = -120;
eight = -34;
five = -36;
four = -121;
seven = -16;
six = -70;
three = -39;
two = -44;
zero = -25;
};
eight = {
asterisk = -20;
backslash = -61;
braceright = -10;
braceright.uc = -10;
bracketright = -9;
bracketright.uc = -10;
bullet = -6;
cent = 4;
comma = -10;
degree = -34;
four.numr = -20;
fraction = 121;
less = -3;
nine = -10;
ordfeminine = -10;
ordmasculine = -4;
paragraph = -10;
parenright = -11;
parenright.uc = -4;
periodcentered = -6;
semicolon = -4;
seven = -6;
slash = -10;
};
eight.numr = {
fraction = -16;
};
equal = {
five = -14;
seven = -15;
three = -6;
two = -39;
};
eth = {
V = -31;
X = -14;
asterisk = -10;
backslash = -51;
braceright = -7;
bracketright = -15;
comma = -21;
parenright = -10;
question = -15;
registered = -15;
semicolon = -15;
slash = -29;
trademark = -10;
v = -14;
x = -21;
};
five = {
asterisk = -11;
backslash = -3;
braceright = -3;
bracketright = 8;
bullet = -6;
comma = -25;
degree = -6;
four.numr = -14;
fraction = 114;
hyphen = -10;
hyphen.uc = -4;
nine = -9;
periodcentered = -6;
semicolon = -20;
slash = -9;
two = -4;
};
five.numr = {
fraction = -21;
};
florin = {
four = -32;
};
four = {
asterisk = -20;
backslash = -57;
braceright = -10;
braceright.uc = -11;
bracketright = -10;
bracketright.uc = -15;
bullet = -17;
degree = -54;
eight = 4;
four.numr = -16;
fraction = 131;
hyphen = -31;
hyphen.uc = -20;
less = -4;
one = -10;
ordfeminine = -20;
ordmasculine = -37;
paragraph = -24;
periodcentered = -17;
question = -26;
semicolon = -15;
seven = -10;
zero.numr = -10;
};
four.numr = {
fraction = -1;
};
fraction = {
eight = 85;
eight.dnom = -40;
five = 82;
five.dnom = -35;
four = -37;
four.dnom = -130;
nine = 89;
nine.dnom = -30;
one = 101;
one.dnom = -36;
seven = 125;
seven.dnom = -6;
six = 36;
six.dnom = -69;
three = 101;
three.dnom = -14;
two = 95;
two.dnom = -24;
zero = 82;
zero.dnom = -60;
};
germandbls = {
asterisk = -10;
backslash = -41;
braceright = -10;
comma = -5;
question = -6;
registered = -20;
slash = 14;
trademark = -32;
};
greater = {
five = -10;
four = -6;
nine = -15;
one = -17;
seven = -31;
six = 4;
three = -14;
two = -36;
};
guillemetleft = {
lslash = -5;
};
guilsinglleft = {
lslash = -5;
};
hyphen = {
V = -61;
X = -64;
five = -51;
four = -44;
nine = -25;
one = -27;
seven = -52;
six = -3;
three = -32;
two = -60;
v = -14;
x = -51;
};
hyphen.uc = {
V = -64;
X = -37;
five = -20;
four = -50;
one = -10;
seven = -25;
six = -10;
three = -15;
two = -56;
};
i = {
icircumflex = 10;
idieresis = 14;
igrave = 10;
imacron = 17;
};
iacute = {
T.salt_tall = -24;
Tbar.salt_tall = -24;
Tcaron.salt_tall = -24;
Tcommaaccent.salt_tall = -24;
V = -20;
b = 17;
h = 20;
hcircumflex = 20;
i = 17;
j = 10;
k = 20;
kcommaaccent = 20;
l = 20;
lacute = 20;
lcaron = 20;
lcommaaccent = 20;
ldot = 20;
lslash = 20;
};
icircumflex = {
b = 20;
h = 49;
hcircumflex = 49;
i = 10;
k = 49;
kcommaaccent = 49;
l = 49;
lacute = 49;
lcaron = 49;
lcommaaccent = 49;
ldot = 49;
lslash = 49;
};
idieresis = {
b = 31;
h = 31;
hcircumflex = 31;
i = 14;
j = 17;
k = 31;
kcommaaccent = 31;
l = 31;
lacute = 31;
lcaron = 31;
lcommaaccent = 31;
ldot = 31;
lslash = 31;
};
imacron = {
b = 27;
h = 35;
hcircumflex = 35;
i = 17;
j = 14;
k = 35;
kcommaaccent = 35;
l = 35;
lacute = 35;
lcaron = 35;
lcommaaccent = 35;
ldot = 35;
lslash = 35;
};
iogonek = {
j = 24;
jacute = 24;
jcircumflex = 24;
};
j = {
imacron = 14;
slash = 21;
};
jcircumflex = {
V = 46;
};
lcaron = {
b = 74;
h = 74;
hcircumflex = 74;
j = 69;
jacute = 69;
jcircumflex = 69;
k = 74;
kcommaaccent = 74;
l = 74;
lacute = 74;
lcaron = 74;
lcommaaccent = 74;
ldot = 74;
lslash = 74;
t = 47;
tcaron = 47;
tcommaaccent = 47;
};
less = {
four = -17;
seven = -6;
three = 5;
two = -6;
};
lslash = {
asterisk = 10;
guillemetright = 11;
guilsinglright = 11;
quotedbl = 1;
quotedblleft = -4;
quotedblright = 1;
quoteleft = -4;
quoteright = 1;
quotesingle = 1;
registered = 15;
};
nine = {
backslash = -34;
braceright = -9;
braceright.uc = -14;
bracketright.uc = -14;
bullet = -15;
comma = -36;
four = -49;
four.numr = -1;
fraction = 54;
hyphen = -11;
less = -9;
nine = 7;
ordfeminine = 6;
parenright = -10;
parenright.uc = -15;
periodcentered = -14;
section = -5;
semicolon = -20;
seven = -4;
six = -10;
slash = -81;
three = -15;
two = -42;
};
nine.dnom = {
four.dnom = -30;
two.dnom = -14;
};
nine.numr = {
four.numr = -14;
fraction = -59;
three.numr = -1;
two.numr = -6;
};
nine.sinf = {
four.sinf = -30;
two.sinf = -14;
};
nine.sups = {
four.sups = -30;
two.sups = -14;
};
numbersign = {
four = -19;
six = -4;
three = -10;
two = -16;
};
one = {
fraction = 126;
};
ordmasculine = {
five = -14;
four = -70;
three = -19;
two = -26;
};
parenleft = {
eight = -11;
four = -35;
one = -6;
six = -16;
three = 10;
v = -7;
zero = -10;
};
parenleft.uc = {
eight = -4;
five = -3;
four = -24;
nine = -8;
one = -6;
seven = 7;
six = -15;
three = 4;
zero = -20;
};
periodcentered = {
Tbar.salt_tall = -24;
V = -66;
X = -67;
eight = -10;
five = -21;
four = -31;
nine = -14;
one = -27;
seven = -35;
three = -23;
two = -69;
v = -15;
x = -34;
};
published = {
Tbar.salt_tall = -27;
};
q = {
V = -10;
backslash = -38;
braceright = 15;
bracketright = 6;
slash = 63;
};
question = {
Hbar = 6;
};
questiondown = {
V = -47;
four = -20;
nine = -26;
one = -42;
seven = -11;
two = -14;
v = -21;
zero = -24;
};
quotedbl = {
eth = -22;
lslash = -18;
};
quotedblbase = {
lslash = -19;
};
quotedblleft = {
eth = -32;
};
quotedblright = {
eth = -22;
lslash = -18;
};
quoteleft = {
eth = -32;
};
quoteright = {
eth = -22;
lslash = -18;
};
quotesinglbase = {
lslash = -19;
};
quotesingle = {
eth = -22;
lslash = -18;
};
racute = {
V = -20;
};
rcaron = {
V = -20;
};
registered = {
V = -20;
X = -45;
v = 22;
x = -10;
};
registered.salt_big = {
Tbar.salt_tall = -27;
};
section = {
nine = -4;
one = -10;
seven = -8;
two = -4;
};
seven = {
asterisk = -14;
bullet = -54;
cent = -26;
comma = -58;
currency = -21;
degree = -5;
eight = -15;
eight.numr = -10;
equal = -29;
euro = -26;
five = -39;
five.numr = -10;
four = -99;
four.numr = -34;
fraction = 31;
greater = -5;
hyphen = -70;
hyphen.uc = -36;
less = -26;
nine = -10;
ordfeminine = -10;
ordmasculine = -10;
paragraph = -20;
periodcentered = -45;
section = -38;
semicolon = -28;
six = -46;
six.numr = -14;
slash = -97;
two = -30;
zero = -16;
zero.numr = -4;
};
seven.dnom = {
eight.dnom = -5;
five.dnom = -18;
four.dnom = -55;
nine.dnom = -4;
one.dnom = -4;
six.dnom = -15;
two.dnom = -11;
zero.dnom = -6;
};
seven.numr = {
eight.numr = -5;
five.numr = -1;
four.numr = -50;
fraction = -56;
nine.numr = -4;
one = -11;
six.numr = -14;
two.numr = -6;
zero.numr = -5;
};
seven.sinf = {
eight.sinf = -5;
five.sinf = -18;
four.sinf = -55;
nine.sinf = -4;
one.sinf = -4;
six.sinf = -15;
two.sinf = -11;
zero.sinf = -6;
};
seven.sups = {
eight.sups = -5;
five.sups = -18;
four.sups = -55;
nine.sups = -4;
one.sups = -4;
six.sups = -15;
two.sups = -11;
zero.sups = -6;
};
six = {
asterisk = -30;
backslash = -49;
braceright = -11;
braceright.uc = -6;
bracketright = -15;
bracketright.uc = -6;
cent = 4;
degree = -76;
five = -6;
four.numr = -14;
fraction = 120;
less = 4;
nine = -16;
nine.numr = -11;
one = -6;
ordfeminine = -14;
ordmasculine = -25;
paragraph = -11;
parenright = -14;
parenright.uc = -11;
question = -26;
semicolon = -8;
seven = -16;
six = 7;
slash = -14;
};
six.dnom = {
nine.dnom = -6;
};
six.numr = {
fraction = -21;
nine.numr = -1;
};
six.sinf = {
nine.sinf = -6;
};
six.sups = {
nine.sups = -6;
};
slash = {
eight = -55;
eth = -29;
five = -81;
four = -167;
germandbls = -18;
nine = -30;
one = -36;
seven = -6;
six = -94;
slash = -144;
three = -44;
two = -55;
v = -34;
x = -59;
zero = -71;
};
sterling = {
four = -10;
};
tcaron = {
b = 7;
h = 7;
hcircumflex = 7;
j = 7;
jacute = 7;
jcircumflex = 7;
k = 7;
kcommaaccent = 7;
l = 7;
lacute = 7;
lcaron = 7;
lcommaaccent = 7;
ldot = 7;
lslash = 7;
};
three = {
asterisk = -16;
backslash = -30;
braceright = -10;
braceright.uc = -9;
bracketright = -9;
comma = -19;
degree = -26;
four.numr = -10;
fraction = 126;
ordfeminine = -4;
ordmasculine = -10;
paragraph = -10;
parenright = -10;
parenright.uc = -10;
question = -11;
semicolon = -5;
seven = -6;
slash = -11;
};
three.numr = {
fraction = -11;
};
trademark = {
X = -10;
v = 17;
x = -7;
};
two = {
asterisk = -18;
backslash = -51;
braceright = -16;
bracketright = -10;
bullet = -29;
comma = -4;
degree = -14;
four = -20;
four.numr = -9;
fraction = 126;
hyphen = -25;
hyphen.uc = -11;
less = -20;
ordfeminine = -5;
ordmasculine = -8;
paragraph = -15;
parenright = -10;
periodcentered = -31;
question = -10;
semicolon = -10;
six.numr = -4;
slash = -4;
zero.numr = -6;
};
uogonek = {
j = 20;
jacute = 20;
jcircumflex = 20;
};
v = {
V = -10;
X = -20;
ampersand = -16;
asterisk = 24;
at = -18;
backslash = -38;
braceright = -7;
bracketright = -10;
bullet = -14;
comma = -39;
hyphen = -14;
parenright = -5;
periodcentered = -15;
registered = 22;
semicolon = -6;
slash = -74;
trademark = 3;
};
x = {
V = -20;
ampersand = -10;
asterisk = 9;
at = -26;
backslash = -53;
bracketright = -4;
bullet = -44;
hyphen = -53;
periodcentered = -34;
question = -6;
registered = -13;
trademark = -4;
};
zero = {
asterisk = -6;
backslash = -71;
braceright = -16;
braceright.uc = -16;
bracketright = -9;
bracketright.uc = -16;
comma = -48;
degree = -25;
florin = -7;
fraction = 106;
parenright = -10;
parenright.uc = -20;
question = -20;
semicolon = -10;
seven = -10;
slash = -33;
two = -19;
};
zero.numr = {
fraction = -56;
};
};
};
manufacturer = "CJ Type";
manufacturerURL = "http://cjtype.com";
unitsPerEm = 1000;
versionMajor = 1;
versionMinor = 0;
}
